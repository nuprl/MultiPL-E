language: scala
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n).toList\n        val factors = factorization.map(f => f.toLong)\n\
    \        val factorsCount = factorization.map(f => f.toLong).distinct\n      \
    \  val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmiv7xops.scala:44:48 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.map(\e\
    [36mf\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \        ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmiv7xops.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.map(\e[36mf\e\
    [0m => f.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmiv7xops.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.map(\e\
    [36mf\e[0m => f.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmiv7xops.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.map(\e\
    [36mf\e[0m => f.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmiv7xops.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = f"
  stdout: ''
  timestamp: 1659797912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(n => factors.count(f => f == n))\n        factorsCount.sortBy(n\
    \ => -n)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi7bh4a1u.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                factors += i\n                primes += i\n                while\
    \ (n % i == 0) {\n                    n /= i\n                    factors += i\n\
    \                    primes += i\n                }\n            }\n         \
    \   i += 1\n        }\n        factors.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyp3auc8p.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpyp3auc8p.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpyp3auc8p.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    n /= i\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                   value /= is not\
    \ a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659797912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgm31tz7y.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpgm31tz7y.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val factorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactors = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationPrimeFactors = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsCount2 =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount2\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsCount3 =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount3\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsCount4 =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount4\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsCount5 =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount5\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsCount6 =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount6\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsCount7 =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount7\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsCount8 =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount8\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsCount9 =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount9\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsCount10 =\
    \ mut\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbqccv0o.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbbqccv0o.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbbqccv0o.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbqccv0o.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbbqccv0o.scala:18:29 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbqccv0o.scala:19:34 ---"
  stdout: ''
  timestamp: 1659797912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorizations(n)\n        val factors = factorization.toList\n        factors.sortWith((a,\
    \ b) => a.compareTo(b) == 1)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1serhr6.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        factorization.map(n => n.toLong).distinct\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9jkzwswx.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorizations(n)\n        factorization.map(f => f.toLong).distinct\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdceyc4e_.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization foreach { f =>\n            factors += f\n        }\n \
    \       factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwhajedw0.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpwhajedw0.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization2 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization3 = mutable.ListBuffer[Long]()\n        val primeFactorization4\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization5 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization6 = mutable.ListBuffer[Long]()\n        val primeFactorization7\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization8 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization9 = mutable.ListBuffer[Long]()\n        val primeFactorization10\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization11 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization12 = mutable.ListBuffer[Long]()\n        val primeFactorization13\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization14 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization15 = mutable.ListBuffer[Long]()\n        val primeFactorization16\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization17 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization18 = mutable.ListBuffer[Long]()\n        val primeFactorization19\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization20 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization21 = mutable.ListBuffer[Long]()\n        val primeFactorization22\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization23 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization24 = mutable.ListBuffer[Long]()\n        val primeFactorization25\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization26 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization27 = mutable.ListBuffer[Long]()\n        val primeFactorization28\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization29 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization30 = mutable.ListBuffer[Long]()\n        val primeFactor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcm2sl32u.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcm2sl32u.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcm2sl32u.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcm2sl32u.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcm2sl32u.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcm2sl32u.scala:18:34 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization2\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659797912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorization = mutable.ListBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizations = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn278kzio.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpn278kzio.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationCount is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn278kzio.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn278kzio.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mprimeFactorizationCount is already defined as \e[33mvalue\e[0m \e[35mprimeFactorizationCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn278kzio.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1659797912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n).toList\n\
    \        factorization.foreach { f =>\n            val factorCount = factors.count(f\
    \ => f == f)\n            if (factorCount > 0) factors += f * (factorCount + 1)\n\
    \            else factors += f\n        }\n        factors.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwp1r2tv2.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpwp1r2tv2.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n).toList\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        if (n > 1)\
    \ {\n            factors += n\n        }\n        factors.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkxvwh50j.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkxvwh50j.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659797912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factors = mutable.ArrayBuffer.empty[Long]\n        val primeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorsCount2 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorsCount3 = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount4\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount5 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorsCount6 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorsCount7 = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount8\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorsCount10 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorsCount11 = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount12\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount13 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorsCount14 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorsCount15 = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount16\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount17 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorsCount18 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorsCount19 = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount20\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount21 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorsCount22 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorsCount23 = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount24\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount25 = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorsCount26 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorsCount27 = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount28\
    \ = mutable.ArrayBuffer.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe5iachlm.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpe5iachlm.scala:14:28 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpe5iachlm.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpe5iachlm.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpe5iachlm.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpe5iachlm.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorsCount\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m          \
    \                      ^^^^^^^\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659797912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorization = mutable.ListBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizations = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationPrimes = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactors = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactors = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsPrimes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorsPrimes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsPrimeFactors = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorsPrimeFactors = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsPrimeFactorsPrimes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorsPrimeFactorsPrimes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsPrimeFactorsPrimeFactors = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorsPrimeFactorsPrimeFactors = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsPrimeFactorsPrimeFactorsPrimes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorsPrimeFactorsPrimeFactorsPrimes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactors = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactors\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactorsPrimes\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactorsPrimes\
    \ = mutable.ListBuffer.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi6ctkvxl.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpi6ctkvxl.scala:14:22 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpi6ctkvxl.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpi6ctkvxl.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi6ctkvxl.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m         \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpi6ctkvxl.scala:18:29 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e["
  stdout: ''
  timestamp: 1659797912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmd8kgb6i.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmd8kgb6i.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmd8kgb6i.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmd8kgb6i.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmd8kgb6i.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNo"
  stdout: ''
  timestamp: 1659797912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n) {\n\
    \            if (n % i == 0) {\n                factors += i\n               \
    \ primes += i\n                primeFactors += i\n                factorization\
    \ += i\n            }\n            i += 1\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4r2o1xpb.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4r2o1xpb.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4r2o1xpb.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4r2o1xpb.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659797909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factors = mutable.ListBuffer[Long]()\n        val primeFactors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkl5qta3m.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpkl5qta3m.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkl5qta3m.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkl5qta3m.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkl5qta3m.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded metho"
  stdout: ''
  timestamp: 1659797912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        for (i <- factorization.indices) {\n            factors += factorization(i)\n\
    \        }\n        factors.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqbd1z8j9.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpqbd1z8j9.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val factorization = factorize(n).reverse\n\
    \        factorization.foreach { f =>\n            factors += f\n        }\n \
    \       factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp78l4w_j8.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgm31tz7y.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpgm31tz7y.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val i = 2\n        while(i <= n/i) {\n\
    \            val f = n/i\n            if(f*i == n) {\n                factors\
    \ += i\n                i += 1\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy6mimf7h.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpy6mimf7h.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                i += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean i.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy6mimf7h.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value += is not a member of Int - did you mean i.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659797913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        if (n > 1)\
    \ {\n            factors += n\n        }\n        factors.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxvf9t07n.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpxvf9t07n.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxvf9t07n.scala:21:14\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean i.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659797913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorization = mutable.ListBuffer.empty[Long]\n        var i = 2\n\
    \        while(i <= n) {\n            val p = primes.find(_ == i)\n          \
    \  if(p == None) {\n                primes += i\n                factors += i\n\
    \                factorization += i\n            }\n            else {\n     \
    \           factors += p.get\n                factorization += p.get\n       \
    \     }\n            i += 1\n        }\n        factors\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3hgtuugg.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp3hgtuugg.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3hgtuugg.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659797909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization foreach { f =>\n            factors += f\n        }\n \
    \       factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwhajedw0.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpwhajedw0.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu0mb7zxs.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu0mb7zxs.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpu0mb7zxs.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpu0mb7zxs.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpu0mb7zxs.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfact"
  stdout: ''
  timestamp: 1659797918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        factors.sortWith((a,\
    \ b) => a.compareTo(b) < 0)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp23717t8o.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw_hrv6qt.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpw_hrv6qt.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val factorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactors = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationPrimeFactors = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrime\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrime\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimePrime\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimePrime\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimePrimePrime\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimePrimePrimePrime\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcjux8r1x.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcjux8r1x.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcjux8r1x.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcjux8r1x.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcjux8r1x.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcjux8r1x.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              "
  stdout: ''
  timestamp: 1659797919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n).toSet\n\
    \        factorization.foreach { f =>\n            factors += f\n        }\n \
    \       factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphpgefzf0.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmphpgefzf0.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n).toSet\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgm31tz7y.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpgm31tz7y.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val i = 2\n        while(i <= n/i) {\n\
    \            val f = n/i\n            if(f*i == n) {\n                factors\
    \ += f\n            }\n            i += 1\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdxjifxit.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpdxjifxit.scala:21:14 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659797919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorizations(n)\n        val factors = factorization.toList\n        factors.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy2i0c40a.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgm31tz7y.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpgm31tz7y.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization foreach { f =>\n            factors += f\n        }\n \
    \       factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_yg5kcw8.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp_yg5kcw8.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorize(n).map(_.toLong)\n        factorization.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$"
  stdout: ''
  timestamp: 1659797920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationSize = n\n        val\
    \ primeFactorizationSize = factorizationSize / 2\n        val primeFactorizationSize\
    \ = factorizationSize / 2\n        val primeFactorizationSize = factorizationSize\
    \ / 2\n        val primeFactorizationSize = factorizationSize / 2\n        val\
    \ primeFactorizationSize = factorizationSize / 2\n        val primeFactorizationSize\
    \ = factorizationSize / 2\n        val primeFactorizationSize = factorizationSize\
    \ / 2\n        val primeFactorizationSize = factorizationSize / 2\n        val\
    \ primeFactorizationSize = factorizationSize / 2\n        val primeFactorizationSize\
    \ = factorizationSize / 2\n        val primeFactorizationSize = factorizationSize\
    \ / 2\n        val primeFactorizationSize = factorizationSize / 2\n        val\
    \ primeFactorizationSize = factorizationSize / 2\n        val primeFactorizationSize\
    \ = factorizationSize / 2\n        val primeFactorizationSize = factorizationSize\
    \ / 2\n        val primeFactorizationSize = factorizationSize / 2\n        val\
    \ primeFactorizationSize = factorizationSize / 2\n        val primeFactorizationSize\
    \ = factorizationSize / 2\n        val primeFactorizationSize = factorizationSize\
    \ / 2\n        val primeFactorizationSize = factorizationSize / 2\n        val\
    \ primeFactorizationSize = factorizationSize / 2\n        val primeFactorizationSize\
    \ = factorizationSize / 2\n        val primeFactorizationSize = factorizationSize\
    \ / 2\n        val primeFactorizationSize = factorizationSize / 2\n        val\
    \ primeFactorizationSize = factorizationSize / 2\n        val primeFactorizationSize\
    \ = factorizationSize / 2\n        val primeFactorizationSize = factorizationSize\
    \ / 2\n        val primeFactorizationSize = factorizationSize / 2\n        val\
    \ primeFactorizationSize = factorizationSize / 2\n        val primeFactorizationSize\
    \ = factorizationSize / 2\n        val primeFactorizationSize = factorizationSize\
    \ / 2\n        val primeFactorizationSize = factorizationSize / 2\n        val\
    \ primeFactorizationSize = factorizationSize / 2\n        val primeFactorizationSize\
    \ = factorizationSize / 2\n        val primeFactorizationSize = factorizationSize\
    \ / 2\n        val primeFactorizationSize = factorizationSize / 2\n        val\
    \ primeFactorizationSize = factorizationSize / 2\n        val primeFactorizationSize\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0tjbfy_g.scala:56:36 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationSize\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m\
    \   |\e[0m                                    expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0tjbfy_g.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimeFactorizationSize\e[0m = factorizationSize / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mprimeFactorizationSize is already defined as \e[33mvalue\e[0m \e\
    [35mprimeFactorizationSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0tjbfy_g.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationSize\e\
    [0m = factorizationSize / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationSize is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0tjbfy_g.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationSize\e\
    [0m = factorizationSize / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationSize is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0tjbfy_g.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e"
  stdout: ''
  timestamp: 1659797920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorizations(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(f => factors.count(_ == f))\n        factors.map(f\
    \ => factorsCount(f).map(_ * f))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphmzjrfcf.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val factorization = factorization(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0hk040tp.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp0hk040tp.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorizations(n)\n        factorization.toList.sortBy(_._1).reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu8m1edyy.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorizations(n)\n        factorization.toList.sortBy(_._1).reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu8m1edyy.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        var i = 2\n \
    \       while (i <= n) {\n            if (n % i == 0) {\n                factors\
    \ += i\n                factorization += i\n                primes += i\n    \
    \        }\n            i += 1\n        }\n        factors.reverse.foldLeft(factorization.reverse.foldLeft(primes.reverse.foldLeft(List[Long]()))\
    \ { (acc, x) => acc + x })\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8xhbt_f5.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp8xhbt_f5.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8xhbt_f5.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659797919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(f => factors.count(f == _))\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2vviate3.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.map(\e\
    [36mf\e[0m => f.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2vviate3.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.map(\e\
    [36mf\e[0m => f.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2vviate3.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.map(\e\
    [36mf\e[0m => f.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2vviate3.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.map(\e\
    [36mf\e[0m => f.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2vviate3.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        "
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpngqre0al.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpngqre0al.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        factorize(n,factors)\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvxcuvalp.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpvxcuvalp.scala:15:18 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        factorize(n,factors)\n\e[31m\e[31m   |\e[0m \
    \                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (Long,\
    \ Nothing)\n\e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorizations(n)\n        val factorizationList = factorization.toList\n\
    \        factorizationList.sortBy(_._1).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmputxud3kk.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        factorize(n, factorization)\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg17bq132.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg17bq132.scala:15:18 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        factorize(n, factorization)\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (Long, Nothing)\n\e[31m   |\e[0m                  Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(f => factors.count(f == _))\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.sortBy(f\
    \ => f)\n        factorsCount.reverse.map(f => f.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb7r_r46i.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.map(\e\
    [36mf\e[0m => f.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb7r_r46i.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.sortBy(\e\
    [36mf\e[0m => f)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpb7r_r46i.scala:14:28 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw_hrv6qt.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpw_hrv6qt.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val factorization = factorization(n).toList\n\
    \        factorization.foreach(x => factors += x)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2j413jbi.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp2j413jbi.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n).toList\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        factors.sortWith((x,\
    \ y) => x < y)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxjtoznsu.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n) \n\
    \        factorization.foreach(factor => factors += factor)\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvh2xp72b.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpvh2xp72b.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m \
    \                           Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorize(n).toList\n\
    \        factorization.foreach { f =>\n            factors += f\n        }\n \
    \       factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4mtmppsx.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(f => factors.count(f == _))\n        factorsCount.map(f\
    \ => factors.count(f == _).map(f => f -> f)).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpa9wjqgyd.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        factorization.map(n => n.toLong).distinct\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9jkzwswx.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCounts\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxs = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountMin = mutable.ListBuffer[Long]()\n        val factorizationCountMins\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMaxMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxs = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountMinMin = mutable.ListBuffer[Long]()\n        val factorizationCountMinMins\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMaxMinMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMinMaxs = mutable.ListBuffer[Long]()\n     \
    \   val factorizationCountMinMinMin = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountMinMinMins = mutable.ListBuffer[Long]()\n        val factorizationCountMaxMinMinMax\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMaxMinMinMaxs =\
    \ mutable.ListBuffer[Long]()\n        val factorizationCountMinMinMinMin = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMinMinMins = mutable.ListBuffer[Long]()\n  \
    \      val factorizationCountMaxMinMinMinMax = mutable.ListBuffer[Long]()\n  \
    \      val factorizationCountMaxMinMinMinMaxs = mutable.ListBuffer[Long]()\n \
    \       val factorizationCountMinMinMinMinMin = mutable.ListBuffer[Long]()\n \
    \       val factorizationCountMinMinMinMins = mutable.ListBuffer[Long]()\n   \
    \     val factorizationCountMaxMinMinMinMax = mutable.ListBuffer[Long]()\n   \
    \     val factorizationCountMaxMinMinMinMaxs = mutable.ListBuffer[Long]()\n  \
    \      val factorizationCountMinMinMinMinMin = mutable.ListBuffer[Long]()\n  \
    \      val factorizationCountMinMinMinMins = mutable.ListBuffer[Long]()\n    \
    \    val factorizationCountMaxMinMinMinMax = mutable.ListBuffer[Long\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmo43pk_u.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmo43pk_u.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountMinMinMinMins\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMinMinMinMins is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationCountMinMinMinMins\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmo43pk_u.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountMaxMinMinMinMax\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMaxMinMinMinMax is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationCountMaxMinMinMinMax\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmo43pk_u.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountMaxMinMinMinMaxs\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMaxMinMinMinMaxs is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationCountMaxMinMinMinMaxs\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmo43pk_u.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountMinMinMinMinMin\e[0m = mutable.ListBuf"
  stdout: ''
  timestamp: 1659797926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n).toList\n        factorization.sortWith(_.compareTo(n) < 0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjtca_1vf.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n).toList\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val factorization = factorization(n)\n\
    \        for (factor <- factorization) {\n            factors += factor\n    \
    \    }\n        factors.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwyggxxk_.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpwyggxxk_.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorization = mutable.ListBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizations = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationPrimes = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactors = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactors = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsPrime = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorsPrime = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsPrimePrime = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorsPrimePrime = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsPrimePrimePrime = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsPrimePrimePrimePrime = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsPrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsPrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkwx3r2jz.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkwx3r2jz.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkwx3r2jz.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkwx3r2jz.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpkwx3r2jz.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkwx3r2jz.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  "
  stdout: ''
  timestamp: 1659797927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorizations(n)\n        factorization.toList.sortBy(_._1).reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu8m1edyy.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n) {\n\
    \            if (n % i == 0) {\n                factors += i\n               \
    \ n /= i\n            }\n            i += 1\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf64rzzdm.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpf64rzzdm.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659797929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw_hrv6qt.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpw_hrv6qt.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n).toList\n\
    \        factorization.foreach { f =>\n            factors += f\n        }\n \
    \       factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwa5qotb2.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpwa5qotb2.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n).toList\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n) {\n\
    \            if (n % i == 0) {\n                factors += i\n               \
    \ factorization += i\n                primes += i\n                primeFactorization\
    \ += i\n            }\n            i += 1\n        }\n        factors.reverse.foreach(x\
    \ => factorization += x)\n        primes.reverse.foreach(x => primeFactorization\
    \ += x)\n        factorization.reverse.foreach(x => primeFactorization += x)\n\
    \        primeFactorization.reverse.foreach(x => factorization += x)\n       \
    \ factorization.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi6dh9f5j.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpi6dh9f5j.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpi6dh9f5j.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi6dh9f5j.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorCount = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n     \
    \   val isPrimeFactorizationPrimeCount = mutable.ListBuffer[Boolean]()\n     \
    \   val isPrimeFactorizationPrimeFactor = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimeFactorizationPrimeFactorCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp3h522rcg.scala:40:11 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3h522rcg.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp3h522rcg.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3h522rcg.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3h522rcg.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3h522rcg.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e"
  stdout: ''
  timestamp: 1659797929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpngqre0al.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpngqre0al.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizations_count = mutable.ListBuffer[Long]()\n        val factorizations_count_max\
    \ = mutable.ListBuffer[Long]()\n        val factorizations_count_min = mutable.ListBuffer[Long]()\n\
    \        val factorizations_count_max = mutable.ListBuffer[Long]()\n        val\
    \ factorizations_count_min = mutable.ListBuffer[Long]()\n        val factorizations_count_max\
    \ = mutable.ListBuffer[Long]()\n        val factorizations_count_min = mutable.ListBuffer[Long]()\n\
    \        val factorizations_count_max = mutable.ListBuffer[Long]()\n        val\
    \ factorizations_count_min = mutable.ListBuffer[Long]()\n        val factorizations_count_max\
    \ = mutable.ListBuffer[Long]()\n        val factorizations_count_min = mutable.ListBuffer[Long]()\n\
    \        val factorizations_count_max = mutable.ListBuffer[Long]()\n        val\
    \ factorizations_count_min = mutable.ListBuffer[Long]()\n        val factorizations_count_max\
    \ = mutable.ListBuffer[Long]()\n        val factorizations_count_min = mutable.ListBuffer[Long]()\n\
    \        val factorizations_count_max = mutable.ListBuffer[Long]()\n        val\
    \ factorizations_count_min = mutable.ListBuffer[Long]()\n        val factorizations_count_max\
    \ = mutable.ListBuffer[Long]()\n        val factorizations_count_min = mutable.ListBuffer[Long]()\n\
    \        val factorizations_count_max = mutable.ListBuffer[Long]()\n        val\
    \ factorizations_count_min = mutable.ListBuffer[Long]()\n        val factorizations_count_max\
    \ = mutable.ListBuffer[Long]()\n        val factorizations_count_min = mutable.ListBuffer[Long]()\n\
    \        val factorizations_count_max = mutable.ListBuffer[Long]()\n        val\
    \ factorizations_count_min = mutable.ListBuffer[Long]()\n        val factorizations_count_max\
    \ = mutable.ListBuffer[Long]()\n        val factorizations_count_min = mutable.ListBuffer[Long]()\n\
    \        val factorizations_count_max = mutable.ListBuffer[Long]()\n        val\
    \ factorizations_count_min = mutable.ListBuffer[Long]()\n        val factorizations_count_max\
    \ = mutable.ListBuffer[Long]()\n        val factorizations_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo76oyw0z.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo76oyw0z.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizations_count_max\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizations_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo76oyw0z.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorizations_count_min\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizations_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo76oyw0z.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorizations_count_max\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizations_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo76oyw0z.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfactorizations_count_min\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31"
  stdout: ''
  timestamp: 1659797929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        for (factor <- factorization) {\n            factors += factor\n    \
    \    }\n        factors.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_w51jhaq.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp_w51jhaq.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount3 = mutable.ListBuffer.empty[Long]\n        val factorizationCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount7 = mutable.ListBuffer.empty[Long]\n        val factorizationCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount11 = mutable.ListBuffer.empty[Long]\n        val factorizationCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount14 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount15 = mutable.ListBuffer.empty[Long]\n        val factorizationCount16\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount17 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount18 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount19 = mutable.ListBuffer.empty[Long]\n        val factorizationCount20\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount21 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount22 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount23 = mutable.ListBuffer.empty[Long]\n        val factorizationCount24\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount25 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount26 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount27 = mutable.ListBuffer.empty[Long]\n        val factorizationCount28\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount29 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount30 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2rpizlvo.scala:47:34 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount30\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2rpizlvo.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2rpizlvo.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2rpizlvo.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2rpizlvo.scala:17:28 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2rpizlvo.scala:18:33 ------"
  stdout: ''
  timestamp: 1659797929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val factorization = factorization(n)\n\
    \        factorization.foreach { f =>\n            factors += f\n        }\n \
    \       factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3eds9w_b.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp3eds9w_b.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorize(n)\n   \
    \     factorization.foreach(f => factors += f)\n        factors.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5dhgt60x.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var factor = 1\n        while (n > 1)\
    \ {\n            if (n % factor == 0) {\n                factors += factor\n \
    \               n /= factor\n            } else {\n                factor += 1\n\
    \            }\n        }\n        factors ++ factors.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9dqja2od.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp9dqja2od.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659797929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgm31tz7y.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpgm31tz7y.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(f => factors.count(f == _))\n        factorsCount.sortBy(_._1).reverse.map(f\
    \ => f._2).map(n => n.toLong).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph7r4_k82.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        factorize(n, factorization)\n    \
    \    factorization.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9j8l7xgo.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9j8l7xgo.scala:15:18 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        factorize(n, factorization)\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (Long, Nothing)\n\e[31m   |\e[0m                  Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorize(n).map(_.toLong)\n        factorization.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$"
  stdout: ''
  timestamp: 1659797920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorizations(n)\n        factorization.toList.sortBy(_._1).reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu8m1edyy.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        var i = 2l\n        while (i <= n) {\n\
    \            if (n % i == 0) {\n                factors.append(i)\n          \
    \      factors.append(n / i)\n                factors.append(i)\n            \
    \    factors.append(n / i)\n                factors.append(i)\n              \
    \  factors.append(n / i)\n                factors.append(i)\n                factors.append(n\
    \ / i)\n                factors.append(i)\n                factors.append(n /\
    \ i)\n                factors.append(i)\n                factors.append(n / i)\n\
    \                factors.append(i)\n                factors.append(n / i)\n  \
    \              factors.append(i)\n                factors.append(n / i)\n    \
    \            factors.append(i)\n                factors.append(n / i)\n      \
    \          factors.append(i)\n                factors.append(n / i)\n        \
    \        factors.append(i)\n                factors.append(n / i)\n          \
    \      factors.append(i)\n                factors.append(n / i)\n            \
    \    factors.append(i)\n                factors.append(n / i)\n              \
    \  factors.append(i)\n                factors.append(n / i)\n                factors.append(i)\n\
    \                factors.append(n / i)\n                factors.append(i)\n  \
    \              factors.append(n / i)\n                factors.append(i)\n    \
    \            factors.append(n / i)\n                factors.append(i)\n      \
    \          factors.append(n / i)\n                factors.append(i)\n        \
    \        factors.append(n / i)\n                factors.append(i)\n          \
    \      factors.append(n / i)\n                factors.append(i)\n            \
    \    factors.append(n / i)\n                factors.append(i)\n              \
    \  factors.append(n / i)\n                factors.append(i)\n                factors.append(n\
    \ / i)\n                factors.append(i)\n                factors.append(n /\
    \ i)\n                factors.append(i)\n                factors.append(n / i)\n\
    \                factors.append(i)\n                factors.append(n / i)\n  \
    \              factors.append(i)\n                factors.append(n / i)\n    \
    \            factors.append(i)\n                factors.append(n / i)\n      \
    \          factors.append(i)\n                factors.append(n / i)\n        \
    \        factors.append(i)\n                factors.append(n / i)\n          \
    \      factors.append(i)\n                factors.append(n / i)\n            \
    \    factors.append(i)\n                factors.append(n / i)\n              \
    \  factors.append(i)\n                factors.append(n / i)\n                factors.append(i)\n\
    \                factors.append(n / i)\n                factors.append(i)\n  \
    \              factors.append(n / i)\n                factors.append(i)\n    \
    \            factors.append(n / i)\n                factors.append(i)\n      \
    \          factors.append(n / i)\n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdja1yesq.scala:109:0 ---------------------------\e\
    [0m\e[0m\n\e[31m109 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdja1yesq.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdja1yesq.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdja1yesq.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdja1yesq.scala:17:28 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdja1yesq.scala:19:8 ---------------------\e\
    [0m\e[0m\n\e[31m 19 |\e[0m        \e[33mwhile\e[0m (i <= n) {\n\e[31m\e[31m  \
    \  |\e[0m        ^\e[0m\n\e[31m    |\e[0m        Found:    Unit\n\e[31m    |\e\
    [0m        Required: List[Long]\n\e[31m 20 |\e[0m            \e[33mif\e[0m (n\
    \ % i == \e"
  stdout: ''
  timestamp: 1659797932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factors = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n    \
    \    val primeFactorizationFactors = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorPrimes = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationFactorPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationFactorFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorFactorPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorPrimeFactorFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorFactorPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorPrimeFactorFactorPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorFactorPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorPrimeFactorFactorPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorPrimeFactorPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorPrimeFactorPrimeFactorPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorPrimeFactorPrimeFactorPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorPrimeFactorPrimeFactorPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPri\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0je9fhpy.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0je9fhpy.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimeFactorFactorPrimeFactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimeFactorFactorPrimeFactors is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationPrimeFactorFactorPrimeFactors\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0je9fhpy.scala:41:12 ---------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationFactorPrimeFactorPrimeFactorPrimeFactors\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationFactorPrimeFactorPrimeFactorPrimeFactors is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorizationFactorPrimeFactorPrimeFactorPrimeFactors\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp0je9fhpy.scala:14:28 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0je9fhpy.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  "
  stdout: ''
  timestamp: 1659797932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCounts\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfs = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOf\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOf = mutable.ListBuffer[Long]()\n       \
    \ val factorizationCountOfsOfsOfs = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOfsOfsOf\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n \
    \       val factorizationCountOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n \
    \       val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps4xh4bk3.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountOfsOfsOfsOfsOfsOf\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOf is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps4xh4bk3.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOfsOfsOfs\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOfs is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOfs\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps4xh4bk3.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOfsOfsOfsOf\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOfsOf is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOfsOf\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmps4xh4bk3.scala:38:12 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountOfsOfsOfsOfsOfsOfsOfs\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfact"
  stdout: ''
  timestamp: 1659797932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization2 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization3 = mutable.ListBuffer[Long]()\n        val primeFactorization4\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization5 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization6 = mutable.ListBuffer[Long]()\n        val primeFactorization7\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization8 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization9 = mutable.ListBuffer[Long]()\n        val primeFactorization10\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization11 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization12 = mutable.ListBuffer[Long]()\n        val primeFactorization13\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization14 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization15 = mutable.ListBuffer[Long]()\n        val primeFactorization16\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization17 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization18 = mutable.ListBuffer[Long]()\n        val primeFactorization19\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization20 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization21 = mutable.ListBuffer[Long]()\n        val primeFactorization22\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization23 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization24 = mutable.ListBuffer[Long]()\n        val primeFactorization25\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization26 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization27 = mutable.ListBuffer[Long]()\n        val primeFactorization28\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization29 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization30 = mutable.ListBuffer[Long]()\n        val primeFactor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcm2sl32u.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcm2sl32u.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcm2sl32u.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcm2sl32u.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcm2sl32u.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcm2sl32u.scala:18:34 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization2\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659797912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        factors.sortBy(-_)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqe9l9l_q.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        for (i <- factorization.indices) {\n            factors += factorization(i)\n\
    \        }\n        factors.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqbd1z8j9.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpqbd1z8j9.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        if (n > 1)\
    \ {\n            factors += n\n        }\n        factors.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkxvwh50j.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkxvwh50j.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659797912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        if (n != 1)\
    \ {\n            factors += n\n        }\n        factors.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko78d810.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpko78d810.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659797933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        if (n > 1)\
    \ {\n            factors += n\n        }\n        factors.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkxvwh50j.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkxvwh50j.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659797912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n).toList\n        factorization.sortWith(_ < _)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpurs1kr48.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n).toList\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization foreach { f =>\n            factors += f\n        }\n \
    \       factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_yg5kcw8.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp_yg5kcw8.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        var i = 2\n        while(i <= n/i)\
    \ {\n            if(n%i == 0) {\n                factors += i\n              \
    \  n /= i\n            }\n            i += 1\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmezwblz.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpfmezwblz.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659797933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        factorize(n, factors)\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqd_u8nnh.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpqd_u8nnh.scala:15:18 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        factorize(n, factors)\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:  \
    \  (Long, Nothing)\n\e[31m   |\e[0m                  Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorizeHelper(n)\n        factorization.toList.sortBy(_._1).reverse\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjuch_z3a.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizeHelper(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: factorizeHelper\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorize(n)\n   \
    \     for (factor <- factorization) {\n            factors += factor\n       \
    \ }\n        factors.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0mh8pm77.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpngqre0al.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpngqre0al.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk4fk6cfy.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpk4fk6cfy.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpk4fk6cfy.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorization is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorization\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpk4fk6cfy.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpk4fk6cfy.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorization is already defined as \e[33mvalue\e[0m\
    \ \e"
  stdout: ''
  timestamp: 1659797936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization2 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization3 = mutable.ListBuffer[Long]()\n        val primeFactorization4\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization5 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization6 = mutable.ListBuffer[Long]()\n        val primeFactorization7\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization8 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization9 = mutable.ListBuffer[Long]()\n        val primeFactorization10\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization11 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization12 = mutable.ListBuffer[Long]()\n        val primeFactorization13\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization14 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization15 = mutable.ListBuffer[Long]()\n        val primeFactorization16\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization17 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization18 = mutable.ListBuffer[Long]()\n        val primeFactorization19\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization20 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization21 = mutable.ListBuffer[Long]()\n        val primeFactorization22\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization23 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization24 = mutable.ListBuffer[Long]()\n        val primeFactorization25\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization26 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization27 = mutable.ListBuffer[Long]()\n        val primeFactorization28\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization29 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization30 = mutable.ListBuffer[Long]()\n        val primeFactor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcm2sl32u.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcm2sl32u.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcm2sl32u.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcm2sl32u.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcm2sl32u.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcm2sl32u.scala:18:34 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization2\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659797912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        factorization.foldLeft(List[Long]()){\n        \
    \    case (acc, factor) =>\n                val factorCount = acc.count(_ == factor)\n\
    \                val factorCount = factorCount + 1\n                val factorCount\
    \ = factorCount.toLong\n                val factorCount = factorCount.toLong\n\
    \                val factorCount = factorCount.toLong\n                val factorCount\
    \ = factorCount.toLong\n                val factorCount = factorCount.toLong\n\
    \                val factorCount = factorCount.toLong\n                val factorCount\
    \ = factorCount.toLong\n                val factorCount = factorCount.toLong\n\
    \                val factorCount = factorCount.toLong\n                val factorCount\
    \ = factorCount.toLong\n                val factorCount = factorCount.toLong\n\
    \                val factorCount = factorCount.toLong\n                val factorCount\
    \ = factorCount.toLong\n                val factorCount = factorCount.toLong\n\
    \                val factorCount = factorCount.toLong\n                val factorCount\
    \ = factorCount.toLong\n                val factorCount = factorCount.toLong\n\
    \                val factorCount = factorCount.toLong\n                val factorCount\
    \ = factorCount.toLong\n                val factorCount = factorCount.toLong\n\
    \                val factorCount = factorCount.toLong\n                val factorCount\
    \ = factorCount.toLong\n                val factorCount = factorCount.toLong\n\
    \                val factorCount = factorCount.toLong\n                val factorCount\
    \ = factorCount.toLong\n                val factorCount = factorCount.toLong\n\
    \                val factorCount = factorCount.toLong\n                val factorCount\
    \ = factorCount.toLong\n                val factorCount = factorCount.toLong\n\
    \                val factorCount = factorCount.toLong\n                val factorCount\
    \ = factorCount.toLong\n                val factorCount = factorCount.toLong\n\
    \                val factorCount = factorCount.toLong\n                val factorCount\
    \ = factorCount.toLong\n                val factorCount = factorCount.toLong\n\
    \                val factorCount = factorCount.toLong\n                val factorCount\
    \ = factorCount.toLong\n                val factorCount = factorCount.toLong\n\
    \                val factorCount = factorCount.toLong\n                val factorCount\
    \ = factorCount.toLong\n                val factorCount = factorCount.toLong\n\
    \                val factorCount = factorCount.toLong\n                val factorCount\
    \ = factorCount.toLong\n                val factorCount = factorCount.toLong\n\
    \                val factorCount = factorCount.toLong\n                val factorCount\
    \ = factorCount.toLong\n                val factorCount = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoeomuv9j.scala:65:33 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m                \e[33mval\e[0m \e[36mfactorCount\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e\
    [0m                                 expression expected but \e[31munindent\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoeomuv9j.scala:79:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m79 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpoeomuv9j.scala:14:28 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoeomuv9j.scala:78:1\
    \ ---------------------\e[0m\e[0m\n\e[31m78 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpoeomuv9j.scala:67:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m67 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659797937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        for (i <- factorization.indices) {\n            val f = factorization(i)\n\
    \            factors += f\n        }\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpur9jrvxh.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpur9jrvxh.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount2\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount3 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount4 = mutable.ListBuffer[Long]()\n        val factorizationCount5\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount6 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount7 = mutable.ListBuffer[Long]()\n        val factorizationCount8\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount9 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount10 = mutable.ListBuffer[Long]()\n        val factorizationCount11\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount12 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount13 = mutable.ListBuffer[Long]()\n        val factorizationCount14\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount15 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount16 = mutable.ListBuffer[Long]()\n        val factorizationCount17\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount18 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount19 = mutable.ListBuffer[Long]()\n        val factorizationCount20\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount21 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount22 = mutable.ListBuffer[Long]()\n        val factorizationCount23\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount24 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount25 = mutable.ListBuffer[Long]()\n        val factorizationCount26\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount27 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount28 = mutable.ListBuffer[Long]()\n        val factorizationCount29\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppj49lqx3.scala:47:34 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount29\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppj49lqx3.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppj49lqx3.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppj49lqx3.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmppj49lqx3.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppj49lqx3.scala:18:38 ----"
  stdout: ''
  timestamp: 1659797937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeRev =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeRev2 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeRev3 = mutable.ListBuffer[Boolean]()\n        val isPrimeRev4\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeRev5 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeRev6 = mutable.ListBuffer[Boolean]()\n        val isPrimeRev7\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeRev8 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeRev9 = mutable.ListBuffer[Boolean]()\n        val isPrimeRev10\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeRev11 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeRev12 = mutable.ListBuffer[Boolean]()\n        val isPrimeRev13\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeRev14 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeRev15 = mutable.ListBuffer[Boolean]()\n        val isPrimeRev16\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeRev17 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeRev18 = mutable.ListBuffer[Boolean]()\n        val isPrimeRev19\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeRev20 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeRev21 = mutable.ListBuffer[Boolean]()\n        val isPrimeRev22\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeRev23 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeRev24 = mutable.ListBuffer[Boolean]()\n        val isPrimeRev25\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeRev26 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeRev27 = mutable.ListBuffer[Boolean]()\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp83v3sz71.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp83v3sz71.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp83v3sz71.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp83v3sz71.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misPrimeRev\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp83v3sz71.scala:18:26 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36misPrimeRev2\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp83v3sz71.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0"
  stdout: ''
  timestamp: 1659797937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        factors.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph15x66kp.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factorization += i\n                primes += i\n       \
    \     }\n            i += 1\n        }\n        factorization.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfkeredzo.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfkeredzo.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationList = mutable.ListBuffer[Long]()\n\
    \        val factorizationList = mutable.ListBuffer[Long]()\n        val factorizationList2\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList3 = mutable.ListBuffer[Long]()\n\
    \        val factorizationList4 = mutable.ListBuffer[Long]()\n        val factorizationList5\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList6 = mutable.ListBuffer[Long]()\n\
    \        val factorizationList7 = mutable.ListBuffer[Long]()\n        val factorizationList8\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList9 = mutable.ListBuffer[Long]()\n\
    \        val factorizationList10 = mutable.ListBuffer[Long]()\n        val factorizationList11\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList12 = mutable.ListBuffer[Long]()\n\
    \        val factorizationList13 = mutable.ListBuffer[Long]()\n        val factorizationList14\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList15 = mutable.ListBuffer[Long]()\n\
    \        val factorizationList16 = mutable.ListBuffer[Long]()\n        val factorizationList17\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList18 = mutable.ListBuffer[Long]()\n\
    \        val factorizationList19 = mutable.ListBuffer[Long]()\n        val factorizationList20\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList21 = mutable.ListBuffer[Long]()\n\
    \        val factorizationList22 = mutable.ListBuffer[Long]()\n        val factorizationList23\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList24 = mutable.ListBuffer[Long]()\n\
    \        val factorizationList25 = mutable.ListBuffer[Long]()\n        val factorizationList26\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList27 = mutable.ListBuffer[Long]()\n\
    \        val factorizationList28 = mutable.ListBuffer[Long]()\n        val factorizationList29\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpszwmj17i.scala:47:33 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList29\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e\
    [0m                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpszwmj17i.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpszwmj17i.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpszwmj17i.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpszwmj17i.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpszwmj17i.scala:18:37 -------"
  stdout: ''
  timestamp: 1659797939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorize(n).toList\n        val factorizationWithCount = factorization.map(f\
    \ => (f, factorization.count(f == n)))\n        factorizationWithCount.sortBy(_._2).reverse.map(f\
    \ => f._1)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9whcs_4q.scala:15:84\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizationWithCount\e\
    [0m = factorization.map(\e[36mf\e[0m => (f, factorization.count(f == n)))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                          ^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                         Found:    Boolean\n\e[31m   |\e[0m                 \
    \                              Required: \e[1m\e[32mLong\e[0m\e[1m\e[32m \e[0m\e\
    [1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n).toList\n        factorization.map(n => n.toLong).distinct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqk22kzx1.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n).toList\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCounts = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCounts = mutable.ListBuffer[Long]()\n        val primeFactorizationCounts\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCounts = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCounts = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCounts = mutable.ListBuffer[Long]()\n        val primeFactorizationCounts\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCounts = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCounts = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCounts = mutable.ListBuffer[Long]()\n        val primeFactorizationCounts\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCounts = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCounts = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCounts = mutable.ListBuffer[Long]()\n        val primeFactorizationCounts\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCounts = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCounts = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCounts = mutable.ListBuffer[Long]()\n        val primeFactorizationCounts\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCounts = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCounts = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCounts = mutable.ListBuffer[Long]()\n        val primeFactorizationCounts\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCounts = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCounts = mutable.ListBuffer[Long]()\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5kullfr9.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCounts\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationCounts is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5kullfr9.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCounts\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationCounts is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5kullfr9.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCounts\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationCounts is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5kullfr9.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCounts\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationCounts is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the sam"
  stdout: ''
  timestamp: 1659797940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        factors.sortWith(\
    \ (a,b) => a.toLong > b.toLong)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt10d35hb.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization.foreach { f =>\n            factors += f\n        }\n \
    \       factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcnxh2f2x.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpcnxh2f2x.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationList = mutable.ListBuffer[Long]()\n\
    \        val factorizationList = mutable.ListBuffer[Long]()\n        val factorizationList2\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList3 = mutable.ListBuffer[Long]()\n\
    \        val factorizationList4 = mutable.ListBuffer[Long]()\n        val factorizationList5\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList6 = mutable.ListBuffer[Long]()\n\
    \        val factorizationList7 = mutable.ListBuffer[Long]()\n        val factorizationList8\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList9 = mutable.ListBuffer[Long]()\n\
    \        val factorizationList10 = mutable.ListBuffer[Long]()\n        val factorizationList11\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList12 = mutable.ListBuffer[Long]()\n\
    \        val factorizationList13 = mutable.ListBuffer[Long]()\n        val factorizationList14\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList15 = mutable.ListBuffer[Long]()\n\
    \        val factorizationList16 = mutable.ListBuffer[Long]()\n        val factorizationList17\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList18 = mutable.ListBuffer[Long]()\n\
    \        val factorizationList19 = mutable.ListBuffer[Long]()\n        val factorizationList20\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList21 = mutable.ListBuffer[Long]()\n\
    \        val factorizationList22 = mutable.ListBuffer[Long]()\n        val factorizationList23\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList24 = mutable.ListBuffer[Long]()\n\
    \        val factorizationList25 = mutable.ListBuffer[Long]()\n        val factorizationList26\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList27 = mutable.ListBuffer[Long]()\n\
    \        val factorizationList28 = mutable.ListBuffer[Long]()\n        val factorizationList29\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpszwmj17i.scala:47:33 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList29\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e\
    [0m                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpszwmj17i.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpszwmj17i.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpszwmj17i.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpszwmj17i.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpszwmj17i.scala:18:37 -------"
  stdout: ''
  timestamp: 1659797939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(f => factors.count(f == _))\n        factorsCount.map(f\
    \ => factors.count(f == _))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4y0l6mbz.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization.foreach(x => factors += x)\n        factors.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptozfy71i.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmptozfy71i.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorize(n).reverse\n\
    \        factorization foreach { f =>\n            factors += f\n        }\n \
    \       factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4j11lzl_.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpztk86rlb.scala:48:32 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpztk86rlb.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimeFactorizations\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m \e[35mprimeFactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpztk86rlb.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorization is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorization\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpztk86rlb.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpztk86rlb.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization"
  stdout: ''
  timestamp: 1659797943
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(f => factors.count(f == _))\n        factorsCount.map(f\
    \ => factors.count(f == _))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4y0l6mbz.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(x => factors.count(y => y == x))\n        val factorsCount\
    \ = factorsCount.map(x => x.toLong)\n        val factorsCount = factorsCount.map(x\
    \ => x * x)\n        val factorsCount = factorsCount.map(x => x * x)\n       \
    \ val factorsCount = factorsCount.map(x => x * x)\n        val factorsCount =\
    \ factorsCount.map(x => x * x)\n        val factorsCount = factorsCount.map(x\
    \ => x * x)\n        val factorsCount = factorsCount.map(x => x * x)\n       \
    \ val factorsCount = factorsCount.map(x => x * x)\n        val factorsCount =\
    \ factorsCount.map(x => x * x)\n        val factorsCount = factorsCount.map(x\
    \ => x * x)\n        val factorsCount = factorsCount.map(x => x * x)\n       \
    \ val factorsCount = factorsCount.map(x => x * x)\n        val factorsCount =\
    \ factorsCount.map(x => x * x)\n        val factorsCount = factorsCount.map(x\
    \ => x * x)\n        val factorsCount = factorsCount.map(x => x * x)\n       \
    \ val factorsCount = factorsCount.map(x => x * x)\n        val factorsCount =\
    \ factorsCount.map(x => x * x)\n        val factorsCount = factorsCount.map(x\
    \ => x * x)\n        val factorsCount = factorsCount.map(x => x * x)\n       \
    \ val factorsCount = factorsCount.map(x => x * x)\n        val factorsCount =\
    \ factorsCount.map(x => x * x)\n        val factorsCount = factorsCount.map(x\
    \ => x * x)\n        val factorsCount = factorsCount.map(x => x * x)\n       \
    \ val factorsCount = factorsCount.map(x => x * x)\n        val factorsCount =\
    \ factorsCount.map(x => x * x)\n        val factorsCount = factorsCount.map(x\
    \ => x * x)\n        val factorsCount = factorsCount.map(x => x * x)\n       \
    \ val factorsCount = factorsCount.map(x => x * x)\n        val factorsCount =\
    \ factorsCount.map(x => x * x)\n        val factorsCount = factorsCount.map(x\
    \ => x * x)\n        val factorsCount = factorsCount.map(x => x * x)\n       \
    \ val factorsCount = factorsCount.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph020s78q.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmph020s78q.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.map(\e[36mx\e\
    [0m => x.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph020s78q.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.map(\e\
    [36mx\e[0m => x * x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph020s78q.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.map(\e\
    [36mx\e[0m => x * x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph020s78q.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.map(\e\
    [36mx\e[0m => x * x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods"
  stdout: ''
  timestamp: 1659797943
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw_hrv6qt.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpw_hrv6qt.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(f => factors.count(f => f == f))\n        val factorsSum\
    \ = factorsCount.sum\n        factors.map(f => factorsSum / f).reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvfxp09s4.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n).reverse\n\
    \        factorization foreach { factor =>\n            factors += factor\n  \
    \      }\n        factors.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzs56url1.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpzs56url1.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n).reverse\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmd8kgb6i.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmd8kgb6i.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmd8kgb6i.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmd8kgb6i.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmd8kgb6i.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNo"
  stdout: ''
  timestamp: 1659797912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpngqre0al.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpngqre0al.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorize(n).toList\n        val factorizationList = factorization.toList\n\
    \        val factorizationListWithCount = factorizationList.map(x => (x, factorization.count(_\
    \ == x))).toList\n        factorizationListWithCount.sortBy(_._2).reverse.map(x\
    \ => x._1)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$.factorize(tmpi0m5650u.scala:14)\n\
    \tat Problem$.factorize(tmpi0m5650u.scala:14)\n\tat Problem$"
  stdout: ''
  timestamp: 1659797946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n);\n        factorization.foldLeft(List[Long]())((acc, elem)\
    \ => acc :+ elem);\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5zpdy7jb.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n);\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorizations(n)\n        factorization.toList.sortBy(_._1).reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu8m1edyy.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.List\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl7ehf70n.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpl7ehf70n.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationCount is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl7ehf70n.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpl7ehf70n.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationCount is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Nami"
  stdout: ''
  timestamp: 1659797943
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(f => factors.count(f == _))\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2vviate3.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.map(\e\
    [36mf\e[0m => f.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2vviate3.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.map(\e\
    [36mf\e[0m => f.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2vviate3.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.map(\e\
    [36mf\e[0m => f.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2vviate3.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.map(\e\
    [36mf\e[0m => f.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2vviate3.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        "
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorize(n).toList\n        factorization.map(f => n.toLong * f.toLong).filter(f\
    \ => n % f == 0).map(f => f.toLong).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$.factorize(tmpga27kmk0.scala:14)\n\
    \tat Problem$.factorize(tmpga27kmk0.scala:14)\n\tat Problem$"
  stdout: ''
  timestamp: 1659797946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrime = mutable.ListBuffer[Boolean]()\n \
    \       val isPrimeFactorsPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp68_kyals.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp68_kyals.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ is already defined as \e[33mvalue\e[0m \e[35misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp68_kyals.scala:14:22 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp68_kyals.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp68_kyals.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-ex"
  stdout: ''
  timestamp: 1659797945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val i = 2\n        while(i <= n/i) {\n\
    \            if(n%i == 0) {\n                factors += i\n                n /=\
    \ i\n            }\n            i += 1\n        }\n        factors.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp18wu9hi_.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp18wu9hi_.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp18wu9hi_.scala:21:14\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean i.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659797946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        factors.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph15x66kp.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val isPrime = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization2 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorization3 = mutable.ListBuffer.empty[Boolean]\n     \
    \   val isPrimeFactorization4 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorization5 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization6\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization7 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorization8 = mutable.ListBuffer.empty[Boolean]\n     \
    \   val isPrimeFactorization9 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorization10 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization11\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization12 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorization13 = mutable.ListBuffer.empty[Boolean]\n    \
    \    val isPrimeFactorization14 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorization15 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization16\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization17 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorization18 = mutable.ListBuffer.empty[Boolean]\n    \
    \    val isPrimeFactorization19 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorization20 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization21\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization22 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorization23 = mutable.ListBuffer.empty[Boolean]\n    \
    \    val isPrimeFactorization24 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorization25 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization26\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization27 = mutable.ListBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjtu9a9jx.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpjtu9a9jx.scala:14:22 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpjtu9a9jx.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjtu9a9jx.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer.empty[\e\
    [35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpjtu9a9jx.scala:17:35 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorization\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpjtu9a9jx.scala:18:36 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorization2\e[0m =\
    \ mutable.ListBuffer.empty[\e[35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                          "
  stdout: ''
  timestamp: 1659797947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationSize = n\n        val\
    \ factorizationCount = 1\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationSize = factorizationSize / 2\n        val primeFactorizationCount\
    \ = 1\n        val factorizationPrimes = mutable.ListBuffer[Long]()\n        val\
    \ factorizationPrimeSize = factorizationSize / 2\n        val factorizationPrimeCount\
    \ = 1\n        val factorizationPrimeFactors = mutable.ListBuffer[Long]()\n  \
    \      val factorizationPrimeFactorSize = factorizationSize / 2\n        val factorizationPrimeFactorCount\
    \ = 1\n        val factorizationPrimeFactorization = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationSize = factorizationSize / 2\n   \
    \     val factorizationPrimeFactorizationCount = 1\n        val factorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeSize\
    \ = factorizationSize / 2\n        val factorizationPrimeFactorizationPrimeCount\
    \ = 1\n        val factorizationPrimeFactorizationPrimeFactors = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorSize = factorizationSize\
    \ / 2\n        val factorizationPrimeFactorizationPrimeFactorCount = 1\n     \
    \   val factorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationSize = factorizationSize\
    \ / 2\n        val factorizationPrimeFactorizationPrimeFactorizationCount = 1\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeSize = factorizationSize\
    \ / 2\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeCount\
    \ = 1\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorSize\
    \ = factorizationSize / 2\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorCount\
    \ = 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkllya0lv.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpkllya0lv.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpkllya0lv.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkllya0lv.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkllya0lv.scala:20:33 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkllya0lv.scala:23:34 ---------"
  stdout: ''
  timestamp: 1659797947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        factorization.map(n => n.toLong).distinct\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9jkzwswx.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizations = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCounts = mutable.ListBuffer.empty[Long]\n        val factorizationCountOf\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfs = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountOfsOf = mutable.ListBuffer.empty[Long]\n      \
    \  val factorizationCountOfsOfs = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCountOfsOfsOf = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOf\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOf\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOfsOf\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOfsOf\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOfsOfsOf\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOfsOfsOf\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Long]\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpubb_75a6.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountOfsOfsOfsOfsOfsOf\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOf is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpubb_75a6.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOfsOfsOfs\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOfs is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOfs\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpubb_75a6.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOfsOfsOfsOf\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOfsOf is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOfsOf\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpubb_75a6.scala:38:12 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountOfsOfsOfsOfsOfsOfsOfs\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        factors.sortWith((a,\
    \ b) => a < b)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_8_t2yff.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorization = mutable.ListBuffer[Long]()\n\
    \        val factorizationFactorizationFactorization = mutable.ListBuffer[Long]()\n\
    \        val factorizationFactorizationFactorizationFactorization = mutable.ListBuffer[Long]()\n\
    \        val factorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorizationFactorizationFactorizationFactorization\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2km4txl8.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2km4txl8.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  factorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp2km4txl8.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mfactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  factorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp2km4txl8.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mfactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFacto"
  stdout: ''
  timestamp: 1659797947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val i = 2\n        while (i <= Math.sqrt(n))\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        if (n != 1)\
    \ {\n            factors += n\n        }\n        factors.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvxb5m99c.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpvxb5m99c.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvxb5m99c.scala:21:14\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean i.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659797948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgm31tz7y.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpgm31tz7y.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        factors.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph15x66kp.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        for (factor <- factorization) {\n            factors += factor\n    \
    \    }\n        factors.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_w51jhaq.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp_w51jhaq.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val factorization = factorization(n)\n\
    \        factorization.foreach { f =>\n            factors += f\n        }\n \
    \       factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3eds9w_b.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp3eds9w_b.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeCount = mutable.ListBuffer[Long]()\n     \
    \   val primeFactorizationPrimeFactors = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationPrimeFactorCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationPrimeFactorsCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationPrimeFactorsCountSum = mutable.ListBuffer[Long]()\n      \
    \  val primeFactorizationPrimeFactorsCountSumCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsCountSumCountSum = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsCountSumCountSumCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsCountSumCountSumCountSum = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsCountSumCountSumCountSumCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsCountSumCountSumCountSumCountSum =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCountSumCountSumCountSumCountSumCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCountSumCountSumCountSumCountSumCountSum\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCountSumCountSumCountSumCountSumCountSumCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCountSumCountSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8ben45s6.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ben45s6.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimeFactorizationPrimeFactorsCountSumCountSumCountSumCountSumCountSumCountSum\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationPrimeFactorsCountSumCountSumCountSumCountSumCountSumCountSum\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  primeFactorizationPrimeFactorsCountSumCountSumCountSumCountSumCountSumCountSum\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8ben45s6.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp8ben45s6.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8ben45s6.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m  "
  stdout: ''
  timestamp: 1659797948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n);\n        val factors = factorization.map(x => x.toLong);\n\
    \        factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpz19ccrwz.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n);\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        var factorizationCounter = 0\n       \
    \ var primeFactorizationCounter = 0\n        while(n > 1) {\n            factorizationCounter\
    \ += 1\n            val factorizationFactor = factorizationCounter % n\n     \
    \       factors.append(factorizationFactor)\n            factorizationCounter\
    \ /= n\n            val primeFactorizationFactor = factorizationCounter % n\n\
    \            primeFactorizationCounter += 1\n            primes.append(primeFactorizationFactor)\n\
    \            factorizationCounter /= n\n        }\n        factorizationCounter\
    \ += 1\n        primeFactorizationCounter += 1\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \        primes.append(primeFactorizationCounter)\n        factors.append(factorizationCounter)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw54zxlv9.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpw54zxlv9.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpw54zxlv9.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpw54zxlv9.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpw54zxlv9.scala:24:33 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m            factorizationCounter /= n\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value /= is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw54zxlv9.scala:28:33\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            factorizationCounter\
    \ /= n\n\e[31m\e[31m   |\e[0m            ^^^^"
  stdout: ''
  timestamp: 1659797948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        factors.sortBy(_\
    \ * -1)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptsvruyft.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val factorization = factorization(n)\
    \ \n        factorization foreach { f => factors += f }\n        factors\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkugochu2.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpkugochu2.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m \
    \                           Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        for (factor <- factorization) {\n            factors += factor\n    \
    \    }\n        factors.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_w51jhaq.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp_w51jhaq.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val factorizations = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimes = mutable.ListBuffer.empty[Long]\n     \
    \   val factorizationPrimeFactors = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationPrimeFactors = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationPrimeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationPrimeFactorizations = mutable.ListBuffer.empty[Long]\n   \
    \     val factorizationPrimeFactorizationPrimes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactors = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactors = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizations = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizations = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactors = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer.empty[Long]\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6nxpc4i5.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp6nxpc4i5.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6nxpc4i5.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6nxpc4i5.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6nxpc4i5.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m         \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6nxpc4i5.s"
  stdout: ''
  timestamp: 1659797950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmd8kgb6i.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmd8kgb6i.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmd8kgb6i.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmd8kgb6i.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmd8kgb6i.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNo"
  stdout: ''
  timestamp: 1659797912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorizations(n)\n        val factors = factorization.toList\n        factors.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy2i0c40a.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimeFactors =\
    \ mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimeFactorsOfPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimeFactorsOfPrimesOfPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimeFactorsOfPrimesOfPrimesOfPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyw_c170l.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyw_c170l.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyw_c170l.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyw_c170l.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpyw_c170l.scala:17:28 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpyw_c170l.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                        "
  stdout: ''
  timestamp: 1659797950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n).map(_.toLong)\n        val factorizationList = factorization.toList\n\
    \        factorizationList.sortWith(_.compareTo(_) == -1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplwut1a6k.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n).map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorizations(n)\n        val factors = factorization.toList\n        factors.sortWith(_.compareTo(n)\
    \ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps0ef8d0b.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount2\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount3 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount4 = mutable.ListBuffer[Long]()\n        val factorizationCount5\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount6 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount7 = mutable.ListBuffer[Long]()\n        val factorizationCount8\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount9 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount10 = mutable.ListBuffer[Long]()\n        val factorizationCount11\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount12 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount13 = mutable.ListBuffer[Long]()\n        val factorizationCount14\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount15 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount16 = mutable.ListBuffer[Long]()\n        val factorizationCount17\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount18 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount19 = mutable.ListBuffer[Long]()\n        val factorizationCount20\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount21 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount22 = mutable.ListBuffer[Long]()\n        val factorizationCount23\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount24 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount25 = mutable.ListBuffer[Long]()\n        val factorizationCount26\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount27 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount28 = mutable.ListBuffer[Long]()\n        val factorizationCount29\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppj49lqx3.scala:47:34 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount29\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppj49lqx3.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppj49lqx3.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppj49lqx3.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmppj49lqx3.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppj49lqx3.scala:18:38 ----"
  stdout: ''
  timestamp: 1659797937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorizations(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(f => factors.count(f => f == f))\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.foldLeft(0)(_\
    \ + _)\n        factorsCount.toList.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvh3itdq5.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.map(\e\
    [36mf\e[0m => f.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvh3itdq5.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.foldLeft(\e\
    [31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpvh3itdq5.scala:14:28 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659797947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorize(n).map(_.toLong)\n        factorization.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$.factorize(tmpjl86f65q.scala:14)\n\
    \tat Problem$.factorize(tmpjl86f65q.scala:14)\n\tat Problem$"
  stdout: ''
  timestamp: 1659797920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactors = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrime = mutable.ListBuffer.empty[Boolean]\n       \
    \ val isPrimeFactorsPrimePrime = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorsPrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorsPrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n   \
    \     val isPrimeFactorsPrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsz6fxo0g.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsz6fxo0g.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime\e[0m = mutable.ListBuffer.empty[\e\
    [35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime is\
    \ already defined as \e[33mvalue\e[0m \e[35misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsz6fxo0g.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m = mutable.ListBuffer.empty[\e[35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ is already defined as \e[33mvalue\e[0m \e[35misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsz6fxo0g.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m = mutable.ListBuffer.empty[\e[35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ is already defined as \e[33mvalue\e[0m \e[35misPrimeFactorsPrimePrimePrimePrimePri"
  stdout: ''
  timestamp: 1659797953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization foreach { f =>\n            factors += f\n        }\n \
    \       factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_yg5kcw8.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp_yg5kcw8.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizations = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCounts = mutable.ListBuffer.empty[Long]\n        val factorizationCountOf\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfs = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountOfsOf = mutable.ListBuffer.empty[Long]\n      \
    \  val factorizationCountOfsOfs = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCountOfsOfsOf = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOf\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOf\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOfsOf\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOfsOf\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOfsOfsOf\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOfsOfsOf\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountOfsOfsOfsOfsOfsOfsOfs\
    \ = mutable.ListBuffer.empty[Long]\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpubb_75a6.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountOfsOfsOfsOfsOfsOf\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOf is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpubb_75a6.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOfsOfsOfs\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOfs is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOfs\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpubb_75a6.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOfsOfsOfsOf\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOfsOf is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOfsOf\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpubb_75a6.scala:38:12 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountOfsOfsOfsOfsOfsOfsOfs\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization foreach { x =>\n            factors += x\n        }\n \
    \       factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfb2hqb69.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpfb2hqb69.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(n => factors.count(f => f == n)).sum\n        factors.map(n\
    \ => n * factorsCount)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcz1w77c2.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(f => factors.count(f == _))\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        factorsCount.sortBy(-_).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpii5qtmfz.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorsCount\e[0m = factorsCount.map(\e\
    [36mf\e[0m => f.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorsCount is already defined as \e[33mvalue\e[0m \e[35mfactorsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpii5qtmfz.scala:14:28 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorization = mutable.ListBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount2 = mutable.ListBuffer.empty[Long]\n        val factorizationCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount6 = mutable.ListBuffer.empty[Long]\n        val factorizationCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount10 = mutable.ListBuffer.empty[Long]\n        val factorizationCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount14 = mutable.ListBuffer.empty[Long]\n        val factorizationCount15\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount16 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount17 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount18 = mutable.ListBuffer.empty[Long]\n        val factorizationCount19\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount20 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount21 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount22 = mutable.ListBuffer.empty[Long]\n        val factorizationCount23\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount24 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount25 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount26 = mutable.ListBuffer.empty[Long]\n        val factorizationCount27\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount28 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount29 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2nw73r7u.scala:47:34 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount29\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2nw73r7u.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2nw73r7u.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2nw73r7u.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp2nw73r7u.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2nw73r7u."
  stdout: ''
  timestamp: 1659797955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization2 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization3 = mutable.ListBuffer[Long]()\n        val primeFactorization4\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization5 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization6 = mutable.ListBuffer[Long]()\n        val primeFactorization7\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization8 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization9 = mutable.ListBuffer[Long]()\n        val primeFactorization10\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization11 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization12 = mutable.ListBuffer[Long]()\n        val primeFactorization13\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization14 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization15 = mutable.ListBuffer[Long]()\n        val primeFactorization16\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization17 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization18 = mutable.ListBuffer[Long]()\n        val primeFactorization19\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization20 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization21 = mutable.ListBuffer[Long]()\n        val primeFactorization22\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization23 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization24 = mutable.ListBuffer[Long]()\n        val primeFactorization25\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization26 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization27 = mutable.ListBuffer[Long]()\n        val primeFactorization28\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization29 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization30 = mutable.ListBuffer[Long]()\n        val primeFactor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcm2sl32u.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcm2sl32u.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcm2sl32u.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcm2sl32u.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcm2sl32u.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcm2sl32u.scala:18:34 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization2\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659797912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        factors.sortBy(x\
    \ => factors.count(y => y == x))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4f48i_a6.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpngqre0al.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpngqre0al.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        factorization.foldLeft(List[Long]())((acc, x) =>\
    \ acc :+ x)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsqsc7vie.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        factors.sortWith(\
    \ (a,b) => a.compareTo(b) == -1 )\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpckoyle0w.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorizations(n)\n        factorization.toList.sortBy(_._1).reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu8m1edyy.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factorizationList = factorization.toList\n \
    \       val factorizationListWithCount = factorizationList.map(x => (x, factorization.count(_\
    \ == x)))\n        factorizationListWithCount.sortBy(_._2).reverse.map(x => x._1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmv0q29j2.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        for (i <- factorization.indices) {\n            val f = factorization(i)\n\
    \            factors += f\n        }\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpur9jrvxh.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpur9jrvxh.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n).toSet\n\
    \        factorization.foreach(f => factors += f)\n        factors.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpep8uqlix.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpep8uqlix.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n).toSet\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.List\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8iryrbbw.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8iryrbbw.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8iryrbbw.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8iryrbbw.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8iryrbbw.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659797956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrime = mutable.ListBuffer[Boolean]()\n \
    \       val isPrimeFactorsPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp68_kyals.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp68_kyals.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ is already defined as \e[33mvalue\e[0m \e[35misPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp68_kyals.scala:14:22 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp68_kyals.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp68_kyals.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-ex"
  stdout: ''
  timestamp: 1659797945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        factors.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph15x66kp.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        factors.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph15x66kp.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        factors.sortWith((a,\
    \ b) => a.compareTo(b) < 0)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp23717t8o.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n).toList\n        factorization.sortWith(_ < _)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpurs1kr48.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n).toList\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factorizationList = factorization.toList\n \
    \       factorizationList.sortBy(_._1).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplx7xukvx.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationSize = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimes = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationPrimeFactors = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsSize\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsSizeSize\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsSizeSizeSize\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsSizeSizeSizeSize\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrime\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1a2pcyk_.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1a2pcyk_.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimeFactorsSizeSizeSizeSizeSizeSize\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimeFactorsSizeSizeSizeSizeSizeSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorizationPrimeFactorsSizeSizeSizeSizeSizeSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1a2pcyk_.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimeFactorsSizeSizeSizeSizeSizeSizeSize\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimeFactorsSizeSizeSizeSizeSizeSizeSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorizationPrimeFactorsSizeSizeSizeSizeSizeSizeSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1a2pcyk_.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSize\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mfactorizationPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overlo"
  stdout: ''
  timestamp: 1659797956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorizations(n)\n        factorization.toList.sortBy(_._1).reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu8m1edyy.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        factors.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph15x66kp.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(x => factors.count(y => y % x == 0))\n        factorsCount.map(x\
    \ => n * x).filter(x => x != n).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn0bzvjch.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        var i = 2l\n        while(i <= n) {\n\
    \            val p = i\n            while(p <= n) {\n                if(n % p\
    \ == 0) primes += p\n                p += i\n            }\n            primeFactors\
    \ += primes.toList\n            factors += primes.toList\n            factorization\
    \ += primes.toList\n            i += i\n        }\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0y8tt5kp.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp0y8tt5kp.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0y8tt5kp.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0y8tt5kp.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp0y8tt5kp.scala:23:18 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                p += i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member of\
    \ Long - did you mean p.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1659797956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                factors += i\n                primes += i\n            }\n  \
    \          i += 1\n        }\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaj68uwuu.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpaj68uwuu.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factors = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl_ygu0mf.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl_ygu0mf.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl_ygu0mf.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl_ygu0mf.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl_ygu0mf.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659797957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        for (i <- factorization.indices) {\n            val f = factorization(i)\n\
    \            factors += f\n        }\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpur9jrvxh.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpur9jrvxh.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        var i = 2\n \
    \       while (i <= n) {\n            if (n % i == 0) {\n                factors\
    \ += i\n                factorization.append(i)\n                primes += i\n\
    \                while (n % i == 0) {\n                    n /= i\n          \
    \          factors += i\n                    factorization.append(i)\n       \
    \             primes += i\n                }\n            }\n            i +=\
    \ 1\n        }\n        factorization.reverse\n        primes.reverse\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7y4a8hgh.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7y4a8hgh.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7y4a8hgh.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7y4a8hgh.scala:24:22 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    n /= i\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                   value /= is not\
    \ a member of Long - did you mean n.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659797957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorize(n).toList\n        factorization.sortBy(_._1).reverse\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7za95cmc.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        factorization.sortBy(_._1).reverse\n\e[31m\e\
    [31m   |\e[0m                             ^^^^\e[0m\n\e[31m   |\e[0m         \
    \                    value _1 is not a member of Long\n\e[31m\e[31m-- Error: /tmp/tmp7za95cmc.scala:15:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \ factorization.sortBy(_._1).reverse\n\e[31m\e[31m   |\e[0m                  \
    \                ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mLong\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mBigInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m\
    \ \e[35mSeqOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659797957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorizations(n)\n        factorization.toList.sortBy(_._1).reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu8m1edyy.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpngqre0al.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpngqre0al.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsCount\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount2 = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsCount3 = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount4\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount5 = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsCount6 = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount7\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount8 = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsCount9 = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount10\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount11 = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsCount12 = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount13\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount14 = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsCount15 = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount16\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount17 = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsCount18 = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount19\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount20 = mutable.ListBuffer[Int]()\n\
    \        val isPrimeFactorsCount21 = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount22\
    \ = mutable.ListBuffer[Int]()\n        val isPrimeFactorsCount23 = mutable.ListBuffer[Int]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqxtqi746.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqxtqi746.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqxtqi746.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqxtqi746.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqxtqi746.scala:18:28 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactor\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqxtqi746.scala:19:29 ------------------------\e\
    [0m\e[0m\n\e[3"
  stdout: ''
  timestamp: 1659797957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorization = mutable.ListBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization2 = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorization3 = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization4 = mutable.ListBuffer.empty[Long]\n        val primeFactorization5\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization6 = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorization7 = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization8 = mutable.ListBuffer.empty[Long]\n        val primeFactorization9\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization10 = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorization11 = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization12 = mutable.ListBuffer.empty[Long]\n        val primeFactorization13\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization14 = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorization15 = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization16 = mutable.ListBuffer.empty[Long]\n        val primeFactorization17\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization18 = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorization19 = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization20 = mutable.ListBuffer.empty[Long]\n        val primeFactorization21\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization22 = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorization23 = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization24 = mutable.ListBuffer.empty[Long]\n        val primeFactorization25\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization26 = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorization27 = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization28 = mutable.ListBuffer.empty[Long]\n        val primeFactorization29\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization30 = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactor\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphgmyeteg.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphgmyeteg.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphgmyeteg.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphgmyeteg.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphgmyeteg.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphgmyeteg.scala:18:34 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization2\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m         \
    \                         ^^^^^^^\e["
  stdout: ''
  timestamp: 1659797958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw_hrv6qt.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpw_hrv6qt.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorize(n).toList\n        val factorization2 = factorize(n).toList\n  \
    \      val factorization3 = factorize(n).toList\n        val factorization4 =\
    \ factorize(n).toList\n        val factorization5 = factorize(n).toList\n    \
    \    val factorization6 = factorize(n).toList\n        val factorization7 = factorize(n).toList\n\
    \        val factorization8 = factorize(n).toList\n        val factorization9\
    \ = factorize(n).toList\n        val factorization10 = factorize(n).toList\n \
    \       val factorization11 = factorize(n).toList\n        val factorization12\
    \ = factorize(n).toList\n        val factorization13 = factorize(n).toList\n \
    \       val factorization14 = factorize(n).toList\n        val factorization15\
    \ = factorize(n).toList\n        val factorization16 = factorize(n).toList\n \
    \       val factorization17 = factorize(n).toList\n        val factorization18\
    \ = factorize(n).toList\n        val factorization19 = factorize(n).toList\n \
    \       val factorization20 = factorize(n).toList\n        val factorization21\
    \ = factorize(n).toList\n        val factorization22 = factorize(n).toList\n \
    \       val factorization23 = factorize(n).toList\n        val factorization24\
    \ = factorize(n).toList\n        val factorization25 = factorize(n).toList\n \
    \       val factorization26 = factorize(n).toList\n        val factorization27\
    \ = factorize(n).toList\n        val factorization28 = factorize(n).toList\n \
    \       val factorization29 = factorize(n).toList\n        val factorization30\
    \ = factorize(n).toList\n        val factorization31 = factorize(n).toList\n \
    \       val factorization32 = factorize(n).toList\n        val factorization33\
    \ = factorize(n).toList\n        val factorization34 = factorize(n).toList\n \
    \       val factorization35 = factorize(n).toList\n        val factorization36\
    \ = factorize(n).toList\n        val factorization37 = factorize(n).toList\n \
    \       val factorization38 = factorize(n).toList\n        val factorization39\
    \ = factorize(n).toList\n        val factorization40 = factorize(n).toList\n \
    \       val factorization41 = factorize(n).toList\n        val factorization42\
    \ = factorize(n).toList\n        val factorization43 = factorize(n).toList\n \
    \       val factorization44 = factorize\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt1wj9mx9.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprboo6qpb.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprboo6qpb.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorization is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorization\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprboo6qpb.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprboo6qpb.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprboo6qpb.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote t"
  stdout: ''
  timestamp: 1659797958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val primeFactorsCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount2 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount3 = mutable.ListBuffer[Long]()\n        val primeFactorsCount4\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount5 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount6 = mutable.ListBuffer[Long]()\n        val primeFactorsCount7\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount8 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount9 = mutable.ListBuffer[Long]()\n        val primeFactorsCount10\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount11 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount12 = mutable.ListBuffer[Long]()\n        val primeFactorsCount13\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount14 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount15 = mutable.ListBuffer[Long]()\n        val primeFactorsCount16\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount17 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount18 = mutable.ListBuffer[Long]()\n        val primeFactorsCount19\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount20 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount21 = mutable.ListBuffer[Long]()\n        val primeFactorsCount22\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount23 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount24 = mutable.ListBuffer[Long]()\n        val primeFactorsCount25\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount26 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount27 = mutable.ListBuffer[Long]()\n        val primeFactorsCount28\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount29 = mut\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp74hkaln4.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp74hkaln4.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp74hkaln4.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp74hkaln4.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp74hkaln4.scala:18:33\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactorsCount2\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp74hkaln4.scala:19:"
  stdout: ''
  timestamp: 1659797958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization foreach { factor =>\n            factors += factor\n  \
    \      }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph4ygxwcu.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmph4ygxwcu.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList = mutable.ListBuffer[Long]()\n        val\
    \ factorizationList2 = mutable.ListBuffer[Long]()\n        val primeFactorizationList2\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList3 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList3 = mutable.ListBuffer[Long]()\n        val\
    \ factorizationList4 = mutable.ListBuffer[Long]()\n        val primeFactorizationList4\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList5 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList5 = mutable.ListBuffer[Long]()\n        val\
    \ factorizationList6 = mutable.ListBuffer[Long]()\n        val primeFactorizationList6\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList7 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList7 = mutable.ListBuffer[Long]()\n        val\
    \ factorizationList8 = mutable.ListBuffer[Long]()\n        val primeFactorizationList8\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList9 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList9 = mutable.ListBuffer[Long]()\n        val\
    \ factorizationList10 = mutable.ListBuffer[Long]()\n        val primeFactorizationList10\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList11 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList11 = mutable.ListBuffer[Long]()\n        val\
    \ factorizationList12 = mutable.ListBuffer[Long]()\n        val primeFactorizationList12\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList13 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationList13 = mutable.ListBuffer[Long]()\n        val\
    \ factorizationList14 = mutable.ListBuffer[Long]()\n        val primeFactorizationList14\
    \ = mutable.ListBuffer[Long]()\n        val factorizationList15 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkn699axg.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkn699axg.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkn699axg.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkn699axg.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpkn699axg.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkn699axg.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m        "
  stdout: ''
  timestamp: 1659797959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorizations(n)\n        val factors = factorization.toList\n        factors.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmes_3vld.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Not found: factorizations\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factorization\
    \ = factorization(n)\n        factorization.map(n => n.toLong).distinct\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9jkzwswx.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizationFactors = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCounts = mutable.ListBuffer[Long]()\n\
    \        val factorizationFactorsCountOf = mutable.ListBuffer[Long]()\n      \
    \  val factorizationFactorsCountOfs = mutable.ListBuffer[Long]()\n        val\
    \ factorizationFactorsCountOfsOf = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountOfsOfs\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountOfsOfsOf\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountOfsOfsOfs\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountOfsOfsOfsOf\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountOfsOfsOfsOfs\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountOfsOfsOfsOfsOf\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountOfsOfsOfsOfsOfs\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountOfsOfsOfsOfsOf\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountOfsOfsOfsOfsOfs\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountOfsOfsOfsOfsOf\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountOfsOfsOfsOfsOfs\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountOfsOfsOfsOfsOf\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountOfsOfsOfsOfsOfs\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountOfsOfsOfsOfsOf\
    \ = mutable.List\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxw7wvlm5.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mfactorizationFactorsCountOfsOfsOfsOfsOf\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationFactorsCountOfsOfsOfsOfsOf is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationFactorsCountOfsOfsOfsOfsOf\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxw7wvlm5.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationFactorsCountOfsOfsOfsOfsOfs\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationFactorsCountOfsOfsOfsOfsOfs is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationFactorsCountOfsOfsOfsOfsOfs\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxw7wvlm5.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationFactorsCountOfsOfsOfsOfsOf\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationFactorsCountOfsOfsOfsOfsOf is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationFactorsCountOfsOfsOfsOfsOf\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxw7wvlm5.scala:35:12 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationFactorsCountOfsOfsOfsOfsOfs\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797959
