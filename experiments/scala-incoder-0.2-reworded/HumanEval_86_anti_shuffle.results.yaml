language: scala
name: HumanEval_86_anti_shuffle
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt).mkString\n  \
    \          newChars\n        })\n        newWords.mkString(\" \")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmp3qn2hwaa.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmp3qn2hwaa.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmp3qn2hwaa.scala:23)\n\
    \tat Problem$.main(tmp3qn2hwaa.scala:27)\n\tat Problem.main(tmp3qn2hwaa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt)\n           \
    \ val newWord = sortedChars.mkString(\"\")\n            newWord\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpwqibkkcf.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpwqibkkcf.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpwqibkkcf.scala:24)\n\
    \tat Problem$.main(tmpwqibkkcf.scala:28)\n\tat Problem.main(tmpwqibkkcf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val newWord = word.map(c => c.toInt).sortWith(_ < _).mkString(\"\"\
    )\n            val newWordLength = newWord.length\n            val newWordWithSpaces\
    \ = newWord.take(newWordLength - 1).mkString(\"\") + \" \" + newWord.drop(newWordLength\
    \ - 1)\n            newWordWithSpaces\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaybwsvr5.scala:27)\n\tat Problem.main(tmpaybwsvr5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toString.toInt)\n  \
    \          val newWord = newChars.mkString(\"\")\n            newWord\n      \
    \  })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpkk8lytee.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpkk8lytee.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpkk8lytee.scala:24)\n\
    \tat Problem$.main(tmpkk8lytee.scala:28)\n\tat Problem.main(tmpkk8lytee.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val newWords =\
    \ words.toList.sortWith(_ < _)\n        val newString = newWords.mkString(\" \"\
    )\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8uo_xsl.scala:23)\n\tat Problem.main(tmpf8uo_xsl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val newWords =\
    \ words.map(word => {\n            val chars = word.split(\"\").map(_.toUpperCase)\n\
    \            val charsSorted = chars.sortWith((a, b) => a.compareTo(b))\n    \
    \        charsSorted.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5k41ze8i.scala:20:66\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e\
    [36mcharsSorted\e[0m = chars.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a.compareTo(b))\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Int\n\e[31m   |\e[0m                                                    \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toString.toInt)\n  \
    \          val newWord = newChars.mkString(\"\")\n            newWord\n      \
    \  })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpkk8lytee.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpkk8lytee.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpkk8lytee.scala:24)\n\
    \tat Problem$.main(tmpkk8lytee.scala:28)\n\tat Problem.main(tmpkk8lytee.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toChar).mkString\n \
    \           newChars\n        })\n        newWords.mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8awlmwc8.scala:21:50 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mnewChars\e[0m = sortedChars.map(\e\
    [36mc\e[0m => c.toChar).mkString\n\e[31m\e[31m   |\e[0m                      \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \              value toChar is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmp8awlmwc8.scala:21:57\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \     \e[33mval\e[0m \e[36mnewChars\e[0m = sortedChars.map(\e[36mc\e[0m => c.toChar).mkString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmp8awlmwc8.scala:23:10\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ })\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e[31m   |\e[0m          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m          where:    B is a\
    \ type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toChar).mkString\n \
    \           val newWord = newChars.toUpperCase\n            newWord\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa6ztc06b.scala:21:50 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mnewChars\e[0m = sortedChars.map(\e\
    [36mc\e[0m => c.toChar).mkString\n\e[31m\e[31m   |\e[0m                      \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \              value toChar is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmpa6ztc06b.scala:21:57\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \     \e[33mval\e[0m \e[36mnewChars\e[0m = sortedChars.map(\e[36mc\e[0m => c.toChar).mkString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmpa6ztc06b.scala:24:10\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ })\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e[31m   |\e[0m          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m          where:    B is a\
    \ type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt).mkString\n  \
    \          newChars\n        })\n        newWords.mkString(\" \")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmp3qn2hwaa.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmp3qn2hwaa.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmp3qn2hwaa.scala:23)\n\
    \tat Problem$.main(tmp3qn2hwaa.scala:27)\n\tat Problem.main(tmp3qn2hwaa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val result = new\
    \ StringBuilder\n        val wordMap = new mutable.HashMap[String, String]()\n\
    \        words.foreach(word => {\n            val key = word.mkString.toUpperCase\n\
    \            val value = wordMap.get(key)\n            if (value == null) {\n\
    \                wordMap += key -> word\n            } else {\n              \
    \  val newValue = value.mkString.toUpperCase\n                wordMap += key ->\
    \ newValue\n            }\n        })\n        val sortedWords = wordMap.keys.toList.sortWith(_\
    \ < _)\n        sortedWords.foreach(word => result.append(wordMap.get(word)))\n\
    \        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc5an5ut1.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwordMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800438
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val newWord = word.map(c => {\n                val ascii = c.toInt\n\
    \                if (ascii < 65 || ascii > 90)\n                    c\n      \
    \          else\n                    c.toChar + ascii\n            }).mkString\n\
    \            newWord\n        })\n        newWords.mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7z4drkuu.scala:31)\n\tat Problem.main(tmp7z4drkuu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt)\n           \
    \ val newWord = sortedChars.mkString(\"\")\n            newWord\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpwqibkkcf.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpwqibkkcf.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpwqibkkcf.scala:24)\n\
    \tat Problem$.main(tmpwqibkkcf.scala:28)\n\tat Problem.main(tmpwqibkkcf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase)\n        val newWords =\
    \ words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ > _)\n            sortedChars.map(_.toString).mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpcjzyaykl.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpcjzyaykl.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpcjzyaykl.scala:22)\n\
    \tat Problem$.main(tmpcjzyaykl.scala:26)\n\tat Problem.main(tmpcjzyaykl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toString.toInt)\n  \
    \          val newWord = sortedChars.mkString(\"\")\n            newWord\n   \
    \     })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpy5ztthgu.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpy5ztthgu.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpy5ztthgu.scala:24)\n\
    \tat Problem$.main(tmpy5ztthgu.scala:28)\n\tat Problem.main(tmpy5ztthgu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase)\n        val newWords =\
    \ words.map(word => {\n            val newWord = word.map(c => {\n           \
    \     val ascii = c.toInt\n                if (ascii < 97) {\n               \
    \     c.toChar\n                } else if (ascii < 122) {\n                  \
    \  c.toChar + ('a' - 97)\n                } else {\n                    c.toChar\
    \ + ('A' - 122)\n                }\n            }).mkString\n            newWord\n\
    \        })\n        val newString = newWords.mkString(\" \")\n        newString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzq5kjg1p.scala:35)\n\tat Problem.main(tmpzq5kjg1p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.map(_.toChar).mkString(\"\
    \")\n        }).toList\n        newWords.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmp853_0e1b.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmp853_0e1b.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmp853_0e1b.scala:22)\n\
    \tat Problem$.main(tmp853_0e1b.scala:26)\n\tat Problem.main(tmp853_0e1b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val newWords =\
    \ words.map(word => {\n            val chars = word.split(\"\").map(_.toUpperCase)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphkh6wwj3.scala:26)\n\tat Problem.main(tmphkh6wwj3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val charsSorted = chars.sortWith((a,\
    \ b) => a.compareTo(b) < 0)\n            charsSorted.mkString(\"\")\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt)\n           \
    \ val newWord = newChars.mkString(\"\")\n            newWord\n        })\n   \
    \     newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpscs121ez.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpscs121ez.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpscs121ez.scala:24)\n\
    \tat Problem$.main(tmpscs121ez.scala:28)\n\tat Problem.main(tmpscs121ez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val charsSorted = chars.sortWith((x,\
    \ y) => x.toInt < y.toInt)\n            val newChars = charsSorted.map(c => c.toChar).mkString\n\
    \            newChars\n        })\n        newWords.mkString(\" \")\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppdf82jxm.scala:21:50 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mnewChars\e[0m = charsSorted.map(\e\
    [36mc\e[0m => c.toChar).mkString\n\e[31m\e[31m   |\e[0m                      \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \              value toChar is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmppdf82jxm.scala:21:57\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \     \e[33mval\e[0m \e[36mnewChars\e[0m = charsSorted.map(\e[36mc\e[0m => c.toChar).mkString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmppdf82jxm.scala:23:10\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ })\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e[31m   |\e[0m          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m          where:    B is a\
    \ type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        val newString = newWords.mkString(\" \")\n        newString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val newWord = word\n            val chars\
    \ = word.split(\"\").map(_.toInt)\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => String.valueOf(c))\n \
    \           newWord + newChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmp4mrf0ujm.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmp4mrf0ujm.scala:20)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmp4mrf0ujm.scala:24)\n\
    \tat Problem$.main(tmp4mrf0ujm.scala:28)\n\tat Problem.main(tmp4mrf0ujm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val newWord = word.map(c => {\n                val ascii = c.toInt\n\
    \                if (ascii < 97 || ascii > 122) c\n                else (ascii\
    \ - 32).toChar\n            }).mkString\n            newWord\n        })\n   \
    \     newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8iugg7xl.scala:29)\n\tat Problem.main(tmp8iugg7xl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt)\n           \
    \ val newWord = String.fromChars(newChars)\n            newWord\n        })\n\
    \        val newString = newWords.mkString(\" \")\n        newString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7twgen8b.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = String.fromChars(newChars)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                        value fromChars is not a member of object String\n\
    \e[31m\e[31m-- Error: /tmp/tmp7twgen8b.scala:24:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        })\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e\
    [31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m          where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val charsSorted = chars.sortWith(_\
    \ < _)\n            val charsSortedString = charsSorted.mkString(\"\")\n     \
    \       charsSortedString\n        })\n        val newString = newWords.mkString(\"\
    \ \")\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        val newString = newWords.mkString(\" \")\n        newString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       var result = \"\"\n        var i = 0\n        var j = 0\n        var k\
    \ = 0\n        var temp = \"\"\n        while (i < s.length()) {\n           \
    \ if (s.charAt(i) == ' ') {\n                result += s.substring(j, i)\n   \
    \             j = i + 1\n                k = 0\n                while (k < s.length())\
    \ {\n                    if (s.charAt(k) == ' ') {\n                        result\
    \ += s.substring(j, k)\n                        j = k + 1\n                  \
    \      k = 0\n                    } else {\n                        k += 1\n \
    \                   }\n                }\n                result += s.substring(j,\
    \ s.length())\n                i = s.length()\n            } else {\n        \
    \        i += 1\n            }\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwuw_w4rb.scala:45)\n\tat Problem.main(tmpwuw_w4rb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt)\n           \
    \ val newWord = sortedChars.mkString(\"\")\n            newWord\n        })\n\
    \        val newString = newWords.mkString(\" \")\n        newString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpjl1x1lzr.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpjl1x1lzr.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpjl1x1lzr.scala:24)\n\
    \tat Problem$.main(tmpjl1x1lzr.scala:29)\n\tat Problem.main(tmpjl1x1lzr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toChar).mkString\n            newChars\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpf7tujz4x.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpf7tujz4x.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpf7tujz4x.scala:23)\n\
    \tat Problem$.main(tmpf7tujz4x.scala:27)\n\tat Problem.main(tmpf7tujz4x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toLowerCase).toList\n\
    \            val sortedChars = chars.sortBy(_.toInt)\n            val newChars\
    \ = sortedChars.map(c => c.toChar).mkString\n            newChars\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsx8n7n1y.scala:21:50 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mnewChars\e[0m = sortedChars.map(\e\
    [36mc\e[0m => c.toChar).mkString\n\e[31m\e[31m   |\e[0m                      \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \              value toChar is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659800452
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase)\n        val sortedWords\
    \ = words.sortWith(_ < _)\n        val result = sortedWords.mkString(\" \")\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6czfcp2.scala:23)\n\tat Problem.main(tmpp6czfcp2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val sortedWords\
    \ = words.sortBy(_.toString.toInt)\n        val newWords = sortedWords.map(word\
    \ => word.dropRight(1))\n        val newString = newWords.mkString(\" \")\n  \
    \      newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaz80_nv5.scala:24)\n\tat Problem.main(tmpaz80_nv5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt).mkString(\"\"\
    )\n            newChars\n        })\n        newWords.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpr5km8c93.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpr5km8c93.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpr5km8c93.scala:23)\n\
    \tat Problem$.main(tmpr5km8c93.scala:27)\n\tat Problem.main(tmpr5km8c93.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val newWords =\
    \ words.map(word => {\n            val chars = word.split(\"\").map(_.toUpperCase)\n\
    \            val sortedChars = chars.sortBy(_.toInt)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"I\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$4(tmpkbdbzuhg.scala:20)\n\
    \tat scala.math.Ordering$$anon$1.compare(Ordering.scala:141)\n\tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)\n\
    \tat java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1233)\n\
    \tat scala.collection.ArrayOps$.sorted$extension(ArrayOps.scala:597)\n\tat scala.collection.ArrayOps$.sortBy$extension(ArrayOps.scala:646)\n\
    \tat Problem$.$anonfun$2(tmpkbdbzuhg.scala:20)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.antiShuffle(tmpkbdbzuhg.scala:22)\n\tat Problem$.main(tmpkbdbzuhg.scala:26)\n\
    \tat Problem.main(tmpkbdbzuhg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner"
  stdout: ''
  timestamp: 1659800454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        val newString = newWords.mkString(\" \")\n        newString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt)\n           \
    \ val newWord = sortedChars.mkString(\"\")\n            newWord\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpwqibkkcf.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpwqibkkcf.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpwqibkkcf.scala:24)\n\
    \tat Problem$.main(tmpwqibkkcf.scala:28)\n\tat Problem.main(tmpwqibkkcf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => String.valueOf(c)).mkString\n            newChars\n \
    \       })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmptfxkiyi2.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmptfxkiyi2.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmptfxkiyi2.scala:23)\n\
    \tat Problem$.main(tmptfxkiyi2.scala:27)\n\tat Problem.main(tmptfxkiyi2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val newWords =\
    \ words.map(w => {\n            val newWord = w.toUpperCase\n            val chars\
    \ = w.toCharArray\n            val sortedChars = chars.sortWith(_ < _)\n     \
    \       val newChars = sortedChars.map(c => if (c == ' ') '-' else c.toString)\n\
    \            newWord + new String(newChars)\n        })\n        new String(newWords)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpeyx5ytnm.scala:23:26 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            newWord + \e[33mnew\e[0m \e[35mString\e[0m(newChars)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mconstructor\e[0m \e[35mString\e[0m in\
    \ \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: StringBuilder):\
    \ String\n\e[31m   |\e[0m (x$0: StringBuffer): String\n\e[31m   |\e[0m (x$0: Array[Byte]):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\e[31m\
    \   |\e[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\e[31m \
    \  |\e[0m (x$0: Array[Byte], x$1: String): String\n\e[31m   |\e[0m (x$0: Array[Byte],\
    \ x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\e[31m   |\e[0m\
    \ (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\e[31m   |\e[0m\
    \ (x$0: Array[Byte], x$1: Int): String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1:\
    \ Int, x$2: Int, x$3: Int): String\n\e[31m   |\e[0m (x$0: Array[Int], x$1: Int,\
    \ x$2: Int): String\n\e[31m   |\e[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\
    \e[31m   |\e[0m (x$0: Array[Char]): String\n\e[31m   |\e[0m (x$0: String): String\n\
    \e[31m   |\e[0m (): String\n\e[31m   |\e[0mmatch arguments ((newChars : Array[Matchable]))\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpeyx5ytnm.scala:25:12 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mnew\e[0m \e[35mString\e[0m(newWords)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mconstructor\e[0m \e[35mString\e[0m in \e[33mclass\e[0m\
    \ \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: StringBuilder): String\n\
    \e[31m   |\e[0m (x$0: StringBuffer): String\n\e[31m   |\e[0m (x$0: Array[Byte]):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\e[31m\
    \   |\e[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\e[31m \
    \  |\e[0m (x$0: Array[Byte], x$1: String): String\n\e[31m   |\e[0m (x$0: Array[Byte],\
    \ x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\e[31m   |\e[0m\
    \ (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Stri"
  stdout: ''
  timestamp: 1659800452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ > _)\n            val newChars\
    \ = sortedChars.map(c => c.toChar).mkString\n            word.copy(newChars)\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq4f07yuh.scala:22:17 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            word.copy(newChars)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         value copy is not a member\
    \ of String - did you mean word.clone?\n1 error found\n"
  stdout: ''
  timestamp: 1659800453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase)\n        val newWords =\
    \ words.map(word => {\n            val chars = word.split(\"\")\n            val\
    \ charsSorted = chars.sortWith(_ < _)\n            charsSorted.mkString(\"\")\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9dmka2yt.scala:26)\n\tat Problem.main(tmp9dmka2yt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toString.toInt)\n  \
    \          val newWord = newChars.mkString(\"\")\n            newWord\n      \
    \  })\n        val newString = newWords.mkString(\" \")\n        newString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpuh0n1o8q.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpuh0n1o8q.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpuh0n1o8q.scala:24)\n\
    \tat Problem$.main(tmpuh0n1o8q.scala:29)\n\tat Problem.main(tmpuh0n1o8q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val charsSorted = chars.sortWith(_\
    \ < _)\n            val newChars = charsSorted.map(c => if (c == 'a') 'b' else\
    \ 'a')\n            val newWord = word.substring(0, word.length-1) + newChars.mkString(\"\
    \")\n            newWord\n        })\n        newWords.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpm_cbvk1g.scala:21:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mnewChars\e[0m = charsSorted.map(\e\
    [36mc\e[0m => \e[33mif\e[0m (c == \e[31m'a'\e[0m) \e[31m'b'\e[0m \e[33melse\e\
    [0m \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659800453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase)\n        val sortedWords\
    \ = words.toList.sortWith(_ < _)\n        val result = sortedWords.mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_nomq3iz.scala:23)\n\tat Problem.main(tmp_nomq3iz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt)\n           \
    \ val newWord = sortedChars.mkString(\"\")\n            newWord\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpwqibkkcf.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpwqibkkcf.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpwqibkkcf.scala:24)\n\
    \tat Problem$.main(tmpwqibkkcf.scala:28)\n\tat Problem.main(tmpwqibkkcf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val newWord = word\n            val chars\
    \ = word.split(\"\").toList\n            chars.sortWith((x, y) => x.toInt < y.toInt)\n\
    \            val charsString = chars.mkString(\"\")\n            newWord + charsString\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"i\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$2$$anonfun$1(tmp_mf3rmc8.scala:21)\n\
    \tat scala.math.Ordering$$anon$4.compare(Ordering.scala:315)\n\tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)\n\
    \tat java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1233)\n\
    \tat scala.collection.SeqOps.sorted(Seq.scala:700)\n\tat scala.collection.SeqOps.sorted$(Seq.scala:692)\n\
    \tat scala.collection.immutable.List.scala$collection$immutable$StrictOptimizedSeqOps$$super$sorted(List.scala:79)\n\
    \tat scala.collection.immutable.StrictOptimizedSeqOps.sorted(StrictOptimizedSeqOps.scala:78)\n\
    \tat scala.collection.immutable.StrictOptimizedSeqOps.sorted$(StrictOptimizedSeqOps.scala:78)\n\
    \tat scala.collection.immutable.List.sorted(List.scala:79)\n\tat scala.collection.SeqOps.sortWith(Seq.scala:727)\n\
    \tat scala.collection.SeqOps.sortWith$(Seq.scala:727)\n\tat scala.collection.AbstractSeq.sortWith(Seq.scala:1161)\n\
    \tat Problem$.$anonfun$2(tmp_mf3rmc8.scala:21)\n\tat scala.collection.immutable.List.map(List.scala:246)\n\
    \tat Problem$.antiShuffle(tmp_mf3rmc8.scala:24)\n\tat Problem$.main(tmp_mf3rmc8.scala:28)\n\
    \tat Problem.main(tmp_mf3rmc8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.d"
  stdout: ''
  timestamp: 1659800454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt)\n           \
    \ val newWord = newChars.mkString(\"\")\n            newWord\n        })\n   \
    \     newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpscs121ez.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpscs121ez.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpscs121ez.scala:24)\n\
    \tat Problem$.main(tmpscs121ez.scala:28)\n\tat Problem.main(tmpscs121ez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       var result = \"\"\n        var i = 0\n        var j = 0\n        var k\
    \ = 0\n        var l = s.length()\n        while (i < l) {\n            if (s.charAt(i)\
    \ == ' ') {\n                result += s.substring(j, i)\n                j =\
    \ i\n                k = 0\n                while (k < l) {\n                \
    \    if (s.charAt(k) == ' ') {\n                        result += s.substring(j,\
    \ k)\n                        j = k\n                        k = 0\n         \
    \           } else {\n                        k += 1\n                    }\n\
    \                }\n                result += s.substring(j, l)\n            \
    \    l = i\n                i = 0\n            } else {\n                i +=\
    \ 1\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxtdm7jlg.scala:46)\n\tat Problem.main(tmpxtdm7jlg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.mkString(\"\")\n            newChars\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt)\n           \
    \ val newWord = String.fromChars(newChars)\n            newWord\n        })\n\
    \        val newString = newWords.mkString(\" \")\n        newString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7twgen8b.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = String.fromChars(newChars)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                        value fromChars is not a member of object String\n\
    \e[31m\e[31m-- Error: /tmp/tmp7twgen8b.scala:24:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        })\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e\
    [31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m          where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(x => x.replaceAll(\"\
    \\\\w\", \"\"))\n        val sortedWords = newWords.sortWith(_ < _)\n        sortedWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp73j4t5s1.scala:23)\n\tat Problem.main(tmp73j4t5s1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val charsSorted = chars.sortWith(_\
    \ < _)\n            charsSorted.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       var result = \"\"\n        var i = 0\n        var j = 0\n        var k\
    \ = 0\n        var l = s.length\n        while (i < l) {\n            if (s.charAt(i)\
    \ == ' ') {\n                result += s.substring(j, i)\n                j =\
    \ i + 1\n                k = 0\n                while (k < l) {\n            \
    \        if (s.charAt(k) == ' ') {\n                        result += s.substring(j,\
    \ k)\n                        j = k + 1\n                        k = 0\n     \
    \               } else {\n                        k += 1\n                   \
    \ }\n                }\n                result += s.substring(j, l)\n        \
    \        l = l - 1\n                i = l\n            } else {\n            \
    \    i += 1\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsr6i39r3.scala:46)\n\tat Problem.main(tmpsr6i39r3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase)\n        val sortedWords\
    \ = words.sortWith(_ < _)\n        val newWords = sortedWords.map(word => word.map(c\
    \ => c.toInt).map(c => c.toChar).mkString(\"\"))\n        val newString = newWords.mkString(\"\
    \ \")\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ourt4lm.scala:24)\n\tat Problem.main(tmp2ourt4lm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val newWords =\
    \ words.toList.sortWith(_ < _)\n        val newString = newWords.mkString(\" \"\
    )\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8uo_xsl.scala:23)\n\tat Problem.main(tmpf8uo_xsl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val sortedWords\
    \ = words.sortWith(_.compareTo(_) < 0)\n        val result = sortedWords.mkString(\"\
    \ \")\n        result + \" \"\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkgykkw6i.scala:23)\n\tat Problem.main(tmpkgykkw6i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800464
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase)\n        val newWords =\
    \ words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpvc9xtdv_.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpvc9xtdv_.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpvc9xtdv_.scala:22)\n\
    \tat Problem$.main(tmpvc9xtdv_.scala:26)\n\tat Problem.main(tmpvc9xtdv_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val newWords =\
    \ words.map(word => {\n            val chars = word.split(\"\").map(_.toUpperCase)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphkh6wwj3.scala:26)\n\tat Problem.main(tmphkh6wwj3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => String.valueOf(c)).mkString(\"\")\n            newChars\n\
    \        })\n        val newString = newWords.mkString(\" \")\n        newString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmp6paxkgkf.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmp6paxkgkf.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmp6paxkgkf.scala:23)\n\
    \tat Problem$.main(tmp6paxkgkf.scala:28)\n\tat Problem.main(tmp6paxkgkf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => String.valueOf(c))\n            val newWord = newChars.mkString(\"\
    \")\n            newWord\n        }).toList\n        val newString = newWords.mkString(\"\
    \ \")\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpp6g4lzqb.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpp6g4lzqb.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpp6g4lzqb.scala:24)\n\
    \tat Problem$.main(tmpp6g4lzqb.scala:29)\n\tat Problem.main(tmpp6g4lzqb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt).mkString(\"\"\
    )\n            newChars\n        })\n        newWords.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpr5km8c93.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpr5km8c93.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpr5km8c93.scala:23)\n\
    \tat Problem$.main(tmpr5km8c93.scala:27)\n\tat Problem.main(tmpr5km8c93.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase)\n        val result = new\
    \ StringBuilder\n        words.foreach(word => {\n            val chars = word.split(\"\
    \").map(_.toInt)\n            val sortedChars = chars.sortWith(_ < _)\n      \
    \      val newWord = sortedChars.map(_.toString).mkString(\"\")\n            result.append(newWord)\n\
    \        })\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$2(tmphje2gzyy.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle$$anonfun$1(tmphje2gzyy.scala:20)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.antiShuffle(tmphje2gzyy.scala:24)\n\
    \tat Problem$.main(tmphje2gzyy.scala:28)\n\tat Problem.main(tmphje2gzyy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val charsSorted = chars.sortWith(_\
    \ < _)\n            val newChars = charsSorted.map(c => if (c == ' ') c else (c.toInt\
    \ - 96).toChar)\n            val newWord = String.fromChars(newChars)\n      \
    \      newWord\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprqz1jqvl.scala:21:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mnewChars\e[0m = charsSorted.map(\e\
    [36mc\e[0m => \e[33mif\e[0m (c == \e[31m' '\e[0m) c \e[33melse\e[0m (c.toInt -\
    \ \e[31m96\e[0m).toChar)\n\e[31m\e[31m   |\e[0m                              \
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmprqz1jqvl.scala:22:33 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            \e[33mval\e[0m \e[36mnewWord\e[0m = String.fromChars(newChars)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                        value fromChars is not a member of object String\n\
    \e[31m\e[31m-- Error: /tmp/tmprqz1jqvl.scala:24:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        })\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e\
    [31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m          where:    B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659800465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val result\
    \ = new StringBuilder\n        val wordMap = mutable.Map[String, Int]()\n    \
    \    for (word <- words) {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            val newWord\
    \ = sortedChars.map(c => if (wordMap.contains(c.toString)) wordMap(c.toString)\
    \ else wordMap.getOrElse(c.toString, 0) + 1).toString\n            result.append(newWord)\n\
    \            wordMap += (word -> newWord.length)\n        }\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgqnyyys2.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwordMap\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpgqnyyys2.scala:23:143 ----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = sortedChars.map(\e\
    [36mc\e[0m => \e[33mif\e[0m (wordMap.contains(c.toString)) wordMap(c.toString)\
    \ \e[33melse\e[0m wordMap.getOrElse(c.toString, \e[31m0\e[0m) + \e[31m1\e[0m).toString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \           ^\e[0m\n\e[31m   |\e[0m                                          No\
    \ ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                 \
    \                         where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800464
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val newWord = word.map(c => c.toInt).sortWith(_ < _)\n          \
    \  val newString = newWord.mkString(\"\")\n            newString\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprvrmh2s9.scala:26)\n\tat Problem.main(tmprvrmh2s9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800466
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        val newString = newWords.mkString(\" \")\n        newString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val charsSorted = chars.sortWith(_\
    \ < _)\n            val charsSortedString = charsSorted.mkString(\"\")\n     \
    \       charsSortedString\n        })\n        newWords.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val charsSorted = chars.sortWith(_\
    \ < _)\n            charsSorted.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase)\n        val sortedWords\
    \ = words.sortWith((x, y) => x.compareTo(y))\n        val result = sortedWords.mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg04f1agy.scala:18:62\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36msortedWords\e\
    [0m = words.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e\
    [31m   |\e[0m                                                   ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    Int\n\e[31m   |\e[0m                                                   Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val result\
    \ = new StringBuilder\n        var i = 0\n        while (i < words.length) {\n\
    \            val word = words(i)\n            val j = 0\n            while (j\
    \ < word.length) {\n                val c = word.charAt(j)\n                val\
    \ index = c - 'a'.toInt\n                if (index < 0) index += 26\n        \
    \        val newIndex = index - i\n                if (newIndex < 0) newIndex\
    \ += 26\n                val newChar = ('A' + newIndex).toChar\n             \
    \   result.append(newChar)\n                j += 1\n            }\n          \
    \  i += 1\n        }\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppqk2g5ju.scala:26:37 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mif\e[0m (index < \e[31m0\e[0m)\
    \ index += \e[31m26\e[0m\n\e[31m\e[31m   |\e[0m                              \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member of Int\
    \ - did you mean index.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppqk2g5ju.scala:28:43\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                \e[33mif\e\
    [0m (newIndex < \e[31m0\e[0m) newIndex += \e[31m26\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \    value += is not a member of Int - did you mean newIndex.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmppqk2g5ju.scala:31:18 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                j += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659800465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpmmsdoo7a.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpmmsdoo7a.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpmmsdoo7a.scala:22)\n\
    \tat Problem$.main(tmpmmsdoo7a.scala:26)\n\tat Problem.main(tmpmmsdoo7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800466
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val newWord = word.map(c => c.toInt).sortWith(_ < _)\n          \
    \  val newWordString = newWord.mkString(\"\")\n            newWordString\n   \
    \     })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpow9e14_m.scala:26)\n\tat Problem.main(tmpow9e14_m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val newWord = word.map(c => {\n                val ascii = c.toInt\n\
    \                if (ascii < 65 || ascii > 90) {\n                    c\n    \
    \            } else {\n                    c.toChar\n                }\n     \
    \       }).mkString\n            newWord\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu1c7newi.scala:33)\n\tat Problem.main(tmpu1c7newi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(_.toChar).mkString\n            val newWord = newChars.reverse\n\
    \            newWord\n        })\n        val newString = newWords.mkString(\"\
    \ \")\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpndnvwm5z.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpndnvwm5z.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpndnvwm5z.scala:24)\n\
    \tat Problem$.main(tmpndnvwm5z.scala:29)\n\tat Problem.main(tmpndnvwm5z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800466
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(x => x.toUpperCase).sorted\n\
    \        val newString = newWords.mkString(\" \")\n        newString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_iam16_l.scala:23)\n\tat Problem.main(tmp_iam16_l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800466
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpmmsdoo7a.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpmmsdoo7a.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpmmsdoo7a.scala:22)\n\
    \tat Problem$.main(tmpmmsdoo7a.scala:26)\n\tat Problem.main(tmpmmsdoo7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800466
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val charsSorted = chars.sortWith(_\
    \ < _)\n            charsSorted.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val newWord = word.foldLeft(\"\"){\n    \
    \            case (acc, c) =>\n                    val ord = c.toInt\n       \
    \             if (ord > 96 && ord < 123)\n                        acc + (c.toChar)\n\
    \                    else\n                        acc + (c.toChar + String.fromChar(ord))\n\
    \            }\n            val ord = word.foldLeft(0){\n                case\
    \ (acc, c) =>\n                    val ord = c.toInt\n                    if (ord\
    \ > 96 && ord < 123)\n                        acc + ord\n                    else\n\
    \                        acc + ord + c.toChar\n            }\n            val\
    \ ord = word.foldLeft(0){\n                case (acc, c) =>\n                \
    \    val ord = c.toInt\n                    if (ord > 96 && ord < 123)\n     \
    \                   acc + ord\n                    else\n                    \
    \    acc + ord + c.toChar\n            }\n            val ord = word.foldLeft(0){\n\
    \                case (acc, c) =>\n                    val ord = c.toInt\n   \
    \                 if (ord > 96 && ord < 123)\n                        acc + ord\n\
    \                    else\n                        acc + ord + c.toChar\n    \
    \        }\n            val ord = word.foldLeft(0){\n                case (acc,\
    \ c) =>\n                    val ord = c.toInt\n                    if (ord >\
    \ 96 && ord < 123)\n                        acc + ord\n                    else\n\
    \                        acc + ord + c.toChar\n            }\n            val\
    \ ord = word.foldLeft(0){\n                case (acc, c) =>\n                \
    \    val ord = c.toInt\n                    if (ord > 96 && ord < 123)\n     \
    \                   acc + ord\n                    else\n                    \
    \    acc + ord + c.toChar\n            }\n            val ord = word.foldLeft(0){\n\
    \                case (acc, c) =>\n                    val ord = c.toInt\n   \
    \                 if (ord > 96 && ord < 123)\n                        acc + ord\n\
    \                    else\n                        acc + ord + c.toChar\n    \
    \        }\n            val ord = word.foldLeft(0){\n                case (acc,\
    \ c) =>\n                    val ord = c.toInt\n                    if (ord >\
    \ 96 && ord < 123)\n                        acc + ord\n                    else\n\
    \                        acc + ord + c.toChar\n            }\n            val\
    \ ord = word.foldLeft(0){\n                case (acc, c\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppwdj5rvj.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppwdj5rvj.scala:97:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m97 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppwdj5rvj.scala:35:16 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m            \e[33mval\e[0m \e[36mord\e[0m = word.foldLeft(\e[31m0\e\
    [0m){\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0mord is already\
    \ defined as \e[33mvalue\e[0m \e[35mord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m36 |\e[0m                \e[33mcase\e[0m (acc, c) =>\n\e[31m37 |\e[0m  \
    \                  \e[33mval\e[0m \e[36mord\e[0m = c.toInt\n\e[31m38 |\e[0m  \
    \                  \e[33mif\e[0m (ord > \e[31m96\e[0m && ord < \e[31m123\e[0m)\n\
    \e[31m39 |\e[0m                        acc + ord\n\e[31m40 |\e[0m            \
    \        \e[33melse\e[0m\n\e[31m41 |\e[0m                        acc + ord + c.toChar\n\
    \e[31m42 |\e[0m            }\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppwdj5rvj.scala:43:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m            \e[33mval\e\
    [0m \e[36mord\e[0m = word.foldLeft(\e[31m0\e[0m){\n\e[31m\e[31m   |\e[0m     \
    \       ^\e[0m\n\e[31m   |\e[0mord is already defined as \e[33mvalue\e[0m \e[35mord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m44 |\e[0m         \
    \       \e[33mcase\e[0m (acc, c) =>\n\e[31m45 |\e[0m                    \e[33mval\e\
    [0m \e[36mord\e[0m = c.toInt\n\e[31m46 |\e[0m                    \e[33mif\e[0m\
    \ (ord > \e[31m96\e[0m && ord < \e[31m123\e[0m)\n\e[31m47 |\e[0m             \
    \           acc + ord\n\e[31m48 |\e[0m                    \e[33melse\e[0m\n\e\
    [31m49 |\e[0m                        acc + ord + c.toChar\n\e[31m50 |\e[0m   \
    \         }\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppwdj5rvj.scala:51:16\
    \ ---------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1659800467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val result\
    \ = new StringBuilder\n        val wordMap = new mutable.HashMap[String, Int]()\n\
    \        val blankMap = new mutable.HashMap[String, Int]()\n        words.foreach(word\
    \ => {\n            val chars = word.split(\"\").map(_.toInt)\n            chars.foreach(char\
    \ => {\n                val key = char.toString\n                if (wordMap.contains(key))\
    \ {\n                    wordMap(key) += 1\n                } else {\n       \
    \             wordMap(key) = chars.count(_ == char) + 1\n                }\n \
    \           })\n        })\n        words.foreach(word => {\n            val chars\
    \ = word.split(\"\").map(_.toInt)\n            chars.foreach(char => {\n     \
    \           val key = char.toString\n                if (blankMap.contains(key))\
    \ {\n                    blankMap(key) += 1\n                } else {\n      \
    \              blankMap(key) = chars.count(_ == char) + 1\n                }\n\
    \            })\n        })\n        wordMap.foreach { case (k, v) =>\n      \
    \      if (v > 1) {\n                val newKey = k + \"\"\n                val\
    \ newValue = v - 1 + \"!\"\n                result.append((newKey + newValue).mkString(\"\
    \"))\n            }\n        }\n        blankMap.foreach { case (k, v) =>\n  \
    \          if (v > 1) {\n                val newKey = k + \"\"\n             \
    \   val newValue = v - 1 + \"!\"\n                result.append((newKey + newValue).mkString(\"\
    \"))\n            }\n        }\n        result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpet1a6sg8.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwordMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpet1a6sg8.scala:20:27 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mblankMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800464
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ > _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmp1fle8b_j.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmp1fle8b_j.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmp1fle8b_j.scala:22)\n\
    \tat Problem$.main(tmp1fle8b_j.scala:26)\n\tat Problem.main(tmp1fle8b_j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800466
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toString.toInt)\n  \
    \          val newWord = sortedChars.mkString(\"\")\n            newWord\n   \
    \     })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpy5ztthgu.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpy5ztthgu.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpy5ztthgu.scala:24)\n\
    \tat Problem$.main(tmpy5ztthgu.scala:28)\n\tat Problem.main(tmpy5ztthgu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase)\n        val newWords =\
    \ words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.map(_.toString).mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpwa23pu8c.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpwa23pu8c.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpwa23pu8c.scala:22)\n\
    \tat Problem$.main(tmpwa23pu8c.scala:26)\n\tat Problem.main(tmpwa23pu8c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800466
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val charsSorted = chars.sortWith(_\
    \ < _)\n            charsSorted.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       var result = \"\"\n        var i = 0\n        var j = 0\n        var k\
    \ = 0\n        var l = s.length\n        while (i < l) {\n            while (j\
    \ < l) {\n                if (s.charAt(i) == s.charAt(j)) {\n                \
    \    result += s.charAt(i)\n                    i += 1\n                    j\
    \ += 1\n                } else {\n                    result += s.charAt(j)\n\
    \                    j += 1\n                }\n            }\n            while\
    \ (k < l) {\n                if (s.charAt(i) == s.charAt(k)) {\n             \
    \       result += s.charAt(i)\n                    i += 1\n                  \
    \  k += 1\n                } else {\n                    result += s.charAt(k)\n\
    \                    k += 1\n                }\n            }\n            while\
    \ (k < l) {\n                if (s.charAt(i) == s.charAt(k)) {\n             \
    \       result += s.charAt(i)\n                    i += 1\n                  \
    \  k += 1\n                } else {\n                    result += s.charAt(k)\n\
    \                    k += 1\n                }\n            }\n            while\
    \ (j < l) {\n                if (s.charAt(i) == s.charAt(j)) {\n             \
    \       result += s.charAt(i)\n                    i += 1\n                  \
    \  j += 1\n                } else {\n                    result += s.charAt(j)\n\
    \                    j += 1\n                }\n            }\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 2\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.antiShuffle(tmpbleli4u3.scala:34)\n\tat Problem$.main(tmpbleli4u3.scala:67)\n\
    \tat Problem.main(tmpbleli4u3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val sortedString = sortedChars.mkString(\"\")\n          \
    \  sortedString\n        })\n        val newString = newWords.mkString(\" \")\n\
    \        newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800466
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val charsSorted = chars.sortWith((a,\
    \ b) => a.toInt > b.toInt)\n            charsSorted.mkString(\"\")\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"i\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$2(tmpx5kodc_7.scala:20)\n\
    \tat scala.math.Ordering$$anon$4.compare(Ordering.scala:315)\n\tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)\n\
    \tat java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1233)\n\
    \tat scala.collection.ArrayOps$.sorted$extension(ArrayOps.scala:597)\n\tat scala.collection.ArrayOps$.sortWith$extension(ArrayOps.scala:631)\n\
    \tat Problem$.$anonfun$1(tmpx5kodc_7.scala:20)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.antiShuffle(tmpx5kodc_7.scala:22)\n\tat Problem$.main(tmpx5kodc_7.scala:26)\n\
    \tat Problem.main(tmpx5kodc_7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunn"
  stdout: ''
  timestamp: 1659800475
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val newWord = word.map(c => c.toInt).sortWith(_ > _).mkString(\"\"\
    )\n            newWord\n        })\n        newWords.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgax47b5v.scala:25)\n\tat Problem.main(tmpgax47b5v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toChar).mkString\n \
    \           val newWord = newChars.toUpperCase\n            newWord\n        })\n\
    \        val newString = newWords.mkString(\" \")\n        newString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzthe7a2x.scala:21:50 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mnewChars\e[0m = sortedChars.map(\e\
    [36mc\e[0m => c.toChar).mkString\n\e[31m\e[31m   |\e[0m                      \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \              value toChar is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmpzthe7a2x.scala:21:57\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \     \e[33mval\e[0m \e[36mnewChars\e[0m = sortedChars.map(\e[36mc\e[0m => c.toChar).mkString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmpzthe7a2x.scala:24:10\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ })\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e[31m   |\e[0m          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m          where:    B is a\
    \ type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659800476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val result = new\
    \ StringBuilder\n        val wordMap = new mutable.HashMap[String, String]()\n\
    \        val blankMap = new mutable.HashMap[String, String]()\n        val blankCount\
    \ = 0\n        val wordCount = 0\n        for(word <- words) {\n            val\
    \ chars = word.split(\"\").map(_.toUpperCase)\n            val sortedChars = chars.sortWith((x,\
    \ y) => x.compareTo(y))\n            val sortedCharsString = sortedChars.mkString(\"\
    \")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\\\\W\"\
    , \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\\\
    \\s\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\W\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\s\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\W\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\s\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\W\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\s\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\W\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\s\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\W\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\s\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\W\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\s\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\W\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\s\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\W\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\s\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\W\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\s\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\W\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\s\", \"\")\n            val sortedCharsString = sortedCharsString.replaceAll(\"\
    \\\\W\", \"\")\n            val sortedCharsString = sortedChars\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmkw3xgis.scala:63:0 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmkw3xgis.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mwordMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmkw3xgis.scala:20:27 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mblankMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmkw3xgis.scala:27:16 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m            \e[33mval\e[0m \e[36msortedCharsString\e[0m = sortedCharsString.replaceAll(\e\
    [31m\"\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msortedCharsString is already defined as \e[33mvalue\e[0m \e\
    [35msortedCharsString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmkw3xgis.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36msortedCharsString\e\
    [0m = sortedCharsString.replaceAll(\e[31m\"\\\\s\"\e[0m, \e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msortedCharsString is already defined as \e[33mvalue\e[0m \e\
    [35msortedCharsString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined i"
  stdout: ''
  timestamp: 1659800476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       var result = \"\"\n        var i = 0\n        while (i < s.length) {\n\
    \            result += s(i)\n            i += 1\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7nlr92ak.scala:27)\n\tat Problem.main(tmp7nlr92ak.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800475
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val sortedWords\
    \ = words.sortBy(_.toInt)\n        val result = sortedWords.mkString(\" \")\n\
    \        result + \" \"\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0b0mlfrr.scala:23)\n\tat Problem.main(tmp0b0mlfrr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => if (c > 127) c else (c - 32)).mkString\n            val\
    \ newWord = newChars.toUpperCase\n            newWord\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpqey7_it0.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpqey7_it0.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpqey7_it0.scala:24)\n\
    \tat Problem$.main(tmpqey7_it0.scala:28)\n\tat Problem.main(tmpqey7_it0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800478
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val result = new\
    \ StringBuilder\n        words.foreach(word => {\n            val chars = word.split(\"\
    \").map(_.toUpperCase)\n            chars.sortWith(_ < _)\n            result.append(chars.mkString(\"\
    \"))\n            result.append(\" \")\n        })\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt85e9sts.scala:28)\n\tat Problem.main(tmpt85e9sts.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toString.toInt)\n  \
    \          val newWord = sortedChars.mkString(\"\")\n            newWord\n   \
    \     })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpy5ztthgu.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpy5ztthgu.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpy5ztthgu.scala:24)\n\
    \tat Problem$.main(tmpy5ztthgu.scala:28)\n\tat Problem.main(tmpy5ztthgu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpmmsdoo7a.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpmmsdoo7a.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpmmsdoo7a.scala:22)\n\
    \tat Problem$.main(tmpmmsdoo7a.scala:26)\n\tat Problem.main(tmpmmsdoo7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800466
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt).mkString(\"\"\
    )\n            newChars\n        })\n        val newString = newWords.mkString(\"\
    \ \")\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpy0s6cf_g.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpy0s6cf_g.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpy0s6cf_g.scala:23)\n\
    \tat Problem$.main(tmpy0s6cf_g.scala:28)\n\tat Problem.main(tmpy0s6cf_g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val charsSorted = chars.sortWith(_\
    \ < _)\n            val charsSortedString = charsSorted.mkString(\"\")\n     \
    \       charsSortedString\n        })\n        newWords.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase)\n        val newWords =\
    \ words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toChar).mkString\n            newChars\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpyvmr7woh.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpyvmr7woh.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpyvmr7woh.scala:23)\n\
    \tat Problem$.main(tmpyvmr7woh.scala:27)\n\tat Problem.main(tmpyvmr7woh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800478
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt).mkString\n  \
    \          newChars\n        }).mkString(\" \")\n        newWords\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmp5r0lbxlk.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmp5r0lbxlk.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmp5r0lbxlk.scala:23)\n\
    \tat Problem$.main(tmp5r0lbxlk.scala:27)\n\tat Problem.main(tmp5r0lbxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800478
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val sortedString = sortedChars.mkString(\"\")\n          \
    \  sortedString\n        })\n        val newString = newWords.mkString(\" \")\n\
    \        newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt)\n           \
    \ val newWord = String.fromChars(newChars)\n            newWord\n        })\n\
    \        val newString = newWords.mkString(\" \")\n        newString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7twgen8b.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = String.fromChars(newChars)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                        value fromChars is not a member of object String\n\
    \e[31m\e[31m-- Error: /tmp/tmp7twgen8b.scala:24:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        })\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e\
    [31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m          where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpmmsdoo7a.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpmmsdoo7a.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpmmsdoo7a.scala:22)\n\
    \tat Problem$.main(tmpmmsdoo7a.scala:26)\n\tat Problem.main(tmpmmsdoo7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(w => {\n            val chars = w.toCharArray\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            val newChars = sortedChars.map(c => c.toInt)\n\
    \            val newWord = new String(newChars)\n            newWord\n       \
    \ })\n        val newString = newWords.mkString(\" \")\n        newString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpdqokucz1.scala:22:30 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = \e[33mnew\e\
    [0m \e[35mString\e[0m(newChars)\n\e[31m\e[31m   |\e[0m                       \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mconstructor\e[0m \e[35mString\e[0m in \e[33mclass\e[0m \e[35mString\e[0m with\
    \ types\n\e[31m   |\e[0m (x$0: StringBuilder): String\n\e[31m   |\e[0m (x$0: StringBuffer):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Byte]): String\n\e[31m   |\e[0m (x$0: Array[Byte],\
    \ x$1: Int, x$2: Int): String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1: String): String\n\e[31m   |\e\
    [0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\
    \e[31m   |\e[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\e\
    [31m   |\e[0m (x$0: Array[Byte], x$1: Int): String\n\e[31m   |\e[0m (x$0: Array[Byte],\
    \ x$1: Int, x$2: Int, x$3: Int): String\n\e[31m   |\e[0m (x$0: Array[Int], x$1:\
    \ Int, x$2: Int): String\n\e[31m   |\e[0m (x$0: Array[Char], x$1: Int, x$2: Int):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Char]): String\n\e[31m   |\e[0m (x$0: String):\
    \ String\n\e[31m   |\e[0m (): String\n\e[31m   |\e[0mmatch arguments ((newChars\
    \ : Array[Int]))\n1 error found\n"
  stdout: ''
  timestamp: 1659800474
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt)\n           \
    \ val newWord = String.fromChars(newChars)\n            newWord\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj2mpnsbw.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = String.fromChars(newChars)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                        value fromChars is not a member of object String\n\
    \e[31m\e[31m-- Error: /tmp/tmpj2mpnsbw.scala:24:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        })\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e\
    [31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m          where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toChar).mkString\n            newChars\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpf7tujz4x.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpf7tujz4x.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpf7tujz4x.scala:23)\n\
    \tat Problem$.main(tmpf7tujz4x.scala:27)\n\tat Problem.main(tmpf7tujz4x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt)\n           \
    \ val newWord = String.fromChars(newChars)\n            newWord\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj2mpnsbw.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = String.fromChars(newChars)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                        value fromChars is not a member of object String\n\
    \e[31m\e[31m-- Error: /tmp/tmpj2mpnsbw.scala:24:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        })\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e\
    [31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m          where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val newWords =\
    \ words.map(word => {\n            val chars = word.split(\"\")\n            val\
    \ sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\")\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2hs5mlle.scala:26)\n\tat Problem.main(tmp2hs5mlle.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800478
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        val newString = newWords.mkString(\" \")\n        newString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       var result = \"\"\n        var i = 0\n        while (i < s.length){\n\
    \            result += s.charAt(i)\n            i += 1\n        }\n        var\
    \ j = 0\n        while (j < s.length){\n            if (s.charAt(j) == ' '){\n\
    \                result += s.charAt(j)\n                j += 1\n            }\n\
    \            else{\n                result += s.charAt(j)\n                j +=\
    \ 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc2u64lgg.scala:37)\n\tat Problem.main(tmpc2u64lgg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val charsSorted = chars.sortWith(_\
    \ < _)\n            charsSorted.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.map(_.toString).mkString(\"\
    \")\n        }).toList\n        newWords.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpxa7jz09t.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpxa7jz09t.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpxa7jz09t.scala:22)\n\
    \tat Problem$.main(tmpxa7jz09t.scala:26)\n\tat Problem.main(tmpxa7jz09t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.map(_.toString).mkString(\"\
    \")\n        }).toList\n        newWords.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpxa7jz09t.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpxa7jz09t.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpxa7jz09t.scala:22)\n\
    \tat Problem$.main(tmpxa7jz09t.scala:26)\n\tat Problem.main(tmpxa7jz09t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val newWords =\
    \ words.map(word => {\n            val chars = word.split(\"\").map(_.toUpperCase)\n\
    \            val charsSorted = chars.sortWith((x, y) => x.toInt < y.toInt)\n \
    \           charsSorted.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"I\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$4(tmpxgdi3c7u.scala:20)\n\
    \tat scala.math.Ordering$$anon$4.compare(Ordering.scala:315)\n\tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)\n\
    \tat java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1233)\n\
    \tat scala.collection.ArrayOps$.sorted$extension(ArrayOps.scala:597)\n\tat scala.collection.ArrayOps$.sortWith$extension(ArrayOps.scala:631)\n\
    \tat Problem$.$anonfun$2(tmpxgdi3c7u.scala:20)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.antiShuffle(tmpxgdi3c7u.scala:22)\n\tat Problem$.main(tmpxgdi3c7u.scala:26)\n\
    \tat Problem.main(tmpxgdi3c7u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunn"
  stdout: ''
  timestamp: 1659800478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val chars = words.map(_.toChar)\n\
    \        val charsSorted = chars.sortWith(_ < _)\n        val charsSortedString\
    \ = charsSorted.mkString(\"\")\n        val wordsSorted = words.map(_.toUpperCase)\n\
    \        val wordsSortedString = wordsSorted.mkString(\"\")\n        val newWords\
    \ = charsSortedString.split(\"\").map(_.toUpperCase)\n        val newWordsString\
    \ = newWords.mkString(\"\")\n        val newWordsSortedString = newWordsString.split(\"\
    \").map(_.toUpperCase).mkString(\"\")\n        val newWordsSortedString2 = newWordsString.split(\"\
    \").map(_.toUpperCase).mkString(\"\")\n        val newWordsSortedString3 = newWordsString.split(\"\
    \").map(_.toUpperCase).mkString(\"\")\n        val newWordsSortedString4 = newWordsString.split(\"\
    \").map(_.toUpperCase).mkString(\"\")\n        val newWordsSortedString5 = newWordsString.split(\"\
    \").map(_.toUpperCase).mkString(\"\")\n        val newWordsSortedString6 = newWordsString.split(\"\
    \").map(_.toUpperCase).mkString(\"\")\n        val newWordsSortedString7 = newWordsString.split(\"\
    \").map(_.toUpperCase).mkString(\"\")\n        val newWordsSortedString8 = newWordsString.split(\"\
    \").map(_.toUpperCase).mkString(\"\")\n        val newWordsSortedString9 = newWordsString.split(\"\
    \").map(_.toUpperCase).mkString(\"\")\n        val newWordsSortedString10 = newWordsString.split(\"\
    \").map(_.toUpperCase).mkString(\"\")\n        val newWordsSortedString11 = newWordsString.split(\"\
    \").map(_.toUpperCase).mkString(\"\")\n        val newWordsSortedString12 = newWordsString.split(\"\
    \").map(_.toUpperCase).mkString(\"\")\n        val newWordsSortedString13 = newWordsString.split(\"\
    \").map(_.toUpperCase).mkString(\"\")\n        val newWordsSortedString14 = newWordsString.split(\"\
    \").map(_.toUpperCase).mkString(\"\")\n        val newWordsSortedString15 = newWordsString.split(\"\
    \").map(_.toUpperCase).mkString(\"\")\n        val newWordsSortedString16 = newWordsString.split(\"\
    \").map(_.toUpperCase).mkString(\"\")\n        val newWordsSortedString17 = newWordsString.split(\"\
    \").map(_.toUpperCase).mk\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9eein7wr.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              value toChar is not a member of String\n\e[31m\e\
    [31m-- Error: /tmp/tmp9eein7wr.scala:18:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                       where:    B\
    \ is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9eein7wr.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800478
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val sortedWords\
    \ = words.sortWith(_ < _)\n        val result = sortedWords.mkString(\" \")\n\
    \        result + \" \"\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz8vk9y_k.scala:23)\n\tat Problem.main(tmpz8vk9y_k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800478
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val charsSorted = chars.sortWith((a,\
    \ b) => a.compareTo(b) < 0)\n            charsSorted.mkString(\"\")\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       var newString = \"\"\n        var newStringArray = s.split(\" \")\n  \
    \      var newStringArrayLength = newStringArray.length\n        var newStringArrayCopy\
    \ = newStringArray.clone()\n        var newStringArrayCopyLength = newStringArrayCopy.length\n\
    \        var newStringArrayCopyCopy = newStringArrayCopy.clone()\n        var\
    \ newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n        var newStringArrayCopyCopyLength\
    \ = newStringArrayCopyCopy.length\n        var newStringArrayCopyCopyLength =\
    \ newStringArrayCopyCopy.length\n        var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n\
    \        var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n  \
    \      var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n    \
    \    var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n      \
    \  var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n        var\
    \ newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n        var newStringArrayCopyCopyLength\
    \ = newStringArrayCopyCopy.length\n        var newStringArrayCopyCopyLength =\
    \ newStringArrayCopyCopy.length\n        var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n\
    \        var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n  \
    \      var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n    \
    \    var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n      \
    \  var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n        var\
    \ newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n        var newStringArrayCopyCopyLength\
    \ = newStringArrayCopyCopy.length\n        var newStringArrayCopyCopyLength =\
    \ newStringArrayCopyCopy.length\n        var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n\
    \        var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n  \
    \      var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n    \
    \    var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n      \
    \  var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n        var\
    \ newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n        var newStringArrayCopyCopyLength\
    \ = newStringArrayCopyCopy.length\n        var newStringArrayCopyCopyLength =\
    \ newStringArrayCopyCopy.length\n        var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n\
    \        var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n  \
    \      var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n    \
    \    var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n      \
    \  var newStringArrayCopyCopyLength = newStringArrayCopyCopy.length\n        var\
    \ newStringArrayCopyCopy\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6sotw4a2.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6sotw4a2.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mnewStringArrayCopyCopyLength\e[0m = newStringArrayCopyCopy.length\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewStringArrayCopyCopyLength is already defined as \e[33mvariable\e\
    [0m \e[35mnewStringArrayCopyCopyLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6sotw4a2.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mnewStringArrayCopyCopyLength\e\
    [0m = newStringArrayCopyCopy.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewStringArrayCopyCopyLength is already defined as \e[33mvariable\e\
    [0m \e[35mnewStringArrayCopyCopyLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6sotw4a2.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36mnewStringArrayCopyCopyLength\e\
    [0m = newStringArrayCopyCopy.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewStringArrayCopyCopyLength is already defined as \e[33mvariable\e\
    [0m \e[35mnewStringArrayCopyCopyLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6sotw4a2.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m \e[36mnewStringArrayCopyCopyLength\e\
    [0m = newStringArrayCopyCopy.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt)\n           \
    \ val newWord = sortedChars.mkString(\"\")\n            newWord\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpwqibkkcf.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpwqibkkcf.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpwqibkkcf.scala:24)\n\
    \tat Problem$.main(tmpwqibkkcf.scala:28)\n\tat Problem.main(tmpwqibkkcf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toChar).mkString(\"\"\
    )\n            val newWord = newChars.toUpperCase\n            newWord\n     \
    \   })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3hx9c0c2.scala:21:50 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mnewChars\e[0m = sortedChars.map(\e\
    [36mc\e[0m => c.toChar).mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                                           ^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                               value toChar is not a member of String\n\e[31m\e\
    [31m-- Error: /tmp/tmp3hx9c0c2.scala:21:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mnewChars\e[0m = sortedChars.map(\e\
    [36mc\e[0m => c.toChar).mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                                                    ^\e[0m\n\e[31m   |\e[0m \
    \                                         No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmp3hx9c0c2.scala:24:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        })\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e\
    [31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m          where:    B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659800478
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toString.toInt)\n  \
    \          val newWord = newChars.mkString(\"\")\n            newWord\n      \
    \  })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpkk8lytee.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpkk8lytee.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpkk8lytee.scala:24)\n\
    \tat Problem$.main(tmpkk8lytee.scala:28)\n\tat Problem.main(tmpkk8lytee.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt).mkString\n  \
    \          newChars\n        }).toList\n        newWords.mkString(\" \")\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmp9vioetwy.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmp9vioetwy.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmp9vioetwy.scala:23)\n\
    \tat Problem$.main(tmp9vioetwy.scala:27)\n\tat Problem.main(tmp9vioetwy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(x => x.replaceAll(\"\
    \\\\W\", \"\"))\n        val sortedWords = newWords.sortWith((x, y) => x.toString.compareToIgnoreCase(y.toString))\n\
    \        val newString = sortedWords.mkString(\" \")\n        newString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7u91nl6_.scala:19:84\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msortedWords\e\
    [0m = newWords.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.toString.compareToIgnoreCase(y.toString))\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                      Found:\
    \    Int\n\e[31m   |\e[0m                                                    \
    \  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val charsSorted = chars.sortWith((x,\
    \ y) => x.compareTo(y))\n            charsSorted.mkString(\"\")\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz417m5_y.scala:20:66\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e\
    [36mcharsSorted\e[0m = chars.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Int\n\e[31m   |\e[0m                                                    \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800482
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpmmsdoo7a.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpmmsdoo7a.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpmmsdoo7a.scala:22)\n\
    \tat Problem$.main(tmpmmsdoo7a.scala:26)\n\tat Problem.main(tmpmmsdoo7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800466
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase)\n        val sortedWords\
    \ = words.sortBy(_.toString.toInt)\n        val newWords = sortedWords.map(word\
    \ => word.dropRight(1)).mkString(\" \")\n        newWords\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpck5f0ion.scala:23)\n\tat Problem.main(tmpck5f0ion.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800483
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val newWords =\
    \ words.map(word => {\n            val chars = word.split(\"\").map(_.toUpperCase)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphkh6wwj3.scala:26)\n\tat Problem.main(tmphkh6wwj3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val newWords =\
    \ words.map(w => {\n            val chars = w.toCharArray\n            val charArray\
    \ = chars.sortWith(_ < _)\n            charArray.toString\n        })\n      \
    \  newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmycu1tiy.scala:26)\n\tat Problem.main(tmpmycu1tiy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800482
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toString.toInt)\n  \
    \          val newWord = sortedChars.mkString(\"\")\n            newWord\n   \
    \     })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpy5ztthgu.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpy5ztthgu.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpy5ztthgu.scala:24)\n\
    \tat Problem$.main(tmpy5ztthgu.scala:28)\n\tat Problem.main(tmpy5ztthgu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toLowerCase).toList\n\
    \            val sortedChars = chars.sortBy(_.toInt)\n            val newChars\
    \ = sortedChars.map(c => c.toChar).mkString\n            newChars\n        })\n\
    \        val newString = newWords.mkString(\" \")\n        newString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvkhm17bb.scala:21:50 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mnewChars\e[0m = sortedChars.map(\e\
    [36mc\e[0m => c.toChar).mkString\n\e[31m\e[31m   |\e[0m                      \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \              value toChar is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659800482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(x => x.replaceAll(\"\
    \\\\w\", x => x.toUpperCase))\n        val sortedWords = newWords.sortWith((x,\
    \ y) => x.toString.compareTo(y.toString))\n        sortedWords.mkString(\" \"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp2jkt6yzs.scala:18:58 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewWords\e[0m = words.map(\e\
    [36mx\e[0m => x.replaceAll(\e[31m\"\\\\w\"\e[0m, \e[36mx\e[0m => x.toUpperCase))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^\e[0m\n\e[31m   |\e[0m                          Missing parameter type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                          I could not infer the\
    \ type of the parameter x.\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2jkt6yzs.scala:19:74\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msortedWords\e\
    [0m = newWords.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.toString.compareTo(y.toString))\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                      Found:\
    \    Int\n\e[31m   |\e[0m                                                    \
    \  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800482
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toString.toInt)\n  \
    \          val newWord = newChars.mkString(\"\")\n            newWord\n      \
    \  })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpkk8lytee.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpkk8lytee.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpkk8lytee.scala:24)\n\
    \tat Problem$.main(tmpkk8lytee.scala:28)\n\tat Problem.main(tmpkk8lytee.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.mkString(\"\")\n            newChars\n\
    \        })\n        val newString = newWords.mkString(\" \")\n        newString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800483
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val charsSorted = chars.sortWith(_\
    \ > _)\n            charsSorted.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbb_k_m5c.scala:26)\n\tat Problem.main(tmpbb_k_m5c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800483
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val sortedWords\
    \ = words.sortBy(_.toInt)\n        val newWords = sortedWords.map(w => w.reverse).mkString(\"\
    \ \")\n        newWords\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaxn_w2ea.scala:23)\n\tat Problem.main(tmpaxn_w2ea.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800483
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toString.toInt)\n  \
    \          val newWord = newChars.mkString(\"\")\n            newWord\n      \
    \  })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpkk8lytee.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpkk8lytee.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpkk8lytee.scala:24)\n\
    \tat Problem$.main(tmpkk8lytee.scala:28)\n\tat Problem.main(tmpkk8lytee.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase)\n        val newWords =\
    \ words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpvc9xtdv_.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpvc9xtdv_.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpvc9xtdv_.scala:22)\n\
    \tat Problem$.main(tmpvc9xtdv_.scala:26)\n\tat Problem.main(tmpvc9xtdv_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val result = new\
    \ StringBuilder\n        val wordMap = new mutable.HashMap[String, String]()\n\
    \        words.foreach(word => {\n            val key = word.mkString.toUpperCase\n\
    \            val value = wordMap.getOrElse(key, word)\n            wordMap +=\
    \ key -> value\n        })\n        val sortedWords = wordMap.keys.toList.sortWith(_\
    \ > _)\n        sortedWords.foreach(word => result.append(wordMap.get(word)))\n\
    \        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq962c2ya.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwordMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800482
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val newWord = word.map(c => c.toInt).sortWith(_ < _)\n          \
    \  val newWordString = newWord.mkString(\"\")\n            newWordString\n   \
    \     })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpow9e14_m.scala:26)\n\tat Problem.main(tmpow9e14_m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val charsSorted = chars.sortWith(_\
    \ < _)\n            val charsSortedString = charsSorted.mkString(\"\")\n     \
    \       charsSortedString\n        })\n        newWords.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase).toList\n        val newWords\
    \ = words.map(word => {\n            val chars = word.split(\"\").map(_.toInt)\n\
    \            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.map(_.toChar).mkString(\"\
    \")\n        }).toList\n        newWords.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmp853_0e1b.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmp853_0e1b.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmp853_0e1b.scala:22)\n\
    \tat Problem$.main(tmp853_0e1b.scala:26)\n\tat Problem.main(tmp853_0e1b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt)\n           \
    \ val newWord = String.fromChars(newChars)\n            newWord\n        })\n\
    \        val newString = newWords.mkString(\" \")\n        newString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7twgen8b.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = String.fromChars(newChars)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                        value fromChars is not a member of object String\n\
    \e[31m\e[31m-- Error: /tmp/tmp7twgen8b.scala:24:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        })\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e\
    [31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m          where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800449
