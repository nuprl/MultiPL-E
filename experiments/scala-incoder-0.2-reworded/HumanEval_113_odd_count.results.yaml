language: scala
name: HumanEval_113_odd_count
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => x match {\n\
    \            case x if x.toString.toInt == x => odds += x.toString.toInt\n   \
    \         case x => odds += 0\n        })\n        odds.toList.map(x => s\"the\
    \ number of odd elements $x of the $x input.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp__rtes47.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmp__rtes47.scala:15:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x.toString.toInt\
    \ == x => odds += x.toString.toInt\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types Int and\
    \ String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659794994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val digits = str.filter(_.isDigit)\n\
    \            val oddDigits = digits.filter(d => d % 2 != 0)\n            odds.addAll(oddDigits.size)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmfqx5v64.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length)\n\
    \                if(str.charAt(j) match {\n                    case '0' => odds\
    \ += 0\n                    case '1' => odds += 1\n                    case '2'\
    \ => odds += 2\n                    case '3' => odds += 3\n                  \
    \  case '4' => odds += 4\n                    case '5' => odds += 5\n        \
    \            case '6' => odds += 6\n                    case '7' => odds += 7\n\
    \                    case '8' => odds += 8\n                    case '9' => odds\
    \ += 9\n                    case 'a' => odds += 10\n                    case 'b'\
    \ => odds += 11\n                    case 'c' => odds += 12\n                \
    \    case 'd' => odds += 13\n                    case 'e' => odds += 14\n    \
    \                case 'f' => odds += 15\n                    case 'A' => odds\
    \ += 10\n                    case 'B' => odds += 11\n                    case\
    \ 'C' => odds += 12\n                    case 'D' => odds += 13\n            \
    \        case 'E' => odds += 14\n                    case 'F' => odds += 15\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += 0\n                    case 'a' | 't' | 'e' | 'i' | 'o' | 'u'\
    \ | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'B' | 't' | 'e' | 'i' | 'o' | 'u' | 'C'\
    \ | 't' | 'e' | 'i' | 'o' | 'u' | 'D' | 't' | 'e' | 'i' | 'o' | 'u' | 'E' | 't'\
    \ | 'e' | 'i' | 'o' | 'u' | 'F' | 't' | 'e' | 'i' | 'o' | 'u' | '0' | '1' | '2'\
    \ | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += 0\n                   \
    \ case 'a' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' |\
    \ 'B' | 't' | 'e' | 'i' | 'o' | 'u' | 'C' | 't' | 'e' | 'i' | 'o' | 'u' | 'D'\
    \ | 't' | 'e' | 'i' | 'o' | 'u' | 'E' | 't' | 'e' | 'i' | 'o' | 'u' | 'F' | 't'\
    \ | 'e' | 'i' | 'o' | 'u' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += 0\n                    case 'a' | 't' | 'e' | 'i' | 'o' | 'u'\
    \ | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'B' | 't' | 'e' | 'i' | 'o' | 'u\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprj38qt9s.scala:43:127 ----------------------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                    \e[33mcase\e[0m \e[31m'a'\e[0m |\
    \ \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e\
    [0m | \e[31m'A'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e\
    [0m | \e[31m'u'\e[0m | \e[31m'B'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e\
    [0m | \e[31m'o'\e[0m | \e[31m'u\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \                                                                            \
    \                                 ^\e[0m\n\e[31m   |\e[0msymbol literal 'u is\
    \ no longer supported,\n\e[31m   |\e[0muse a string literal \"u\" or an application\
    \ Symbol(\"u\") instead,\n\e[31m   |\e[0mor enclose in braces '{u} if you want\
    \ a quoted expression.\n\e[31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprj38qt9s.scala:44:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=>' expected, but '}' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmprj38qt9s.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmprj38qt9s.scala:52:0 ----------------------------\e[0m\e[0m\n\e[31m52\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprj38qt9s.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprj38qt9s.scala:43:129 -------------"
  stdout: ''
  timestamp: 1659794994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.filter(_.isDigit).length\n\
    \            odds.add(numOdds)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_1hlpeo9.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val numOdds = str.count(_ == '1')\n\
    \            odds.add(numOdds)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqrf5iu_p.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) if(str.charAt(j)\
    \ match {\n                case '1' => odd.append('1')\n                case '0'\
    \ => odd.append('0')\n                case _ => odd.append(str.charAt(j))\n  \
    \          }) odd.clear()\n        }\n        odd.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nhabgaj.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => if (x.toString.toInt%2\
    \ == 1) odds += x.toString.toInt)\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwa_lxtzr.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val s = lst(i)\n            val n = s.toInt\n            val odd\
    \ = if (n % 2 == 1) 1 else 0\n            odds.add(odd)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpocc6wzz9.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds.add(str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds.add(str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'\
    \ | 'Z' => odds.add(str.charAt(j).toInt)\n                    case _ => odds.add(0)\n\
    \                }\n            }\n        }\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc8gnmulj.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            ')' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpc8gnmulj.scala:13:19 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) if(str.charAt(j)\
    \ isDigit) odds += (str.charAt(j).toInt - 48).toInt\n        }\n        odds.toList.map(str\
    \ => s\"the number of odd elements $strn the str$strn of the $strnput.\")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9ge6xuxb.scala:16:65 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m(j <- \e[31m0\e[0m until str.length)\
    \ \e[33mif\e[0m(str.charAt(j) isDigit) odds += (str.charAt(j).toInt - \e[31m48\e\
    [0m).toInt\n\e[31m\e[31m   |\e[0m                                            \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \       expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9ge6xuxb.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => {\n        \
    \    val digits = x.toInt\n            digits.foreach(d => {\n               \
    \ if (d % 2 == 1) odds += d\n            })\n        })\n        val result =\
    \ mutable.ListBuffer[String]()\n        odds.foreach(x => {\n            val str\
    \ = x.toString\n            val digits = str.substring(1, str.length)\n      \
    \      val count = digits.length\n            result += s\"the number of odd elements\
    \ $count the str$count of the $digits\"\n        })\n        result.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp990zno25.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp990zno25.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            digits.foreach(\e[36md\e[0m => {\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ foreach is not a member of Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp990zno25.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += (str.charAt(j).toInt\
    \ - '0').toInt\n                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'\
    \ | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't'\
    \ | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt - 'a').toInt\n\
    \                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'\
    \ | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V'\
    \ | 'W' | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt - 'A').toInt\n     \
    \               case '-' | '+' => odds += (str.charAt(j).toInt - '0').toInt\n\
    \                    case _ => odds += (str.charAt(j).toInt - 'a').toInt\n   \
    \             })\n            }\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp73rmkywk.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp73rmkywk.scala:13:19 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val numOdds = str.count(c => c % 2\
    \ != 0)\n            odds.add(numOdds)\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy9klbosn.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(_ == '1')\n\
    \            odds.add(numOdds)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpve628hd2.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[Int]\n        val even = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            digits\
    \ match {\n                case 0 => even.clear()\n                case _ => even.push(digits)\n\
    \            }\n        })\n        val odd_count = odd.toList\n        val even_count\
    \ = even.toList\n        odd_count.zip(even_count).map { case (odd, even) => s\"\
    the number of odd elements $odd n the str$even $x of the $xnput.\" }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8dgzob41.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp8dgzob41.scala:14:19 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => if (x.forall(_.isDigit))\
    \ odds += x.toInt)\n        odds match {\n            case Nil => Nil\n      \
    \      case x :: xs => x match {\n                case 0 => Nil\n            \
    \    case 1 => Nil\n                case _ => xs.map(x => s\"the number of odd\
    \ elements ${x} of the $x\").mkString(\",\")\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt34rt0l3.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpt34rt0l3.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m x :: xs => x \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpt34rt0l3.scala:20:26 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m _ => xs.map(x => \e[31ms\"\
    the number of odd elements \e[0m${x}\e[31m of the \e[0m$x\e[31m\"\e[0m).mkString(\e\
    [31m\",\"\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: xs\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(_ == '1')\n\
    \            odds.add(numOdds)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpve628hd2.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '9'\
    \ => odds += 2\n                    case '8' => odds -= 2\n                  \
    \  case '7' => odds += 3\n                    case '6' => odds -= 3\n        \
    \            case '5' => odds += 4\n                    case '4' => odds -= 4\n\
    \                    case '3' => odds += 5\n                    case '2' => odds\
    \ -= 5\n                    case '1' => odds += 6\n                    case '0'\
    \ => odds -= 6\n                    case '9' => odds += 7\n                  \
    \  case '8' => odds -= 7\n                    case '7' => odds += 8\n        \
    \            case '6' => odds -= 8\n                    case '5' => odds += 9\n\
    \                    case '4' => odds -= 9\n                    case '3' => odds\
    \ += 10\n                    case '2' => odds -= 10\n                    case\
    \ '1' => odds += 11\n                    case '0' => odds -= 11\n            \
    \        case '9' => odds += 12\n                    case '8' => odds -= 12\n\
    \                    case '7' => odds += 13\n                    case '6' => odds\
    \ -= 13\n                    case '5' => odds += 14\n                    case\
    \ '4' => odds -= 14\n                    case '3' => odds += 15\n            \
    \        case '2' => odds -= 15\n                    case '1' => odds += 16\n\
    \                    case '0' => odds -= 16\n                    case '9' => odds\
    \ += 17\n                    case '8' => odds -= 17\n                    case\
    \ '7' => odds += 18\n                    case '6' => odds -= 18\n            \
    \        case '5' => odds += 19\n                    case '4' => odds -= 19\n\
    \                    case '3' => odds += 20\n                    case '2' => odds\
    \ -= 20\n                    case '1' => odds += 21\n                    case\
    \ '0' => odds -= 21\n                    case '9' => odds += 22\n            \
    \        case '8' => odds -= 22\n                    case '7' => odds += 23\n\
    \                    case '6' => odds -= 23\n                    case '5' => odds\
    \ += 24\n                    case '4' => odds -= 24\n                    case\
    \ '3' => odds += 25\n                    case '2' => odds -= 25\n            \
    \        case '1' => odds += 26\n                    case '0' => odds -= 26\n\
    \                    case '9' => odds += 27\n                    case '8' => odds\
    \ -= 27\n                    case '7' => odds += 28\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyflqv9sh.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpyflqv9sh.scala:81:0 ----------------------------\e[0m\e[0m\n\e[31m81\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyflqv9sh.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpyflqv9sh.scala:80:0 -----------------\e\
    [0m\e[0m\n\e[33m78 |\e[0m    }\n\e[33m79 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.Set[Int]()\n        for(i <- 0 until lst.size) {\n     \
    \       val str = lst(i)\n            for(j <- 0 until str.length) {\n       \
    \         if(str.charAt(j) match {\n                    case '0' | '1' => odds\
    \ += 1\n                    case '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'\
    \ => odds += 2\n                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'\
    \ | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't'\
    \ | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds += 3\n                    case 'A'\
    \ | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N'\
    \ | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds\
    \ += 4\n                    case '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*'\
    \ | '(' | ')' | '-' | '+' | '=' | '/' | ':' | ';' | '<' | '>' | '?' | '[' | ']'\
    \ | '\\\\' | '{' | '|' | '}' | ':-' | ':+' | ';-' | ';+' | ':-:' | ':+:' | ':-:+'\
    \ | ':+:+' | ':-:+:' | ':+:+:' | ':-:+:+' | ':+:+:+' | ':-:+:+:' | ':+:+:+:' |\
    \ ':-:+:+:' | ':+:+:+:' | ':-:+:+:' | ':+:+:+:' | ':-:+:+:' | ':+:+:+:' | ':-:+:+:'\
    \ | ':+:+:+:' | ':-:+:+:' | ':+:+:+:' | ':-:+:+:' | ':+:+:+:' | ':-:+:+:' | ':+:+:+:'\
    \ | ':-:+:+:' | ':+:+:+:' | ':-:+:+:' | ':+:+:+:' | ':-:+:+:' | ':+:+:+:' | ':-:+:+:'\
    \ | ':+:+:+:' | ':-:+:+:' | ':+:+:+:' | ':\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcgpf_8mf.scala:22:176 ----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mcase\e[0m \e[31m'!'\e[0m |\
    \ \e[31m'@'\e[0m | \e[31m'#'\e[0m | \e[31m'$'\e[0m | \e[31m'%'\e[0m | \e[31m'^'\e\
    [0m | \e[31m'&'\e[0m | \e[31m'*'\e[0m | \e[31m'('\e[0m | \e[31m')'\e[0m | \e[31m'-'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'='\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e\
    [0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'['\e[0m | \e[31m']'\e\
    [0m | \e[31m'\\\\'\e[0m | \e[31m'{'\e[0m | \e[31m'|'\e[0m | \e[31m'}'\e[0m | \e\
    [31m':-\e[0m' | \e[31m':+\e[0m' | ';-' | ';+' | \e[31m':-:\e[0m' | \e[31m':+:\e\
    [0m' | \e[31m':-:+\e[0m' | \e[31m':+:+\e[0m' | \e[31m':-:+:\e[0m' | \e[31m':+:+:\e\
    [0m' | \e[31m':-:+:+\e[0m' | \e[31m':+:+:+\e[0m' | \e[31m':-:+:+:\e[0m' | \e[31m':+:+:+:\e\
    [0m' | \e[31m':-:+:+:\e[0m' | \e[31m':+:+:+:\e[0m' | \e[31m':-:+:+:\e[0m' | \e\
    [31m':+:+:+:\e[0m' | \e[31m':-:+:+:\e[0m' | \e[31m':+:+:+:\e[0m' | \e[31m':-:+:+:\e\
    [0m' | \e[31m':+:+:+:\e[0m' | \e[31m':-:+:+:\e[0m' | \e[31m':+:+:+:\e[0m' | \e\
    [31m':-:+:+:\e[0m' | \e[31m':+:+:+:\e[0m' | \e[31m':-:+:+:\e[0m' | \e[31m':+:+:+:\e\
    [0m' | \e[31m':-:+:+:\e[0m' | \e[31m':+:+:+:\e[0m' | \e[31m':-:+:+:\e[0m' | \e\
    [31m':+:+:+:\e[0m' | \e[31m':-:+:+:\e[0m' | \e[31m':+:+:+:\e[0m' | \e[31m':-:+:+:\e\
    [0m' | \e[31m':+:+:+:\e[0m' | \e[31m':-:+:+:\e[0m' | \e[31m':+:+:+:\e[0m' | \e\
    [31m':\e[0m\n\e[31m\e[31m   |\e[0m                                           \
    \                                                                            \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0msymbol literal ':- is no longer supported,\n\e[31m   |\e[0muse a string literal\
    \ \":-\" or an application Symbol(\":-\") instead,\n\e[31m   |\e[0mor enclose\
    \ in braces '{:-} if you want a quoted expression.\n\e[31m   |\e[0mFor now, you\
    \ can also `import language.deprecated.symbolLiterals` to accept\n\e[31m   |\e\
    [0mthe idiom, but this possibility might no longer be available in the future.\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcgpf_8mf.scala:22:179 --------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mcase\e[0m \e[31m'!'\e[0m |\
    \ \e[31m'@'\e[0m | \e[31m'#'\e[0m"
  stdout: ''
  timestamp: 1659794993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach { s =>\n    \
    \        val numOdds = s.length - s.filter(_.isDigit).length\n            odds.add(numOdds)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjjjk4oe3.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val digits = str.filter(_.isDigit)\n\
    \            val odd = digits.length filter (x => x % 2 != 0)\n            odds.add(odd.length)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppqrdlpww.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmppqrdlpww.scala:17:36 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = digits.length\
    \ filter (\e[36mx\e[0m => x % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \            value filter is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659794994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(s => {\n        \
    \    val digits = s.toInt\n            digits match {\n                case 0\
    \ => ()\n                case _ => odds += digits\n            }\n        })\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqg7hbgcq.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x != '0').count(x => x % 2 != 0)\n            odd += oddDigits\n        }\n\
    \        odd.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzlxwdkag.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOddDigits = str.count(_\
    \ == '1')\n            odd += numOddDigits\n        }\n        odd.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjdi6tech.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val digits = x.toInt\n            digits match {\n                case\
    \ 0 => ()\n                case _ => {\n                    val odd = digits %\
    \ 2\n                    odds.add(odd)\n                }\n            }\n   \
    \     })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnxv8yje9.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case _\
    \ => ()\n                }) \n            }\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqxfnqqp5.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpqxfnqqp5.scala:13:19 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpqxfnqqp5.scala:20:30 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    \e[33mcase\e[0m _ => ()\n\e[31m\e\
    [31m   |\e[0m                              ^^\e[0m\n\e[31m   |\e[0m          \
    \                    Found:    Unit\n\e[31m   |\e[0m                         \
    \     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => if (x.toString.toInt%2\
    \ == 1) odds += x.toString.toInt)\n        (lst zip odds).map { case (str, odd)\
    \ => s\"the number of odd elements $odd of the $str\" }.mkString(\"\\n\")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpini8yk_d.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpini8yk_d.scala:15:105 -------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        (lst zip odds).map { \e[33mcase\e[0m (str, odd)\
    \ => \e[31ms\"the number of odd elements \e[0m$odd\e[31m of the \e[0m$str\e[31m\"\
    \e[0m }.mkString(\e[31m\"\\n\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount = 0\n        var oddDigits = 0\n        var oddString = \"\"\n\
    \        for(i <- 0 until lst.length){\n            for(j <- 0 until lst(i).length){\n\
    \                if(lst(i)(j).isDigit){\n                    oddDigits += 1\n\
    \                }\n            }\n            oddCount += oddDigits\n       \
    \     oddDigits = 0\n            oddString = \"\"\n        }\n        oddCount\
    \ += oddDigits\n        oddCount += lst.length\n        oddCount += lst.length\n\
    \        oddCount += lst.length\n        oddCount += lst.length\n        oddCount\
    \ += lst.length\n        oddCount += lst.length\n        oddCount += lst.length\n\
    \        oddCount += lst.length\n        oddCount += lst.length\n        oddCount\
    \ += lst.length\n        oddCount += lst.length\n        oddCount += lst.length\n\
    \        oddCount += lst.length\n        oddCount += lst.length\n        oddCount\
    \ += lst.length\n        oddCount += lst.length\n        oddCount += lst.length\n\
    \        oddCount += lst.length\n        oddCount += lst.length\n        oddCount\
    \ += lst.length\n        oddCount += lst.length\n        oddCount += lst.length\n\
    \        oddCount += lst.length\n        oddCount += lst.length\n        oddCount\
    \ += lst.length\n        oddCount += lst.length\n        oddCount += lst.length\n\
    \        oddCount += lst.length\n        oddCount += lst.length\n        oddCount\
    \ += lst.length\n        oddCount += lst.length\n        oddCount += lst.length\n\
    \        oddCount += lst.length\n        oddCount += lst.length\n        oddCount\
    \ += lst.length\n        oddCount += lst.length\n        oddCount += lst.length\n\
    \        oddCount += lst.length\n        oddCount += lst.length\n        oddCount\
    \ += lst.length\n        oddCount += lst.length\n        oddCount += lst.length\n\
    \        oddCount += lst.length\n        oddCount += lst.length\n        oddCount\
    \ += lst.length\n        oddCount += lst.length\n        oddCount += lst.length\n\
    \        oddCount += lst.length\n        oddCount += lst.length\n        oddCount\
    \ += lst.length\n        oddCount += lst.length\n        oddCount += lst.length\n\
    \        oddCount += lst.length\n        oddCount += lst.length\n        oddCount\
    \ += lst.length\n        oddCount += lst.length\n        oddCount += lst.length\n\
    \        oddCount += lst.length\n        oddCount += lst.length\n        oddCount\
    \ += lst.length\n        oddCount += lst.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzeyhwlxg.scala:87:8\
    \ ---------------------\e[0m\e[0m\n\e[31m87 |\e[0m        oddCount += lst.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    Unit\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659795002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) == '1') {\n                    odds += (str.length\
    \ - j)\n                }\n            }\n        }\n        odds.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplfexruec.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '9'\
    \ => odds -= 1\n                    case '8' => odds += 1\n                  \
    \  case '7' => odds += 1\n                    case '6' => odds += 1\n        \
    \            case '5' => odds += 1\n                    case '4' => odds += 1\n\
    \                    case '3' => odds += 1\n                    case '2' => odds\
    \ += 1\n                    case '1' => odds += 1\n                    case '0'\
    \ => odds += 1\n                    case '9' => odds += 1\n                  \
    \  case '8' => odds += 1\n                    case '7' => odds += 1\n        \
    \            case '6' => odds += 1\n                    case '5' => odds += 1\n\
    \                    case '4' => odds += 1\n                    case '3' => odds\
    \ += 1\n                    case '2' => odds += 1\n                    case '1'\
    \ => odds += 1\n                    case '0' => odds += 1\n                  \
    \  case '9' => odds += 1\n                    case '8' => odds += 1\n        \
    \            case '7' => odds += 1\n                    case '6' => odds += 1\n\
    \                    case '5' => odds += 1\n                    case '4' => odds\
    \ += 1\n                    case '3' => odds += 1\n                    case '2'\
    \ => odds += 1\n                    case '1' => odds += 1\n                  \
    \  case '0' => odds += 1\n                    case '9' => odds += 1\n        \
    \            case '8' => odds += 1\n                    case '7' => odds += 1\n\
    \                    case '6' => odds += 1\n                    case '5' => odds\
    \ += 1\n                    case '4' => odds += 1\n                    case '3'\
    \ => odds += 1\n                    case '2' => odds += 1\n                  \
    \  case '1' => odds += 1\n                    case '0' => odds += 1\n        \
    \            case '9' => odds += 1\n                    case '8' => odds += 1\n\
    \                    case '7' => odds += 1\n                    case '6' => odds\
    \ += 1\n                    case '5' => odds += 1\n                    case '4'\
    \ => odds += 1\n                    case '3' => odds += 1\n                  \
    \  case '2' => odds += 1\n                    case '1' => odds += 1\n        \
    \            case '0' => odds += 1\n                    case '9' => odds += 1\n\
    \                    case '8' => odds += 1\n                    case '7' => odds\
    \ += 1\n                    case '6' => odds += 1\n                    case '5'\
    \ => odds += 1\n                    case '4' => odds += 1\n                  \
    \  case '3' => odds += 1\n                    case '2' => odds += 1\n        \
    \            case '1' => odds += 1\n                    case '0' => odds += 1\n\
    \                    case '9' => odds += 1\n                    case '8' => odds\
    \ += 1\n                    case '7' => odds += 1\n                    case '6'\
    \ => odds += 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp46zz6js.scala:86:4 ----------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpp46zz6js.scala:93:0 ----------------------------\e[0m\e[0m\n\e[31m93\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp46zz6js.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpp46zz6js.scala:92:0 -----------------\e\
    [0m\e[0m\n\e[33m90 |\e[0m    }\n\e[33m91 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount = 0\n        var oddDigits = 0\n        var oddDigitString = \"\
    \"\n        var oddDigitStrings: List[String] = Nil\n        var oddDigitStringsLength\
    \ = 0\n        var oddDigitStringsLengthMax = 0\n        var oddDigitStringsLengthMin\
    \ = 0\n        var oddDigitStringsLengthMaxMin = 0\n        var oddDigitStringsLengthMinMax\
    \ = 0\n        var oddDigitStringsLengthMinMaxMin = 0\n        var oddDigitStringsLengthMinMaxMin\
    \ = 0\n        var oddDigitStringsLengthMinMaxMinMin = 0\n        var oddDigitStringsLengthMinMaxMinMin\
    \ = 0\n        var oddDigitStringsLengthMinMaxMinMin = 0\n        var oddDigitStringsLengthMinMaxMinMin\
    \ = 0\n        var oddDigitStringsLengthMinMaxMinMin = 0\n        var oddDigitStringsLengthMinMaxMinMin\
    \ = 0\n        var oddDigitStringsLengthMinMaxMinMin = 0\n        var oddDigitStringsLengthMinMaxMinMin\
    \ = 0\n        var oddDigitStringsLengthMinMaxMinMin = 0\n        var oddDigitStringsLengthMinMaxMinMin\
    \ = 0\n        var oddDigitStringsLengthMinMaxMinMin = 0\n        var oddDigitStringsLengthMinMaxMinMin\
    \ = 0\n        var oddDigitStringsLengthMinMaxMinMin = 0\n        var oddDigitStringsLengthMinMaxMinMin\
    \ = 0\n        var oddDigitStringsLengthMinMaxMinMin = 0\n        var oddDigitStringsLengthMinMaxMinMin\
    \ = 0\n        var oddDigitStringsLengthMinMaxMinMin = 0\n        var oddDigitStringsLengthMinMaxMinMin\
    \ = 0\n        var oddDigitStringsLengthMinMaxMinMin = 0\n        var oddDigitStringsLengthMinMaxMinMin\
    \ = 0\n        var oddDigitStringsLengthMinMaxMinMin = 0\n        var oddDigitStringsLengthMinMaxMinMin\
    \ = 0\n        var oddDigitStringsLengthMinMaxMinMin = 0\n        var oddDigitStringsLengthMinMaxMinMin\
    \ = 0\n        var oddDigitStringsLengthMinMaxMinMin = 0\n        var oddDigitStringsLengthMinMaxMinMin\
    \ = 0\n        var oddDigitStringsLengthMinMaxMinMin = 0\n        var oddDigitStringsLengthMinMaxMinMin\
    \ = 0\n        var oddDigitStringsLengthMinMaxMinMin = 0\n        var oddDigitStringsLengthMinMaxMinMin\
    \ = 0\n        var oddDigitStringsLengthMinMaxMinMin = 0\n        var oddDigitStringsLengthMinMaxMinMin\
    \ = 0\n        var oddDigitStringsLengthMinMaxMinMin = 0\n        var oddDigitStringsLengthMinMaxMinMin\
    \ = 0\n        var oddDigitStringsLengthMinMaxMinMin\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy6y84wpi.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy6y84wpi.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m\
    \ \e[36moddDigitStringsLengthMinMaxMin\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0moddDigitStringsLengthMinMaxMin\
    \ is already defined as \e[33mvariable\e[0m \e[35moddDigitStringsLengthMinMaxMin\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy6y84wpi.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mvar\e[0m \e[36moddDigitStringsLengthMinMaxMinMin\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddDigitStringsLengthMinMaxMinMin is already defined as \e\
    [33mvariable\e[0m \e[35moddDigitStringsLengthMinMaxMinMin\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy6y84wpi.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m\
    \ \e[36moddDigitStringsLengthMinMaxMinMin\e[0m = \e[31m0\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0moddDigitStringsLengthMinMaxMinMin\
    \ is already defined as \e[33mvariable\e[0m \e[35moddDigitStringsLengthMinMaxMinMin\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy6y84wpi.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mvar\e[0m \e[36moddDigitStringsLengthMinMaxMinMin\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddDigitStringsLengthMinMaxMinMin is already defined as \e\
    [33mvariabl"
  stdout: ''
  timestamp: 1659795002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[String]\n        val even = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val numOddDigits = str.count(x => x % 2 == 1)\n            if(numOddDigits\
    \ > 0) {\n                odd += s\"the number of odd elements $numOddDigits of\
    \ the $str\"\n            } else {\n                even += s\"the number of odd\
    \ elements $numOddDigits of the $str\"\n            }\n        }\n        odd.toList\
    \ ::: even.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl1ytr7g7.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpl1ytr7g7.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount = 0\n        for(i <- 0 until lst.length){\n            val str\
    \ = lst(i)\n            val numOddDigits = str.count(_ == '1')\n            oddCount\
    \ += numOddDigits\n        }\n        oddCount.toList.map(x => s\"the number of\
    \ odd elements ${x} of the $x string.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2_ksd3et.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        oddCount.toList.map(\e[36mx\e[0m => \e[31ms\"\
    the number of odd elements \e[0m${x}\e[31m of the \e[0m$x\e[31m string.\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ toList is not a member of Int - did you mean Int.toInt?\n1 error found\n"
  stdout: ''
  timestamp: 1659795002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              val digit = str.charAt(j)\n                if(digit == '1') {\n\
    \                    odds.add(1)\n                }\n                else {\n\
    \                    odds.add(0)\n                }\n            }\n        }\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpohvtohyl.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length)\n\
    \                if(str.charAt(j) match {\n                    case '1' => odd.add(1)\n\
    \                    case '0' => odd.add(0)\n                    case '9' => odd.add(9)\n\
    \                    case 'a' => odd.add(10)\n                    case 'b' =>\
    \ odd.add(11)\n                    case 'c' => odd.add(12)\n                 \
    \   case 'd' => odd.add(13)\n                    case 'e' => odd.add(14)\n   \
    \                 case 'f' => odd.add(15)\n                    case 'A' => odd.add(10)\n\
    \                    case 'B' => odd.add(11)\n                    case 'C' =>\
    \ odd.add(12)\n                    case 'D' => odd.add(13)\n                 \
    \   case 'E' => odd.add(14)\n                    case 'F' => odd.add(15)\n   \
    \                 case '0' => odd.add(0)\n                    case '1' => odd.add(1)\n\
    \                    case '2' => odd.add(2)\n                    case '3' => odd.add(3)\n\
    \                    case '4' => odd.add(4)\n                    case '5' => odd.add(5)\n\
    \                    case '6' => odd.add(6)\n                    case '7' => odd.add(7)\n\
    \                    case '8' => odd.add(8)\n                    case '9' => odd.add(9)\n\
    \                    case 'a' => odd.add(10)\n                    case 'b' =>\
    \ odd.add(11)\n                    case 'c' => odd.add(12)\n                 \
    \   case 'd' => odd.add(13)\n                    case 'e' => odd.add(14)\n   \
    \                 case 'f' => odd.add(15)\n                    case 'A' => odd.add(10)\n\
    \                    case 'B' => odd.add(11)\n                    case 'C' =>\
    \ odd.add(12)\n                    case 'D' => odd.add(13)\n                 \
    \   case 'E' => odd.add(14)\n                    case 'F' => odd.add(15)\n   \
    \                 case '0' => odd.add(0)\n                    case '1' => odd.add(1)\n\
    \                    case '2' => odd.add(2)\n                    case '3' => odd.add(3)\n\
    \                    case '4' => odd.add(4)\n                    case '5' => odd.add(5)\n\
    \                    case '6' => odd.add(6)\n                    case '7' => odd.add(7)\n\
    \                    case '8' => odd.add(8)\n                    case '9' => odd.add(9)\n\
    \                    case 'a' => odd.add(10)\n                    case 'b' =>\
    \ odd.add(11)\n                    case 'c' => odd.add(12)\n                 \
    \   case 'd' => odd.add(13)\n                    case 'e' => od\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp01t_allj.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp01t_allj.scala:78:0 ----------------------------\e[0m\e[0m\n\e[31m78\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp01t_allj.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp01t_allj.scala:69:32 ------------------------\e[0m\e\
    [0m\n\e[31m69 |\e[0m                    \e[33mcase\e[0m \e[31m'e'\e[0m => od\n\
    \e[31m\e[31m   |\e[0m                                ^^\e[0m\n\e[31m   |\e[0m\
    \                                Not found: od\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmp01t_allj.scala:77:0 -----------------\e\
    [0m\e[0m\n\e[33m75 |\e[0m    }\n\e[33m76 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                val digit = str.charAt(j)\n                if(digit == '1') {\n\
    \                    odds.add(1)\n                }\n                else if(digit\
    \ == '0') {\n                    odds.add(0)\n                }\n            \
    \    else {\n                    odds.add(0)\n                }\n            }\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpois8u9fj.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              val digit = str.charAt(j)\n                if(digit == '1') {\n\
    \                    odds.add(1)\n                }\n                else if(digit\
    \ == '0') {\n                    odds.add(0)\n                }\n            }\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp21sh6ji1.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount = 0\n        var oddCountString = \"\"\n        var oddCountString2\
    \ = \"\"\n        var oddCountString3 = \"\"\n        var oddCountString4 = \"\
    \"\n        var oddCountString5 = \"\"\n        var oddCountString6 = \"\"\n \
    \       var oddCountString7 = \"\"\n        var oddCountString8 = \"\"\n     \
    \   var oddCountString9 = \"\"\n        var oddCountString10 = \"\"\n        var\
    \ oddCountString11 = \"\"\n        var oddCountString12 = \"\"\n        var oddCountString13\
    \ = \"\"\n        var oddCountString14 = \"\"\n        var oddCountString15 =\
    \ \"\"\n        var oddCountString16 = \"\"\n        var oddCountString17 = \"\
    \"\n        var oddCountString18 = \"\"\n        var oddCountString19 = \"\"\n\
    \        var oddCountString20 = \"\"\n        var oddCountString21 = \"\"\n  \
    \      var oddCountString22 = \"\"\n        var oddCountString23 = \"\"\n    \
    \    var oddCountString24 = \"\"\n        var oddCountString25 = \"\"\n      \
    \  var oddCountString26 = \"\"\n        var oddCountString27 = \"\"\n        var\
    \ oddCountString28 = \"\"\n        var oddCountString29 = \"\"\n        var oddCountString30\
    \ = \"\"\n        var oddCountString31 = \"\"\n        var oddCountString32 =\
    \ \"\"\n        var oddCountString33 = \"\"\n        var oddCountString34 = \"\
    \"\n        var oddCountString35 = \"\"\n        var oddCountString36 = \"\"\n\
    \        var oddCountString37 = \"\"\n        var oddCountString38 = \"\"\n  \
    \      var oddCountString39 = \"\"\n        var oddCountString40 = \"\"\n    \
    \    var oddCountString41 = \"\"\n        var oddCountString42 = \"\"\n      \
    \  var oddCountString43 = \"\"\n        var oddCountString44 = \"\"\n        var\
    \ oddCountString45 = \"\"\n        var oddCountString46 = \"\"\n        var oddCountString47\
    \ = \"\"\n        var oddCountString48 = \"\"\n        var oddCountString49 =\
    \ \"\"\n        var oddCountString50 = \"\"\n        var oddCountString51 = \"\
    \"\n        var oddCountString52 = \"\"\n        var oddCountString53 = \"\"\n\
    \        var oddCountString54 = \"\"\n        var oddCountString55 = \"\"\n  \
    \      var oddCountString56 = \"\"\n        var oddCountString57 = \"\"\n    \
    \    var oddCountString58 = \"\"\n        var oddCountString59 = \"\"\n      \
    \  var oddCountString60 = \"\"\n        var oddCountString61 = \"\"\n        var\
    \ oddCountString62 = \"\"\n        var oddCountString63 = \"\"\n        var oddCountString64\
    \ = \"\"\n        var oddCountString65 = \"\"\n        var oddCountString66 =\
    \ \"\"\n        var oddCountString67 = \"\"\n        var oddCountString68 = \"\
    \"\n        var oddCountString69 = \"\"\n        var oddCountString70 = \"\"\n\
    \        var oddCountString7\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptfuuf0bo.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptfuuf0bo.scala:85:5 ---------------------\e[0m\e[0m\n\e[31m85 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) odds\
    \ += (str.charAt(j).asDigit).asDigit\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2a2gu74h.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_ match\
    \ {\n                case x if x.isDigit => true\n                case _ => false\n\
    \            }).length\n            odds.add(oddDigits)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpokeebuh8.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => if (x.toString.toInt%2\
    \ == 1) odds += x.toString.toInt)\n        odds.toList.map(x => s\"the number\
    \ of odd elements $x of the $x input.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnglfn9_s.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => {\n        \
    \    val digits = x.toInt\n            for(i <- 0 until digits) {\n          \
    \      if(digits % 2 == 1) {\n                    odds.add(digits)\n         \
    \       }\n            }\n        })\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp74y5e04v.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.isDigit) {\n                    val digit = str.charAt(j)\n\
    \                    if(digit == '1') {\n                        odds.add(1)\n\
    \                    } else if(digit == '0') {\n                        odds.add(0)\n\
    \                    }\n                }\n            }\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_gqps0_.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpk_gqps0_.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m(str.isDigit) {\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \       value isDigit is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659795002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x.isDigit).length\n            odds.add(oddDigits)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp25u24o7v.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu9ssvvtx.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) == '1') {\n                    odds.add(1)\n\
    \                }\n            }\n        }\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptz3iadll.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach { s =>\n    \
    \        val n = s.toInt\n            val odd = n % 2 == 1\n            if (odd)\
    \ odds.push(n)\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaq89fa6z.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => if (x.toString.toInt%2\
    \ == 1) odds += x.toString.toInt)\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwa_lxtzr.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val odd_count = str.count(x =>\
    \ x % 2 != 0)\n            odd.append(s\"the number of odd elements $odd_count\
    \ the str$i of the $i\")\n        }\n        odd.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxoyop5s8.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) == '1') {\n                    odds += (str.length.toInt\
    \ - j.toInt)\n                }\n            }\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0dd1dkj0.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.count(_ ==\
    \ '1')\n            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxz8gaxa6.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => s.toInts.foreach(i\
    \ => if (i % 2 == 1) odds += 1))\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsspz4ac2.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpsspz4ac2.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        lst.foreach(\e[36ms\e[0m => s.toInts.foreach(\e\
    [36mi\e[0m => \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m1\e[0m) odds += \e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         value toInts is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => if (x.toString.toInt%2\
    \ == 1) odds += x.toString.toInt)\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnah1vwou.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds.add(str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds.add(str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'\
    \ | 'Z' => odds.add(str.charAt(j).toInt)\n                    case '@' => odds.add(0)\n\
    \                    case '!' => odds.add(1)\n                    case '?' =>\
    \ odds.add(2)\n                    case '#' => odds.add(3)\n                 \
    \   case '$' => odds.add(4)\n                    case '%' => odds.add(5)\n   \
    \                 case '^' => odds.add(6)\n                    case '&' => odds.add(7)\n\
    \                    case '*' => odds.add(8)\n                    case '(' | ')'\
    \ | '+' | ',' | '.' | '/' | ':' | ';' | '<' | '>' | '=' | '>=' | '<=' | '!='\n\
    \                    case '|' | '[' | ']' | '{' | '}' | ':=' | '::' | ':/' | ':+'\
    \ | '@=' | '@:' | '@/' | '@+' | '@-' | '@*' | '@/=' | '@:=' | '@:=/' | '@:=+'\
    \ | '@:=-' | '@:*=' | '@:*=/' | '@:*=+' | '@:*=-' | '@:*=-/' | '@:*=-+' | '@:*=-/='\
    \ | '@:*=/=' | '@:*=/=+' | '@:*=/=-' | '@:*=/=-+' | '@:*=/=-/' | '@:*=/=/' | '@:*=/=/=+'\
    \ | '@:*=/=/=-' | '@:*=/=/=-+' | '@:*=/=/=-/' | '\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmph917na1b.scala:30:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    \e[33mcase\e[0m \e[31m'('\e[0m |\
    \ \e[31m')'\e[0m | \e[31m'+'\e[0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e\
    [0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'='\e\
    [0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m' | \e[31m'!=\e[0m'\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                 ^\e[0m\n\e[31m   |\e[0msymbol literal '>= is no longer supported,\n\
    \e[31m   |\e[0muse a string literal \">=\" or an application Symbol(\">=\") instead,\n\
    \e[31m   |\e[0mor enclose in braces '{>=} if you want a quoted expression.\n\e\
    [31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph917na1b.scala:30:94\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                    \e\
    [33mcase\e[0m \e[31m'('\e[0m | \e[31m')'\e[0m | \e[31m'+'\e[0m | \e[31m','\e[0m\
    \ | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m | \e[31m'='\e[0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m' | \e\
    [31m'!=\e[0m'\n\e[31m\e[31m   |\e[0m                                         \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                              '=>' expected, but ' found\n\e\
    [31m\e[31m-- Error: /tmp/tmph917na1b.scala:30:108 ----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    \e[33mcase\e[0m \e[31m'('\e[0m |\
    \ \e[31m')'\e[0m | \e[31m'+'\e[0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e\
    [0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'='\e\
    [0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m' | \e[31m'!=\e[0m'\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                           unclosed character literal\n\e[31m\e[31m-- Error:\
    \ /tmp/tmph917na1b.scala:31:372 ----"
  stdout: ''
  timestamp: 1659795008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '0' | '1' |\
    \ '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += (str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'\
    \ | 'Z' => odds += (str.charAt(j).toInt)\n                    case '!' | '@' |\
    \ '#' | '%' | '^' | '&' | '*' | '(' | ')' | '-' | '+' | '=' | '/' | ':' | ';'\
    \ | '<' | '>' | '?' | '[' | ']' | '\\\\' | \"'\" | '~' => odds += (str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'\
    \ | 'Z' => odds += (str.charAt(j).toInt)\n                    case '!' | '@' |\
    \ '#' | '%' | '^' | '&' | '*' | '(' | ')' | '-' | '+' | '=' | '/' | ':' | ';'\
    \ | '<' | '>' | '?' | '[' | ']' | '\\\\' | \"'\" | '~' => odds += (str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds += (str\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpelems0gv.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpelems0gv.scala:27:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpelems0gv.scala:34:0 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpelems0gv.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpelems0gv.scala:21:152 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mcase\e[0m \e[31m'!'\e[0m |\
    \ \e[31m'@'\e[0m | \e[31m'#'\e[0m | \e[31m'%'\e[0m | \e[31m'^'\e[0m | \e[31m'&'\e\
    [0m | \e[31m'*'\e[0m | \e[31m'('\e[0m | \e[31m')'\e[0m | \e[31m'-'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'='\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'['\e[0m | \e[31m']'\e[0m | \e[31m'\\\
    \\'\e[0m | \e[31m\"'\"\e[0m | \e[31m'~'\e[0m => odds += (str.charAt(j).toInt)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                    ^^^\e[0m\n\e[31m   |\e[0m        Values of types String and\
    \ Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpelems0gv.scala:24:152\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \
    \            \e[33mcase\e[0m \e[31m'!'\e[0m | \e[31m'@'\e[0m | \e[31m'#'\e[0m\
    \ | \e[31m'%'\e[0m | \e[31m'^'\e[0m | \e[31m'&'\e[0m | \e[31m'*'\e[0m"
  stdout: ''
  timestamp: 1659795010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n    \
    \        val numOdds = s.length - s.filter(_.isDigit).length\n            odds.+=(numOdds)\n\
    \        })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9f6lw5fy.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => if (x.toString.toInt%2\
    \ == 1) odds += x.toString.toInt)\n        odds.toList.map(x => s\"the number\
    \ of odd elements $x of the $x input.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnglfn9_s.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n    \
    \        val n = s.toInt\n            for(i <- 0 until n) odds += n\n        })\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoibjb96v.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => if (x.toString.toInt%2\
    \ == 1) odds += x.toString.toInt)\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnah1vwou.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer[Int]()\n        val even = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => {\n            val n = x.toInt\n            if (n %\
    \ 2 == 0) {\n                even.append(n)\n            } else {\n          \
    \      odd.append(n)\n            }\n        })\n        odd.toList ::: even.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpksjs0qzd.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpksjs0qzd.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length)\n    \
    \            if(str.charAt(j) match {\n                    case '1' => odds +=\
    \ 1\n                    case '0' => odds -= 1\n                    case '1' =>\
    \ odds += 1\n                    case '0' => odds -= 1\n                    case\
    \ '1' => odds += 1\n                    case '0' => odds -= 1\n              \
    \      case '1' => odds += 1\n                    case '0' => odds -= 1\n    \
    \                case '1' => odds += 1\n                    case '0' => odds -=\
    \ 1\n                    case '1' => odds += 1\n                    case '0' =>\
    \ odds -= 1\n                    case '1' => odds += 1\n                    case\
    \ '0' => odds -= 1\n                    case '1' => odds += 1\n              \
    \      case '0' => odds -= 1\n                    case '1' => odds += 1\n    \
    \                case '0' => odds -= 1\n                    case '1' => odds +=\
    \ 1\n                    case '0' => odds -= 1\n                    case '1' =>\
    \ odds += 1\n                    case '0' => odds -= 1\n                    case\
    \ '1' => odds += 1\n                    case '0' => odds -= 1\n              \
    \      case '1' => odds += 1\n                    case '0' => odds -= 1\n    \
    \                case '1' => odds += 1\n                    case '0' => odds -=\
    \ 1\n                    case '1' => odds += 1\n                    case '0' =>\
    \ odds -= 1\n                    case '1' => odds += 1\n                    case\
    \ '0' => odds -= 1\n                    case '1' => odds += 1\n              \
    \      case '0' => odds -= 1\n                    case '1' => odds += 1\n    \
    \                case '0' => odds -= 1\n                    case '1' => odds +=\
    \ 1\n                    case '0' => odds -= 1\n                    case '1' =>\
    \ odds += 1\n                    case '0' => odds -= 1\n                    case\
    \ '1' => odds += 1\n                    case '0' => odds -= 1\n              \
    \      case '1' => odds += 1\n                    case '0' => odds -= 1\n    \
    \                case '1' => odds += 1\n                    case '0' => odds -=\
    \ 1\n                    case '1' => odds += 1\n                    case '0' =>\
    \ odds -= 1\n                    case '1' => odds += 1\n                    case\
    \ '0' => odds -= 1\n                    case '1' => odds += 1\n              \
    \      case '0' => odds -= 1\n                    case '1' => odds += 1\n    \
    \                case '0' => odds -= 1\n                    case '1' => odds +=\
    \ 1\n                    case '0' => odds -= 1\n                    case '1' =>\
    \ odds += 1\n                    case '0' => odds -= 1\n                    case\
    \ '1' => odds += 1\n                    case '0' => odds -= 1\n              \
    \      case '1' => odds += 1\n                    case '0' => odds \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu4c9zoa1.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpu4c9zoa1.scala:88:0 ----------------------------\e[0m\e[0m\n\e[31m88\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu4c9zoa1.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpu4c9zoa1.scala:87:0 -----------------\e\
    [0m\e[0m\n\e[33m85 |\e[0m    }\n\e[33m86 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x != '0').count(x => x != '1')\n            odds.add(oddDigits)\n        }\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv3r60vvt.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val digits = x.toInt\n            digits.foreach(d => {\n           \
    \     if (d % 2 == 1) odds += d\n            })\n        })\n        odds.toList.map(x\
    \ => s\"the number of odd elements $x of the $x input.\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz6cqwi1f.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpz6cqwi1f.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            digits.foreach(\e[36md\e[0m => {\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ foreach is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659795011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) == '1') {\n                    odds.add(1)\n \
    \               }\n            }\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppd999cu8.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) if(str.charAt(j)\
    \ match {\n                case '1' => odds += 1\n                case '0' =>\
    \ odds += 0\n                case _ => odds += 0\n            })\n        }\n\
    \        odds.toList.map(x => s\"the number of odd elements $x of the $x input.\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6k70mzfv.scala:21:8 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp6k70mzfv.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.length)\n\
    \            if (lst(i).forall(_.isDigit))\n                for (j <- 0 until\
    \ lst(i).length)\n                    if (lst(i)(j).isDigit)\n               \
    \         odds += (lst(i)(j).asDigit)\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfwbej7k9.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += (str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'\
    \ | 'Z' => odds += (str.charAt(j).toInt)\n                    case '!' | '@' |\
    \ '#' | '%' | '^' | '&' | '*' | '(' | ')' | '-' | '+' | '=' | '>' | '<' | '>='\
    \ | '<=' | ':' | ';' | '<' | '>' | '?' | '.' | '~' | ',' | ':' | ';' | '<' | '>'\
    \ | '?' | '.' | '~' | ',' | ':' | ';' | '<' | '>' | '?' | '.' | '~' | ',' | ':'\
    \ | ';' | '<' | '>' | '?' | '.' | '~' | ',' | ':' | ';' | '<' | '>' | '?' | '.'\
    \ | '~' | ',' | ':' | ';' | '<' | '>' | '?' | '.' | '~' | ',' | ':' | ';' | '<'\
    \ | '>' | '?' | '.' | '~' | ',' | ':' | ';' | '<' | '>' | '?' | '.' | '~' | ','\
    \ | ':' | ';' | '<' | '>' | '?' | '.' | '~' | ',' | ':' | ';' | '<' | '>' | '?'\
    \ | '.' | '~' | ',' | ':' | ';' | '<' | '>' | '?' | '.' | '~' | ',' | ':' | ';'\
    \ | '<' | '>' | '?' | '.' | '~' | ',' | ':' | ';' | '<' | '>' | '?' | '.' | '~'\
    \ | ',' | ':' | ';' | '<' | '>' | '?' | '.' | '~' | ',' | ':' | ';' | '<' | '>'\
    \ | '?' | '.' | '~' | ',' | ':' | ';' | '<' | '>' | '?' | '.' | '~' | ',' | ':'\
    \ | ';' | '<' | '>' | '?' | '.' | '\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp4hndvf6k.scala:21:109 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mcase\e[0m \e[31m'!'\e[0m |\
    \ \e[31m'@'\e[0m | \e[31m'#'\e[0m | \e[31m'%'\e[0m | \e[31m'^'\e[0m | \e[31m'&'\e\
    [0m | \e[31m'*'\e[0m | \e[31m'('\e[0m | \e[31m')'\e[0m | \e[31m'-'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'='\e[0m | \e[31m'>'\e[0m | \e[31m'<'\e[0m | \e[31m'>=\e[0m' | \e\
    [31m'<=\e[0m' | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e\
    [0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'~'\e[0m | \e[31m','\e[0m | \e[31m':'\e\
    [0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e\
    [0m | \e[31m'~'\e[0m | \e[31m','\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'~'\e[0m | \e[31m','\e\
    [0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e\
    [0m | \e[31m'.'\e[0m | \e[31m'~'\e[0m | \e[31m','\e[0m | \e[31m':'\e[0m | \e[31m';'\e\
    [0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'~'\e\
    [0m | \e[31m','\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e\
    [0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'~'\e[0m | \e[31m','\e[0m | \e[31m':'\e\
    [0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e\
    [0m | \e[31m'~'\e[0m | \e[31m','\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'~'\e[0m | \e[31m','\e\
    [0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e\
    [0m | \e[31m'.'\e[0m | \e[31m'~'\e[0m | \e[31m','\e[0m | \e[31m':'\e[0m | \e[31m';'\e\
    [0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'~'\e\
    [0m | \e[31m','\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e\
    [0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'~'\e[0m | \e[31m','\e[0m | \e[31m':'\e\
    [0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e\
    [0m | \e[31m'~'\e[0m | \e[31m','\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'~'\e[0m | \e[31m','\e\
    [0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e\
    [0m | \e[31m'.'\e[0m | \e[31m'~'\e["
  stdout: ''
  timestamp: 1659795010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) if(str.charAt(j)\
    \ match {\n                case '1' => odd.append('1')\n                case '0'\
    \ => odd.append('0')\n                case _ => odd.append('0')\n            })\n\
    \        }\n        odd.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0n2_xb6q.scala:21:8 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp0n2_xb6q.scala:13:18 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdcwucjjp.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '9'\
    \ => odds += 2\n                    case '8' => odds -= 2\n                  \
    \  case '7' => odds += 3\n                    case '6' => odds -= 3\n        \
    \            case '5' => odds += 4\n                    case '4' => odds -= 4\n\
    \                    case '3' => odds += 5\n                    case '2' => odds\
    \ -= 5\n                    case '1' => odds += 6\n                    case '0'\
    \ => odds -= 6\n                    case '9' => odds += 7\n                  \
    \  case '8' => odds -= 7\n                    case '7' => odds += 8\n        \
    \            case '6' => odds -= 8\n                    case '5' => odds += 9\n\
    \                    case '4' => odds -= 9\n                    case '3' => odds\
    \ += 10\n                    case '2' => odds -= 10\n                    case\
    \ '1' => odds += 11\n                    case '0' => odds -= 11\n            \
    \        case '9' => odds += 12\n                    case '8' => odds -= 12\n\
    \                    case '7' => odds += 13\n                    case '6' => odds\
    \ -= 13\n                    case '5' => odds += 14\n                    case\
    \ '4' => odds -= 14\n                    case '3' => odds += 15\n            \
    \        case '2' => odds -= 15\n                    case '1' => odds += 16\n\
    \                    case '0' => odds -= 16\n                    case '9' => odds\
    \ += 17\n                    case '8' => odds -= 17\n                    case\
    \ '7' => odds += 18\n                    case '6' => odds -= 18\n            \
    \        case '5' => odds += 19\n                    case '4' => odds -= 19\n\
    \                    case '3' => odds += 20\n                    case '2' => odds\
    \ -= 20\n                    case '1' => odds += 21\n                    case\
    \ '0' => odds -= 21\n                    case '9' => odds += 22\n            \
    \        case '8' => odds -= 22\n                    case '7' => odds += 23\n\
    \                    case '6' => odds -= 23\n                    case '5' => odds\
    \ += 24\n                    case '4' => odds -= 24\n                    case\
    \ '3' => odds += 25\n                    case '2' => odds -= 25\n            \
    \        case '1' => odds += 26\n                    case '0' => odds -= 26\n\
    \                    case '9' => odds += 27\n                    case '8' => odds\
    \ -= 27\n                    case '7' => odds += 28\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxdkhsvr1.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpxdkhsvr1.scala:81:0 ----------------------------\e[0m\e[0m\n\e[31m81\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxdkhsvr1.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpxdkhsvr1.scala:80:0 -----------------\e\
    [0m\e[0m\n\e[33m78 |\e[0m    }\n\e[33m79 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length)\n    \
    \            if(str.charAt(j) match {\n                    case '0' | '1' | '2'\
    \ | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += (str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'\
    \ | 'Z' => odds += (str.charAt(j).toInt)\n                    case _ => odds +=\
    \ 0\n                })\n        }\n        odds match {\n            case Nil\
    \ => Nil\n            case x :: xs => x :: oddCount(xs)\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpojd1b6ae.scala:23:8 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but unindent found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpojd1b6ae.scala:13:19 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpojd1b6ae.scala:26:42 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mcase\e[0m x :: xs => x :: oddCount(xs)\n\
    \e[31m\e[31m   |\e[0m                                          ^^\e[0m\n\e[31m\
    \   |\e[0m                                          Not found: xs\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpojd1b6ae.scala:26:28 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mcase\e[0m x :: xs => x :: oddCount(xs)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659795010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                val digit = str.charAt(j)\n                if(digit == '1') {\n\
    \                    odds.add(1)\n                }\n                else if(digit\
    \ == '0') {\n                    odds.add(0)\n                }\n            \
    \    else {\n                    odds.add(0)\n                }\n            }\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpois8u9fj.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val digits = x.toInt\n            val odd = digits % 2\n            odds.add(odd)\n\
    \        })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgd0jcoyr.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.count(_ ==\
    \ '1')\n            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxz8gaxa6.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val oddDigits = str.filter(x => x %\
    \ 2 != 0)\n            odds.add(oddDigits.length)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpptah552k.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length)\n    \
    \            if(str.charAt(j) match {\n                    case '0' | '1' => odds\
    \ += 0\n                    case '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'\
    \ => odds += 1\n                    case _ => odds += 0\n                })\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuxuy8un3.scala:22:8 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but unindent found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpuxuy8un3.scala:13:19 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x != '0').count(x => x != '1')\n            odds.add(oddDigits)\n        }\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv3r60vvt.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x != '0').count(x => x != '1')\n            odds.add(oddDigits)\n        }\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv3r60vvt.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds.add(str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds.add(str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'\
    \ | 'Z' => odds.add(str.charAt(j).toInt)\n                    case '0' | '1' |\
    \ '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds.add(str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds.add(str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'\
    \ | 'Z' => odds.add(str.charAt(j).toInt)\n                    case '0' | '1' |\
    \ '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds.add(str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds.add(str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_i_r4ocs.scala:26:145 ----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    \e[33mcase\e[0m \e[31m'A'\e[0m |\
    \ \e[31m'B'\e[0m | \e[31m'C'\e[0m | \e[31m'D'\e[0m | \e[31m'E'\e[0m | \e[31m'F'\e\
    [0m | \e[31m'G'\e[0m | \e[31m'H'\e[0m | \e[31m'I'\e[0m | \e[31m'J'\e[0m | \e[31m'K'\e\
    [0m | \e[31m'L'\e[0m | \e[31m'M'\e[0m | \e[31m'N'\e[0m | \e[31m'O'\e[0m | \e[31m'P'\e\
    [0m | \e[31m'Q'\e[0m | \e[31m'R'\e[0m | \e[31m'S'\e[0m | \e[31m'T'\e[0m | \e[31m'U\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \                                                                            \
    \                  ^\e[0m\n\e[31m   |\e[0msymbol literal 'U is no longer supported,\n\
    \e[31m   |\e[0muse a string literal \"U\" or an application Symbol(\"U\") instead,\n\
    \e[31m   |\e[0mor enclose in braces '{U} if you want a quoted expression.\n\e\
    [31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_i_r4ocs.scala:27:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=>' expected, but '}' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmp_i_r4ocs.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp_i_r4ocs.scala:35:0 ----------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_i_r4ocs.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] T"
  stdout: ''
  timestamp: 1659795017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val digits = str.map(_.toInt)\n   \
    \         val odd = digits.count(_ % 2 != 0)\n            odds.add(odd)\n    \
    \    }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2dhluyyl.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[String]\n        val even = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val oddCount = str.count(_ == '1')\n            odd += s\"the number of odd\
    \ elements ${oddCount}n the str${str.length}${str.drop(oddCount).takeWhile(_ !=\
    \ '1').length}${str.drop(oddCount + 1).takeWhile(_ != '1').length}${str.drop(oddCount\
    \ + 2).takeWhile(_ != '1').length}${str.drop(oddCount + 3).takeWhile(_ != '1').length}${str.drop(oddCount\
    \ + 4).takeWhile(_ != '1').length}${str.drop(oddCount + 5).takeWhile(_ != '1').length}${str.drop(oddCount\
    \ + 6).takeWhile(_ != '1').length}${str.drop(oddCount + 7).takeWhile(_ != '1').length}${str.drop(oddCount\
    \ + 8).takeWhile(_ != '1').length}${str.drop(oddCount + 9).takeWhile(_ != '1').length}${str.drop(oddCount\
    \ + 10).takeWhile(_ != '1').length}${str.drop(oddCount + 11).takeWhile(_ != '1').length}${str.drop(oddCount\
    \ + 12).takeWhile(_ != '1').length}${str.drop(oddCount + 13).takeWhile(_ != '1').length}${str.drop(oddCount\
    \ + 14).takeWhile(_ != '1').length}${str.drop(oddCount + 15).takeWhile(_ != '1').length}${str.drop(oddCount\
    \ + 16).takeWhile(_ != '1').length}${str.drop(oddCount + 17).takeWhile(_ != '1').length}${str.drop(oddCount\
    \ + 18).takeWhile(_ != '1').length}${str.drop(oddCount + 19).takeWhile(_ != '1').length}${str.drop(oddCount\
    \ + 20).takeWhile(_ != '1').length}${str.drop(oddCount + 21).takeWhile(_ != '1').length}${str.drop(oddCount\
    \ + 22).takeWhile(_ != '1').length}${str.drop(oddCount + 23).takeWhile(_ != '1').length}${str.drop(oddCount\
    \ + 24).takeWhile(_ != '1').length}${str.drop(oddCount + 25).takeWhile(_ != '1').length}${str.drop(odd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpurhhdt1m.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpurhhdt1m.scala:19:5\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m    }\n\
    \e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     unclosed string literal\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpurhhdt1m.scala:27:0 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpurhhdt1m.scala:13:18\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpurhhdt1m.scala:14:19\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpurhhdt1m.scala:20:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m20 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n5 errors found\n"
  stdout: ''
  timestamp: 1659795014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds.add(str.toInt)\n   \
    \                 case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j'\
    \ | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w'\
    \ | 'x' | 'y' | 'z' => odds.add(str.toInt)\n                    case 'A' | 'B'\
    \ | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O'\
    \ | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds.add(str.toInt)\n\
    \                    case _ => odds.add(str.toInt)\n                }\n      \
    \      }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp824dwlsg.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            ')' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp824dwlsg.scala:13:19 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(_ == '1')\n\
    \            odds.add(numOdds)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpve628hd2.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach { s =>\n    \
    \        val l = s.toInt\n            odds += l % 2\n        }\n        odds match\
    \ {\n            case Nil => Nil\n            case x :: xs => x :: oddCount(xs)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0yw37qc2.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0yw37qc2.scala:20:42 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m x :: xs => x :: oddCount(xs)\n\
    \e[31m\e[31m   |\e[0m                                          ^^\e[0m\n\e[31m\
    \   |\e[0m                                          Not found: xs\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0yw37qc2.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m x :: xs => x :: oddCount(xs)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length)\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => {\n                     \
    \   odds.add(str.charAt(j).toInt)\n                    }\n                   \
    \ else => {}\n                })\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmph5yek7m7.scala:21:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33melse\e[0m => {}\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    end\
    \ of statement expected but 'else' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmph5yek7m7.scala:23:8 ----------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m      \
    \  'then' expected, but unindent found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmph5yek7m7.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val oddDigits = str.filter(x => x match\
    \ {\n                case x if x.isDigit => true\n                case _ => false\n\
    \            }).length\n            odds.add(oddDigits)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5q060hhn.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach { s =>\n    \
    \        val n = s.toInt\n            val odd = n % 2 == 1\n            if (odd)\
    \ odds += n\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvbwfslk9.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(s => {\n        \
    \    val n = s.toInt\n            for(i <- 0 until n) odds += n%2\n        })\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp78qc_38x.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount = 0\n        var oddDigits = 0\n        var oddString = \"\"\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     val strDigits = str.filter(_.isDigit)\n            val strDigitCount = strDigits.length\n\
    \            val strDigitCount = strDigitCount.toInt\n            val strDigitCount2\
    \ = strDigitCount * 2\n            val strDigitCount3 = strDigitCount * 3\n  \
    \          val strDigitCount4 = strDigitCount * 4\n            val strDigitCount5\
    \ = strDigitCount * 5\n            val strDigitCount6 = strDigitCount * 6\n  \
    \          val strDigitCount7 = strDigitCount * 7\n            val strDigitCount8\
    \ = strDigitCount * 8\n            val strDigitCount9 = strDigitCount * 9\n  \
    \          val strDigitCount10 = strDigitCount * 10\n            val strDigitCount11\
    \ = strDigitCount * 11\n            val strDigitCount12 = strDigitCount * 12\n\
    \            val strDigitCount13 = strDigitCount * 13\n            val strDigitCount14\
    \ = strDigitCount * 14\n            val strDigitCount15 = strDigitCount * 15\n\
    \            val strDigitCount16 = strDigitCount * 16\n            val strDigitCount17\
    \ = strDigitCount * 17\n            val strDigitCount18 = strDigitCount * 18\n\
    \            val strDigitCount19 = strDigitCount * 19\n            val strDigitCount20\
    \ = strDigitCount * 20\n            val strDigitCount21 = strDigitCount * 21\n\
    \            val strDigitCount22 = strDigitCount * 22\n            val strDigitCount23\
    \ = strDigitCount * 23\n            val strDigitCount24 = strDigitCount * 24\n\
    \            val strDigitCount25 = strDigitCount * 25\n            val strDigitCount26\
    \ = strDigitCount * 26\n            val strDigitCount27 = strDigitCount * 27\n\
    \            val strDigitCount28 = strDigitCount * 28\n            val strDigitCount29\
    \ = strDigitCount * 29\n            val strDigitCount30 = strDigitCount * 30\n\
    \            val strDigitCount31 = strDigitCount * 31\n            val strDigitCount32\
    \ = strDigitCount * 32\n            val strDigitCount33 = strDigitCount * 33\n\
    \            val strDigitCount34 = strDigitCount * 34\n            val strDigitCount35\
    \ = strDigitCount * 35\n            val strDigitCount36 = strDigitCount * 36\n\
    \            val strDigit\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5hx4dnru.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5hx4dnru.scala:65:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m65 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5hx4dnru.scala:20:16 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m            \e[33mval\e[0m \e[36mstrDigitCount\e[0m = strDigitCount.toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mstrDigitCount is already defined as \e[33mvalue\e[0m \e[35mstrDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmp5hx4dnru.scala:59:11 -----------------------------\e[0m\e[0m\n\
    \e[31m59 |\e[0m    assert(oddCount((List[\e[35mString\e[0m](\e[31m\"1234567\"\e\
    [0m))).equals((List[\e[35mString\e[0m](\e[31m\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"\e[0m))));\n\e[31m\e[31m   |\e[0m           ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           \e[33mvariable\e[0m \e[35moddCount\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp5hx4dnru.scala:60:11\
    \ -----------------------------\e[0m\e[0m\n\e[31m60 |\e[0m    assert(oddCount((List[\e\
    [35mString\e[0m](\e[31m\"3\"\e[0m, \e[31m\"11111111\"\e[0m))).equals((List[\e\
    [35mString\e[0m](\e[31m\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    \e[0m, \e[31m\"the number of odd elements 8n the str8ng 8 of the 8nput.\"\e[0m))));\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^^\e[0m\n\e[31m   |\e[0m           \e[33mvariable\e\
    [0m \e[35moddCount\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmp5hx4dnru.scala:61:11 -----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    assert(oddCount((List[\e[35mS"
  stdout: ''
  timestamp: 1659795019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '0' => odds\
    \ += 0\n                    case '1' => odds += 1\n                    case '2'\
    \ => odds += 2\n                    case '3' => odds += 3\n                  \
    \  case '4' => odds += 4\n                    case '5' => odds += 5\n        \
    \            case '6' => odds += 6\n                    case '7' => odds += 7\n\
    \                    case '8' => odds += 8\n                    case '9' => odds\
    \ += 9\n                    case 'a' => odds += 10\n                    case 'b'\
    \ => odds += 11\n                    case 'c' => odds += 12\n                \
    \    case 'd' => odds += 13\n                    case 'e' => odds += 14\n    \
    \                case 'f' => odds += 15\n                    case 'A' => odds\
    \ += 10\n                    case 'B' => odds += 11\n                    case\
    \ 'C' => odds += 12\n                    case 'D' => odds += 13\n            \
    \        case 'E' => odds += 14\n                    case 'F' => odds += 15\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += str.charAt(j).toInt\n                    case 'a' | ... | 'f'\
    \ | ... | 'A' | ... | 'F' => odds += str.charAt(j).toInt\n                   \
    \ case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | ... | 'a' |\
    \ ... | 'f' | ... | 'A' | ... | 'F' => odds += str.charAt(j).toInt\n         \
    \           case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | ...\
    \ | 'a' | ... | 'f' | ... | 'A' | ... | 'F' | ... | 'a' | ... | 'f' | ... | 'A'\
    \ | ... | 'F' => odds += str.charAt(j).toInt\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | ... | 'a' | ... | 'f' | ...\
    \ | 'A' | ... | 'F' | ... | 'a' | ... | 'f' | ... | 'A' | ... | 'F' | ... | 'a'\
    \ | ... | 'f' | ... | 'A' | ... | 'F' | ... | 'a' | ... | 'f' | ... | 'A' | ...\
    \ | 'F' | ... | '\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpo9p52i49.scala:41:31 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                    \e[33mcase\e[0m \e[31m'a'\e[0m |\
    \ ... | \e[31m'f'\e[0m | ... | \e[31m'A'\e[0m | ... | \e[31m'F'\e[0m => odds +=\
    \ str.charAt(j).toInt\n\e[31m\e[31m   |\e[0m                               ^\e\
    [0m\n\e[31m   |\e[0m                               pattern expected\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpo9p52i49.scala:44:283 ----------------------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m                    \e[33mcase\e[0m \e[31m'0'\e[0m |\
    \ \e[31m'1'\e[0m | \e[31m'2'\e[0m | \e[31m'3'\e[0m | \e[31m'4'\e[0m | \e[31m'5'\e\
    [0m | \e[31m'6'\e[0m | \e[31m'7'\e[0m | \e[31m'8'\e[0m | \e[31m'9'\e[0m | ...\
    \ | \e[31m'a'\e[0m | ... | \e[31m'f'\e[0m | ... | \e[31m'A'\e[0m | ... | \e[31m'F'\e\
    [0m | ... | \e[31m'a'\e[0m | ... | \e[31m'f'\e[0m | ... | \e[31m'A'\e[0m | ...\
    \ | \e[31m'F'\e[0m | ... | \e[31m'a'\e[0m | ... | \e[31m'f'\e[0m | ... | \e[31m'A'\e\
    [0m | ... | \e[31m'F'\e[0m | ... | \e[31m'a'\e[0m | ... | \e[31m'f'\e[0m | ...\
    \ | \e[31m'A'\e[0m | ... | \e[31m'F'\e[0m | ... | '\n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                    ^\e[0m\n\e[31m   |\e[0m \
    \                                             unclosed character literal\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpo9p52i49.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpo9p52i49.scala:53:0 ----------------------------\e[0m\e[0m\n\e[31m53\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo9p52i49.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |"
  stdout: ''
  timestamp: 1659795019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount = 0\n        var oddCountString = \"\"\n        var oddCountString2\
    \ = \"\"\n        var oddCountString3 = \"\"\n        var oddCountString4 = \"\
    \"\n        var oddCountString5 = \"\"\n        var oddCountString6 = \"\"\n \
    \       var oddCountString7 = \"\"\n        var oddCountString8 = \"\"\n     \
    \   var oddCountString9 = \"\"\n        var oddCountString10 = \"\"\n        var\
    \ oddCountString11 = \"\"\n        var oddCountString12 = \"\"\n        var oddCountString13\
    \ = \"\"\n        var oddCountString14 = \"\"\n        var oddCountString15 =\
    \ \"\"\n        var oddCountString16 = \"\"\n        var oddCountString17 = \"\
    \"\n        var oddCountString18 = \"\"\n        var oddCountString19 = \"\"\n\
    \        var oddCountString20 = \"\"\n        var oddCountString21 = \"\"\n  \
    \      var oddCountString22 = \"\"\n        var oddCountString23 = \"\"\n    \
    \    var oddCountString24 = \"\"\n        var oddCountString25 = \"\"\n      \
    \  var oddCountString26 = \"\"\n        var oddCountString27 = \"\"\n        var\
    \ oddCountString28 = \"\"\n        var oddCountString29 = \"\"\n        var oddCountString30\
    \ = \"\"\n        var oddCountString31 = \"\"\n        var oddCountString32 =\
    \ \"\"\n        var oddCountString33 = \"\"\n        var oddCountString34 = \"\
    \"\n        var oddCountString35 = \"\"\n        var oddCountString36 = \"\"\n\
    \        var oddCountString37 = \"\"\n        var oddCountString38 = \"\"\n  \
    \      var oddCountString39 = \"\"\n        var oddCountString40 = \"\"\n    \
    \    var oddCountString41 = \"\"\n        var oddCountString42 = \"\"\n      \
    \  var oddCountString43 = \"\"\n        var oddCountString44 = \"\"\n        var\
    \ oddCountString45 = \"\"\n        var oddCountString46 = \"\"\n        var oddCountString47\
    \ = \"\"\n        var oddCountString48 = \"\"\n        var oddCountString49 =\
    \ \"\"\n        var oddCountString50 = \"\"\n        var oddCountString51 = \"\
    \"\n        var oddCountString52 = \"\"\n        var oddCountString53 = \"\"\n\
    \        var oddCountString54 = \"\"\n        var oddCountString55 = \"\"\n  \
    \      var oddCountString56 = \"\"\n        var oddCountString57 = \"\"\n    \
    \    var oddCountString58 = \"\"\n        var oddCountString59 = \"\"\n      \
    \  var oddCountString60 = \"\"\n        var oddCountString61 = \"\"\n        var\
    \ oddCountString62 = \"\"\n        var oddCountString63 = \"\"\n        var oddCountString64\
    \ = \"\"\n        var oddCountString65 = \"\"\n        var oddCountString66 =\
    \ \"\"\n        var oddCountString67 = \"\"\n        var oddCountString68 = \"\
    \"\n        var oddCountString69 = \"\"\n        var oddCountString70 = \"\"\n\
    \        var oddCountString7\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptfuuf0bo.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptfuuf0bo.scala:85:5 ---------------------\e[0m\e[0m\n\e[31m85 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += (str.charAt(j).toInt\
    \ - '0').toInt\n                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'\
    \ | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't'\
    \ | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt - 'a').toInt\n\
    \                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'\
    \ | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V'\
    \ | 'W' | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt - 'A').toInt\n     \
    \               else => odds += 0\n                })\n            }\n       \
    \ }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp74y4gtmn.scala:21:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33melse\e[0m => odds += \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m     \
    \               end of statement expected but 'else' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmp74y4gtmn.scala:23:12 ---------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e\
    [31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp74y4gtmn.scala:13:19 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => {\n        \
    \    val digits = x.toInt\n            for(i <- 0 until digits) {\n          \
    \      if(digits % 2 == 1) {\n                    odds.add(digits)\n         \
    \       }\n            }\n        })\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp74y5e04v.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = new mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) if(str.charAt(j)\
    \ match {\n                case '1' => odd(j) += 1\n                case '0' =>\
    \ odd(j) += 1\n                case _ => odd(j) += 1\n            })\n       \
    \ }\n        odd.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9hc2osep.scala:21:8 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp9hc2osep.scala:13:22 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val numOdds = str.count(x => x % 2\
    \ != 0)\n            odds.add(numOdds)\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvkhv5nrr.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '9'\
    \ => odds += 2\n                    case '8' => odds -= 2\n                  \
    \  case '7' => odds += 3\n                    case '6' => odds -= 3\n        \
    \            case '5' => odds += 4\n                    case '4' => odds -= 4\n\
    \                    case '3' => odds += 5\n                    case '2' => odds\
    \ -= 5\n                    case '1' => odds += 6\n                    case '0'\
    \ => odds -= 6\n                    case '9' => odds += 7\n                  \
    \  case '8' => odds -= 7\n                    case '7' => odds += 8\n        \
    \            case '6' => odds -= 8\n                    case '5' => odds += 9\n\
    \                    case '4' => odds -= 9\n                    case '3' => odds\
    \ += 10\n                    case '2' => odds -= 10\n                    case\
    \ '1' => odds += 11\n                    case '0' => odds -= 11\n            \
    \        case '9' => odds += 12\n                    case '8' => odds -= 12\n\
    \                    case '7' => odds += 13\n                    case '6' => odds\
    \ -= 13\n                    case '5' => odds += 14\n                    case\
    \ '4' => odds -= 14\n                    case '3' => odds += 15\n            \
    \        case '2' => odds -= 15\n                    case '1' => odds += 16\n\
    \                    case '0' => odds -= 16\n                    case '9' => odds\
    \ += 17\n                    case '8' => odds -= 17\n                    case\
    \ '7' => odds += 18\n                    case '6' => odds -= 18\n            \
    \        case '5' => odds += 19\n                    case '4' => odds -= 19\n\
    \                    case '3' => odds += 20\n                    case '2' => odds\
    \ -= 20\n                    case '1' => odds += 21\n                    case\
    \ '0' => odds -= 21\n                    case '9' => odds += 22\n            \
    \        case '8' => odds -= 22\n                    case '7' => odds += 23\n\
    \                    case '6' => odds -= 23\n                    case '5' => odds\
    \ += 24\n                    case '4' => odds -= 24\n                    case\
    \ '3' => odds += 25\n                    case '2' => odds -= 25\n            \
    \        case '1' => odds += 26\n                    case '0' => odds -= 26\n\
    \                    case '9' => odds += 27\n                    case '8' => odds\
    \ -= 27\n                    case '7' => odds += 28\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyflqv9sh.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpyflqv9sh.scala:81:0 ----------------------------\e[0m\e[0m\n\e[31m81\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyflqv9sh.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpyflqv9sh.scala:80:0 -----------------\e\
    [0m\e[0m\n\e[33m78 |\e[0m    }\n\e[33m79 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.toChar(j).isDigit) {\n                    odds += (str.toChar(j).asDigit)\n\
    \                }\n            }\n        }\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp16ia_flt.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp16ia_flt.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m(str.toChar(j).isDigit)\
    \ {\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   value toChar is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659795019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val digits = str.filter(_.isDigit)\n\
    \            val oddDigits = digits.filter(_.isOdd)\n            odds.addAll(oddDigits.size)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgqu7z5za.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpgqu7z5za.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36moddDigits\e[0m = digits.filter(_.isOdd)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     value isOdd is not a member\
    \ of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659795019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.Set[Int]()\n        lst.foreach(s => {\n            val\
    \ n = s.toInt\n            for(i <- 0 until n) odds += n\n        })\n       \
    \ odds map (n => s\"the number of odd elements $n the str$n of the $nput.\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgngqs2es.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x match {\n                case x if x.isDigit => true\n                case\
    \ _ => false\n            }).length\n            odds.add(oddDigits)\n       \
    \ }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpep8cspjb.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' => odds\
    \ += 0\n                    case '1' => odds += 1\n                    case '2'\
    \ => odds += 2\n                    case '3' => odds += 3\n                  \
    \  case '4' => odds += 4\n                    case '5' => odds += 5\n        \
    \            case '6' => odds += 6\n                    case '7' => odds += 7\n\
    \                    case '8' => odds += 8\n                    case '9' => odds\
    \ += 9\n                    case 'a' => odds += 10\n                    case 'b'\
    \ => odds += 11\n                    case 'c' => odds += 12\n                \
    \    case 'd' => odds += 13\n                    case 'e' => odds += 14\n    \
    \                case 'f' => odds += 15\n                    case 'A' => odds\
    \ += 10\n                    case 'B' => odds += 11\n                    case\
    \ 'C' => odds += 12\n                    case 'D' => odds += 13\n            \
    \        case 'E' => odds += 14\n                    case 'F' => odds += 15\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += str.charAt(j).toInt\n                    case 'a' | ... | 'f'\
    \ => odds += str.charAt(j).toInt\n                    case 'A' | ... | 'F' =>\
    \ odds += str.charAt(j).toInt\n                    case _ => odds += 0\n     \
    \           })\n            }\n        }\n        odds match {\n            case\
    \ Nil => Nil\n            case x :: xs => x :: oddCount(xs)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpdxo7bc2d.scala:41:31 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                    \e[33mcase\e[0m \e[31m'a'\e[0m |\
    \ ... | \e[31m'f'\e[0m => odds += str.charAt(j).toInt\n\e[31m\e[31m   |\e[0m \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \        pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpdxo7bc2d.scala:45:12 ---------------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m\
    \            'then' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdxo7bc2d.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpdxo7bc2d.scala:44:16 --------------------\e[0m\e\
    [0m\n\e[31m44 |\e[0m                })\n\e[31m\e[31m   |\e[0m                ^\e\
    [0m\n\e[31m   |\e[0m                Found:    Unit\n\e[31m   |\e[0m          \
    \      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdxo7bc2d.scala:49:42 ------------------------\e[0m\e[0m\n\e[31m49 |\e\
    [0m            \e[33mcase\e[0m x :: xs => x :: oddCount(xs)\n\e[31m\e[31m   |\e\
    [0m                                          ^^\e[0m\n\e[31m   |\e[0m        \
    \                                  Not found: xs\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdxo7bc2d.scala:49:28 ------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m            \e[33mcase\e[0m x :: xs => x :: oddCount(xs)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659795020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '9'\
    \ => odds -= 1\n                    case '8' => odds += 1\n                  \
    \  case '7' => odds += 1\n                    case '6' => odds += 1\n        \
    \            case '5' => odds += 1\n                    case '4' => odds += 1\n\
    \                    case '3' => odds += 1\n                    case '2' => odds\
    \ += 1\n                    case '1' => odds += 1\n                    case '0'\
    \ => odds += 1\n                    case '9' => odds += 1\n                  \
    \  case '8' => odds += 1\n                    case '7' => odds += 1\n        \
    \            case '6' => odds += 1\n                    case '5' => odds += 1\n\
    \                    case '4' => odds += 1\n                    case '3' => odds\
    \ += 1\n                    case '2' => odds += 1\n                    case '1'\
    \ => odds += 1\n                    case '0' => odds += 1\n                  \
    \  case '9' => odds += 1\n                    case '8' => odds += 1\n        \
    \            case '7' => odds += 1\n                    case '6' => odds += 1\n\
    \                    case '5' => odds += 1\n                    case '4' => odds\
    \ += 1\n                    case '3' => odds += 1\n                    case '2'\
    \ => odds += 1\n                    case '1' => odds += 1\n                  \
    \  case '0' => odds += 1\n                    case '9' => odds += 1\n        \
    \            case '8' => odds += 1\n                    case '7' => odds += 1\n\
    \                    case '6' => odds += 1\n                    case '5' => odds\
    \ += 1\n                    case '4' => odds += 1\n                    case '3'\
    \ => odds += 1\n                    case '2' => odds += 1\n                  \
    \  case '1' => odds += 1\n                    case '0' => odds += 1\n        \
    \            case '9' => odds += 1\n                    case '8' => odds += 1\n\
    \                    case '7' => odds += 1\n                    case '6' => odds\
    \ += 1\n                    case '5' => odds += 1\n                    case '4'\
    \ => odds += 1\n                    case '3' => odds += 1\n                  \
    \  case '2' => odds += 1\n                    case '1' => odds += 1\n        \
    \            case '0' => odds += 1\n                    case '9' => odds += 1\n\
    \                    case '8' => odds += 1\n                    case '7' => odds\
    \ += 1\n                    case '6' => odds += 1\n                    case '5'\
    \ => odds += 1\n                    case '4' => odds += 1\n                  \
    \  case '3' => odds += 1\n                    case '2' => odds += 1\n        \
    \            case '1' => odds += 1\n                    case '0' => odds += 1\n\
    \                    case '9' => odds += 1\n                    case '8' => odds\
    \ += 1\n                    case '7' => odds += 1\n                    case '6'\
    \ => odds += 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp21i10oxq.scala:86:4 ----------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp21i10oxq.scala:93:0 ----------------------------\e[0m\e[0m\n\e[31m93\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp21i10oxq.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmp21i10oxq.scala:92:0 -----------------\e\
    [0m\e[0m\n\e[33m90 |\e[0m    }\n\e[33m91 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                val digit = str.charAt(j)\n                if(digit == '1') {\n\
    \                    odds.add(1)\n                }\n                else {\n\
    \                    odds.add(0)\n                }\n            }\n        }\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpipd2ymef.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.Set[Int]()\n        lst.foreach(x => x match {\n       \
    \     case x if x.toString.toInt == x => odds += x\n            case _ => ()\n\
    \        })\n        odds.toList.map(x => s\"the number of odd elements ${x} of\
    \ the ${x}nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxy7f0wib.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpxy7f0wib.scala:15:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x.toString.toInt\
    \ == x => odds += x\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659795021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length)\n    \
    \            if(str.charAt(j) match {\n                    case '0' => odds +=\
    \ 0\n                    case '1' => odds += 1\n                    case '2' =>\
    \ odds += 2\n                    case '3' => odds += 3\n                    case\
    \ '4' => odds += 4\n                    case '5' => odds += 5\n              \
    \      case '6' => odds += 6\n                    case '7' => odds += 7\n    \
    \                case '8' => odds += 8\n                    case '9' => odds +=\
    \ 9\n                    case 'a' => odds += 10\n                    case 'b'\
    \ => odds += 11\n                    case 'c' => odds += 12\n                \
    \    case 'd' => odds += 13\n                    case 'e' => odds += 14\n    \
    \                case 'f' => odds += 15\n                    case 'A' => odds\
    \ += 10\n                    case 'B' => odds += 11\n                    case\
    \ 'C' => odds += 12\n                    case 'D' => odds += 13\n            \
    \        case 'E' => odds += 14\n                    case 'F' => odds += 15\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += 0\n                    case 'a' | 't' | 'e' | 'o' | 'n' | 'd'\
    \ | 't' | 'e' | 'o' | 'n' | 'd' | 't' | 'e' | 'o' | 'n' | 'd' | 't' | 'e' | 'o'\
    \ | 'n' | 'd' | 't' | 'e' | 'o' | 'n' | 'd' | 't' | 'e' | 'o' | 'n' | 'd' | 't'\
    \ | 'e' | 'o' | 'n' | 'd' | 't' | 'e' | 'o' | 'n' | 'd' | 't' | 'e' | 'o' | 'n'\
    \ | 'd' | 't' | 'e' | 'o' | 'n' | 'd' | 't' | 'e' | 'o' | 'n' | 'd' | 't' | 'e'\
    \ | 'o' | 'n' | 'd' | 't' | 'e' | 'o' | 'n' | 'd' | 't' | 'e' | 'o' | 'n' | 'd'\
    \ | 't' | 'e' | 'o' | 'n' | 'd' | 't' | 'e' | 'o' | 'n' | 'd' | 't' | 'e' | 'o'\
    \ | 'n' | 'd' | 't' | 'e' | 'o' | 'n' | 'd' | 't' | 'e' | 'o' | 'n' | 'd' | 't'\
    \ | 'e' | 'o' | 'n' | 'd' | 't' | 'e' | 'o' | 'n' | 'd' | 't' | 'e' | 'o' | 'n'\
    \ | 'd' | 't' | 'e' | 'o' | 'n' | 'd' | 't' | 'e' | 'o' | 'n' | 'd' | 't' | 'e'\
    \ | 'o' | 'n' | 'd' | 't' | 'e' | 'o' | '\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzznxz6i4.scala:41:799 ----------------------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                    \e[33mcase\e[0m \e[31m'a'\e[0m |\
    \ \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m'd'\e\
    [0m | \e[31m't'\e[0m"
  stdout: ''
  timestamp: 1659795025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x % 2 != 0)\n            odds += s\"the number of odd elements ${oddDigits.size}\
    \ the str${str.length} ${str}\".trim\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxt_u0woy.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.length){\n\
    \            val str = lst(i)\n            val oddDigits = str.filter(x => x match\
    \ {\n                case x if x.isDigit => true\n                case _ => false\n\
    \            }).length\n            odds.append((s\"the number of odd elements\
    \ $oddDigits of the $str\"))\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpls_ymp9a.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val digits = x.toInt\n            val odd = digits % 2\n            odds.add(odd)\n\
    \        })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgd0jcoyr.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds.add(str.charAt(j).toInt)\n\
    \                    case _ => odds += 0\n                }\n            }\n \
    \       }\n        odds.toList.map(x => s\"the number of odd elements ${x} of\
    \ the $x string.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4h3fe4nt.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            ')' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4h3fe4nt.scala:13:19 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) == '1') {\n                    odds.add(1)\n\
    \                }\n            }\n        }\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptz3iadll.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[String]\n        val even = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val num = x.toInt\n            if (num\
    \ % 2 == 0) even.+=(x) else odd.+=(x)\n        })\n        (odd.toList ++ even.toList).map(x\
    \ => s\"the number of odd elements $x of the $x input.\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg70s64px.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpg70s64px.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount = 0\n        var oddCountString = \"\"\n        var oddCountString2\
    \ = \"\"\n        var oddCountString3 = \"\"\n        var oddCountString4 = \"\
    \"\n        var oddCountString5 = \"\"\n        var oddCountString6 = \"\"\n \
    \       var oddCountString7 = \"\"\n        var oddCountString8 = \"\"\n     \
    \   var oddCountString9 = \"\"\n        var oddCountString10 = \"\"\n        var\
    \ oddCountString11 = \"\"\n        var oddCountString12 = \"\"\n        var oddCountString13\
    \ = \"\"\n        var oddCountString14 = \"\"\n        var oddCountString15 =\
    \ \"\"\n        var oddCountString16 = \"\"\n        var oddCountString17 = \"\
    \"\n        var oddCountString18 = \"\"\n        var oddCountString19 = \"\"\n\
    \        var oddCountString20 = \"\"\n        var oddCountString21 = \"\"\n  \
    \      var oddCountString22 = \"\"\n        var oddCountString23 = \"\"\n    \
    \    var oddCountString24 = \"\"\n        var oddCountString25 = \"\"\n      \
    \  var oddCountString26 = \"\"\n        var oddCountString27 = \"\"\n        var\
    \ oddCountString28 = \"\"\n        var oddCountString29 = \"\"\n        var oddCountString30\
    \ = \"\"\n        var oddCountString31 = \"\"\n        var oddCountString32 =\
    \ \"\"\n        var oddCountString33 = \"\"\n        var oddCountString34 = \"\
    \"\n        var oddCountString35 = \"\"\n        var oddCountString36 = \"\"\n\
    \        var oddCountString37 = \"\"\n        var oddCountString38 = \"\"\n  \
    \      var oddCountString39 = \"\"\n        var oddCountString40 = \"\"\n    \
    \    var oddCountString41 = \"\"\n        var oddCountString42 = \"\"\n      \
    \  var oddCountString43 = \"\"\n        var oddCountString44 = \"\"\n        var\
    \ oddCountString45 = \"\"\n        var oddCountString46 = \"\"\n        var oddCountString47\
    \ = \"\"\n        var oddCountString48 = \"\"\n        var oddCountString49 =\
    \ \"\"\n        var oddCountString50 = \"\"\n        var oddCountString51 = \"\
    \"\n        var oddCountString52 = \"\"\n        var oddCountString53 = \"\"\n\
    \        var oddCountString54 = \"\"\n        var oddCountString55 = \"\"\n  \
    \      var oddCountString56 = \"\"\n        var oddCountString57 = \"\"\n    \
    \    var oddCountString58 = \"\"\n        var oddCountString59 = \"\"\n      \
    \  var oddCountString60 = \"\"\n        var oddCountString61 = \"\"\n        var\
    \ oddCountString62 = \"\"\n        var oddCountString63 = \"\"\n        var oddCountString64\
    \ = \"\"\n        var oddCountString65 = \"\"\n        var oddCountString66 =\
    \ \"\"\n        var oddCountString67 = \"\"\n        var oddCountString68 = \"\
    \"\n        var oddCountString69 = \"\"\n        var oddCountString70 = \"\"\n\
    \        var oddCountString7\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptfuuf0bo.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptfuuf0bo.scala:85:5 ---------------------\e[0m\e[0m\n\e[31m85 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '0' | '1' |\
    \ '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odd(j) += 1\n             \
    \       case _ => odd(j) += 1\n                }\n            }\n        }\n \
    \       odd.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoksjv6d6.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            ')' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpoksjv6d6.scala:13:18 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                val digit = str.charAt(j)\n                if(digit == '1') {\n\
    \                    odds.add(1)\n                } else {\n                 \
    \   odds.add(0)\n                }\n            }\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lg8bm_y.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer[Int]()\n        val even = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            if\
    \ (digits % 2 == 0) {\n                even.append(digits)\n            } else\
    \ {\n                odd.append(digits)\n            }\n        })\n        odd.toList\
    \ ::: even.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz7y4q7fo.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpz7y4q7fo.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length)\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += (str.charAt(j).toInt\
    \ - '0').toInt\n                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'\
    \ | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't'\
    \ | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt - 'a').toInt\n\
    \                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'\
    \ | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V'\
    \ | 'W' | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt - 'A').toInt\n     \
    \               case _ => odds += 0\n                })\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdaj0ou99.scala:23:8 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but unindent found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpdaj0ou99.scala:13:19 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '9'\
    \ => odds += 10\n                    case '8' => odds -= 10\n                \
    \    case '7' => odds += 100\n                    case '6' => odds -= 100\n  \
    \                  case '5' => odds += 1000\n                    case '4' => odds\
    \ -= 1000\n                    case '3' => odds += 10000\n                   \
    \ case '2' => odds -= 10000\n                    case '1' => odds += 100000\n\
    \                    case '0' => odds -= 100000\n                    case '9'\
    \ => odds += 1000000\n                    case '8' => odds -= 1000000\n      \
    \              case '7' => odds += 10000000\n                    case '6' => odds\
    \ -= 10000000\n                    case '5' => odds += 100000000\n           \
    \         case '4' => odds -= 100000000\n                    case '3' => odds\
    \ += 1000000000\n                    case '2' => odds -= 1000000000\n        \
    \            case '1' => odds += 10000000000\n                    case '0' =>\
    \ odds -= 10000000000\n                    case '9' => odds += 100000000000\n\
    \                    case '8' => odds -= 100000000000\n                    case\
    \ '7' => odds += 1000000000000\n                    case '6' => odds -= 1000000000000\n\
    \                    case '5' => odds += 10000000000000\n                    case\
    \ '4' => odds -= 10000000000000\n                    case '3' => odds += 100000000000000\n\
    \                    case '2' => odds -= 100000000000000\n                   \
    \ case '1' => odds += 1000000000000000\n                    case '0' => odds -=\
    \ 1000000000000000\n                    case '9' => odds += 10000000000000000\n\
    \                    case '8' => odds -= 10000000000000000\n                 \
    \   case '7' => odds += 100000000000000000\n                    case '6' => odds\
    \ -= 100000000000000000\n                    case '5' => odds += 1000000000000000000\n\
    \                    case '4' => odds -= 1000000000000000000\n               \
    \     case '3' => odds += 10000000000000000000\n                    case '2' =>\
    \ odds -= 10000000000000000000\n                    case '1' => odds += 100000000000000000000\n\
    \                    case '0' => odds -= 100000000000000000000\n             \
    \       case '9' => odds += 1000000000000000000000\n                    case '8'\
    \ => odds -= 1000000000000000000000\n                    case '7' => odds += 10000000000000000000000\n\
    \                    case '6' => odds -= 10000000000000000000000\n           \
    \         case '5' => odds += 100000000000000000000000\n                    case\
    \ '4' => odds -= 100000000000000000000000\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp56hxocgk.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp56hxocgk.scala:75:0 ----------------------------\e[0m\e[0m\n\e[31m75\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp56hxocgk.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmp56hxocgk.scala:74:0 -----------------\e\
    [0m\e[0m\n\e[33m72 |\e[0m    }\n\e[33m73 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => if (x.toString.toInt%2\
    \ == 1) odds += x.toString.toInt)\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnah1vwou.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = new mutable.ListBuffer[Int]()\n        lst.foreach(x => {\n     \
    \       val digits = x.toInt\n            val odd_digits = digits % 2\n      \
    \      odd_digits match {\n                case 0 => odd.append(digits)\n    \
    \            case _ => odd.append(digits)\n            }\n        })\n       \
    \ odd.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjowlfa9o.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => {\n        \
    \    val digits = x.toInt\n            for(i <- 0 until digits) {\n          \
    \      if(digits % 2 == 1) {\n                    odds.add(digits)\n         \
    \       }\n            }\n        })\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp74y5e04v.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(_ == '1')\n\
    \            odds += numOdds\n        }\n        odds match {\n            case\
    \ Nil => Nil\n            case x :: xs => x :: oddCount(xs)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzgbu1pq1.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzgbu1pq1.scala:21:42 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m x :: xs => x :: oddCount(xs)\n\
    \e[31m\e[31m   |\e[0m                                          ^^\e[0m\n\e[31m\
    \   |\e[0m                                          Not found: xs\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzgbu1pq1.scala:21:28 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m x :: xs => x :: oddCount(xs)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '0' | '1' |\
    \ '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += str.charAt(j)\n   \
    \                 case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j'\
    \ | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w'\
    \ | 'x' | 'y' | 'z' => odds += str.charAt(j)\n                    case 'A' | 'B'\
    \ | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O'\
    \ | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds +=\
    \ str.charAt(j)\n                    case '*' => odds += str.charAt(j)\n     \
    \               case '-' => odds += str.charAt(j)\n                    case '/'\
    \ => odds += str.charAt(j)\n                    case '%' => odds += str.charAt(j)\n\
    \                    case '+' => odds += str.charAt(j)\n                    case\
    \ '=' => odds += str.charAt(j)\n                    case '<' => odds += str.charAt(j)\n\
    \                    case '>' => odds += str.charAt(j)\n                    case\
    \ '!' => odds += str.charAt(j)\n                    case '?' => odds += str.charAt(j)\n\
    \                    case _ => odds += 0\n                })\n            }\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2fs5xgsf.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp2fs5xgsf.scala:13:19 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(c => c\
    \ % 2 == 1)\n            odds.add(numOdds)\n        }\n        odds.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4oi88czb.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val digits = x.toInt\n            val odd = digits % 2\n            odds.add(odd)\n\
    \        })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgd0jcoyr.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n    \
    \        val digits = s.toInt\n            digits match {\n                case\
    \ 0 => ()\n                case _ => {\n                    odds += digits\n \
    \               }\n            }\n        })\n        val odd_count = odds.size\n\
    \        odds.toList.map(s => s\"the number of odd elements $s n the str$s $odd_count\
    \ of the $odd_count nput.\")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl31jqp_b.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => {\n        \
    \    val digits = x.toInt\n            val odd = digits % 2 != 0\n           \
    \ if (odd) odds.add(digits)\n        })\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0xtc8e5a.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => if (x.toString.toInt%2\
    \ == 1) odds += x.toString.toInt)\n        (lst.map(x => s\"the number of odd\
    \ elements ${x.toString.toInt} of the $x\"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa1dmpyfc.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) == '1') {\n                    odds += (str.length\
    \ - (j + 1))\n                }\n            }\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpur98sc5z.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x != '0').count(x => x != '1')\n            odds.add(oddDigits)\n        }\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_0vhh4o0.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds.add(str.charAt(j).toInt)\n\
    \                    case _ => odds.add(0)\n                })\n            }\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmy092unl.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpmy092unl.scala:13:19 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str(j).isDigit) {\n                    odds += (str(j).asDigit)\n\
    \                }\n            }\n        }\n        odds.toList.map(x => s\"\
    the number of odd elements $x of the $x input.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbullsx6h.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => x match {\n\
    \            case x if x.toString.toInt == x => odds += x.toString.toInt\n   \
    \         case _ => ()\n        })\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvrn9y6u9.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpvrn9y6u9.scala:15:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x.toString.toInt\
    \ == x => odds += x.toString.toInt\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types Int and\
    \ String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659795029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                val c = str.charAt(j)\n                if(c == '1') {\n     \
    \               odds += 1 \n                }\n            }\n        }\n    \
    \    odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprd0mpmt0.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '9'\
    \ => odds += 2\n                    case '8' => odds -= 2\n                  \
    \  case '7' => odds += 3\n                    case '6' => odds -= 3\n        \
    \            case '5' => odds += 4\n                    case '4' => odds -= 4\n\
    \                    case '3' => odds += 5\n                    case '2' => odds\
    \ -= 5\n                    case '1' => odds += 6\n                    case '0'\
    \ => odds -= 6\n                    case '9' => odds += 7\n                  \
    \  case '8' => odds -= 7\n                    case '7' => odds += 8\n        \
    \            case '6' => odds -= 8\n                    case '5' => odds += 9\n\
    \                    case '4' => odds -= 9\n                    case '3' => odds\
    \ += 10\n                    case '2' => odds -= 10\n                    case\
    \ '1' => odds += 11\n                    case '0' => odds -= 11\n            \
    \        case '9' => odds += 12\n                    case '8' => odds -= 12\n\
    \                    case '7' => odds += 13\n                    case '6' => odds\
    \ -= 13\n                    case '5' => odds += 14\n                    case\
    \ '4' => odds -= 14\n                    case '3' => odds += 15\n            \
    \        case '2' => odds -= 15\n                    case '1' => odds += 16\n\
    \                    case '0' => odds -= 16\n                    case '9' => odds\
    \ += 17\n                    case '8' => odds -= 17\n                    case\
    \ '7' => odds += 18\n                    case '6' => odds -= 18\n            \
    \        case '5' => odds += 19\n                    case '4' => odds -= 19\n\
    \                    case '3' => odds += 20\n                    case '2' => odds\
    \ -= 20\n                    case '1' => odds += 21\n                    case\
    \ '0' => odds -= 21\n                    case '9' => odds += 22\n            \
    \        case '8' => odds -= 22\n                    case '7' => odds += 23\n\
    \                    case '6' => odds -= 23\n                    case '5' => odds\
    \ += 24\n                    case '4' => odds -= 24\n                    case\
    \ '3' => odds += 25\n                    case '2' => odds -= 25\n            \
    \        case '1' => odds += 26\n                    case '0' => odds -= 26\n\
    \                    case '9' => odds += 27\n                    case '8' => odds\
    \ -= 27\n                    case '7' => odds += 28\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxdkhsvr1.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpxdkhsvr1.scala:81:0 ----------------------------\e[0m\e[0m\n\e[31m81\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxdkhsvr1.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpxdkhsvr1.scala:80:0 -----------------\e\
    [0m\e[0m\n\e[33m78 |\e[0m    }\n\e[33m79 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount = 0\n        var oddDigits = 0\n        var oddDigitString = \"\
    \"\n        var oddDigitStrings: List[String] = Nil\n        var oddDigitStringsCount\
    \ = 0\n        var oddDigitStringsCount2 = 0\n        var oddDigitStringsCount3\
    \ = 0\n        var oddDigitStringsCount4 = 0\n        var oddDigitStringsCount5\
    \ = 0\n        var oddDigitStringsCount6 = 0\n        var oddDigitStringsCount7\
    \ = 0\n        var oddDigitStringsCount8 = 0\n        var oddDigitStringsCount9\
    \ = 0\n        var oddDigitStringsCount10 = 0\n        var oddDigitStringsCount11\
    \ = 0\n        var oddDigitStringsCount12 = 0\n        var oddDigitStringsCount13\
    \ = 0\n        var oddDigitStringsCount14 = 0\n        var oddDigitStringsCount15\
    \ = 0\n        var oddDigitStringsCount16 = 0\n        var oddDigitStringsCount17\
    \ = 0\n        var oddDigitStringsCount18 = 0\n        var oddDigitStringsCount19\
    \ = 0\n        var oddDigitStringsCount20 = 0\n        var oddDigitStringsCount21\
    \ = 0\n        var oddDigitStringsCount22 = 0\n        var oddDigitStringsCount23\
    \ = 0\n        var oddDigitStringsCount24 = 0\n        var oddDigitStringsCount25\
    \ = 0\n        var oddDigitStringsCount26 = 0\n        var oddDigitStringsCount27\
    \ = 0\n        var oddDigitStringsCount28 = 0\n        var oddDigitStringsCount29\
    \ = 0\n        var oddDigitStringsCount30 = 0\n        var oddDigitStringsCount31\
    \ = 0\n        var oddDigitStringsCount32 = 0\n        var oddDigitStringsCount33\
    \ = 0\n        var oddDigitStringsCount34 = 0\n        var oddDigitStringsCount35\
    \ = 0\n        var oddDigitStringsCount36 = 0\n        var oddDigitStringsCount37\
    \ = 0\n        var oddDigitStringsCount38 = 0\n        var oddDigitStringsCount39\
    \ = 0\n        var oddDigitStringsCount40 = 0\n        var oddDigitStringsCount41\
    \ = 0\n        var oddDigitStringsCount42 = 0\n        var oddDigitStringsCount43\
    \ = 0\n        var oddDigitStringsCount44 = 0\n        var oddDigitStringsCount45\
    \ = 0\n        var oddDigitStringsCount46 = 0\n        var oddDigitStringsCount47\
    \ = 0\n        var oddDigitStringsCount48 = 0\n        var oddDigitStringsCount49\
    \ = 0\n        var oddDigitStringsCount50 = 0\n        var oddDigitStringsCount51\
    \ = 0\n        var oddDigitStringsCount52 = 0\n        var oddDigitStringsCount53\
    \ = 0\n        var oddDigitStringsCount54 = 0\n        var \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpff7w894e.scala:71:11 ---------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpff7w894e.scala:72:5 ---------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = new mutable.HashSet[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) if(str.charAt(j)\
    \ match {\n                case '1' => odd.add(1)\n                case '0' =>\
    \ odd.add(0)\n                case _ => odd.add(0)\n            })\n        }\n\
    \        odd.toList.map(i => s\"the number of odd elements ${i}n the str${i}ng\
    \ ${i} of the ${i}nput.\")\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6al0qwaf.scala:21:8 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp6al0qwaf.scala:13:22 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += (str.charAt(j).toInt\
    \ - '0').toInt\n                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'\
    \ | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't'\
    \ | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt - 'a').toInt\n\
    \                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'\
    \ | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V'\
    \ | 'W' | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt - 'A').toInt\n     \
    \               case _ => odds += 0\n                })\n            }\n     \
    \   }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfja_uq8l.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpfja_uq8l.scala:13:19 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_ match\
    \ {\n                case x if x.isDigit => true\n                case _ => false\n\
    \            }).length\n            odds.add(oddDigits)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpokeebuh8.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdcwucjjp.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => if (x.toString.toInt%2\
    \ == 1) odds += x.toString.toInt)\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnah1vwou.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val numOdds = x.toInt\n            for(i <- 0 until numOdds) {\n    \
    \            odds += numOdds\n            }\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7uhj15kw.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) if(str.charAt(j)\
    \ match {\n                case '1' => odds += 1\n                case '0' =>\
    \ odds -= 1\n                case _ => ()\n            })\n        }\n       \
    \ odds match {\n            case Nil => Nil\n            case x :: xs => x match\
    \ {\n                case 0 => Nil\n                case 1 => List(\"the number\
    \ of odd elements \" + x + \" of the \" + lst.size + \" input.\")\n          \
    \      case _ => oddCount(xs)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppusc6c_e.scala:21:8 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmppusc6c_e.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmppusc6c_e.scala:19:26 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m _ => ()\n\e[31m\e[31m   |\e\
    [0m                          ^^\e[0m\n\e[31m   |\e[0m                        \
    \  Found:    Unit\n\e[31m   |\e[0m                          Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppusc6c_e.scala:24:28\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e\
    [0m x :: xs => x \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                   \
    \         ^\e[0m\n\e[31m   |\e[0m                            Not found: x\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppusc6c_e.scala:26:63\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mcase\e\
    [0m \e[31m1\e[0m => List(\e[31m\"the number of odd elements \"\e[0m + x + \e[31m\"\
    \ of the \"\e[0m + lst.size + \e[31m\" input.\"\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                                            Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppusc6c_e.scala:27:35\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mcase\e\
    [0m _ => oddCount(xs)\n\e[31m\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1659795032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(c => c\
    \ % 2 == 1)\n            odds.+=numOdds\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpq7n3rx7n.scala:17:26 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            odds.+=numOdds\n\e[31m\e[31m   |\e[0m   \
    \                       ^\e[0m\n\e[31m   |\e[0m                          expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpq7n3rx7n.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(c => c.isDigit)\n\
    \            odds.add(numOdds)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsnoicoq4.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => {\n        \
    \    val digits = x.toInt\n            val odd = digits % 2\n            odds.add(odd)\n\
    \        })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5t9v3lj.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n    \
    \        val oddDigits = s.filter(_.isDigit).length\n            odds.+=((oddDigits\
    \ % 2))\n        })\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpezmqzerk.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val oddDigits = str.count(_ == '1')\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprp2hzpx2.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x != '0').count(x => x != '1')\n            odds.add(oddDigits)\n        }\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv3r60vvt.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                val digit = str.charAt(j)\n                if(digit == '1') {\n\
    \                    odds.add(1)\n                }\n                else if(digit\
    \ == '0') {\n                    odds.add(0)\n                }\n            }\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz49h10w_.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = new mutable.HashSet[Int]()\n        val even = new mutable.HashSet[Int]()\n\
    \        lst.foreach(x => {\n            val s = x.toInt\n            if (s %\
    \ 2 == 0) even.add(s)\n            else odd.add(s)\n        })\n        val odd_count\
    \ = odd.size\n        val even_count = even.size\n        val result = new mutable.ArrayBuffer[String]()\n\
    \        if (odd_count > 0 && even_count > 0) {\n            result.append(\"\
    the number of odd elements \" + odd_count + \" the str\" + odd_count + \" of the\
    \ \" + odd_count + \"nput.\")\n        }\n        if (odd_count > 0 && even_count\
    \ == 0) {\n            result.append(\"the number of odd elements \" + odd_count\
    \ + \" the str\" + odd_count + \" of the \" + odd_count + \"nput.\")\n       \
    \ }\n        if (odd_count == 0 && even_count > 0) {\n            result.append(\"\
    the number of odd elements \" + even_count + \" the str\" + even_count + \" of\
    \ the \" + even_count + \"nput.\")\n        }\n        if (odd_count == 0 && even_count\
    \ == 0) {\n            result.append(\"the number of odd elements \" + odd_count\
    \ + \" the str\" + odd_count + \" of the \" + odd_count + \"nput.\")\n       \
    \ }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxkn945_q.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxkn945_q.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxkn945_q.scala:22:25 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n    \
    \        val n = s.toInt\n            odds += n\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu01v6j9l.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) == '1') {\n                    odds += (str.length\
    \ - j)\n                }\n            }\n        }\n        odds.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplfexruec.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.count(_ ==\
    \ '1')\n            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxz8gaxa6.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach { s =>\n    \
    \        val n = s.toInt\n            val odd = if (n % 2 == 1) 1 else 0\n   \
    \         odds.add(odd)\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiwja733l.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => if (x.toString.toInt%2==1)\
    \ odds += x.toString.toInt)\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb29jcw3g.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length)\n\
    \                if(str.charAt(j) isDigit) {\n                    val n = str.charAt(j).toInt\n\
    \                    if(n % 2 == 1)\n                        odds += \"the number\
    \ of odd elements \" + n + \"n the str\" + n + \"of the \" + i + \".\"\n     \
    \           }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdfbmxaum.scala:17:40 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m(str.charAt(j) isDigit)\
    \ {\n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m')'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdfbmxaum.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.Set[Int]()\n        lst.foreach(x => {\n            val\
    \ digits = x.toInt\n            for(i <- 0 until digits) {\n                odds\
    \ += digits%2\n                digits /= 2\n            }\n        })\n      \
    \  val result = lst.map(x => s\"the number of odd elements ${odds.size} the str$x\
    \ of the $x\")\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyj34ad_d.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpyj34ad_d.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                digits /= \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value\
    \ /= is not a member of Int - did you mean digits.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659795035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val digits = x.toInt\n            val odd = digits % 2\n            odds.add(odd)\n\
    \        })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgd0jcoyr.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => {\n        \
    \    val digits = x.toInt\n            for(i <- 0 until digits) odds += digits(i)\n\
    \        })\n        odds.toList.map(x => s\"the number of odd elements $x of\
    \ the $x\").mkString(\", \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fexxej3.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length)\n\
    \                if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '1'\
    \ => odds += 0\n                    case '0' => odds -= 1\n                  \
    \  case '1' => odds += -1\n                    case '0' => odds += 0\n       \
    \             case '1' => odds += 1\n                    case '0' => odds -= 1\n\
    \                    case '1' => odds += 0\n                    case '0' => odds\
    \ -= 1\n                    case '1' => odds += -1\n                    case '0'\
    \ => odds += 0\n                    case '1' => odds += 1\n                  \
    \  case '0' => odds -= 1\n                    case '1' => odds += 0\n        \
    \            case '0' => odds -= 1\n                    case '1' => odds += -1\n\
    \                    case '0' => odds += 0\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '1'\
    \ => odds += 0\n                    case '0' => odds -= 1\n                  \
    \  case '1' => odds += -1\n                    case '0' => odds += 0\n       \
    \             case '1' => odds += 1\n                    case '0' => odds -= 1\n\
    \                    case '1' => odds += 0\n                    case '0' => odds\
    \ -= 1\n                    case '1' => odds += -1\n                    case '0'\
    \ => odds += 0\n                    case '1' => odds += 1\n                  \
    \  case '0' => odds -= 1\n                    case '1' => odds += 0\n        \
    \            case '0' => odds -= 1\n                    case '1' => odds += -1\n\
    \                    case '0' => odds += 0\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '1'\
    \ => odds += 0\n                    case '0' => odds -= 1\n                  \
    \  case '1' => odds += -1\n                    case '0' => odds += 0\n       \
    \             case '1' => odds += 1\n                    case '0' => odds -= 1\n\
    \                    case '1' => odds += 0\n                    case '0' => odds\
    \ -= 1\n                    case '1' => odds += -1\n                    case '0'\
    \ => odds += 0\n                    case '1' => odds += 1\n                  \
    \  case '0' => odds -= 1\n                    case '1' => odds += 0\n        \
    \            case '0' => odds -= 1\n                    case '1' => odds += -1\n\
    \                    case '0' => odds += 0\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '1'\
    \ => odds += 0\n                    case '0' => odds -= 1\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7fwbncx7.scala:78:4 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp7fwbncx7.scala:85:0 ----------------------------\e[0m\e[0m\n\e[31m85\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7fwbncx7.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmp7fwbncx7.scala:84:0 -----------------\e\
    [0m\e[0m\n\e[33m82 |\e[0m    }\n\e[33m83 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                val digit = str.charAt(j)\n                if(digit == '1') {\n\
    \                    odds.add(1)\n                }\n                else {\n\
    \                    odds.add(0)\n                }\n            }\n        }\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpipd2ymef.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) == '1') {\n                    odds.add(1)\n\
    \                }\n            }\n        }\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptz3iadll.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) == '1') {\n                    odds.add(1)\n\
    \                }\n            }\n        }\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptz3iadll.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val digits = str.filter(_.isDigit)\n\
    \            for(d <- digits) {\n                val odd = digits.length - d.length\n\
    \                odds.add(odd)\n            }\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbev8lzxa.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbev8lzxa.scala:18:44 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36modd\e[0m = digits.length\
    \ - d.length\n\e[31m\e[31m   |\e[0m                                          ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659795036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.Set[Int]()\n        lst.foreach(s => {\n            val\
    \ oddDigits = s.filter(_.isDigit).length\n            odds.add(oddDigits)\n  \
    \      })\n        odds.toList.map(s => s\"the number of odd elements $s in the\
    \ input.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5tppaj0e.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(s => {\n        \
    \    val numOdds = s.length - s.filter(_.isDigit).length\n            odds.+=numOdds\n\
    \        })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwnkojcjy.scala:16:26 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            odds.+=numOdds\n\e[31m\e[31m   |\e[0m   \
    \                       ^\e[0m\n\e[31m   |\e[0m                          expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwnkojcjy.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) == '1') {\n                    odd += 1 // count\
    \ odd digits\n                }\n            }\n        }\n        odd.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy9kel7hs.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) == '1') {\n                    odds += 1 \n\
    \                }\n            }\n        }\n        odds match {\n         \
    \   case Nil => Nil\n            case x :: xs => x +: oddCount(xs)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk1etsjdy.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpk1etsjdy.scala:24:42 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m x :: xs => x +: oddCount(xs)\n\
    \e[31m\e[31m   |\e[0m                                          ^^\e[0m\n\e[31m\
    \   |\e[0m                                          Not found: xs\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk1etsjdy.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m x :: xs => x +: oddCount(xs)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdcwucjjp.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => if (x.toString.toInt%2\
    \ == 1) odds += x.toString.toInt)\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnah1vwou.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val count = str.count(_ == '1')\n\
    \            odds.add(count)\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_un6vu6h.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x.isDigit).length\n            odds.add(oddDigits)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp25u24o7v.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val s = lst(i)\n            val oddDigits = s.filter(x => x % 2 !=\
    \ 0).length\n            odds.add(oddDigits)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsy4z_93l.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '9'\
    \ => odds -= 1\n                    case '8' => odds += 1\n                  \
    \  case '7' => odds += 1\n                    case '6' => odds += 1\n        \
    \            case '5' => odds += 1\n                    case '4' => odds += 1\n\
    \                    case '3' => odds += 1\n                    case '2' => odds\
    \ += 1\n                    case '1' => odds += 1\n                    case '0'\
    \ => odds += 1\n                    case '9' => odds += 1\n                  \
    \  case '8' => odds += 1\n                    case '7' => odds += 1\n        \
    \            case '6' => odds += 1\n                    case '5' => odds += 1\n\
    \                    case '4' => odds += 1\n                    case '3' => odds\
    \ += 1\n                    case '2' => odds += 1\n                    case '1'\
    \ => odds += 1\n                    case '0' => odds += 1\n                  \
    \  case '9' => odds += 1\n                    case '8' => odds += 1\n        \
    \            case '7' => odds += 1\n                    case '6' => odds += 1\n\
    \                    case '5' => odds += 1\n                    case '4' => odds\
    \ += 1\n                    case '3' => odds += 1\n                    case '2'\
    \ => odds += 1\n                    case '1' => odds += 1\n                  \
    \  case '0' => odds += 1\n                    case '9' => odds += 1\n        \
    \            case '8' => odds += 1\n                    case '7' => odds += 1\n\
    \                    case '6' => odds += 1\n                    case '5' => odds\
    \ += 1\n                    case '4' => odds += 1\n                    case '3'\
    \ => odds += 1\n                    case '2' => odds += 1\n                  \
    \  case '1' => odds += 1\n                    case '0' => odds += 1\n        \
    \            case '9' => odds += 1\n                    case '8' => odds += 1\n\
    \                    case '7' => odds += 1\n                    case '6' => odds\
    \ += 1\n                    case '5' => odds += 1\n                    case '4'\
    \ => odds += 1\n                    case '3' => odds += 1\n                  \
    \  case '2' => odds += 1\n                    case '1' => odds += 1\n        \
    \            case '0' => odds += 1\n                    case '9' => odds += 1\n\
    \                    case '8' => odds += 1\n                    case '7' => odds\
    \ += 1\n                    case '6' => odds += 1\n                    case '5'\
    \ => odds += 1\n                    case '4' => odds += 1\n                  \
    \  case '3' => odds += 1\n                    case '2' => odds += 1\n        \
    \            case '1' => odds += 1\n                    case '0' => odds += 1\n\
    \                    case '9' => odds += 1\n                    case '8' => odds\
    \ += 1\n                    case '7' => odds += 1\n                    case '6'\
    \ => odds += 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp21i10oxq.scala:86:4 ----------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp21i10oxq.scala:93:0 ----------------------------\e[0m\e[0m\n\e[31m93\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp21i10oxq.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmp21i10oxq.scala:92:0 -----------------\e\
    [0m\e[0m\n\e[33m90 |\e[0m    }\n\e[33m91 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => if (x.toString.toInt%2\
    \ == 1) odds += x.toString.toInt)\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwa_lxtzr.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => if (x.toString.toInt\
    \ == 0) odds += 0 else odds += x.toString.toInt)\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ch22fac.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val numOddDigits = str.count(_ == '1')\n\
    \            odds.add(numOddDigits)\n        }\n        odds.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp91lpcbl2.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ => odds += 0\n                    case '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += 1\n                    else => odds += 1\n                }\n\
    \            }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp91hlc4pi.scala:20:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    \e[33melse\e[0m => odds += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m     \
    \               end of statement expected but 'else' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmp91hlc4pi.scala:22:12 ---------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e\
    [31m   |\e[0m            ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp91hlc4pi.scala:13:19 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds.add(str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds.add(str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'\
    \ | 'Z' => odds.add(str.charAt(j).toInt)\n                    case '*' => odds.add(0)\n\
    \                    case '?' => odds.add(0)\n                    case '#' =>\
    \ odds.add(0)\n                    case '$' => odds.add(0)\n                 \
    \   case '%' => odds.add(0)\n                    case '^' => odds.add(0)\n   \
    \                 case '&' => odds.add(0)\n                    case '*' => odds.add(0)\n\
    \                    case '+' => odds.add(0)\n                    case '-' =>\
    \ odds.add(0)\n                    case '/' => odds.add(0)\n                 \
    \   case '=' => odds.add(0)\n                    case '<' => odds.add(0)\n   \
    \                 case '>' => odds.add(0)\n                    case '?' => odds.add(0)\n\
    \                    case '!' => odds.add(0)\n                    case '@' =>\
    \ odds.add(0)\n                    case '{' => odds.add(0)\n                 \
    \   case '}' => odds.add(0)\n                    case '|' => odds.add(0)\n   \
    \                 case '\\\\' => odds.add(0)\n                    case '[' | ']'\
    \ => odds.add(0)\n                    case '(' | ')' => odds.add(0)\n        \
    \            case '{' => odds.add(0)\n                    case '}' => odds.add(0)\n\
    \                    case '|' => odds.add(0)\n                    case '\\\\'\
    \ => odds.add(0)\n                    case '[' | ']' => odds.add(0)\n        \
    \            case '(' | ')' => odds.add(0)\n                    case '{' => odds.add(0)\n\
    \                    case '}' => odds.add(0)\n                    case '|' =>\
    \ odds.add(0)\n                    case '\\\\' => odds.add(\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphkl8ma3s.scala:53:42 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m                    \e[33mcase\e[0m \e[31m'\\\\'\e[0m\
    \ => odds.add(\n\e[31m\e[31m   |\e[0m                                        \
    \  ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmphkl8ma3s.scala:55:4 ----------------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphkl8ma3s.scala:62:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m62 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmphkl8ma3s.scala:13:19 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmphkl8ma3s.scala:61:0 -----------------\e\
    [0m\e[0m\n\e[33m59 |\e[0m    }\n\e[33m60 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val numOdds = str.count(c => c % 2\
    \ == 1)\n            odds.add(numOdds)\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwq8zf36v.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach { x =>\n    \
    \        val digits = x.toInt\n            digits.toString.toList.foreach { y\
    \ =>\n                if (y % 2 == 1) odds += digits\n            }\n        }\n\
    \        odds.toList.map { x => s\"the number of odd elements $x of the $x input\"\
    \ }.mkString(\",\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8hweq95g.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '1'\
    \ => odds += -1\n                    case '0' => odds -= -1\n                \
    \    case '1' => odds += 2\n                    case '0' => odds -= 2\n      \
    \              case '1' => odds += -2\n                    case '0' => odds -=\
    \ -2\n                    case '1' => odds += 3\n                    case '0'\
    \ => odds -= 3\n                    case '1' => odds += -3\n                 \
    \   case '0' => odds -= -3\n                    case '1' => odds += 4\n      \
    \              case '0' => odds -= 4\n                    case '1' => odds +=\
    \ -4\n                    case '0' => odds -= -4\n                    case '1'\
    \ => odds += 5\n                    case '0' => odds -= 5\n                  \
    \  case '1' => odds += -5\n                    case '0' => odds -= -5\n      \
    \              case '1' => odds += 6\n                    case '0' => odds -=\
    \ 6\n                    case '1' => odds += -6\n                    case '0'\
    \ => odds -= -6\n                    case '1' => odds += 7\n                 \
    \   case '0' => odds -= 7\n                    case '1' => odds += -7\n      \
    \              case '0' => odds -= -7\n                    case '1' => odds +=\
    \ 8\n                    case '0' => odds -= 8\n                    case '1' =>\
    \ odds += -8\n                    case '0' => odds -= -8\n                   \
    \ case '1' => odds += 9\n                    case '0' => odds -= 9\n         \
    \           case '1' => odds += -9\n                    case '0' => odds -= -9\n\
    \                    case '1' => odds += 10\n                    case '0' => odds\
    \ -= 10\n                    case '1' => odds += -10\n                    case\
    \ '0' => odds -= -10\n                    case '1' => odds += 11\n           \
    \         case '0' => odds -= 11\n                    case '1' => odds += -11\n\
    \                    case '0' => odds -= -11\n                    case '1' =>\
    \ odds += 12\n                    case '0' => odds -= 12\n                   \
    \ case '1' => odds += -12\n                    case '0' => odds -= -12\n     \
    \               case '1' => odds += 13\n                    case '0' => odds -=\
    \ 13\n                    case '1' => odds += -13\n                    case '0'\
    \ => odds -= -13\n                    case '1' => odds += 14\n               \
    \     case '0' => odds -= 14\n                    case '1' => odds += -14\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1x8cxxb7.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp1x8cxxb7.scala:81:0 ----------------------------\e[0m\e[0m\n\e[31m81\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1x8cxxb7.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmp1x8cxxb7.scala:80:0 -----------------\e\
    [0m\e[0m\n\e[33m78 |\e[0m    }\n\e[33m79 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x % 2 != 0)\n            odds.add(oddDigits.size)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5fayugal.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '9'\
    \ => odds += 10\n                    case '8' => odds -= 10\n                \
    \    case '7' => odds += 100\n                    case '6' => odds -= 100\n  \
    \                  case '5' => odds += 1000\n                    case '4' => odds\
    \ -= 1000\n                    case '3' => odds += 10000\n                   \
    \ case '2' => odds -= 10000\n                    case '1' => odds += 100000\n\
    \                    case '0' => odds -= 100000\n                    case '9'\
    \ => odds += 1000000\n                    case '8' => odds -= 1000000\n      \
    \              case '7' => odds += 10000000\n                    case '6' => odds\
    \ -= 10000000\n                    case '5' => odds += 100000000\n           \
    \         case '4' => odds -= 100000000\n                    case '3' => odds\
    \ += 1000000000\n                    case '2' => odds -= 1000000000\n        \
    \            case '1' => odds += 10000000000\n                    case '0' =>\
    \ odds -= 10000000000\n                    case '9' => odds += 100000000000\n\
    \                    case '8' => odds -= 100000000000\n                    case\
    \ '7' => odds += 1000000000000\n                    case '6' => odds -= 1000000000000\n\
    \                    case '5' => odds += 10000000000000\n                    case\
    \ '4' => odds -= 10000000000000\n                    case '3' => odds += 100000000000000\n\
    \                    case '2' => odds -= 100000000000000\n                   \
    \ case '1' => odds += 1000000000000000\n                    case '0' => odds -=\
    \ 1000000000000000\n                    case '9' => odds += 10000000000000000\n\
    \                    case '8' => odds -= 10000000000000000\n                 \
    \   case '7' => odds += 100000000000000000\n                    case '6' => odds\
    \ -= 100000000000000000\n                    case '5' => odds += 1000000000000000000\n\
    \                    case '4' => odds -= 1000000000000000000\n               \
    \     case '3' => odds += 10000000000000000000\n                    case '2' =>\
    \ odds -= 10000000000000000000\n                    case '1' => odds += 100000000000000000000\n\
    \                    case '0' => odds -= 100000000000000000000\n             \
    \       case '9' => odds += 1000000000000000000000\n                    case '8'\
    \ => odds -= 1000000000000000000000\n                    case '7' => odds += 10000000000000000000000\n\
    \                    case '6' => odds -= 10000000000000000000000\n           \
    \         case '5' => odds += 100000000000000000000000\n                    case\
    \ '4' => odds -= 100000000000000000000000\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp56hxocgk.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp56hxocgk.scala:75:0 ----------------------------\e[0m\e[0m\n\e[31m75\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp56hxocgk.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmp56hxocgk.scala:74:0 -----------------\e\
    [0m\e[0m\n\e[33m72 |\e[0m    }\n\e[33m73 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x != '0').count(x => x != '1')\n            odds.add(oddDigits)\n        }\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_0vhh4o0.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdcwucjjp.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x match {\n                case x if x.isDigit => true\n                case\
    \ _ => false\n            }).length\n            odds.add(oddDigits)\n       \
    \ }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmparg4ly6o.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' => odds\
    \ += 0\n                    case '1' => odds += 1\n                    case '2'\
    \ => odds += 2\n                    case '3' => odds += 3\n                  \
    \  case '4' => odds += 4\n                    case '5' => odds += 5\n        \
    \            case '6' => odds += 6\n                    case '7' => odds += 7\n\
    \                    case '8' => odds += 8\n                    case '9' => odds\
    \ += 9\n                    case 'a' => odds += 10\n                    case 'b'\
    \ => odds += 11\n                    case 'c' => odds += 12\n                \
    \    case 'd' => odds += 13\n                    case 'e' => odds += 14\n    \
    \                case 'f' => odds += 15\n                    case 'A' => odds\
    \ += 10\n                    case 'B' => odds += 11\n                    case\
    \ 'C' => odds += 12\n                    case 'D' => odds += 13\n            \
    \        case 'E' => odds += 14\n                    case 'F' => odds += 15\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += str.charAt(j).toInt\n                    case 'a' | 't' | 'e'\
    \ | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'B' | 't' | 'e' | 'i'\
    \ | 'o' | 'u' | 'C' | 't' | 'e' | 'i' | 'o' | 'u' | 'D' | 't' | 'e' | 'i' | 'o'\
    \ | 'u' | 'E' | 't' | 'e' | 'i' | 'o' | 'u' | 'F' | 't' | 'e' | 'i' | 'o' | 'u'\
    \ => odds += str.charAt(j).toInt\n                    case 'a' | 't' | 'e' | 'i'\
    \ | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'B' | 't' | 'e' | 'i' | 'o'\
    \ | 'u' | 'C' | 't' | 'e' | 'i' | 'o' | 'u' | 'D' | 't' | 'e' | 'i' | 'o' | 'u'\
    \ | 'E' | 't' | 'e' | 'i' | 'o' | 'u' | 'F' | 't' | 'e' | 'i' | 'o' | 'u' => odds\
    \ += str.charAt(j).toInt\n                    case 'a' | 't' | 'e' | 'i' | 'o'\
    \ | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'B' | 't' | 'e' | 'i' | 'o' | 'u'\
    \ | 'C' | 't' | 'e' | 'i' | 'o' | 'u' | 'D' | 't' | 'e' | 'i' | 'o' | 'u' | 'E'\
    \ | 't' | 'e' | 'i' | '\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzk1u2oua.scala:43:229 ----------------------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                    \e[33mcase\e[0m \e[31m'a'\e[0m |\
    \ \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e\
    [0m | \e[31m'A'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e\
    [0m | \e[31m'u'\e[0m | \e[31m'B'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e\
    [0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'C'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e\
    [0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'D'\e[0m | \e[31m't'\e\
    [0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'E'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | '\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                              unclosed\
    \ character literal\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzk1u2oua.scala:45:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpzk1u2oua.scala:52:0 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzk1u2oua.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzk1u2oua.scala:44:4\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \    ^\e[0m\n\e[31m   |\e[0m    Found:    Unit\n\e[31m   |\e[0m    Required: Boolean\n\
    \e[31m   |\e[0"
  stdout: ''
  timestamp: 1659795039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val digits = x.toInt\n            val odd = digits % 2\n            odds.add(odd)\n\
    \        })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgd0jcoyr.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(_ == '1')\n\
    \            odds += numOdds\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4alrae3r.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                val digit = str.charAt(j)\n                if(digit == '1') {\n\
    \                    odds.add(1)\n                }\n                else if(digit\
    \ == '0') {\n                    odds.add(0)\n                }\n            }\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz49h10w_.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => x match {\n\
    \            case x if x.matches(\"\\\\d+\") => x match {\n                case\
    \ x if x.toString.toInt%2 == 1 => odds.push(x)\n                case _ => None\n\
    \            }\n            case _ => None\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpejqkjkf2.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' => odds\
    \ += 0\n                    case '1' => odds += 1\n                    case '2'\
    \ => odds += 2\n                    case '3' => odds += 3\n                  \
    \  case '4' => odds += 4\n                    case '5' => odds += 5\n        \
    \            case '6' => odds += 6\n                    case '7' => odds += 7\n\
    \                    case '8' => odds += 8\n                    case '9' => odds\
    \ += 9\n                    case 'a' => odds += 10\n                    case 'b'\
    \ => odds += 11\n                    case 'c' => odds += 12\n                \
    \    case 'd' => odds += 13\n                    case 'e' => odds += 14\n    \
    \                case 'f' => odds += 15\n                    case 'A' => odds\
    \ += 10\n                    case 'B' => odds += 11\n                    case\
    \ 'C' => odds += 12\n                    case 'D' => odds += 13\n            \
    \        case 'E' => odds += 14\n                    case 'F' => odds += 15\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += str.charAt(j).toInt\n                    case 'a' | 't' | 'e'\
    \ | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'B' | 't' | 'e' | 'i'\
    \ | 'o' | 'u' | 'C' | 't' | 'e' | 'i' | 'o' | 'u' | 'D' | 't' | 'e' | 'i' | 'o'\
    \ | 'u' | 'E' | 't' | 'e' | 'i' | 'o' | 'u' | 'F' | 't' | 'e' | 'i' | 'o' | 'u'\
    \ => odds += str.charAt(j).toInt\n                    case 'a' | 't' | 'e' | 'i'\
    \ | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'B' | 't' | 'e' | 'i' | 'o'\
    \ | 'u' | 'C' | 't' | 'e' | 'i' | 'o' | 'u' | 'D' | 't' | 'e' | 'i' | 'o' | 'u'\
    \ | 'E' | 't' | 'e' | 'i' | 'o' | 'u' | 'F' | 't' | 'e' | 'i' | 'o' | 'u' | '0'\
    \ | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += str.charAt(j).toInt\n\
    \                    case 'a' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e'\
    \ | 'i' | 'o' | 'u' | 'B' | 't' | 'e' | 'i' | 'o' | 'u' | 'C' | 't' | 'e' | 'i'\
    \ | 'o' | '\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnnndnpx5.scala:43:163 ----------------------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                    \e[33mcase\e[0m \e[31m'a'\e[0m |\
    \ \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e\
    [0m | \e[31m'A'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e\
    [0m | \e[31m'u'\e[0m | \e[31m'B'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e\
    [0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'C'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e\
    [0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | '\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                              unclosed character\
    \ literal\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnnndnpx5.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpnnndnpx5.scala:52:0 ----------------------------\e[0m\e[0m\n\e[31m52\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnndnpx5.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpnnndnpx5.scala:44:4 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    Found:    Unit\n\e[31m   |\e[0m    Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpnnndnpx5.scala:51:0 -----------------\e\
    [0m\e[0m\n\e[33m49 |\e[0m    }\n\e[33m50 |\e[0m}\n\e[33m\e[33m   |\e[0m    "
  stdout: ''
  timestamp: 1659795040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val numOdds = str.count(c => c % 2\
    \ == 1)\n            odds.add(numOdds)\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwq8zf36v.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n    \
    \        val digits = s.toInt\n            val odd = digits % 2 != 0\n       \
    \     if (odd) odds.enqueue(digits)\n        })\n        if (odds.isEmpty) lst\
    \ else lst.map(s => s\"the number of odd elements ${odds.size} the str${odds.size}\
    \ ${s}\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfkwua9vv.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val numOdds = str.count(_ == '1')\n\
    \            odds.add(numOdds)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqrf5iu_p.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds += (oddDigits)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe_ljs9cv.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount = 0\n        var oddDigit = 0\n        var oddDigitCount = 0\n\
    \        var oddDigitCount2 = 0\n        var oddDigitCount3 = 0\n        var oddDigitCount4\
    \ = 0\n        var oddDigitCount5 = 0\n        var oddDigitCount6 = 0\n      \
    \  var oddDigitCount7 = 0\n        var oddDigitCount8 = 0\n        var oddDigitCount9\
    \ = 0\n        var oddDigitCount10 = 0\n        var oddDigitCount11 = 0\n    \
    \    var oddDigitCount12 = 0\n        var oddDigitCount13 = 0\n        var oddDigitCount14\
    \ = 0\n        var oddDigitCount15 = 0\n        var oddDigitCount16 = 0\n    \
    \    var oddDigitCount17 = 0\n        var oddDigitCount18 = 0\n        var oddDigitCount19\
    \ = 0\n        var oddDigitCount20 = 0\n        var oddDigitCount21 = 0\n    \
    \    var oddDigitCount22 = 0\n        var oddDigitCount23 = 0\n        var oddDigitCount24\
    \ = 0\n        var oddDigitCount25 = 0\n        var oddDigitCount26 = 0\n    \
    \    var oddDigitCount27 = 0\n        var oddDigitCount28 = 0\n        var oddDigitCount29\
    \ = 0\n        var oddDigitCount30 = 0\n        var oddDigitCount31 = 0\n    \
    \    var oddDigitCount32 = 0\n        var oddDigitCount33 = 0\n        var oddDigitCount34\
    \ = 0\n        var oddDigitCount35 = 0\n        var oddDigitCount36 = 0\n    \
    \    var oddDigitCount37 = 0\n        var oddDigitCount38 = 0\n        var oddDigitCount39\
    \ = 0\n        var oddDigitCount40 = 0\n        var oddDigitCount41 = 0\n    \
    \    var oddDigitCount42 = 0\n        var oddDigitCount43 = 0\n        var oddDigitCount44\
    \ = 0\n        var oddDigitCount45 = 0\n        var oddDigitCount46 = 0\n    \
    \    var oddDigitCount47 = 0\n        var oddDigitCount48 = 0\n        var oddDigitCount49\
    \ = 0\n        var oddDigitCount50 = 0\n        var oddDigitCount51 = 0\n    \
    \    var oddDigitCount52 = 0\n        var oddDigitCount53 = 0\n        var oddDigitCount54\
    \ = 0\n        var oddDigitCount55 = 0\n        var oddDigitCount56 = 0\n    \
    \    var oddDigitCount57 = 0\n        var oddDigitCount58 = 0\n        var oddDigitCount59\
    \ = 0\n        var oddDigitCount60 = 0\n        var oddDigitCount61 = 0\n    \
    \    var oddDigitCount62 = 0\n        var oddDigitCount63 = 0\n        var oddDigitCount64\
    \ = 0\n        var oddDigitCount65 = 0\n        var oddDigitCount66 = 0\n    \
    \    var oddDigitCount67 = 0\n        var oddDigitCount68 = 0\n        var oddDigitCount69\
    \ = 0\n        var oddDigitCount70 = 0\n        var oddDigitCount71 = 0\n    \
    \    var oddDigitCount72 = 0\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpecofbra3.scala:87:5\
    \ ---------------------\e[0m\e[0m\n\e[31m87 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.count(_ ==\
    \ '1')\n            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxz8gaxa6.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) == '1') {\n                    odds += 1 \n\
    \                }\n            }\n        }\n        odds match {\n         \
    \   case Nil => Nil\n            case _ => lst match {\n                case Nil\
    \ => Nil\n                case _ => lst.map(str => str.replaceFirst(\"1\", \"\
    n\"))\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0itntnnb.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795040
