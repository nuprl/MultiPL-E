name: HumanEval_83_starts_one_ends
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return the count of the numbers of n-digit\n\
  \    // positive integers that start or end with 1.\n    def startsOneEnds(n : Long)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
  \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
  \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
  \ == (18000l));\n    }\n\n}\n"
completions: ["        val ones = mutable.ListBuffer[Long]()\n        for (i <- 1\
    \ to n) ones += i\n        ones.count(_ == 1)", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val zeros = mutable.ListBuffer[Long]()\n        val counts = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val zerosCount =\
    \ mutable.ListBuffer[Long]()\n        val countsCount = mutable.ListBuffer[Long]()\n\
    \        val onesCountCount = mutable.ListBuffer[Long]()\n        val zerosCountCount\
    \ = mutable.ListBuffer[Long]()\n        val countsCountCount = mutable.ListBuffer[Long]()\n\
    \        val onesCountCountCount = mutable.ListBuffer[Long]()\n        val zerosCountCountCount\
    \ = mutable.ListBuffer[Long]()\n        val countsCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val onesCountCountCountCount = mutable.ListBuffer[Long]()\n        val\
    \ zerosCountCountCountCount = mutable.ListBuffer[Long]()\n        val countsCountCountCountCount\
    \ = mutable.ListBuffer[Long]()\n        val onesCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCountCountCountCountCount = mutable.ListBuffer[Long]()\n   \
    \     val countsCountCountCountCountCount = mutable.ListBuffer[Long]()\n     \
    \   val onesCountCountCountCountCount = mutable.ListBuffer[Long]()\n        val\
    \ zerosCountCountCountCountCount = mutable.ListBuffer[Long]()\n        val countsCountCountCountCountCount\
    \ = mutable.ListBuffer[Long]()\n        val onesCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCountCountCountCountCount = mutable.ListBuffer[Long]()\n   \
    \     val countsCountCountCountCountCount = mutable.ListBuffer[Long]()\n     \
    \   val onesCountCountCountCountCount = mutable.ListBuffer[Long]()\n        val\
    \ zerosCountCountCountCountCount = mutable.ListBuffer[Long]()\n        val countsCountCountCountCountCount\
    \ = mutable.ListBuffer[Long]()\n        val onesCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCountCountCountCountCount = mutable.ListBuffer[Long]()\n   \
    \     val countsCountCountCountCountCount = mutable.ListBuffer[Long]()\n     \
    \   val onesCountCountCountCountCount = mutable.ListBuffer[Long]()\n        val\
    \ zerosCountCountCountCountCount = ", "        var count = 0\n        var i =\
    \ n\n        while(i >= 10) {\n            i /= 10\n            count += 1\n \
    \       }\n        while(i >= 1) {\n            i /= 10\n            count +=\
    \ 1\n        }\n        return count", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer",
  "        val ones = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount2 = mutable.Set[Long]()\n        val onesCount3 = mutable.Set[Long]()\n\
    \        val onesCount4 = mutable.Set[Long]()\n        val onesCount5 = mutable.Set[Long]()\n\
    \        val onesCount6 = mutable.Set[Long]()\n        val onesCount7 = mutable.Set[Long]()\n\
    \        val onesCount8 = mutable.Set[Long]()\n        val onesCount9 = mutable.Set[Long]()\n\
    \        val onesCount10 = mutable.Set[Long]()\n        val onesCount11 = mutable.Set[Long]()\n\
    \        val onesCount12 = mutable.Set[Long]()\n        val onesCount13 = mutable.Set[Long]()\n\
    \        val onesCount14 = mutable.Set[Long]()\n        val onesCount15 = mutable.Set[Long]()\n\
    \        val onesCount16 = mutable.Set[Long]()\n        val onesCount17 = mutable.Set[Long]()\n\
    \        val onesCount18 = mutable.Set[Long]()\n        val onesCount19 = mutable.Set[Long]()\n\
    \        val onesCount20 = mutable.Set[Long]()\n        val onesCount21 = mutable.Set[Long]()\n\
    \        val onesCount22 = mutable.Set[Long]()\n        val onesCount23 = mutable.Set[Long]()\n\
    \        val onesCount24 = mutable.Set[Long]()\n        val onesCount25 = mutable.Set[Long]()\n\
    \        val onesCount26 = mutable.Set[Long]()\n        val onesCount27 = mutable.Set[Long]()\n\
    \        val onesCount28 = mutable.Set[Long]()\n        val onesCount29 = mutable.Set[Long]()\n\
    \        val onesCount30 = mutable.Set[Long]()\n        val onesCount31 = mutable.Set[Long]()\n\
    \        val onesCount32 = mutable.Set[Long]()\n        val onesCount33 = mutable.Set[Long]()\n\
    \        val onesCount34 = mutable.Set[Long]()\n        val one", "        val\
    \ ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n      \
    \  val counts = mutable.Map[Long, Long]()\n        val start = scala.math.pow(10,\
    \ n).toLong\n        val end = start + scala.math.pow(10, n).toLong - 1\n    \
    \    while(start <= end) {\n            val mid = start + (end - start) / 2\n\
    \            if(mid % 10 == 1) {\n                ones += mid\n            } else\
    \ {\n                zeros += mid\n            }\n            counts(mid) += 1\n\
    \            start = mid + 1\n        }\n        ones.size + zeros.size + 1",
  "        val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        var count =\
    \ 0\n        var last = 0\n        var current = 1\n        while(current <= n){\n\
    \            val next = (current * 10).toLong\n            if(next == 1){\n  \
    \              count += 1\n            }\n            current = next\n       \
    \ }\n        count", "        val ones = mutable.Set[Long]()\n        val zeros\
    \ = mutable.Set[Long]()\n        val counts = mutable.Map[Long, Long]()\n    \
    \    for (i <- 1 to n) {\n            if (i % 10 == 1) {\n                ones\
    \ += i\n            } else {\n                zeros += i\n            }\n    \
    \    }\n        ones.foreach { i =>\n            counts(i) ++ zeros.size\n   \
    \     }\n        ones.size + zeros.size", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer(0)\n\
    \        val maxDigit = math.min(math.ceil(n/10), n).toInt\n        val digits\
    \ = math.ceil(n/maxDigit).toInt\n        val digit = math.min(n, maxDigit).toInt\n\
    \        while(digit > 0) {\n            val digits = math.ceil(digit/maxDigit).toInt\n\
    \            val digit = math.min(digit, n).toInt\n            while(digits >\
    \ 0) {\n                val digit = math.min(digit, n).toInt\n               \
    \ val digits = math.ceil(digit/maxDigit).toInt\n                val digit = math.min(digit,\
    \ n).toInt\n                val digits = math.ceil(digit/maxDigit).toInt\n   \
    \             val digit = math.min(digit, n).toInt\n                val digits\
    \ = math.ceil(digit/maxDigit).toInt\n                val digit = math.min(digit,\
    \ n).toInt\n                val digits = math.ceil(digit/maxDigit).toInt\n   \
    \             val digit = math.min(digit, n).toInt\n                val digits\
    \ = math.ceil(digit/maxDigit).toInt\n                val digit = math.min(digit,\
    \ n).toInt\n                val digits = math.ceil(digit/maxDigit).toInt\n   \
    \             val digit = math.min(digit, n).toInt\n                val digits\
    \ = math.ceil(digit/maxDigit).toInt\n                val digit = math.min(digit,\
    \ n).toInt\n                val digits = math.ceil(digit/maxDigit).toInt\n   \
    \             val digit = math.min(digit, n).toInt\n                val digits\
    \ = math.ceil(digit/maxDigit).toInt\n                val digit = math.min(digit,\
    \ n).toInt\n                val digits = math.ceil(digit/maxDigit).toInt\n   \
    \             val digit = math.min(digit, n).toInt\n                val digits\
    \ = math.ceil(digit/maxDigit).toInt\n                val digit = math.min(digit,\
    \ n).toInt\n                val digits = math.ceil(digit/maxDigit).toInt\n   \
    \             val digit = math.min(digit, n).toInt\n                val digits\
    \ = math.ceil(digit/maxDigit).toInt\n                val digit = math.min(digit,\
    \ n).toInt\n                val digits = math.ceil(digit/maxDigit).toInt\n   \
    \             val digit = math.min(digit, n).toInt\n                val digits\
    \ = math.ceil(digit/maxDigit).toInt\n                val digit = math.min(digit,\
    \ n).toInt\n                val digits = math.ceil(digit/maxDigit).toInt\n   \
    \             val digit = math.min(digit, n).toInt\n                val digits\
    \ = math.ceil(digit/maxDigit).toInt", "        val ones = mutable.ListBuffer.empty[Long]\n\
    \        val zeros = mutable.ListBuffer.empty[Long]\n        val onesCount = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCount = mutable.ListBuffer.empty[Long]\n        val onesCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val zerosCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount3 = mutable.ListBuffer.empty[Long]\n        val zerosCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCount4 = mutable.ListBuffer.empty[Long]\n        val onesCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val zerosCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount6 = mutable.ListBuffer.empty[Long]\n        val zerosCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCount7 = mutable.ListBuffer.empty[Long]\n        val onesCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val zerosCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount9 = mutable.ListBuffer.empty[Long]\n        val zerosCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount10 = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCount10 = mutable.ListBuffer.empty[Long]\n        val onesCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val zerosCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount12 = mutable.ListBuffer.empty[Long]\n        val zerosCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCount13 = mutable.ListBuffer.empty[Long]\n        val onesCount14\
    \ = mutable.ListBuffer.empty[Long]\n        val zerosCount14 = mutable.ListBuffer.empty[Long]\n\
    \        val onesCount15 = mutable.ListBuffer.empty[Long]\n        val zerosCount15\
    \ = mutable.ListBuffer.empty[Long]\n        val onesCount16 = mutable.ListBuffer.empty[Long]\n\
    \        val zerosCount16 = mutable.ListBuffer.empty[Long]\n        val onesCount17\
    \ = mutable.ListBuffer.empty[Long]\n", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val counts = mutable.HashMap[Long,\
    \ Long]()\n        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val digits = n.toString.reverse.grouped(2).map(_.toInt)\n        val\
    \ digit = digits.head\n        val digits = digits.tail\n        val starts =\
    \ digits.takeWhile(digit => digit == 1).length\n        val ends = digits.dropWhile(digit\
    \ => digit == 1).length\n        counts.put(digit, starts + ends)\n        counts.put(digits,\
    \ starts + ends)\n        counts.put(ones, starts)\n        counts.put(zeros,\
    \ ends)\n        counts.put(n, 0)\n        counts.toMap", "        val ones =\
    \ mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n        val onesCount\
    \ = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n      \
    \  val onesCounts = mutable.Set[Long]()\n        val zerosCounts = mutable.Set[Long]()\n\
    \        val onesCountss = mutable.Set[Long]()\n        val zerosCountss = mutable.Set[Long]()\n\
    \        val onesCountsss = mutable.Set[Long]()\n        val zerosCountsss = mutable.Set[Long]()\n\
    \        val onesCountssss = mutable.Set[Long]()\n        val zerosCountssss =\
    \ mutable.Set[Long]()\n        val onesCountsssss = mutable.Set[Long]()\n    \
    \    val zerosCountsssss = mutable.Set[Long]()\n        val onesCountssssss =\
    \ mutable.Set[Long]()\n        val zerosCountssssss = mutable.Set[Long]()\n  \
    \      val onesCountsssssss = mutable.Set[Long]()\n        val zerosCountsssssss\
    \ = mutable.Set[Long]()\n        val onesCountssssssss = mutable.Set[Long]()\n\
    \        val zerosCountsssssss = mutable.Set[Long]()\n        val onesCountssssssss\
    \ = mutable.Set[Long]()\n        val zerosCountsssssss = mutable.Set[Long]()\n\
    \        val onesCountssssssss = mutable.Set[Long]()\n        val zerosCountsssssss\
    \ = mutable.Set[Long]()\n        val onesCountssssssss = mutable.Set[Long]()\n\
    \        val zerosCountssssssss = mutable.Set[Long]()\n        val onesCountsssssssss\
    \ = mutable.Set[Long]()\n        val zerosCountssssssss = mutable.Set[Long]()\n\
    \        val onesCountsssssssss = mutable.Set[Long]()\n        val zerosCountssssssss\
    \ = mutable.Set[Long]()\n        val onesCountsssssssss = mutable.Set[Long]()\n\
    \        val zerosCountssssssss = mutable.Set[Long]()\n        val onesCountsssss",
  "        val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n       \
    \ val counts = mutable.ArrayBuffer.empty[Long]\n        while(n > 0) {\n     \
    \       val digit = n % 10\n            n /= 10\n            if(digit == 1) ones\
    \ += digit\n            else if(digit == 0) zeros += digit\n            else {\n\
    \                val index = ones.indexOf(digit)\n                if(index >=\
    \ 0) counts(index) += 1\n                else {\n                    val index\
    \ = zeros.indexOf(digit)\n                    if(index >= 0) counts(index) +=\
    \ 1\n                }\n            }\n        }\n        counts.sum", "     \
    \   val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val counts = mutable.ArrayBuffer(0)\n        val remainder = n % 10\n\
    \        val lastDigit = n % 100\n        val lastDigitCount = if (lastDigit ==\
    \ 0) 1 else 0\n        val lastDigitCount = if (lastDigit == 0) 1 else 0\n   \
    \     val lastDigitCount = if (lastDigit == 0) 1 else 0\n        val lastDigitCount\
    \ = if (lastDigit == 0) 1 else 0\n        val lastDigitCount = if (lastDigit ==\
    \ 0) 1 else 0\n        val lastDigitCount = if (lastDigit == 0) 1 else 0\n   \
    \     val lastDigitCount = if (lastDigit == 0) 1 else 0\n        val lastDigitCount\
    \ = if (lastDigit == 0) 1 else 0\n        val lastDigitCount = if (lastDigit ==\
    \ 0) 1 else 0\n        val lastDigitCount = if (lastDigit == 0) 1 else 0\n   \
    \     val lastDigitCount = if (lastDigit == 0) 1 else 0\n        val lastDigitCount\
    \ = if (lastDigit == 0) 1 else 0\n        val lastDigitCount = if (lastDigit ==\
    \ 0) 1 else 0\n        val lastDigitCount = if (lastDigit == 0) 1 else 0\n   \
    \     val lastDigitCount = if (lastDigit == 0) 1 else 0\n        val lastDigitCount\
    \ = if (lastDigit == 0) 1 else 0\n        val lastDigitCount = if (lastDigit ==\
    \ 0) 1 else 0\n        val lastDigitCount = if (lastDigit == 0) 1 else 0\n   \
    \     val lastDigitCount = if (lastDigit == 0) 1 else 0\n        val lastDigitCount\
    \ = if (lastDigit == 0) 1 else 0\n        val lastDigitCount = if (lastDigit ==\
    \ 0) 1 else 0\n        val lastDigitCount = if (lastDigit == 0) 1 else 0\n   \
    \     val lastDigitCount = if (lastDigit == 0) 1 else 0\n        val lastDigitCount\
    \ = if (lastDigit == 0) 1 else 0\n        val lastDigitCount = if (lastDigit ==\
    \ 0) 1 else 0\n        val lastDigitCount = if (lastDigit == 0) 1 else 0\n   \
    \     val lastDigitCount = if (lastDigit == 0) 1 else 0\n        val lastDigitCount\
    \ = if (lastDigit == 0) 1 else 0\n        val lastDigitCount = if (lastDigit ==\
    \ 0) 1 else 0\n        val lastDigitCount = if (lastDigit == 0) 1 else 0\n   \
    \     val lastDigitCount = if (lastDigit == 0) 1 else 0\n        val lastDigitCount\
    \ = if (lastDigit == 0) 1 else 0\n        val lastDigitCount = if (lastDigit ==\
    \ 0) 1 else 0\n        val lastDigitCount = ", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val count = mutable.ArrayBuffer(0)\n\
    \        val onesCount = mutable.ArrayBuffer(0)\n        val zerosCount = mutable.ArrayBuffer(0)\n\
    \        val onesCount2 = mutable.ArrayBuffer(0)\n        val zerosCount2 = mutable.ArrayBuffer(0)\n\
    \        val onesCount3 = mutable.ArrayBuffer(0)\n        val zerosCount3 = mutable.ArrayBuffer(0)\n\
    \        val onesCount4 = mutable.ArrayBuffer(0)\n        val zerosCount4 = mutable.ArrayBuffer(0)\n\
    \        val onesCount5 = mutable.ArrayBuffer(0)\n        val zerosCount5 = mutable.ArrayBuffer(0)\n\
    \        val onesCount6 = mutable.ArrayBuffer(0)\n        val zerosCount6 = mutable.ArrayBuffer(0)\n\
    \        val onesCount7 = mutable.ArrayBuffer(0)\n        val zerosCount7 = mutable.ArrayBuffer(0)\n\
    \        val onesCount8 = mutable.ArrayBuffer(0)\n        val zerosCount8 = mutable.ArrayBuffer(0)\n\
    \        val onesCount9 = mutable.ArrayBuffer(0)\n        val zerosCount9 = mutable.ArrayBuffer(0)\n\
    \        val onesCount10 = mutable.ArrayBuffer(0)\n        val zerosCount10 =\
    \ mutable.ArrayBuffer(0)\n        val onesCount11 = mutable.ArrayBuffer(0)\n \
    \       val zerosCount11 = mutable.ArrayBuffer(0)\n        val onesCount12 = mutable.ArrayBuffer(0)\n\
    \        val zerosCount12 = mutable.ArrayBuffer(0)\n        val onesCount13 =\
    \ mutable.ArrayBuffer(0)\n        val zerosCount13 = mutable.ArrayBuffer(0)\n\
    \        val onesCount14 = mutable.ArrayBuffer(0)\n        val zerosCount14 =\
    \ mutable.ArrayBuffer(0)\n        val onesCount15 = mutable.ArrayBuffer(0)\n \
    \       val zerosCount15 = mutable.ArrayBuffer(0)\n        val onesCount16 = mutable.ArrayBuffer(0)\n\
    \        val zerosCount16 = mutable.ArrayBuffer(0)\n        val onesCount17 =\
    \ mutable.ArrayBuffer(0)\n        val zerosCount17 = mutable.ArrayBuffer(0)\n\
    \        val onesCount18 = mutable.ArrayBuffer(0)\n        val zerosCount18 =\
    \ mutable.ArrayBuffer(0)\n        val onesCount19 = mutable.ArrayBuffer(0)\n \
    \       val zerosCount19 = mutable.ArrayBuffer(0)\n        val onesCount20 = mutable.ArrayBuffer(0)\n\
    \        val zerosCount20 = mutable.ArrayBuffer(0)\n        val onesCount21 =\
    \ mutable.", "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val count = mutable.ArrayBuffer(0)\n        var i = 0\n        while\
    \ (i < n) {\n            if (ones.contains(i)) {\n                count += 1\n\
    \            }\n            if (zeros.contains(i)) {\n                count +=\
    \ 1\n            }\n            i += 1\n        }\n        count.length", "  \
    \      val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val count = mutable.ArrayBuffer(0)\n        val onesCount = mutable.ArrayBuffer(0)\n\
    \        val zerosCount = mutable.ArrayBuffer(0)\n        val onesZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosOnes = mutable.ArrayBuffer(0)\n        val onesOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosZeros = mutable.ArrayBuffer(0)\n        val onesZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOneOnes = mutable.ArrayBuffer(0)\n        val onesOneOnes =\
    \ mutable.ArrayBuffer(0)\n        val zerosZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val onesZeroZeroOnes = mutable.ArrayBuffer(0)\n        val zerosOneZeroOnes\
    \ = mutable.ArrayBuffer(0)\n        val onesOneZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosZeroOneOnes = mutable.ArrayBuffer(0)\n        val onesZeroOneOnes\
    \ = mutable.ArrayBuffer(0)\n        val zerosOneZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val onesOneZeroOneOnes = mutable.ArrayBuffer(0)\n        val zerosZeroOneZeroOnes\
    \ = mutable.ArrayBuffer(0)\n        val onesOneZeroZeroOneOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOneZeroZeroOneOnes = mutable.ArrayBuffer(0)\n        val onesOneZeroOneZeroOneOnes\
    \ = mutable.ArrayBuffer(0)\n        val zerosZeroOneZeroOneOneOnes = mutable.ArrayBuffer(0)\n\
    \        val onesOneZeroZeroOneZeroOneOnes = mutable.ArrayBuffer(0)\n        val\
    \ zerosOneZeroZeroOneZeroOneOnes = mutable.ArrayBuffer(0)\n        val onesOneZeroOneZeroOneZeroOneOnes\
    \ = mutable.ArrayBuffer(0)\n        val zerosZeroOneZeroOneZeroOneOneOnes = mutable.ArrayBuffer(0)\n\
    \        val onesOneZeroOneZeroOneZeroOneOnes = mutable.ArrayBuffer(0)\n     \
    \   val zerosOneZeroZeroOneZeroOneOneOnes = mutable.ArrayBuffer(0)\n        val\
    \ onesOneZeroOneZeroOneZeroOneZeroOneOnes = mutable.ArrayBuffer(0)\n        val\
    \ zerosZeroOneZeroOneZeroOneZeroOneOneOnes = mutable.ArrayBuffer(0)\n        val\
    \ onesOneZeroOneZeroOneZeroOneZeroOneOnes = mutable.ArrayBuffer(0)\n        val\
    \ zerosOneZeroZeroOneZeroOneZeroOneOneOnes = mutable.ArrayBuffer(0)\n        ",
  "        var count = 0\n        var last = 0\n        var lastOne = 0\n        var\
    \ lastTwo = 0\n        var lastThree = 0\n        var lastFour = 0\n        var\
    \ lastFive = 0\n        var lastSix = 0\n        var lastSeven = 0\n        var\
    \ lastEight = 0\n        var lastNine = 0\n        var lastTen = 0\n        var\
    \ lastEleven = 0\n        var lastTwelve = 0\n        var lastThirteen = 0\n \
    \       var lastFourteen = 0\n        var lastFifteen = 0\n        var lastSixteen\
    \ = 0\n        var lastSeventeen = 0\n        var lastEighteen = 0\n        var\
    \ lastNineteen = 0\n        var lastTwenty = 0\n        var lastTwentyOne = 0\n\
    \        var lastTwentyTwo = 0\n        var lastTwentyThree = 0\n        var lastTwentyFour\
    \ = 0\n        var lastTwentyFive = 0\n        var lastTwentySix = 0\n       \
    \ var lastTwentySeven = 0\n        var lastTwentyEight = 0\n        var lastTwentyNine\
    \ = 0\n        var lastThirty = 0\n        var lastThirtyOne = 0\n        var\
    \ lastThirtyTwo = 0\n        var lastThirtyThree = 0\n        var lastThirtyFour\
    \ = 0\n        var lastThirtyFive = 0\n        var lastThirtySix = 0\n       \
    \ var lastThirtySeven = 0\n        var lastThirtyEight = 0\n        var lastThirtyNine\
    \ = 0\n        var lastFourty = 0\n        var lastFourtyOne = 0\n        var\
    \ lastFourtyTwo = 0\n        var lastFourtyThree = 0\n        var lastFourtyFour\
    \ = 0\n        var lastFourtyFive = 0\n        var lastFourtySix = 0\n       \
    \ var lastFourtySeven = 0\n        var lastFourtyEight = 0\n        var lastFourtyNine\
    \ = 0\n        var lastFifty = 0\n        var lastFiftyOne = 0\n        var lastFiftyTwo\
    \ = 0\n        var lastFiftyThree = 0\n        var lastFiftyFour = 0\n       \
    \ var lastFiftyFive = 0\n        var lastFiftySix = 0\n        var lastFiftySeven\
    \ = 0\n        var lastFiftyEight = 0\n        var lastFiftyNine = 0\n       \
    \ var lastSixty = 0\n        var lastSixtyOne = 0\n        var lastSixtyTwo =\
    \ 0\n        var lastSixtyThree = 0\n        var lastSixtyFour = 0\n        var\
    \ lastSixtyFive = 0\n        var lastSixtySix = 0\n        var lastSixtySeven\
    \ = 0\n        var lastSixtyEight = 0", "        var count = 0\n        var last\
    \ = 0\n        while(n > 0){\n            val next = (n % 10) + 1\n          \
    \  if(next == 1){\n                count += 1\n            }\n            n /=\
    \ 10\n        }\n        last", "        val ones = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        while(n > 0){\n            ones += n\n       \
    \     n -= 1\n        }\n        ones.length", "        val ones = mutable.ListBuffer(1)\n\
    \        val zeros = mutable.ListBuffer(0)\n        var count = 0\n        while(n\
    \ > 0){\n            val digit = n % 10\n            if(digit == 1){\n       \
    \         ones += digit\n            }\n            else{\n                zeros\
    \ += digit\n            }\n            n /= 10\n        }\n        ones.length\
    \ match {\n            case 0 => count\n            case 1 => count + ones.length\n\
    \            case _ => count + ones.length + zeros.length\n        }", "     \
    \   val ones = mutable.ListBuffer[Long]()\n        var count = 0\n        for(i\
    \ <- 1 to n){\n            if(i%10 == 1){\n                ones += i\n       \
    \         count += 1\n            }\n        }\n        ones.length", "      \
    \  val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n \
    \       val counts = mutable.Map[Long, Long]()\n        val digits = n.toString.reverse.grouped(10).toList\n\
    \        for (i <- 0 until digits.size) {\n            val digit = digits(i)\n\
    \            if (digit.head == 1) {\n                ones ++= digit.tail\n   \
    \         } else {\n                zeros ++= digit.tail\n            }\n    \
    \    }\n        ones.toSeq.count(i => i == 1)", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val count = mutable.ArrayBuffer(0)\n\
    \        val onesCount = mutable.ArrayBuffer(0)\n        val zerosCount = mutable.ArrayBuffer(0)\n\
    \        val onesZeros = mutable.ArrayBuffer(0)\n        val zerosOnes = mutable.ArrayBuffer(0)\n\
    \        val onesOnes = mutable.ArrayBuffer(0)\n        val zerosZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosZeros = mutable.ArrayBuffer(0)\n        val zerosOnes = mutable.ArrayBuffer(0)\n\
    \        val onesZeros = mutable.ArrayBuffer(0)\n        val zerosOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosZeros = mutable.ArrayBuffer(0)\n        val zerosZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosOnes = mutable.ArrayBuffer(0)\n        val onesOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOnes = mutable.ArrayBuffer(0)\n        val zerosOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOnes = mutable.ArrayBuffer(0)\n        val zerosOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOnes = mutable.ArrayBuffer(0)\n        val zerosOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOnes = mutable.ArrayBuffer(0)\n        val zerosOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOnes = mutable.ArrayBuffer(0)\n        val zerosOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOnes = mutable.ArrayBuffer(0)\n        val zerosOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOnes = mutable.ArrayBuffer(0)\n        val zerosOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOnes = mutable.ArrayBuffer(0)\n        val zerosOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOnes = mutable.ArrayBuffer(0)\n        val zerosOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOnes = mutable.ArrayBuffer(0)\n        val zerosOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOnes = mutable.ArrayBuffer(0)\n        val zerosOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOnes = mutable.ArrayBuffer(0)\n        val zerosOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOnes = mutable.ArrayBuffer(0)\n        val zerosOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOnes = mutable.ArrayBuffer(0)\n        val zerosOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOnes = mutable.ArrayBuffer(0)\n        val zerosOnes = mutable.",
  "        val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        val digits = n.toString.reverse.grouped(2).map(_.toInt)\n\
    \        digits.foreach { digit =>\n            val start = digit._1\n       \
    \     val end = digit._2\n            if (start == 1 && end == 1) ones += digit._1\n\
    \            if (start == 1 && end == 0) zeros += digit._1\n            if (start\
    \ == 0 && end == 1) ones += digit._1\n            if (start == 0 && end == 0)\
    \ zeros += digit._1\n            if (start == 1) counts(digit._1) += 1\n     \
    \       if (end == 1) counts(digit._2) += 1\n        }\n        ones.toList.size\
    \ + (zeros.toList.size - ones.toList.size)", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer(0)\n\
    \        val onesCount = ones.takeWhile(_ < n).length\n        val zerosCount\
    \ = zeros.takeWhile(_ < n).length\n        val count = (onesCount + zerosCount)\
    \ / 2\n        val onesZeros = ones.takeWhile(_ < n).takeWhile(_ != 0)\n     \
    \   val zerosOnes = zeros.takeWhile(_ < n).takeWhile(_ != 0)\n        val onesZeroCount\
    \ = onesZeros.length\n        val zerosOneCount = zerosOnes.length\n        val\
    \ onesZeroZeroCount = onesZeroCount - zerosOneCount\n        val zerosOneOneCount\
    \ = zerosOneCount - onesZeroCount\n        val onesZeroOneCount = onesZeroCount\
    \ - zerosOneCount\n        val zerosOneZeroCount = zerosOneCount - onesZeroCount\n\
    \        val onesZeroZeroZeroCount = onesZeroZeroCount - zerosOneOneCount\n  \
    \      val zerosOneOneOneCount = zerosOneOneCount - onesZeroOneCount\n       \
    \ val onesZeroOneOneCount = onesZeroOneCount - zerosOneOneCount\n        val zerosOneZeroOneCount\
    \ = zerosOneCount - onesZeroOneCount\n        val onesZeroZeroOneCount = onesZeroZeroCount\
    \ - zerosOneZeroCount\n        val zerosOneOneZeroCount = zerosOneOneCount - onesZeroZeroCount\n\
    \        val onesZeroOneZeroCount = onesZeroOneCount - zerosOneZeroCount\n   \
    \     val zerosOneZeroOneCount = zerosOneCount - onesZeroOneCount\n        val\
    \ onesZeroZeroZeroCount = onesZeroZeroCount - zerosOneOneZeroCount\n        val\
    \ zerosOneOneOneCount = zerosOneOneCount - onesZeroOneOneCount\n        val onesZeroOneOneCount\
    \ = onesZeroOneCount - zerosOneOneCount\n        val zerosOneZeroOneCount = zerosOneCount\
    \ - onesZeroOneCount\n        val onesZeroZeroOneCount = onesZeroZeroCount - zerosOneOneZeroCount\n\
    \        val zerosOneOneZeroCount = zerosOneOneCount - onesZeroZeroOneCount\n\
    \        val onesZeroOneZeroCount = onesZeroOneCount - zerosOneZeroOneCount\n\
    \        val zerosOneZeroOneCount = zerosOneCount - onesZeroOneZeroCount\n   \
    \     val onesZeroZeroOneCount = onesZeroZeroCount - zerosOneOneZeroCount\n  \
    \      val ", "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        for(i <- 1 to n){\n \
    \           val x = i.toLong\n            if(x == 1){\n                ones +=\
    \ x\n            }\n            if(x == 0){\n                zeros += x\n    \
    \        }\n            counts(x) = counts.getOrElse(x, 0) + 1\n        }\n  \
    \      val onesCount = ones.toSeq.size\n        val zerosCount = zeros.toSeq.size\n\
    \        val totalCount = onesCount + zerosCount\n        val onesCount = ones.toSeq.size\n\
    \        val zerosCount = zeros.toSeq.size\n        val totalCount = onesCount\
    \ + zerosCount\n        val onesCount = ones.toSeq.size\n        val zerosCount\
    \ = zeros.toSeq.size\n        val totalCount = onesCount + zerosCount\n      \
    \  val onesCount = ones.toSeq.size\n        val zerosCount = zeros.toSeq.size\n\
    \        val totalCount = onesCount + zerosCount\n        val onesCount = ones.toSeq.size\n\
    \        val zerosCount = zeros.toSeq.size\n        val totalCount = onesCount\
    \ + zerosCount\n        val onesCount = ones.toSeq.size\n        val zerosCount\
    \ = zeros.toSeq.size\n        val totalCount = onesCount + zerosCount\n      \
    \  val onesCount = ones.toSeq.size\n        val zerosCount = zeros.toSeq.size\n\
    \        val totalCount = onesCount + zerosCount\n        val onesCount = ones.toSeq.size\n\
    \        val zerosCount = zeros.toSeq.size\n        val totalCount = onesCount\
    \ + zerosCount\n        val onesCount = ones.toSeq.size\n        val zerosCount\
    \ = zeros.toSeq.size\n        val totalCount = onesCount + zerosCount\n      \
    \  val onesCount = ones.toSeq.size\n        val zerosCount = zeros.toSeq.size\n\
    \        val totalCount = onesCount + zerosCount\n        val onesCount = ones.toSeq.size\n\
    \        val zerosCount = zeros.toSeq.size\n        val totalCount = onesCount\
    \ + zerosCount\n        val onesCount = ones.toSeq.size\n        val zerosCount\
    \ = zeros.toSeq.size\n        val totalCount = onesCount + zerosCount\n      \
    \  val onesCount = ones.toSeq.size\n        val zerosCount = zeros.toSeq.size\n\
    \        val totalCount = onesCount + zerosCount\n        val onesCount = ones.toSeq.size\n\
    \        val zerosCount = ", "        val ones = mutable.ListBuffer(1)\n     \
    \   val zeros = mutable.ListBuffer(0)\n        var count = 0\n        while (n\
    \ > 0) {\n            val digit = n % 10\n            if (digit == 1) {\n    \
    \            ones += digit\n            } else {\n                zeros += digit\n\
    \            }\n            n /= 10\n            count += 1\n        }\n     \
    \   ones.toList.size + (zeros.toList.size - ones.toList.size)", "        val ones\
    \ = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n     \
    \   val count = mutable.ArrayBuffer(0)\n        val onesCount = mutable.ArrayBuffer(0)\n\
    \        val zerosCount = mutable.ArrayBuffer(0)\n        val onesZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosOnes = mutable.ArrayBuffer(0)\n        val onesOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosZeros = mutable.ArrayBuffer(0)\n        val onesZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOneOnes = mutable.ArrayBuffer(0)\n        val onesOneOnes =\
    \ mutable.ArrayBuffer(0)\n        val zerosZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val onesZeroZeroOnes = mutable.ArrayBuffer(0)\n        val zerosOneZeroOnes\
    \ = mutable.ArrayBuffer(0)\n        val onesOneZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosZeroOneOnes = mutable.ArrayBuffer(0)\n        val onesZeroOneOnes\
    \ = mutable.ArrayBuffer(0)\n        val zerosOneZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val onesOneZeroZeroOnes = mutable.ArrayBuffer(0)\n        val zerosZeroOneZeroOnes\
    \ = mutable.ArrayBuffer(0)\n        val onesOneZeroZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOneZeroZeroOnes = mutable.ArrayBuffer(0)\n        val onesOneZeroZeroOnes\
    \ = mutable.ArrayBuffer(0)\n        val zerosOneZeroZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val onesOneZeroZeroZeros = mutable.ArrayBuffer(0)\n        val zerosOneZeroZeroOnes\
    \ = mutable.ArrayBuffer(0)\n        val onesOneZeroZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosOneZeroZeroOnes = mutable.ArrayBuffer(0)\n        val onesOneZeroZeroZeros\
    \ = mutable.ArrayBuffer(0)\n        val zerosOneZeroZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val onesOneZeroZeroOnes = mutable.ArrayBuffer(0)\n        val zerosOneZeroZeroOnes\
    \ = mutable.ArrayBuffer(0)\n        val onesOneZeroZeroZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosOneZeroZeroOnes = mutable.ArrayBuffer(0)\n        val onesOneZeroZeroZeros\
    \ = mutable.ArrayBuffer(0)\n        val zerosOneZeroZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val onesOneZeroZeroOnes = mutable.ArrayBuffer(0)\n        val zerosOneZeroZeroOnes\
    \ = mut", "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val onesZeros = mutable.Set[Long]()\n\
    \        val zerosOnes = mutable.Set[Long]()\n        val onesOnes = mutable.Set[Long]()\n\
    \        val zeroOnes = mutable.Set[Long]()\n        val onesZeroOnes = mutable.Set[Long]()\n\
    \        val zerosOnesOnes = mutable.Set[Long]()\n        val onesOnesOnes = mutable.Set[Long]()\n\
    \        val zerosOnesZeroOnes = mutable.Set[Long]()\n        val onesOnesZeroOnes\
    \ = mutable.Set[Long]()\n        val zerosOnesOnesOnes = mutable.Set[Long]()\n\
    \        val onesOnesOnesOnes = mutable.Set[Long]()\n        val zerosOnesZeroOnesOnes\
    \ = mutable.Set[Long]()\n        val onesOnesZeroOnesOnes = mutable.Set[Long]()\n\
    \        val zerosOnesOnesZeroOnesOnes = mutable.Set[Long]()\n        val onesOnesOnesZeroOnesOnes\
    \ = mutable.Set[Long]()\n        val zerosOnesZeroOnesZeroOnesOnes = mutable.Set[Long]()\n\
    \        val onesOnesZeroOnesZeroOnesOnes = mutable.Set[Long]()\n        val zerosOnesOnesOnesOnesOnes\
    \ = mutable.Set[Long]()\n        val onesOnesOnesOnesOnesOnes = mutable.Set[Long]()\n\
    \        val zerosOnesZeroOnesZeroOnesZeroOnesOnes = mutable.Set[Long]()\n   \
    \     val onesOnesZeroOnesZeroOnesZeroOnesOnes = mutable.Set[Long]()\n       \
    \ val zerosOnesOnesOnesOnesOnesOnesOnes = mutable.Set[Long]()\n        val onesOnesOnesOnesOnesOnesOnesOnes\
    \ = mutable.Set[Long]()\n        val zerosOnesZeroOnesZeroOnesZeroOnesZeroOnesOne",
  "        val ones = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val zerosCount =\
    \ mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < n) {\n   \
    \         if (i % 10 == 1) {\n                ones += i\n                onesCount\
    \ += 1\n            } else if (i % 10 == 0) {\n                zeros += i\n  \
    \              zerosCount += 1\n            }\n            i += 1\n        }\n\
    \        ones.toList.size * (ones.toList.size - onesCount.toList.size)", "   \
    \     val ones = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val counts = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCount = mutable.ListBuffer[Long]()\n        val countsCount\
    \ = mutable.ListBuffer[Long]()\n        val onesCountCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCountCount = mutable.ListBuffer[Long]()\n        val countsCountCount\
    \ = mutable.ListBuffer[Long]()\n        val onesCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCountCountCount = mutable.ListBuffer[Long]()\n        val countsCountCountCount\
    \ = mutable.ListBuffer[Long]()\n        val onesCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCountCountCountCount = mutable.ListBuffer[Long]()\n        val\
    \ countsCountCountCountCount = mutable.ListBuffer[Long]()\n        val onesCountCountCountCountCount\
    \ = mutable.ListBuffer[Long]()\n        val zerosCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val countsCountCountCountCountCount = mutable.ListBuffer[Long]()\n  \
    \      val onesCountCountCountCountCount = mutable.ListBuffer[Long]()\n      \
    \  val zerosCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n    \
    \    val countsCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n \
    \       val onesCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCountCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val countsCountCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val onesCountCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCountCountCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val countsCountCountCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val onesCountCountCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCountCountCountCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        val countsCountCountCountCountCountCountCountCount = mutable.ListBuffer[Long]()\n\
    \        ", "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val counts = mutable.ArrayBuffer(0)\n        val countsZeros = mutable.ArrayBuffer(0)\n\
    \        val countsOnes = mutable.ArrayBuffer(0)\n        val countsOnesZeros\
    \ = mutable.ArrayBuffer(0)\n        val countsOnesZeros = mutable.ArrayBuffer(0)\n\
    \        val countsOnesZeros = mutable.ArrayBuffer(0)\n        val countsOnesZeros\
    \ = mutable.ArrayBuffer(0)\n        val countsOnesZeros = mutable.ArrayBuffer(0)\n\
    \        val countsOnesZeros = mutable.ArrayBuffer(0)\n        val countsOnesZeros\
    \ = mutable.ArrayBuffer(0)\n        val countsOnesZeros = mutable.ArrayBuffer(0)\n\
    \        val countsOnesZeros = mutable.ArrayBuffer(0)\n        val countsOnesZeros\
    \ = mutable.ArrayBuffer(0)\n        val countsOnesZeros = mutable.ArrayBuffer(0)\n\
    \        val countsOnesZeros = mutable.ArrayBuffer(0)\n        val countsOnesZeros\
    \ = mutable.ArrayBuffer(0)\n        val countsOnesZeros = mutable.ArrayBuffer(0)\n\
    \        val countsOnesZeros = mutable.ArrayBuffer(0)\n        val countsOnesZeros\
    \ = mutable.ArrayBuffer(0)\n        val countsOnesZeros = mutable.ArrayBuffer(0)\n\
    \        val countsOnesZeros = mutable.ArrayBuffer(0)\n        val countsOnesZeros\
    \ = mutable.ArrayBuffer(0)\n        val countsOnesZeros = mutable.ArrayBuffer(0)\n\
    \        val countsOnesZeros = mutable.ArrayBuffer(0)\n        val countsOnesZeros\
    \ = mutable.ArrayBuffer(0)\n        val countsOnesZeros = mutable.ArrayBuffer(0)\n\
    \        val countsOnesZeros = mutable.ArrayBuffer(0)\n        val countsOnesZeros\
    \ = mutable.ArrayBuffer(0)\n        val countsOnesZeros = mutable.ArrayBuffer(0)\n\
    \        val countsOnesZeros = mutable.ArrayBuffer(0)\n        val countsOnesZeros\
    \ = mutable.ArrayBuffer(0)\n        val countsOnesZeros = mutable.ArrayBuffer(0)\n\
    \        val countsOnesZeros = mutable.ArrayBuffer(0)\n        val countsOnesZeros\
    \ = mutable.ArrayBuffer(0)\n        val countsOnesZeros = mutable.ArrayBuffer(0)\n\
    \        val countsOnesZeros = mutable.", "        val counts = mutable.HashMap.empty[Long,\
    \ Long]\n        val ones = mutable.HashSet.empty[Long]\n        val zeros = mutable.HashSet.empty[Long]\n\
    \        val onesCount = mutable.HashSet.empty[Long]\n        val zerosCount =\
    \ mutable.HashSet.empty[Long]\n        val onesCounts = mutable.HashSet.empty[Long]\n\
    \        val zerosCounts = mutable.HashSet.empty[Long]\n        val onesCounts\
    \ = mutable.HashSet.empty[Long]\n        val zerosCounts = mutable.HashSet.empty[Long]\n\
    \        val onesCounts = mutable.HashSet.empty[Long]\n        val zerosCounts\
    \ = mutable.HashSet.empty[Long]\n        val onesCounts = mutable.HashSet.empty[Long]\n\
    \        val zerosCounts = mutable.HashSet.empty[Long]\n        val onesCounts\
    \ = mutable.HashSet.empty[Long]\n        val zerosCounts = mutable.HashSet.empty[Long]\n\
    \        val onesCounts = mutable.HashSet.empty[Long]\n        val zerosCounts\
    \ = mutable.HashSet.empty[Long]\n        val onesCounts = mutable.HashSet.empty[Long]\n\
    \        val zerosCounts = mutable.HashSet.empty[Long]\n        val onesCounts\
    \ = mutable.HashSet.empty[Long]\n        val zerosCounts = mutable.HashSet.empty[Long]\n\
    \        val onesCounts = mutable.HashSet.empty[Long]\n        val zerosCounts\
    \ = mutable.HashSet.empty[Long]\n        val onesCounts = mutable.HashSet.empty[Long]\n\
    \        val zerosCounts = mutable.HashSet.empty[Long]\n        val onesCounts\
    \ = mutable.HashSet.empty[Long]\n        val zerosCounts = mutable.HashSet.empty[Long]\n\
    \        val onesCounts = mutable.HashSet.empty[Long]\n        val zerosCounts\
    \ = mutable.HashSet.empty[Long]\n        val onesCounts = mutable.HashSet.empty[Long]\n\
    \        val zerosCounts = mutable.HashSet.empty[Long]\n        val onesCounts\
    \ = mutable.HashSet.empty[Long]\n        val zerosCounts = mutable.HashSet.empty[Long]\n\
    \        val onesCounts = mutable.HashSet.empty[Long]\n        val zerosCounts\
    \ = mutable.HashSet.empty[Long]\n        val onesCounts = mutable.Hash", "   \
    \     var count = 0\n        var last = 0\n        while(n > 0){\n           \
    \ val next = (n % 10).toInt\n            if(next == 1){\n                count\
    \ += 1\n            }\n            n /= 10\n        }\n        last", "      \
    \  var count = 0\n        var last = 0\n        var lastOne = 0\n        var lastTwo\
    \ = 0\n        var lastThree = 0\n        var lastFour = 0\n        var lastFive\
    \ = 0\n        var lastSix = 0\n        var lastSeven = 0\n        var lastEight\
    \ = 0\n        var lastNine = 0\n        var lastTen = 0\n        var lastEleven\
    \ = 0\n        var lastTwelve = 0\n        var lastThirteen = 0\n        var lastFourteen\
    \ = 0\n        var lastFifteen = 0\n        var lastSixteen = 0\n        var lastSeventeen\
    \ = 0\n        var lastEighteen = 0\n        var lastNineteen = 0\n        var\
    \ lastTwenty = 0\n        var lastTwentyOne = 0\n        var lastTwentyTwo = 0\n\
    \        var lastTwentyThree = 0\n        var lastTwentyFour = 0\n        var\
    \ lastTwentyFive = 0\n        var lastTwentySix = 0\n        var lastTwentySeven\
    \ = 0\n        var lastTwentyEight = 0\n        var lastTwentyNine = 0\n     \
    \   var lastThirty = 0\n        var lastThirtyOne = 0\n        var lastThirtyTwo\
    \ = 0\n        var lastThirtyThree = 0\n        var lastThirtyFour = 0\n     \
    \   var lastThirtyFive = 0\n        var lastThirtySix = 0\n        var lastThirtySeven\
    \ = 0\n        var lastThirtyEight = 0\n        var lastThirtyNine = 0\n     \
    \   var lastFourty = 0\n        var lastFourtyOne = 0\n        var lastFourtyTwo\
    \ = 0\n        var lastFourtyThree = 0\n        var lastFourtyFour = 0\n     \
    \   var lastFourtyFive = 0\n        var lastFourtySix = 0\n        var lastFourtySeven\
    \ = 0\n        var lastFourtyEight = 0\n        var lastFourtyNine = 0\n     \
    \   var lastFifty = 0\n        var lastFiftyOne = 0\n        var lastFiftyTwo\
    \ = 0\n        var lastFiftyThree = 0\n        var lastFiftyFour = 0\n       \
    \ var lastFiftyFive = 0\n        var lastFiftySix = 0\n        var lastFiftySeven\
    \ = 0\n        var lastFiftyEight = 0\n        var lastFiftyNine = 0\n       \
    \ var lastSixty = 0\n        var lastSixtyOne = 0\n        var lastSixtyTwo =\
    \ 0\n        var lastSixtyThree = 0\n        var lastSixtyFour = 0\n        var\
    \ lastSixtyFive = 0\n        var lastSixtySix = 0\n        var lastSixtySeven\
    \ = 0\n        var lastSixtyEight = 0", "        var count = 0\n        var last\
    \ = 1\n        while(n > 0){\n            val next = (last * 10) + n\n       \
    \     val nextIsOne = next == 1\n            val lastIsOne = last == 1\n     \
    \       if(nextIsOne && lastIsOne){\n                count += 1\n            }\n\
    \            last = next\n            n -= 1\n        }\n        count", "   \
    \     val counts = mutable.HashMap.empty[Long, Long]\n        val ones = mutable.ArrayBuffer.empty[Long]\n\
    \        val ends = mutable.ArrayBuffer.empty[Long]\n        val onesCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val endsCount = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val endsCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val endsCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val endsCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val endsCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val endsCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val endsCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val endsCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val endsCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val endsCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val endsCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val endsCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val endsCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val endsCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val endsCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val endsCounts = mutable.", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val zeros = mutable.ListBuffer[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val digits = n.toString.reverse.grouped(2).map(_.toInt)\n \
    \       digits.foreach(x => if (x == 1) ones += x else zeros += x)\n        ones.foreach(x\
    \ => counts(x+1) = counts(x) + 1)\n        zeros.foreach(x => counts(x+1) = counts(x)\
    \ + 1)\n        counts.values.sum", "        val ones = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount2 = mutable.Set[Long]()\n\
    \        val onesCount3 = mutable.Set[Long]()\n        val onesCount4 = mutable.Set[Long]()\n\
    \        val onesCount5 = mutable.Set[Long]()\n        val onesCount6 = mutable.Set[Long]()\n\
    \        val onesCount7 = mutable.Set[Long]()\n        val onesCount8 = mutable.Set[Long]()\n\
    \        val onesCount9 = mutable.Set[Long]()\n        val onesCount10 = mutable.Set[Long]()\n\
    \        val onesCount11 = mutable.Set[Long]()\n        val onesCount12 = mutable.Set[Long]()\n\
    \        val onesCount13 = mutable.Set[Long]()\n        val onesCount14 = mutable.Set[Long]()\n\
    \        val onesCount15 = mutable.Set[Long]()\n        val onesCount16 = mutable.Set[Long]()\n\
    \        val onesCount17 = mutable.Set[Long]()\n        val onesCount18 = mutable.Set[Long]()\n\
    \        val onesCount19 = mutable.Set[Long]()\n        val onesCount20 = mutable.Set[Long]()\n\
    \        val onesCount21 = mutable.Set[Long]()\n        val onesCount22 = mutable.Set[Long]()\n\
    \        val onesCount23 = mutable.Set[Long]()\n        val onesCount24 = mutable.Set[Long]()\n\
    \        val onesCount25 = mutable.Set[Long]()\n        val onesCount26 = mutable.Set[Long]()\n\
    \        val onesCount27 = mutable.Set[Long]()\n        val onesCount28 = mutable.Set[Long]()\n\
    \        val onesCount29 = mutable.Set[Long]()\n        val onesCount30 = mutable.Set[Long]()\n\
    \        val onesCount31 = mutable.Set[Long]()\n        val onesCount32 = mutable.Set[Long]()\n\
    \        val onesCount33 = mutable.Set[Long]()\n        val onesCount34 = mutable.Set[Long]()\n\
    \        val one", "        val ones = mutable.ArrayBuffer(1)\n        val zeros\
    \ = mutable.ArrayBuffer(0)\n        val count = mutable.ArrayBuffer(0)\n     \
    \   val onesCount = mutable.ArrayBuffer(0)\n        val zerosCount = mutable.ArrayBuffer(0)\n\
    \        val onesZeros = mutable.ArrayBuffer(0)\n        val zerosOnes = mutable.ArrayBuffer(0)\n\
    \        val onesOnes = mutable.ArrayBuffer(0)\n        val zerosZeros = mutable.ArrayBuffer(0)\n\
    \        val onesZeroOnes = mutable.ArrayBuffer(0)\n        val zerosOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val onesOneZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosZeroOnes = mutable.ArrayBuffer(0)\n        val onesZeroOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val zerosOneOneZeros = mutable.ArrayBuffer(0)\n\
    \        val onesOneOneZeros = mutable.ArrayBuffer(0)\n        val zerosZeroOneOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val onesOneOneOneZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosOneZeroOneOneZeros = mutable.ArrayBuffer(0)\n        val onesOneZeroOneOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val zerosZeroOneZeroOneOneZeros = mutable.ArrayBuffer(0)\n\
    \        val onesOneOneOneOneZeros = mutable.ArrayBuffer(0)\n        val zerosOneOneZeroOneOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val onesOneZeroOneOneOneZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosZeroOneOneZeroOneOneZeros = mutable.ArrayBuffer(0)\n       \
    \ val onesOneOneOneOneOneZeros = mutable.ArrayBuffer(0)\n        val zerosOneZeroOneZeroOneOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val onesOneOneOneOneOneZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosZeroOneOneOneZeroOneZeros = mutable.ArrayBuffer(0)\n       \
    \ val onesOneOneOneOneOneOneZeros = mutable.ArrayBuffer(0)\n        val zerosOneOneZeroOneOneOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val onesOneZeroOneOneOneOneZeros = mutable.ArrayBuffer(0)\n\
    \        val zerosZeroOneOneZeroOneOneZeros = mutable.ArrayBuffer(0)\n       \
    \ val onesOneOneOneOneOneOneOneZeros = mutable.ArrayBuffer(0)\n        val zerosOneZeroOneZeroOneOneOneZeros\
    \ = mutable.ArrayBuffer(0)\n        val onesOneOneOneOne", "        val ones =\
    \ mutable.ListBuffer[Long]()\n        var count = 0\n        for (i <- 1 to n)\
    \ {\n            if (i.toString.toLong == 1) {\n                count += 1\n \
    \           } else {\n                ones += i.toString.toLong\n            }\n\
    \        }\n        ones.length", "        val ones = mutable.ListBuffer(1)\n\
    \        var count = 0\n        while(n > 0){\n            ones += n\n       \
    \     count += 1\n            n -= 1\n        }\n        ones.length", "     \
    \   val ones = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val twos = mutable.ListBuffer[Long]()\n        val threes = mutable.ListBuffer[Long]()\n\
    \        val fours = mutable.ListBuffer[Long]()\n        val fives = mutable.ListBuffer[Long]()\n\
    \        val sixes = mutable.ListBuffer[Long]()\n        val sevens = mutable.ListBuffer[Long]()\n\
    \        val eights = mutable.ListBuffer[Long]()\n        val nines = mutable.ListBuffer[Long]()\n\
    \        val tens = mutable.ListBuffer[Long]()\n        val hundreds = mutable.ListBuffer[Long]()\n\
    \        val thousands = mutable.ListBuffer[Long]()\n        val millions = mutable.ListBuffer[Long]()\n\
    \        val billions = mutable.ListBuffer[Long]()\n        val trillions = mutable.ListBuffer[Long]()\n\
    \        val quadrillions = mutable.ListBuffer[Long]()\n        val quintillions\
    \ = mutable.ListBuffer[Long]()\n        val sextillions = mutable.ListBuffer[Long]()\n\
    \        val septillions = mutable.ListBuffer[Long]()\n        val octillions\
    \ = mutable.ListBuffer[Long]()\n        val nonillions = mutable.ListBuffer[Long]()\n\
    \        val decillions = mutable.ListBuffer[Long]()\n        val undecillions\
    \ = mutable.ListBuffer[Long]()\n        val duodecillions = mutable.ListBuffer[Long]()\n\
    \        val tredecillions = mutable.ListBuffer[Long]()\n        val quattuordecillions\
    \ = mutable.ListBuffer[Long]()\n        val quindecillions = mutable.ListBuffer[Long]()\n\
    \        val sexdecillions = mutable.ListBuffer[Long]()\n        val septendecillions\
    \ = mutable.ListBuffer[Long]()\n        val octodecillions = mutable.ListBuffer[Long]()\n\
    \        val novemdecillions = mutable.ListBuffer[Long]()\n        val vigintillions\
    \ = mutable.ListBuffer[Long]()\n        val thousandsOfNines = mutable.ListBuffer",
  "        var count = 0\n        var last = 1\n        while(n > 1) {\n         \
    \   val next = (last * 10 + last).toInt\n            val nextLast = (next * 10\
    \ + next).toInt\n            if(next == 1 && nextLast == 1) {\n              \
    \  count += 1\n            }\n            last = next\n        }\n        count",
  "        var count = 0\n        var i = n\n        while (i >= 1) {\n          \
    \  i = i / 10\n            count += 1\n        }\n        return count", "   \
    \     val counts = mutable.HashMap.empty[Long, Long]\n        for (i <- 1 to n)\
    \ {\n            val str = i.toString\n            if (str.startsWith(\"1\") ||\
    \ str.endsWith(\"1\")) {\n                counts.put(i, counts.getOrElse(i, 0)\
    \ + 1L)\n            }\n        }\n        counts.values.sum", "        val ones\
    \ = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer", "        val ones = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        var last = 0\n        while (n > 0) {\n      \
    \      ones += last\n            last += 1\n            n -= 1\n        }\n  \
    \      ones += last\n        ones = ones.reverse\n        ones.foreach(x => if\
    \ (x == 1) count = count + 1)\n        count", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.Set[Long]()\n \
    \       val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mut", "        val ones = mutable.ArrayBuffer(1)\n  \
    \      val zeros = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        val starts = mutable.ArrayBuffer.empty[Long]\n        val ends = mutable.ArrayBuffer.empty[Long]\n\
    \        val nums = mutable.ArrayBuffer.empty[Long]\n        val numsSet = mutable.HashSet[Long]()\n\
    \        val numsSet2 = mutable.HashSet[Long]()\n        val numsSet3 = mutable.HashSet[Long]()\n\
    \        val numsSet4 = mutable.HashSet[Long]()\n        val numsSet5 = mutable.HashSet[Long]()\n\
    \        val numsSet6 = mutable.HashSet[Long]()\n        val numsSet7 = mutable.HashSet[Long]()\n\
    \        val numsSet8 = mutable.HashSet[Long]()\n        val numsSet9 = mutable.HashSet[Long]()\n\
    \        val numsSet10 = mutable.HashSet[Long]()\n        val numsSet11 = mutable.HashSet[Long]()\n\
    \        val numsSet12 = mutable.HashSet[Long]()\n        val numsSet13 = mutable.HashSet[Long]()\n\
    \        val numsSet14 = mutable.HashSet[Long]()\n        val numsSet15 = mutable.HashSet[Long]()\n\
    \        val numsSet16 = mutable.HashSet[Long]()\n        val numsSet17 = mutable.HashSet[Long]()\n\
    \        val numsSet18 = mutable.HashSet[Long]()\n        val numsSet19 = mutable.HashSet[Long]()\n\
    \        val numsSet20 = mutable.HashSet[Long]()\n        val numsSet21 = mutable.HashSet[Long]()\n\
    \        val numsSet22 = mutable.HashSet[Long]()\n        val numsSet23 = mutable.HashSet[Long]()\n\
    \        val numsSet24 = mutable.HashSet[Long]()\n        val numsSet25 = mutable.HashSet[Long]()\n\
    \        val numsSet26 = mutable.HashSet[Long]()\n        val numsSet27 = mutable.HashSet[Long]()\n\
    \        val numsSet28 = mutable.HashSet[Long]()\n        val nums", "       \
    \ val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n  \
    \      val counts = mutable.Map[Long, Long]()\n        val starts = mutable.Map[Long,\
    \ Long]()\n        val ends = mutable.Map[Long, Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val ones = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val countsCount = mutable.Map[Long,\
    \ Long]()\n        val startsCount = mutable.Map[Long, Long]()\n        val endsCount\
    \ = mutable.Map[Long, Long]()\n        val zeroCount = mutable.Set[Long]()\n \
    \       val oneCount = mutable.Set[Long]()\n        val onesCountCount = mutable.Set[Long]()\n\
    \        val zerosCountCount = mutable.Set[Long]()\n        val countsCountCount\
    \ = mutable.Map[Long, Long]()\n        val startsCountCount = mutable.Map[Long,\
    \ Long]()\n        val endsCountCount = mutable.Map[Long, Long]()\n        val\
    \ zeroCountCount = mutable.Set[Long]()\n        val oneCountCount = mutable.Set[Long]()\n\
    \        val onesCountCountCount = mutable.Set[Long]()\n        val zerosCountCountCount\
    \ = mutable.Set[Long]()\n        val countsCountCountCount = mutable.Map[Long,\
    \ Long]()\n        val startsCountCountCount = mutable.Map[Long, Long]()\n   \
    \     val endsCountCountCount = mutable.Map[Long, Long]()\n        val zeroCountCountCount\
    \ = mutable.Set[Long]()\n        val oneCountCountCount = mutable.Set[Long]()\n\
    \        val onesCountCountCountCount = mutable.Set[Long]()\n        val zerosCountCountCountCount\
    \ = mutable.Set[Long]()\n        val countsCountCountCountCount = mutable.Map[Long,\
    \ Long]()\n        val startsCountCountCountCount = mutable.Map[Long, Long]()\n\
    \        val endsCountCountCountCount = mutable.Map[Long, Long]()\n        val\
    \ zeroCountCountCountCount = mutable.Set[Long]()\n        val oneCountCountCountCount\
    \ = mutable.Set[Long]()\n        val onesCountCountCountCount = mutable.Set[Long]()\n\
    \        val zeros", "        val ones = mutable.Set[Long]()\n        val onesCount\
    \ = mutable.Set[Long]()\n        val onesCount2 = mutable.Set[Long]()\n      \
    \  val onesCount3 = mutable.Set[Long]()\n        val onesCount4 = mutable.Set[Long]()\n\
    \        val onesCount5 = mutable.Set[Long]()\n        val onesCount6 = mutable.Set[Long]()\n\
    \        val onesCount7 = mutable.Set[Long]()\n        val onesCount8 = mutable.Set[Long]()\n\
    \        val onesCount9 = mutable.Set[Long]()\n        val onesCount10 = mutable.Set[Long]()\n\
    \        val onesCount11 = mutable.Set[Long]()\n        val onesCount12 = mutable.Set[Long]()\n\
    \        val onesCount13 = mutable.Set[Long]()\n        val onesCount14 = mutable.Set[Long]()\n\
    \        val onesCount15 = mutable.Set[Long]()\n        val onesCount16 = mutable.Set[Long]()\n\
    \        val onesCount17 = mutable.Set[Long]()\n        val onesCount18 = mutable.Set[Long]()\n\
    \        val onesCount19 = mutable.Set[Long]()\n        val onesCount20 = mutable.Set[Long]()\n\
    \        val onesCount21 = mutable.Set[Long]()\n        val onesCount22 = mutable.Set[Long]()\n\
    \        val onesCount23 = mutable.Set[Long]()\n        val onesCount24 = mutable.Set[Long]()\n\
    \        val onesCount25 = mutable.Set[Long]()\n        val onesCount26 = mutable.Set[Long]()\n\
    \        val onesCount27 = mutable.Set[Long]()\n        val onesCount28 = mutable.Set[Long]()\n\
    \        val onesCount29 = mutable.Set[Long]()\n        val onesCount30 = mutable.Set[Long]()\n\
    \        val onesCount31 = mutable.Set[Long]()\n        val onesCount32 = mutable.Set[Long]()\n\
    \        val onesCount33 = mutable.Set[Long]()\n        val onesCount34 = mutable.Set[Long]()\n\
    \        val one", "        val ones = mutable.ArrayBuffer(1)\n        var count\
    \ = 0\n        while(n > 0){\n            ones += n\n            n -= 1\n    \
    \    }\n        while(ones.size > 0){\n            count += ones.size - 1\n  \
    \          ones.remove(0)\n        }\n        count", "        val ones = mutable.ListBuffer.empty[Long]\n\
    \        for (i <- 1 to n) if (i.toString.toLong == 1) ones += i\n        ones.count(_\
    \ == 1)", "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount2 = mutable.Set[Long]()\n        val zerosCount2 = mutable.Set[Long]()\n\
    \        val onesCount3 = mutable.Set[Long]()\n        val zerosCount3 = mutable.Set[Long]()\n\
    \        val onesCount4 = mutable.Set[Long]()\n        val zerosCount4 = mutable.Set[Long]()\n\
    \        val onesCount5 = mutable.Set[Long]()\n        val zerosCount5 = mutable.Set[Long]()\n\
    \        val onesCount6 = mutable.Set[Long]()\n        val zerosCount6 = mutable.Set[Long]()\n\
    \        val onesCount7 = mutable.Set[Long]()\n        val zerosCount7 = mutable.Set[Long]()\n\
    \        val onesCount8 = mutable.Set[Long]()\n        val zerosCount8 = mutable.Set[Long]()\n\
    \        val onesCount9 = mutable.Set[Long]()\n        val zerosCount9 = mutable.Set[Long]()\n\
    \        val onesCount10 = mutable.Set[Long]()\n        val zerosCount10 = mutable.Set[Long]()\n\
    \        val onesCount11 = mutable.Set[Long]()\n        val zerosCount11 = mutable.Set[Long]()\n\
    \        val onesCount12 = mutable.Set[Long]()\n        val zerosCount12 = mutable.Set[Long]()\n\
    \        val onesCount13 = mutable.Set[Long]()\n        val zerosCount13 = mutable.Set[Long]()\n\
    \        val onesCount14 = mutable.Set[Long]()\n        val zerosCount14 = mutable.Set[Long]()\n\
    \        val onesCount15 = mutable.Set[Long]()\n        val zerosCount15 = mutable.Set[Long]()\n\
    \        val onesCount16 = mutable.Set[Long]()\n        val zerosCount16 = mutable.Set[Long]()\n\
    \        val onesCount17 = mutable.Set[Long]()\n        val zerosCount17 = mutable.Set[Long]()\n\
    \        val onesCount18 = mutable.Set[Long]()\n        val zerosCount18 = ",
  "        val counts = mutable.HashMap[Long, Long]()\n        val ones = mutable.ArrayBuffer(Long(1))\n\
    \        val zeros = mutable.ArrayBuffer(Long(0))\n        val onesCount = ones.takeWhile(_\
    \ < n).length\n        val zerosCount = zeros.takeWhile(_ < n).length\n      \
    \  val onesZeros = ones.takeWhile(_ < n).takeWhile(_ != 0).length\n        val\
    \ zerosOnes = zeros.takeWhile(_ < n).takeWhile(_ != 0).takeWhile(_ != 1).length\n\
    \        val onesOnes = ones.takeWhile(_ < n).takeWhile(_ != 0).takeWhile(_ !=\
    \ 1).takeWhile(_ != 1).length\n        val onesZeroOnes = ones.takeWhile(_ < n).takeWhile(_\
    \ != 0).takeWhile(_ != 1).takeWhile(_ != 1).takeWhile(_ != 1).length\n       \
    \ val zerosOnesOnes = zeros.takeWhile(_ < n).takeWhile(_ != 0).takeWhile(_ !=\
    \ 1).takeWhile(_ != 1).takeWhile(_ != 1).takeWhile(_ != 1).length\n        val\
    \ zerosOnesZeros = zeros.takeWhile(_ < n).takeWhile(_ != 0).takeWhile(_ != 1).takeWhile(_\
    \ != 1).takeWhile(_ != 1).takeWhile(_ != 0).length\n        val zerosOnesOnesZeros\
    \ = zeros.takeWhile(_ < n).takeWhile(_ != 0).takeWhile(_ != 1).takeWhile(_ !=\
    \ 1).takeWhile(_ != 1).takeWhile(_ != 1).takeWhile(_ != 0).length\n        val\
    \ zerosOnesOnesOnes = zeros.takeWhile(_ < n).takeWhile(_ != 0).takeWhile(_ !=\
    \ 1).takeWhile(_ != 1).takeWhile(_ != 1).takeWhile(_ != 1).takeWhile(_ != 1).length\n\
    \        val zerosOnesOnesOnesZeros = zeros.takeWhile(_ < n).takeWhile(_ != 0).takeWhile(_\
    \ != 1).takeWhile(_ != 1).takeWhile(_ != 1).takeWhile(_ != 1).takeWhile(_ != 1).takeWhile(_\
    \ != 0).length\n        val zerosOnesOnesOnesOnesZeros = zeros.takeWhile(_ < n).takeWhile(_\
    \ != 0).takeWhile(_ != 1).takeWhile(_ != 1).takeWhile(_ != 1).takeWhile(_ != 1).takeWhile(_\
    \ != 1).takeWhile(_ != 1).takeWhile(_ != 0).length\n        val zerosOnesOnesOnesOnesOnesZeros\
    \ = zeros.takeWhile(_ < n).takeWhile(_ != 0).takeWhile(_ != 1).takeWhile", " \
    \       var count = 0\n        var last = 0\n        var next = 1\n        while(n\
    \ != 0) {\n            val temp = n % 10\n            if(temp == 1) {\n      \
    \          count += 1\n                last = next\n                next = 1\n\
    \            } else {\n                next *= 10\n            }\n           \
    \ n /= 10\n        }\n        count", "        var count = 0\n        for(i <-\
    \ 1 to n){\n            if((i.toString.toLong % 10) == 1){\n                count\
    \ += 1\n            }\n        }\n        count", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val onesCount2 = mutable.Set[Long]()\n\
    \        val zerosCount2 = mutable.Set[Long]()\n        val onesCount3 = mutable.Set[Long]()\n\
    \        val zerosCount3 = mutable.Set[Long]()\n        val onesCount4 = mutable.Set[Long]()\n\
    \        val zerosCount4 = mutable.Set[Long]()\n        val onesCount5 = mutable.Set[Long]()\n\
    \        val zerosCount5 = mutable.Set[Long]()\n        val onesCount6 = mutable.Set[Long]()\n\
    \        val zerosCount6 = mutable.Set[Long]()\n        val onesCount7 = mutable.Set[Long]()\n\
    \        val zerosCount7 = mutable.Set[Long]()\n        val onesCount8 = mutable.Set[Long]()\n\
    \        val zerosCount8 = mutable.Set[Long]()\n        val onesCount9 = mutable.Set[Long]()\n\
    \        val zerosCount9 = mutable.Set[Long]()\n        val onesCount10 = mutable.Set[Long]()\n\
    \        val zerosCount10 = mutable.Set[Long]()\n        val onesCount11 = mutable.Set[Long]()\n\
    \        val zerosCount11 = mutable.Set[Long]()\n        val onesCount12 = mutable.Set[Long]()\n\
    \        val zerosCount12 = mutable.Set[Long]()\n        val onesCount13 = mutable.Set[Long]()\n\
    \        val zerosCount13 = mutable.Set[Long]()\n        val onesCount14 = mutable.Set[Long]()\n\
    \        val zerosCount14 = mutable.Set[Long]()\n        val onesCount15 = mutable.Set[Long]()\n\
    \        val zerosCount15 = mutable.Set[Long]()\n        val onesCount16 = mutable.Set[Long]()\n\
    \        val zerosCount16 = mutable.Set[Long]()\n        val onesCount17 = mutable.Set[Long]()\n\
    \        val zerosCount17 = mutable.Set[Long]()\n        val onesCount18 = mutable.Set[Long]()\n\
    \        val zerosCount18 = ", "        val count = new mutable.HashMap[Long,\
    \ Long]()\n        val ones = BigInt(1)\n        val zeros = BigInt(0)\n     \
    \   val onesCount = BigInt(0)\n        val zerosCount = BigInt(0)\n        val\
    \ onesZeros = BigInt(0)\n        val zerosOnes = BigInt(0)\n        val onesOnes\
    \ = BigInt(0)\n        val onesZeroOnes = BigInt(0)\n        val zerosZeroOnes\
    \ = BigInt(0)\n        val onesZeroOnesOnes = BigInt(0)\n        val zerosZeroOnesZeros\
    \ = BigInt(0)\n        val onesZeroOnesOnesZeros = BigInt(0)\n        val zerosZeroOnesZeroOnes\
    \ = BigInt(0)\n        val onesZeroOnesOnesZeroOnes = BigInt(0)\n        val zerosZeroOnesZeroOnesOnes\
    \ = BigInt(0)\n        val onesZeroOnesOnesZeroOnesOnes = BigInt(0)\n        val\
    \ zerosZeroOnesZeroOnesZeroOnes = BigInt(0)\n        val onesZeroOnesOnesZeroOnesZeroOnes\
    \ = BigInt(0)\n        val zerosZeroOnesZeroOnesZeroOnesOnes = BigInt(0)\n   \
    \     val onesZeroOnesOnesZeroOnesZeroOnesOnes = BigInt(0)\n        val zerosZeroOnesZeroOnesZeroOnesZeroOnes\
    \ = BigInt(0)\n        val onesZeroOnesOnesZeroOnesZeroOnesZeroOnes = BigInt(0)\n\
    \        val zerosZeroOnesZeroOnesZeroOnesZeroOnesOnes = BigInt(0)\n        val\
    \ onesZeroOnesOnesZeroOnesZeroOnesZeroOnesOnes = BigInt(0)\n        val zerosZeroOnesZeroOnesZeroOnesZeroOnesZeroOnes\
    \ = BigInt(0)\n        val onesZeroOnesOnesZeroOnesZeroOnesZeroOnesZeroOnes =\
    \ BigInt(0)\n        val zerosZeroOnesZeroOnesZeroOnesZeroOnesZeroOnesOnes = BigInt(0)\n\
    \        val onesZeroOnesOnesZeroOnesZeroOnesZeroOnesZeroOnesOnes = BigInt(0)\n\
    \        val zerosZeroOnesZeroOnesZeroOnesZeroOnesZeroOnesZeroOnes = BigInt(0)\n\
    \        val onesZeroOnesOnesZeroOnesZeroOnesZeroOnesZeroOnesZeroOnes = BigInt(0)\n\
    \        val ", "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val onesCounts = mutable.Map[Long,\
    \ Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCountZeros\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroZeros = mutable.Map[Long, Long]()\n      \
    \  val zerosCountOneOnes = mutable.Map[Long, Long]()\n        val onesCountZeroOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOneOneZeros = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroOneOnes = mutable.Map[Long, Long]()\n    \
    \    val zerosCountOneOneOneZeros = mutable.Map[Long, Long]()\n        val onesCountZeroOneOneOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOneOneOneOneZeros = mutable.Map[Long,\
    \ Long]()\n        val onesCountZeroOneOneOneOnes = mutable.Map[Long, Long]()\n\
    \        val zerosCountOneOneOneOneZeros = mutable.Map[Long, Long]()\n       \
    \ val onesCountZeroOneOneOneOnes = mutable.Map[Long, Long]()\n        val zerosCountOneOneOneOneZeros\
    \ = mutable.Map[Long, Long]()\n        val onesCountZeroOneOneOneOneOnes = mutable.Map[Long,\
    \ Long]()\n        val zerosCountOneOneOneOneOneZeros = mutable.Map[Long, Long]()\n\
    \        val onesCountZeroOneOneOneOneOnes = mutable.Map[Long, Long]()\n     \
    \   val zerosCountOneOneOneOneOneZeros = mutable.Map[Long, Long]()\n        val\
    \ onesCountZeroOneOneOneOneOneOnes = mutable.Map[Long, Long]()\n        val zerosCountOneOneOneOneOneOneZeros\
    \ = mutable.Map[Long, Long]()\n        val onesCountZeroOneOneOneOneOneOnes =\
    \ mutable.Map[Long, Long]()\n        val zerosCountOneOneOneOneOneOneZeros = mutable.Map[Long,\
    \ Long]()\n        val one", "        val counts = mutable.HashMap[Long, Long]()\n\
    \        for (i <- 1 to n) {\n            val x = i.toString.toInt\n         \
    \   if (x == 1) {\n                counts.put(x, counts.getOrElse(x, 0) + 1L)\n\
    \            }\n        }\n        counts.values.sum", "        val ones = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        for(i <- 1 to n){\n            if(i%10 == 1){\n\
    \                ones += i\n                count += 1\n            }\n      \
    \  }\n        ones.size", "        var count = 0\n        for(i <- 1 to n){\n\
    \            if((i / 10) % 2 == 0){\n                count += 1\n            }\n\
    \        }\n        return count", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val zeros = mutable.ListBuffer[Long]()\n        for (i <- 1 to n) {\n\
    \            if (i % 10 == 1) {\n                ones += i\n            } else\
    \ {\n                zeros += i\n            }\n        }\n        ones.count(_\
    \ == 1)", "        val ones = mutable.ListBuffer[Long]()\n        val onesCount\
    \ = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n",
  "        val ones = mutable.ListBuffer(1)\n        val zeros = mutable.ListBuffer(0)\n\
    \        val counts = mutable.ListBuffer[Long]()\n        while(n > 0){\n    \
    \        val digit = n % 10\n            n /= 10\n            if(digit == 1){\n\
    \                ones += digit\n            }else{\n                zeros += digit\n\
    \            }\n        }\n        while(ones.size > 0){\n            val digit\
    \ = ones.head % 10\n            ones.head /= 10\n            counts += digit\n\
    \        }\n        while(zeros.size > 0){\n            val digit = zeros.head\
    \ % 10\n            zeros.head /= 10\n            counts += digit\n        }\n\
    \        counts.sum", "        val ones = mutable.ListBuffer[Long]()\n       \
    \ var count = 0\n        for (i <- 1 to n) {\n            if (i.toString.startsWith(\"\
    1\") || i.toString.endsWith(\"1\")) {\n                ones += i\n           \
    \     count += 1\n            }\n        }\n        ones.length", "        val\
    \ ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n      \
    \  val counts = mutable.Map[Long, Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val onesZeros = mutable.Set[Long]()\n\
    \        val zerosOnes = mutable.Set[Long]()\n        val onesOnes = mutable.Set[Long]()\n\
    \        val zerosZeros = mutable.Set[Long]()\n        val zerosZeros = mutable.Set[Long]()\n\
    \        val zerosOnes = mutable.Set[Long]()\n        val onesZeros = mutable.Set[Long]()\n\
    \        val onesOnes = mutable.Set[Long]()\n        val onesZeros = mutable.Set[Long]()\n\
    \        val onesOnes = mutable.Set[Long]()\n        val onesOnes = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val onesOnes = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val onesOnes = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val onesOnes = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val onesOnes = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val onesOnes = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val onesOnes = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val onesOnes = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val onesOnes = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val onesOnes = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val onesOnes = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val onesOnes = ", "    \
    \    var count = 0\n        var last = 0\n        var next = 1\n        while\
    \ (next <= n) {\n            if (next == 1) {\n                count += 1\n  \
    \          } else {\n                if (last == 1) {\n                    count\
    \ += 1\n                } else {\n                    count = 0\n            \
    \    }\n            }\n            last = next\n            next += 1\n      \
    \  }\n        count", "        var count = 0\n        var start = 1\n        var\
    \ end = n\n        while (start <= end) {\n            if (start % 10 == 1) {\n\
    \                count += 1\n            }\n            start += 1\n        }\n\
    \        return count", "        val ones = mutable.ArrayBuffer(1)\n        val\
    \ zeros = mutable.ArrayBuffer(0)\n        val count = mutable.ArrayBuffer(0)\n\
    \        while(n > 0){\n            val tmp = n % 10\n            if(tmp == 1){\n\
    \                ones += tmp\n            }\n            else if(tmp == 0){\n\
    \                zeros += tmp\n            }\n            else{\n            \
    \    count += tmp\n            }\n            n /= 10\n        }\n        val\
    \ onesCount = ones.toList.size\n        val zerosCount = zeros.toList.size\n \
    \       val count = count.toList.size\n        onesCount + zerosCount + count",
  "        var count = 0\n        var i = 2\n        while(i <= n){\n            if((n\
    \ % i) == 1){\n                count += 1\n            }\n            i += 1\n\
    \        }\n        return count", "        var count = 0\n        var last =\
    \ 0\n        var lastOne = 0\n        var lastTwo = 0\n        var lastThree =\
    \ 0\n        var lastFour = 0\n        var lastFive = 0\n        var lastSix =\
    \ 0\n        var lastSeven = 0\n        var lastEight = 0\n        var lastNine\
    \ = 0\n        var lastTen = 0\n        var lastEleven = 0\n        var lastTwelve\
    \ = 0\n        var lastThirteen = 0\n        var lastFourteen = 0\n        var\
    \ lastFifteen = 0\n        var lastSixteen = 0\n        var lastSeventeen = 0\n\
    \        var lastEighteen = 0\n        var lastNineteen = 0\n        var lastTwenty\
    \ = 0\n        var lastTwentyOne = 0\n        var lastTwentyTwo = 0\n        var\
    \ lastTwentyThree = 0\n        var lastTwentyFour = 0\n        var lastTwentyFive\
    \ = 0\n        var lastTwentySix = 0\n        var lastTwentySeven = 0\n      \
    \  var lastTwentyEight = 0\n        var lastTwentyNine = 0\n        var lastThirty\
    \ = 0\n        var lastThirtyOne = 0\n        var lastThirtyTwo = 0\n        var\
    \ lastThirtyThree = 0\n        var lastThirtyFour = 0\n        var lastThirtyFive\
    \ = 0\n        var lastThirtySix = 0\n        var lastThirtySeven = 0\n      \
    \  var lastThirtyEight = 0\n        var lastThirtyNine = 0\n        var lastFourty\
    \ = 0\n        var lastFourtyOne = 0\n        var lastFourtyTwo = 0\n        var\
    \ lastFourtyThree = 0\n        var lastFourtyFour = 0\n        var lastFourtyFive\
    \ = 0\n        var lastFourtySix = 0\n        var lastFourtySeven = 0\n      \
    \  var lastFourtyEight = 0\n        var lastFourtyNine = 0\n        var lastFifty\
    \ = 0\n        var lastFiftyOne = 0\n        var lastFiftyTwo = 0\n        var\
    \ lastFiftyThree = 0\n        var lastFiftyFour = 0\n        var lastFiftyFive\
    \ = 0\n        var lastFiftySix = 0\n        var lastFiftySeven = 0\n        var\
    \ lastFiftyEight = 0\n        var lastFiftyNine = 0\n        var lastSixty = 0\n\
    \        var lastSixtyOne = 0\n        var lastSixtyTwo = 0\n        var lastSixtyThree\
    \ = 0\n        var lastSixtyFour = 0\n        var lastSixtyFive = 0\n        var\
    \ lastSixtySix = 0\n        var lastSixtySeven = 0\n        var lastSixtyEight\
    \ = 0", "        val ones = mutable.ListBuffer.empty[Long]\n        for (i <-\
    \ 0 until n) if (i.toString.toLong == 1) ones += i\n        ones.count(_ == 1)",
  "        val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        var count =\
    \ 0\n        var last = 0\n        for(i <- 1 to n) {\n            val current\
    \ = i\n            if(current == 1) {\n                count += 1\n          \
    \  }\n            if(current == last) {\n                count += 1\n        \
    \    }\n            last = current\n        }\n        count", "        val ones\
    \ = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n     \
    \   val counts = mutable.ArrayBuffer(0)\n        val starts = mutable.ArrayBuffer(0)\n\
    \        val ends = mutable.ArrayBuffer(0)\n        val onesCount = mutable.ArrayBuffer(0)\n\
    \        val zerosCount = mutable.ArrayBuffer(0)\n        val countsCount = mutable.ArrayBuffer(0)\n\
    \        val startsCount = mutable.ArrayBuffer(0)\n        val endsCount = mutable.ArrayBuffer(0)\n\
    \        val onesCountCount = mutable.ArrayBuffer(0)\n        val zerosCountCount\
    \ = mutable.ArrayBuffer(0)\n        val countsCountCount = mutable.ArrayBuffer(0)\n\
    \        val startsCountCount = mutable.ArrayBuffer(0)\n        val endsCountCount\
    \ = mutable.ArrayBuffer(0)\n        val onesCountCountCount = mutable.ArrayBuffer(0)\n\
    \        val zerosCountCountCount = mutable.ArrayBuffer(0)\n        val countsCountCountCount\
    \ = mutable.ArrayBuffer(0)\n        val startsCountCountCount = mutable.ArrayBuffer(0)\n\
    \        val endsCountCountCount = mutable.ArrayBuffer(0)\n        val onesCountCountCountCount\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountCountCountCount = mutable.ArrayBuffer(0)\n\
    \        val countsCountCountCountCount = mutable.ArrayBuffer(0)\n        val\
    \ startsCountCountCountCount = mutable.ArrayBuffer(0)\n        val endsCountCountCountCount\
    \ = mutable.ArrayBuffer(0)\n        val onesCountCountCountCountCount = mutable.ArrayBuffer(0)\n\
    \        val zerosCountCountCountCountCount = mutable.ArrayBuffer(0)\n       \
    \ val countsCountCountCountCountCount = mutable.ArrayBuffer(0)\n        val startsCountCountCountCountCount\
    \ = mutable.ArrayBuffer(0)\n        val endsCountCountCountCountCount = mutable.ArrayBuffer(0)\n\
    \        val onesCountCountCountCountCountCount = mutable.ArrayBuffer(0)\n   \
    \     val zerosCountCountCountCountCountCount = mutable.ArrayBuffer(0)\n     \
    \   val countsCountCountCountCountCountCount = mutable.ArrayBuffer(0)\n      \
    \  val startsCountCountCountCountCountCount = mutable.ArrayBuffer(0)\n       \
    \ val endsCountCountCountCountCountCount = mutable.ArrayBuffer(0)\n        val\
    \ onesCountCountCountCountCountCountCount = mutable.ArrayBuffer(0)\n        val\
    \ zerosCountCountCountCountCountCountCount = mutable.ArrayBuffer(0)\n        val\
    \ countsCountCountCountCountCountCountCount = mutable.ArrayBuffer(0)\n       \
    \ val startsCountCountCountCountCountCountCount = mutable.", "        val ones\
    \ = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val counts = mutable.ListBuffer[Long]()\n        val digits = n.toString.reverse.grouped(2).toList\n\
    \        val digit = digits(0)\n        val digits = digit.tail\n        val digit\
    \ = digits(0)\n        val digits = digit.tail\n        val digit = digits(0)\n\
    \        val digits = digit.tail\n        val digit = digits(0)\n        val digits\
    \ = digit.tail\n        val digit = digits(0)\n        val digits = digit.tail\n\
    \        val digit = digits(0)\n        val digits = digit.tail\n        val digit\
    \ = digits(0)\n        val digits = digit.tail\n        val digit = digits(0)\n\
    \        val digits = digit.tail\n        val digit = digits(0)\n        val digits\
    \ = digit.tail\n        val digit = digits(0)\n        val digits = digit.tail\n\
    \        val digit = digits(0)\n        val digits = digit.tail\n        val digit\
    \ = digits(0)\n        val digits = digit.tail\n        val digit = digits(0)\n\
    \        val digits = digit.tail\n        val digit = digits(0)\n        val digits\
    \ = digit.tail\n        val digit = digits(0)\n        val digits = digit.tail\n\
    \        val digit = digits(0)\n        val digits = digit.tail\n        val digit\
    \ = digits(0)\n        val digits = digit.tail\n        val digit = digits(0)\n\
    \        val digits = digit.tail\n        val digit = digits(0)\n        val digits\
    \ = digit.tail\n        val digit = digits(0)\n        val digits = digit.tail\n\
    \        val digit = digits(0)\n        val digits = digit.tail\n        val digit\
    \ = digits(0)\n        val digits = digit.tail\n        val digit = digits(0)\n\
    \        val digits = digit.tail\n        val digit = digits(0)\n        val digits\
    \ = digit.tail\n        val digit = digits(0)\n        val digits = digit.tail\n\
    \        val digit = digits(0)\n        val digits = digit.tail\n        val digit\
    \ = digits(0)\n        val digits = digit.tail\n        val digit = digits(0)\n\
    \        val digits = digit.tail\n        val digit = digits(0)\n        ", " \
    \       val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val count = mutable.ArrayBuffer(0)\n        val starts = mutable.ArrayBuffer(0)\n\
    \        val ends = mutable.ArrayBuffer(0)\n        val onesCount = mutable.ArrayBuffer(0)\n\
    \        val zerosCount = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer(0)\n\
    \        val startsCount = mutable.ArrayBuffer(0)\n        val endsCount = mutable.ArrayBuffer(0)\n\
    \        val onesCounts = mutable.ArrayBuffer(0)\n        val zerosCounts = mutable.ArrayBuffer(0)\n\
    \        val countss = mutable.ArrayBuffer(0)\n        val startsCounts = mutable.ArrayBuffer(0)\n\
    \        val endsCounts = mutable.ArrayBuffer(0)\n        val onesCountss = mutable.ArrayBuffer(0)\n\
    \        val zerosCountss = mutable.ArrayBuffer(0)\n        val countsss = mutable.ArrayBuffer(0)\n\
    \        val startsCountss = mutable.ArrayBuffer(0)\n        val endsCountss =\
    \ mutable.ArrayBuffer(0)\n        val onesCountsss = mutable.ArrayBuffer(0)\n\
    \        val zerosCountsss = mutable.ArrayBuffer(0)\n        val countssss = mutable.ArrayBuffer(0)\n\
    \        val startsCountsss = mutable.ArrayBuffer(0)\n        val endsCountsss\
    \ = mutable.ArrayBuffer(0)\n        val onesCountssss = mutable.ArrayBuffer(0)\n\
    \        val zerosCountssss = mutable.ArrayBuffer(0)\n        val countsssss =\
    \ mutable.ArrayBuffer(0)\n        val startsCountssss = mutable.ArrayBuffer(0)\n\
    \        val endsCountssss = mutable.ArrayBuffer(0)\n        val onesCountsssss\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountsssss = mutable.ArrayBuffer(0)\n\
    \        val countssssss = mutable.ArrayBuffer(0)\n        val startsCountsssss\
    \ = mutable.ArrayBuffer(0)\n        val endsCountsssss = mutable.ArrayBuffer(0)\n\
    \        val onesCountssssss = mutable.ArrayBuffer(0)\n        val zerosCountssssss\
    \ = mutable.ArrayBuffer(0)\n        val countssssss = mutable.ArrayBuffer(0)\n\
    \        val startsCountssssss = mutable.ArrayBuffer(0)\n        val endsCountssssss\
    \ = mutable.ArrayBuffer(0)\n        val onesCountsssssss = mutable.ArrayBuffer(0)\n\
    \        val zerosCountsssssss = mut", "        val count = new mutable.HashMap[Long,\
    \ Long]()\n        for (i <- 1 to n) {\n            val s = i.toString.toInt\n\
    \            if (s == 1) {\n                count.put(i, count.getOrElse(i, 0)\
    \ + 1L)\n            }\n        }\n        count.values.sum", "        val ones\
    \ = mutable.ListBuffer(1)\n        val zeros = mutable.ListBuffer(0)\n       \
    \ val counts = mutable.ListBuffer[Long]()\n        while(n > 1) {\n          \
    \  val temp = n % 10\n            n /= 10\n            val index = ones.indexOf(temp)\n\
    \            if(index == -1) {\n                ones += temp\n               \
    \ counts += ones.size\n            }\n            else {\n                val\
    \ index = zeros.indexOf(temp)\n                if(index == -1) {\n           \
    \         zeros += temp\n                    counts += zeros.size\n          \
    \      }\n            }\n        }\n        counts.sum", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val onesCounts = mutable.Set[Long]()\n\
    \        val zerosCounts = mutable.Set[Long]()\n        val ones", "        val\
    \ ones = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val zerosCount =\
    \ mutable.ListBuffer[Long]()\n        val onesCounts = mutable.ListBuffer[Long]()\n\
    \        val zerosCounts = mutable.ListBuffer[Long]()\n        val onesCounts\
    \ = mutable.ListBuffer[Long]()\n        val zerosCounts = mutable.ListBuffer[Long]()\n\
    \        val onesCounts = mutable.ListBuffer[Long]()\n        val zerosCounts\
    \ = mutable.ListBuffer[Long]()\n        val onesCounts = mutable.ListBuffer[Long]()\n\
    \        val zerosCounts = mutable.ListBuffer[Long]()\n        val onesCounts\
    \ = mutable.ListBuffer[Long]()\n        val zerosCounts = mutable.ListBuffer[Long]()\n\
    \        val onesCounts = mutable.ListBuffer[Long]()\n        val zerosCounts\
    \ = mutable.ListBuffer[Long]()\n        val onesCounts = mutable.ListBuffer[Long]()\n\
    \        val zerosCounts = mutable.ListBuffer[Long]()\n        val onesCounts\
    \ = mutable.ListBuffer[Long]()\n        val zerosCounts = mutable.ListBuffer[Long]()\n\
    \        val onesCounts = mutable.ListBuffer[Long]()\n        val zerosCounts\
    \ = mutable.ListBuffer[Long]()\n        val onesCounts = mutable.ListBuffer[Long]()\n\
    \        val zerosCounts = mutable.ListBuffer[Long]()\n        val onesCounts\
    \ = mutable.ListBuffer[Long]()\n        val zerosCounts = mutable.ListBuffer[Long]()\n\
    \        val onesCounts = mutable.ListBuffer[Long]()\n        val zerosCounts\
    \ = mutable.ListBuffer[Long]()\n        val onesCounts = mutable.ListBuffer[Long]()\n\
    \        val zerosCounts = mutable.ListBuffer[Long]()\n        val onesCounts\
    \ = mutable.ListBuffer[Long]()\n        val zerosCounts = mutable.ListBuffer[Long]()\n\
    \        val onesCounts = mutable.ListBuffer[Long]()\n        val zerosCounts\
    \ = mutable.ListBuffer[Long]()\n        val onesCounts = mutable.ListBuffer[Long]()\n\
    \        val zerosCounts = mutable.ListBuffer", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val zeros = mutable.ListBuffer[Long]()\n        val digits = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            digits += i.toLong\n\
    \            i += 1\n        }\n        digits.reverse.foreach(i => if (i == 1)\
    \ ones += 1 else if (i == 0) zeros += 1)\n        ones.toSet.size + (zeros.toSet.size\
    \ - ones.toSet.size) * n", "        val ones = mutable.ListBuffer[Long]()\n  \
    \      val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n",
  "        val counts = mutable.HashMap[Long, Long]()\n        val ones = mutable.Array[Long]()\n\
    \        val zeros = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()\n        val onesCount = mutable.Array[Long]()\n\
    \        val zerosCount = mutable.Array[Long]()", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        var count = 0\n        while(n\
    \ > 1) {\n            val x = n % 10\n            if(x == 1) {\n             \
    \   ones += x\n                count += 1\n            } else {\n            \
    \    zeros += x\n            }\n            n /= 10\n        }\n        count\
    \ += ones.size - zeros.size\n        count", "        var count = 0\n        val\
    \ ones = scala.collection.mutable.ListBuffer(1)\n        val zeros = scala.collection.mutable.ListBuffer(0)\n\
    \        val onesAndZeros = scala.collection.mutable.ListBuffer((1,0))\n     \
    \   val onesAndOnes = scala.collection.mutable.ListBuffer((1,1))\n        val\
    \ onesAndZerosAndOnes = scala.collection.mutable.ListBuffer((1,0))\n        val\
    \ onesAndZerosAndZeros = scala.collection.mutable.ListBuffer((1,0))\n        val\
    \ onesAndOnesAndZeros = scala.collection.mutable.ListBuffer((1,1))\n        val\
    \ onesAndOnesAndOnes = scala.collection.mutable.ListBuffer((1,1))\n        val\
    \ onesAndZerosAndOnesAndOnes = scala.collection.mutable.ListBuffer((1,0))\n  \
    \      val onesAndZerosAndOnesAndZeros = scala.collection.mutable.ListBuffer((1,0))\n\
    \        val onesAndOnesAndOnesAndZeros = scala.collection.mutable.ListBuffer((1,1))\n\
    \        val onesAndOnesAndOnesAndOnes = scala.collection.mutable.ListBuffer((1,1))\n\
    \        val onesAndZerosAndOnesAndOnesAndOnes = scala.collection.mutable.ListBuffer((1,0))\n\
    \        val onesAndZerosAndOnesAndOnesAndZeros = scala.collection.mutable.ListBuffer((1,0))\n\
    \        val onesAndOnesAndOnesAndOnesAndZeros = scala.collection.mutable.ListBuffer((1,1))\n\
    \        val onesAndOnesAndOnesAndOnesAndOnes = scala.collection.mutable.ListBuffer((1,1))\n\
    \        val onesAndZerosAndOnesAndOnesAndOnesAndOnes = scala.collection.mutable.ListBuffer((1,0))\n\
    \        val onesAndZerosAndOnesAndOnesAndOnesAndZeros = scala.collection.mutable.ListBuffer((1,0))\n\
    \        val onesAndOnesAndOnesAndOnesAndOnesAndZeros = scala.collection.mutable.ListBuffer((1,1))\n\
    \        val onesAndOnesAndOnesAndOnesAndOnesAndOnes = scala.collection.mutable.ListBuffer((1,1))\n\
    \        val onesAndZerosAndOnesAndOnesAndOnesAndOnesAndOnes = scala.collection.mutable.ListBuffer((1,0))\n\
    \        val onesAndZerosAndOnesAndOnesAndOnesAndOnesAndZeros = scala.collection.mutable.ListBuffer((1,0))\n\
    \        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = scala.collection.mutable.ListBuffer((1,1))\n\
    \        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndZeros = ", "        var\
    \ count = 0\n        for(i <- 1 to n){\n            if(i%10 == 1){\n         \
    \       count += 1\n            }\n        }\n        count", "        val counts\
    \ = mutable.HashMap.empty[Long, Long]\n        val ones = mutable.ArrayBuffer.empty[Long]\n\
    \        val zeros = mutable.ArrayBuffer.empty[Long]\n        val onesCount =\
    \ mutable.ArrayBuffer.empty[Long]\n        val zerosCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCounts = mutable.Array", "        var count = 0\n        var\
    \ last = 0\n        var lastOne = 0\n        var lastTwo = 0\n        var lastThree\
    \ = 0\n        var lastFour = 0\n        var lastFive = 0\n        var lastSix\
    \ = 0\n        var lastSeven = 0\n        var lastEight = 0\n        var lastNine\
    \ = 0\n        var lastTen = 0\n        var lastEleven = 0\n        var lastTwelve\
    \ = 0\n        var lastThirteen = 0\n        var lastFourteen = 0\n        var\
    \ lastFifteen = 0\n        var lastSixteen = 0\n        var lastSeventeen = 0\n\
    \        var lastEighteen = 0\n        var lastNineteen = 0\n        var lastTwenty\
    \ = 0\n        var lastTwentyOne = 0\n        var lastTwentyTwo = 0\n        var\
    \ lastTwentyThree = 0\n        var lastTwentyFour = 0\n        var lastTwentyFive\
    \ = 0\n        var lastTwentySix = 0\n        var lastTwentySeven = 0\n      \
    \  var lastTwentyEight = 0\n        var lastTwentyNine = 0\n        var lastThirty\
    \ = 0\n        var lastThirtyOne = 0\n        var lastThirtyTwo = 0\n        var\
    \ lastThirtyThree = 0\n        var lastThirtyFour = 0\n        var lastThirtyFive\
    \ = 0\n        var lastThirtySix = 0\n        var lastThirtySeven = 0\n      \
    \  var lastThirtyEight = 0\n        var lastThirtyNine = 0\n        var lastFourty\
    \ = 0\n        var lastFourtyOne = 0\n        var lastFourtyTwo = 0\n        var\
    \ lastFourtyThree = 0\n        var lastFourtyFour = 0\n        var lastFourtyFive\
    \ = 0\n        var lastFourtySix = 0\n        var lastFourtySeven = 0\n      \
    \  var lastFourtyEight = 0\n        var lastFourtyNine = 0\n        var lastFifty\
    \ = 0\n        var lastFiftyOne = 0\n        var lastFiftyTwo = 0\n        var\
    \ lastFiftyThree = 0\n        var lastFiftyFour = 0\n        var lastFiftyFive\
    \ = 0\n        var lastFiftySix = 0\n        var lastFiftySeven = 0\n        var\
    \ lastFiftyEight = 0\n        var lastFiftyNine = 0\n        var lastSixty = 0\n\
    \        var lastSixtyOne = 0\n        var lastSixtyTwo = 0\n        var lastSixtyThree\
    \ = 0\n        var lastSixtyFour = 0\n        var lastSixtyFive = 0\n        var\
    \ lastSixtySix = 0\n        var lastSixtySeven = 0\n        var lastSixtyEight\
    \ = 0", "        val ones = mutable.ListBuffer[Long]()\n        val onesCount\
    \ = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n",
  "        val ones = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount2 = mutable.Set[Long]()\n        val onesCount3 = mutable.Set[Long]()\n\
    \        val onesCount4 = mutable.Set[Long]()\n        val onesCount5 = mutable.Set[Long]()\n\
    \        val onesCount6 = mutable.Set[Long]()\n        val onesCount7 = mutable.Set[Long]()\n\
    \        val onesCount8 = mutable.Set[Long]()\n        val onesCount9 = mutable.Set[Long]()\n\
    \        val onesCount10 = mutable.Set[Long]()\n        val onesCount11 = mutable.Set[Long]()\n\
    \        val onesCount12 = mutable.Set[Long]()\n        val onesCount13 = mutable.Set[Long]()\n\
    \        val onesCount14 = mutable.Set[Long]()\n        val onesCount15 = mutable.Set[Long]()\n\
    \        val onesCount16 = mutable.Set[Long]()\n        val onesCount17 = mutable.Set[Long]()\n\
    \        val onesCount18 = mutable.Set[Long]()\n        val onesCount19 = mutable.Set[Long]()\n\
    \        val onesCount20 = mutable.Set[Long]()\n        val onesCount21 = mutable.Set[Long]()\n\
    \        val onesCount22 = mutable.Set[Long]()\n        val onesCount23 = mutable.Set[Long]()\n\
    \        val onesCount24 = mutable.Set[Long]()\n        val onesCount25 = mutable.Set[Long]()\n\
    \        val onesCount26 = mutable.Set[Long]()\n        val onesCount27 = mutable.Set[Long]()\n\
    \        val onesCount28 = mutable.Set[Long]()\n        val onesCount29 = mutable.Set[Long]()\n\
    \        val onesCount30 = mutable.Set[Long]()\n        val onesCount31 = mutable.Set[Long]()\n\
    \        val onesCount32 = mutable.Set[Long]()\n        val onesCount33 = mutable.Set[Long]()\n\
    \        val onesCount34 = mutable.Set[Long]()\n        val one", "        val\
    \ ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n      \
    \  val counts = mutable.Map[Long, Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val onesCounts = mutable.Map[Long,\
    \ Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts\
    \ = mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n",
  "        val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        var count =\
    \ 0\n        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val onesCount = ones.count(_ == 1)\n        val zerosCount = zeros.count(_\
    \ == 0)\n        val onesZeros = ones.count(_ == 0)\n        val zerosOnes = zeros.count(_\
    \ == 1)\n        val onesOnes = ones.count(_ == 1)\n        val zerosZeros = zeros.count(_\
    \ == 0)\n        val onesZeroZeros = ones.count(_ == 0)\n        val zerosOneZeros\
    \ = zeros.count(_ == 1)\n        val onesOneZeros = ones.count(_ == 0)\n     \
    \   val zerosOneOnes = zeros.count(_ == 1)\n        val onesOneOnes = ones.count(_\
    \ == 1)\n        val zerosOneZeroZeros = zeros.count(_ == 0)\n        val onesOneZeroZeros\
    \ = ones.count(_ == 0)\n        val zerosOneOneZeros = zeros.count(_ == 1)\n \
    \       val onesOneOneZeros = ones.count(_ == 0)\n        val zerosOneOneOnes\
    \ = zeros.count(_ == 1)\n        val onesOneOneOnes = ones.count(_ == 1)\n   \
    \     val zerosOneOneZeroZeros = zeros.count(_ == 0)\n        val onesOneOneZeroZeros\
    \ = ones.count(_ == 0)\n        val zerosOneOneOneZeros = zeros.count(_ == 1)\n\
    \        val onesOneOneOneZeros = ones.count(_ == 0)\n        val zerosOneOneOneOnes\
    \ = zeros.count(_ == 1)\n        val onesOneOneOneOnes = ones.count(_ == 0)\n\
    \        val zerosOneOneOneZeroZeros = zeros.count(_ == 0)\n        val onesOneOneOneZeroZeros\
    \ = ones.count(_ == 0)\n        val zerosOneOneOneOneZeros = zeros.count(_ ==\
    \ 1)\n        val onesOneOneOneOneZeros = ones.count(_ == 0)\n        val zerosOneOneOneOneOnes\
    \ = zeros.count(_ == 1)\n        val onesOneOneOneOneOnes = ones.count(_ == 0)\n\
    \        val zerosOneOneOneOneZeroZeros = zeros.count(_ == 0)\n        val onesOneOneOneOneZeroZeros\
    \ = ones.count(_ == 0)\n        val zerosOneOneOneOneOneZeros = zeros.count(_\
    \ == 1)\n        val onesOneOneOneOneOneZeros = ones.count(_ == 0)\n        val\
    \ zerosOneOneOneOneOneOnes = zeros.count(_ == 1)", "        val counts = mutable.HashMap[Long,\
    \ Long]()\n        for (i <- 1 to n) {\n            val str = i.toString\n   \
    \         val start = str.charAt(0) == '1'\n            val end = str.charAt(str.length\
    \ - 1) == '1'\n            if (start && end) {\n                counts.put(i.toLong,\
    \ 1)\n            }\n        }\n        counts.values.sum", "        val ones\
    \ = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n       \
    \ val counts = mutable.ArrayBuffer.empty[Long]\n        val onesCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCount = mutable.ArrayBuffer.empty[Long]\n        val onesCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountZeros = mutable.ArrayBuffer.empty[Long]\n        val zerosCountZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountOnes = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeroOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val zerosCountZeroOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCountOneOnes = mutable.ArrayBuffer.empty[Long]\n        val zerosCountOneOnes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeroZeros = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountZeroZeros = mutable.ArrayBuffer.empty[Long]\n        val\
    \ onesCountOneZeros = mutable.ArrayBuffer.empty[Long]\n        val zerosCountOneZeros\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeroOnes = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountZeroOnes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ onesCountOneOne = mutable.ArrayBuffer.empty[Long]\n        val zerosCountOneOne\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeroZero = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountZeroZero = mutable.ArrayBuffer.empty[Long]\n        val\
    \ onesCountOneZero = mutable.ArrayBuffer.empty[Long]\n        val zerosCountOneZero\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeroOne = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountZeroOne = mutable.ArrayBuffer.empty[Long]\n        val\
    \ onesCountOneOne = mutable.ArrayBuffer.empty[Long]\n        val zerosCountOneOne\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCountZeroZero = mutable.ArrayBuffer.empty[Long]\n\
    \        val zerosCountZeroZero = mutable.ArrayBuffer.empty[Long", "        val\
    \ ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = onesCount.withDefaultValue(0)\n        val onesCount\
    \ = onesCount.withDefaultValue(0)\n        val onesCount = onesCount.withDefaultValue(0)\n\
    \        val onesCount = onesCount.withDefaultValue(0)\n        val onesCount\
    \ = onesCount.withDefaultValue(0)\n        val onesCount = onesCount.withDefaultValue(0)\n\
    \        val onesCount = onesCount.withDefaultValue(0)\n        val onesCount\
    \ = onesCount.withDefaultValue(0)\n        val onesCount = onesCount.withDefaultValue(0)\n\
    \        val onesCount = onesCount.withDefaultValue(0)\n        val onesCount\
    \ = onesCount.withDefaultValue(0)\n        val onesCount = onesCount.withDefaultValue(0)\n\
    \        val onesCount = onesCount.withDefaultValue(0)\n        val onesCount\
    \ = onesCount.withDefaultValue(0)\n        val onesCount = onesCount.withDefaultValue(0)\n\
    \        val onesCount = onesCount.withDefaultValue(0)\n        val onesCount\
    \ = onesCount.withDefaultValue(0)\n        val onesCount = onesCount.withDefaultValue(0)\n\
    \        val onesCount = onesCount.withDefaultValue(0)\n        val onesCount\
    \ = onesCount.withDefaultValue(0)\n        val onesCount = onesCount.withDefaultValue(0)\n\
    \        val onesCount = onesCount.withDefaultValue(0)\n        val onesCount\
    \ = onesCount.withDefaultValue(0)\n        val onesCount = onesCount.withDefaultValue(0)\n\
    \        val onesCount = onesCount.withDefaultValue(0)\n        val onesCount\
    \ = onesCount.withDefaultValue(0)\n        val onesCount = onesCount.withDefaultValue(0)\n\
    \        val onesCount = onesCount.withDefaultValue(0)\n        val onesCount\
    \ = onesCount.withDefaultValue(0)\n        val onesCount = onesCount.withDefaultValue(0)\n\
    \        val onesCount = onesCount.withDefaultValue(0)\n        val onesCount\
    \ = onesCount.withDefaultValue(0)\n        val onesCount = onesCount.withDefaultValue(0)\n\
    \        val onesCount = onesCount.withDefaultValue(0)\n        val onesCount\
    \ = onesCount.", "        val ones = mutable.ListBuffer[Long]()\n        val onesCount\
    \ = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n",
  "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val count = mutable.ArrayBuffer(0)\n        val remainder = n % 10\n\
    \        val digits = n / 10\n        val lastDigit = digits % 10\n        val\
    \ lastDigitIsOne = lastDigit == 1\n        val lastDigitIsZero = lastDigit ==\
    \ 0\n        val lastDigitIsOneOrZero = lastDigitIsOne || lastDigitIsZero\n  \
    \      val lastDigitIsOneOrZeroAndRemainder = lastDigitIsOneOrZero && remainder\
    \ == 0\n        val lastDigitIsOneOrZeroAndRemainderIsZero = lastDigitIsOneOrZero\
    \ && remainder == 0\n        val lastDigitIsOneOrZeroAndRemainderIsOne = lastDigitIsOneOrZero\
    \ && remainder == 1\n        val lastDigitIsOneOrZeroAndRemainderIsOneAndLastDigitIsOne\
    \ = lastDigitIsOneOrZero && remainder == 1 && lastDigitIsOne\n        val lastDigitIsOneOrZeroAndRemainderIsOneAndLastDigitIsZero\
    \ = lastDigitIsOneOrZero && remainder == 1 && lastDigitIsZero\n        val lastDigitIsOneOrZeroAndRemainderIsOneAndLastDigitIsOneOrZero\
    \ = lastDigitIsOneOrZero && remainder == 1 && lastDigitIsOne || lastDigitIsZero\n\
    \        val lastDigitIsOneOrZeroAndRemainderIsOneAndLastDigitIsOneOrZeroAndRemainder\
    \ = lastDigitIsOneOrZero && remainder == 1 && lastDigitIsOne || lastDigitIsZero\
    \ && remainder == 0\n        val lastDigitIsOneOrZeroAndRemainderIsOneAndLastDigitIsOneOrZeroAndRemainderIsZero\
    \ = lastDigitIsOneOrZero && remainder == 1 && lastDigitIsOne || lastDigitIsZero\
    \ && remainder == 0 && lastDigitIsZero\n        val lastDigitIsOneOrZeroAndRemainderIsOneAndLastDigitIsOneOrZeroAndRemainderIsOne\
    \ = lastDigitIsOneOrZero && remainder == 1 && lastDigitIsOne || lastDigitIsZero\
    \ && remainder == 1 && lastDigitIsOne\n        val lastDigitIsOneOrZeroAndRemainderIsOneAndLastDigitIsOneOrZeroAndRemainderIsOneAndLastDigitIsOne\
    \ = lastDigitIsOneOrZero && remainder ", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        val ones = mutable.ArrayBuffer.empty[Long]\n        for (i <-\
    \ 1 to n) {\n            val one = i.toString.toLong\n            if (ones.contains(one))\
    \ {\n                counts(one) += 1\n            }\n            else {\n   \
    \             ones += one\n                counts(one) = 1\n            }\n  \
    \      }\n        counts.values.sum", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val count = mutable.Map[Long,\
    \ Long]()\n        val onesCount = mutable.Map[Long, Long]()\n        val zerosCount\
    \ = mutable.Map[Long, Long]()\n        val onesZeros = mutable.Map[Long, Long]()\n\
    \        val zerosOnes = mutable.Map[Long, Long]()\n        val onesOnes = mutable.Map[Long,\
    \ Long]()\n        val zerosZeros = mutable.Map[Long, Long]()\n        val zerosZeros\
    \ = mutable.Map[Long, Long]()\n        val onesZeros = mutable.Map[Long, Long]()\n\
    \        val zerosOnes = mutable.Map[Long, Long]()\n        val zerosZeros = mutable.Map[Long,\
    \ Long]()\n        val zerosOnes = mutable.Map[Long, Long]()\n        val onesOnes\
    \ = mutable.Map[Long, Long]()\n        val onesZeros = mutable.Map[Long, Long]()\n\
    \        val zerosOnes = mutable.Map[Long, Long]()\n        val zerosZeros = mutable.Map[Long,\
    \ Long]()\n        val zerosOnes = mutable.Map[Long, Long]()\n        val zerosZeros\
    \ = mutable.Map[Long, Long]()\n        val zerosOnes = mutable.Map[Long, Long]()\n\
    \        val onesOnes = mutable.Map[Long, Long]()\n        val onesZeros = mutable.Map[Long,\
    \ Long]()\n        val zerosOnes = mutable.Map[Long, Long]()\n        val zerosZeros\
    \ = mutable.Map[Long, Long]()\n        val zerosOnes = mutable.Map[Long, Long]()\n\
    \        val onesOnes = mutable.Map[Long, Long]()\n        val onesZeros = mutable.Map[Long,\
    \ Long]()\n        val zerosOnes = mutable.Map[Long, Long]()\n        val zerosZeros\
    \ = mutable.Map[Long, Long]()\n        val zerosOnes = mutable.Map[Long, Long]()\n\
    \        val onesOnes = mutable.Map[Long, Long]()\n        val onesZeros = mutable.Map[Long,\
    \ Long]()\n        val zerosOnes = mutable.Map[Long, Long]()\n        val zerosZeros\
    \ = mutable.Map[Long, Long]()\n        val zerosOnes = mutable.Map[Long, Long]()\n\
    \        val ones", "        val ones = mutable.ListBuffer[Long]()\n        val\
    \ onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n",
  "        val ones = mutable.ListBuffer[Long]()\n        for (i <- 1 to n) {\n  \
    \          if (i.toString.toLong == 1) {\n                ones += i\n        \
    \    }\n        }\n        ones.count(_ == 1)", "        val ones = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) ones += i\n        ones.count(_ == 1)", "        val\
    \ ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n        val counts\
    \ = mutable.Map[Long, Long]()\n        for (i <- 1 to n) {\n            val digit\
    \ = i / 10\n            if (digit == 1) {\n                ones += i\n       \
    \     } else {\n                zeros += i\n            }\n        }\n       \
    \ for (i <- ones.toList ++ zeros.toList) {\n            counts(i) += 1\n     \
    \   }\n        counts.values.sum", "        val ones = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount = mutable.ArrayBuffer.empty[Long]\n        val onesCount2\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount4 = mutable.ArrayBuffer.empty[Long]\n        val onesCount5\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount7 = mutable.ArrayBuffer.empty[Long]\n        val onesCount8\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount10 = mutable.ArrayBuffer.empty[Long]\n        val onesCount11\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount13 = mutable.ArrayBuffer.empty[Long]\n        val onesCount14\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount16 = mutable.ArrayBuffer.empty[Long]\n        val onesCount17\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount18 = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount19 = mutable.ArrayBuffer.empty[Long]\n        val onesCount20\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount21 = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount22 = mutable.ArrayBuffer.empty[Long]\n        val onesCount23\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount24 = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount25 = mutable.ArrayBuffer.empty[Long]\n        val onesCount26\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount27 = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount28 = mutable.ArrayBuffer.empty[Long]\n        val onesCount29\
    \ = mutable.ArrayBuffer.empty[Long]\n        val onesCount30 = mutable.ArrayBuffer.empty[Long]\n\
    \        val onesCount31 = mutable.ArrayBuffer.empty[Long]\n        val onesCount32\
    \ = mutable.ArrayBuffer.empty[Long]\n", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val onesCount = mutable.Set[Long]()\n        val zerosCount\
    \ = mutable.Set[Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesZeros =\
    \ mutable.Set[Long]()\n        val zerosZeros = mutable.Set[Long]()\n        val\
    \ onesZeroCount = mutable.Set[Long]()\n        val zerosZeroCount = mutable.Set[Long]()\n\
    \        val onesZeroCounts = mutable.Map[Long, Long]()\n        val zerosZeroCounts\
    \ = mutable.Map[Long, Long]()\n        val onesZeroZeros = mutable.Set[Long]()\n\
    \        val zerosZeroZeros = mutable.Set[Long]()\n        val onesZeroZeroCount\
    \ = mutable.Set[Long]()\n        val zerosZeroZeroCount = mutable.Set[Long]()\n\
    \        val onesZeroZeroCounts = mutable.Map[Long, Long]()\n        val zerosZeroZeroCounts\
    \ = mutable.Map[Long, Long]()\n        val onesZeroZeroZeros = mutable.Set[Long]()\n\
    \        val zerosZeroZeroZeros = mutable.Set[Long]()\n        val onesZeroZeroZeroCount\
    \ = mutable.Set[Long]()\n        val zerosZeroZeroZeroCount = mutable.Set[Long]()\n\
    \        val onesZeroZeroZeroCounts = mutable.Map[Long, Long]()\n        val zerosZeroZeroZeroCounts\
    \ = mutable.Map[Long, Long]()\n        val onesZeroZeroZeroZeros = mutable.Set[Long]()\n\
    \        val zerosZeroZeroZeroZeros = mutable.Set[Long]()\n        val onesZeroZeroZeroCount\
    \ = mutable.Set[Long]()\n        val zerosZeroZeroZeroCount = mutable.Set[Long]()\n\
    \        val onesZeroZeroZeroCounts = mutable.Map[Long, Long]()\n        val zerosZeroZeroZeroCounts\
    \ = mutable.Map[Long, Long]()\n        val onesZeroZeroZeroZeros = mutable.Set[Long]()\n\
    \        val zerosZeroZeroZeroZeros = mutable.Set[Long]()\n        val onesZeroZeroZeroCount\
    \ = mutable.Set[Long]()\n", "        val ones = mutable.ListBuffer[Long]()\n \
    \       val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n",
  "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val onesCounts = mutable.Map[Long,\
    \ Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCountZeros\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOnes = mutable.Map[Long,\
    \ Long]()\n        val onesCountOnes = mutable.Map[Long, Long]()\n        val\
    \ zerosCountZeros = mutable.Map[Long, Long]()\n        val onesCountZeroOnes =\
    \ mutable.Map[Long, Long]()\n        val zerosCountOneZero = mutable.Map[Long,\
    \ Long]()\n        val onesCountOneZero = mutable.Map[Long, Long]()\n        val\
    \ zerosCountZeroOne = mutable.Map[Long, Long]()\n        val onesCountZeroOne\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOneOne = mutable.Map[Long,\
    \ Long]()\n        val onesCountOneOne = mutable.Map[Long, Long]()\n        val\
    \ zerosCountZeroOneOne = mutable.Map[Long, Long]()\n        val onesCountZeroOneOne\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOneOneOne = mutable.Map[Long,\
    \ Long]()\n        val onesCountOneOneOne = mutable.Map[Long, Long]()\n      \
    \  val zerosCountZeroOneOneOne = mutable.Map[Long, Long]()\n        val onesCountZeroOneOneOne\
    \ = mutable.Map[Long, Long]()\n        val zerosCountOneOneOneOne = mutable.Map[Long,\
    \ Long]()\n        val onesCountOneOneOneOne = mutable.Map[Long, Long]()\n   \
    \     val zerosCountZeroOneOneOneOne = mutable.Map[Long, Long]()\n        val\
    \ onesCountZeroOneOneOneOne = mutable.Map[Long, Long]()\n        val zerosCountOneOneOneOneOne\
    \ = mutable.Map[Long, Long]()\n        val onesCountOneOneOneOneOne = mutable.Map[Long,\
    \ Long]()\n        val zerosCountZeroOneOneOneOneOne = mutable.Map[Long, Long]()\n\
    \        ", "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val count = mutable.ArrayBuffer(0)\n        while(n > 0){\n         \
    \   val digit = n % 10\n            n /= 10\n            if(digit == 1){\n   \
    \             ones += digit\n            }\n            if(digit == 0){\n    \
    \            zeros += digit\n            }\n        }\n        while(ones.size\
    \ < n){\n            ones += 0\n        }\n        while(zeros.size < n){\n  \
    \          zeros += 0\n        }\n        while(ones.size > 0){\n            count\
    \ += ones.takeWhile(x => x == 1)\n            ones.dropWhile(x => x == 1)\n  \
    \      }\n        while(zeros.size > 0){\n            count += zeros.takeWhile(x\
    \ => x == 0)\n            zeros.dropWhile(x => x == 0)\n        }\n        count.sum",
  "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val counts = mutable.ArrayBuffer(0)\n        val onesCount = mutable.ArrayBuffer(0)\n\
    \        val zerosCount = mutable.ArrayBuffer(0)\n        val onesCounts = mutable.ArrayBuffer(0)\n\
    \        val zerosCounts = mutable.ArrayBuffer(0)\n        val onesCountZeros\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountZeros = mutable.ArrayBuffer(0)\n\
    \        val onesCountOnes = mutable.ArrayBuffer(0)\n        val zerosCountOnes\
    \ = mutable.ArrayBuffer(0)\n        val onesCountZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosCountZeroOnes = mutable.ArrayBuffer(0)\n        val onesCountOneOnes\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountOneOnes = mutable.ArrayBuffer(0)\n\
    \        val onesCountZeroZeroOnes = mutable.ArrayBuffer(0)\n        val zerosCountZeroZeroOnes\
    \ = mutable.ArrayBuffer(0)\n        val onesCountOneZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosCountOneZeroOnes = mutable.ArrayBuffer(0)\n        val onesCountZeroOneOnes\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountZeroOneOnes = mutable.ArrayBuffer(0)\n\
    \        val onesCountOneOneOnes = mutable.ArrayBuffer(0)\n        val zerosCountOneOneOnes\
    \ = mutable.ArrayBuffer(0)\n        val onesCountZeroZeroZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosCountZeroZeroZeroOnes = mutable.ArrayBuffer(0)\n        val\
    \ onesCountOneZeroZeroOnes = mutable.ArrayBuffer(0)\n        val zerosCountOneZeroZeroOnes\
    \ = mutable.ArrayBuffer(0)\n        val onesCountZeroOneZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val zerosCountZeroOneZeroOnes = mutable.ArrayBuffer(0)\n        val onesCountOneOneZeroOnes\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountOneOneZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val onesCountZeroZeroOneZeroOnes = mutable.ArrayBuffer(0)\n        val\
    \ zerosCountZeroZeroOneZeroOnes = mutable.ArrayBuffer(0)\n        val onesCountOneZeroZeroOneZeroOnes\
    \ = mutable.ArrayBuffer(0)\n        val zerosCountOneZeroZeroOneZeroOnes = mutable.ArrayBuffer(0)\n\
    \        val onesCountZeroOneZeroOneZeroOnes = mutable.ArrayBuffer(0)\n      \
    \  val zerosCountZeroOneZeroOne", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val zeros = mutable.ListBuffer[Long]()\n        val count = mutable.ListBuffer[Long]()\n\
    \        val digits = n.toString.reverse.grouped(10).reverse\n        digits.foreach(x\
    \ => if (x.head == 1) ones += x.tail else zeros += x.tail)\n        ones.foreach(x\
    \ => count += x)\n        zeros.foreach(x => count += x)\n        count.length",
  "        val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n        val counts\
    \ = mutable.Map[Long, Long]()\n        val digits = n.toString.reverse.grouped(2).map(_.reverse)\n\
    \        for (d <- digits) {\n            if (d.head == 1) {\n               \
    \ ones += d.last\n            } else {\n                zeros += d.last\n    \
    \        }\n        }\n        ones.foreach(counts += (_ -> ones.size))\n    \
    \    zeros.foreach(counts += (_ -> zeros.size))\n        ones.size + zeros.size",
  "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val counts = mutable.ArrayBuffer.empty[Long]\n        while(n > 1) {\n\
    \            val digit = n % 10\n            val digitCount = digits.count(_ ==\
    \ digit)\n            val digitZeroCount = digits.count(_ == 0)\n            val\
    \ digitOneCount = digits.count(_ == 1)\n            val digitCount = digitZeroCount\
    \ + digitOneCount\n            counts += digitCount\n            n /= 10\n   \
    \     }\n        counts.sum", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.ArrayBuffer.empty[Long]\n\
    \        val zeros = mutable.ArrayBuffer.empty[Long]\n        val counter = mutable.HashMap.empty[Long,\
    \ Long]\n        val max = (n / 10).floor\n        val min = (n / 10).ceil\n \
    \       val digits = n.toString.reverse.grouped(10).toList\n        val onesCount\
    \ = ones.count(i => digits.contains(i))\n        val zerosCount = zeros.count(i\
    \ => digits.contains(i))\n        val counterCount = counter.count(i => digits.contains(i))\n\
    \        val maxCount = max.toString.reverse.grouped(10).count(i => digits.contains(i))\n\
    \        val minCount = min.toString.reverse.grouped(10).count(i => digits.contains(i))\n\
    \        val digitsCount = digits.count(i => digits.contains(i))\n        val\
    \ onesCount2 = ones.count(i => digits.contains(i) && digits.contains(i-1) && digits.contains(i-2))\n\
    \        val zerosCount2 = zeros.count(i => digits.contains(i) && digits.contains(i-1)\
    \ && digits.contains(i-2))\n        val counterCount2 = counter.count(i => digits.contains(i)\
    \ && digits.contains(i-1) && digits.contains(i-2))\n        val maxCount2 = max.toString.reverse.grouped(10).count(i\
    \ => digits.contains(i) && digits.contains(i-1) && digits.contains(i-2))\n   \
    \     val minCount2 = min.toString.reverse.grouped(10).count(i => digits.contains(i)\
    \ && digits.contains(i-1) && digits.contains(i-2))\n        val digitsCount2 =\
    \ digits.count(i => digits.contains(i) && digits.contains(i-1) && digits.contains(i-2))\n\
    \        val onesCount3 = ones.count(i => digits.contains(i) && digits.contains(i-1)\
    \ && digits.contains(i-2) && digits.contains(i-3))\n        val zerosCount3 =\
    \ zeros.count(i => digits.contains(i) && digits.contains(i-1) && digits.contains(i-2)\
    \ && digits.contains(i-3))\n        val counterCount3 = counter.count(i => digits.contains(i)\
    \ && digits.contains(i-1) && digits.contains(i-2) && digits.contains(i-3))\n \
    \       val maxCount3 = max.toString.reverse.grouped(10).count(i => digits.contains(i)\
    \ && digits.contains(i-1) && digits.contains(i-2) && digits.contains(i-3))\n \
    \       val minCount3 = min.toString.reverse.grouped(10).count(i => digits.contains(i)\
    \ && digits.contains(i-1) && digits.contains(i-2) && digits.contains(i-3))\n \
    \       val digitsCount3 = digits.count(i => digits.contains(", "        val ones\
    \ = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n        val\
    \ counts = mutable.Map[Long, Long]()\n        for(i <- 1 to n){\n            val\
    \ digit = i / 10\n            if(digit == 1){\n                ones += i\n   \
    \         }else{\n                zeros += i\n            }\n            counts(digit)\
    \ += 1\n        }\n        ones.size + zeros.size + 1", "        val ones = mutable.ArrayBuffer(1)\n\
    \        val zeros = mutable.ArrayBuffer(0)\n        val count = mutable.ArrayBuffer(0)\n\
    \        val onesCount = mutable.ArrayBuffer(0)\n        val zerosCount = mutable.ArrayBuffer(0)\n\
    \        val onesCount2 = mutable.ArrayBuffer(0)\n        val zerosCount2 = mutable.ArrayBuffer(0)\n\
    \        val onesCount3 = mutable.ArrayBuffer(0)\n        val zerosCount3 = mutable.ArrayBuffer(0)\n\
    \        val onesCount4 = mutable.ArrayBuffer(0)\n        val zerosCount4 = mutable.ArrayBuffer(0)\n\
    \        val onesCount5 = mutable.ArrayBuffer(0)\n        val zerosCount5 = mutable.ArrayBuffer(0)\n\
    \        val onesCount6 = mutable.ArrayBuffer(0)\n        val zerosCount6 = mutable.ArrayBuffer(0)\n\
    \        val onesCount7 = mutable.ArrayBuffer(0)\n        val zerosCount7 = mutable.ArrayBuffer(0)\n\
    \        val onesCount8 = mutable.ArrayBuffer(0)\n        val zerosCount8 = mutable.ArrayBuffer(0)\n\
    \        val onesCount9 = mutable.ArrayBuffer(0)\n        val zerosCount9 = mutable.ArrayBuffer(0)\n\
    \        val onesCount10 = mutable.ArrayBuffer(0)\n        val zerosCount10 =\
    \ mutable.ArrayBuffer(0)\n        val onesCount11 = mutable.ArrayBuffer(0)\n \
    \       val zerosCount11 = mutable.ArrayBuffer(0)\n        val onesCount12 = mutable.ArrayBuffer(0)\n\
    \        val zerosCount12 = mutable.ArrayBuffer(0)\n        val onesCount13 =\
    \ mutable.ArrayBuffer(0)\n        val zerosCount13 = mutable.ArrayBuffer(0)\n\
    \        val onesCount14 = mutable.ArrayBuffer(0)\n        val zerosCount14 =\
    \ mutable.ArrayBuffer(0)\n        val onesCount15 = mutable.ArrayBuffer(0)\n \
    \       val zerosCount15 = mutable.ArrayBuffer(0)\n        val onesCount16 = mutable.ArrayBuffer(0)\n\
    \        val zerosCount16 = mutable.ArrayBuffer(0)\n        val onesCount17 =\
    \ mutable.ArrayBuffer(0)\n        val zerosCount17 = mutable.ArrayBuffer(0)\n\
    \        val onesCount18 = mutable.ArrayBuffer(0)\n        val zerosCount18 =\
    \ mutable.ArrayBuffer(0)\n        val onesCount19 = mutable.ArrayBuffer(0)\n \
    \       val zerosCount19 = mutable.ArrayBuffer(0)\n        val onesCount20 = mutable.ArrayBuffer(0)\n\
    \        val zerosCount20 = mutable.ArrayBuffer(0)\n        val onesCount21 =\
    \ mutable.", "        val counts = mutable.HashMap.empty[Long, Long]\n       \
    \ for(i <- 1 to n){\n            val x = i.toString.toInt\n            val y =\
    \ x.toString.toInt\n            val z = x.toString.toInt\n            val w =\
    \ x.toString.toInt\n            val a = x.toString.toInt\n            val b =\
    \ x.toString.toInt\n            val c = x.toString.toInt\n            val d =\
    \ x.toString.toInt\n            val e = x.toString.toInt\n            val f =\
    \ x.toString.toInt\n            val g = x.toString.toInt\n            val h =\
    \ x.toString.toInt\n            val i = x.toString.toInt\n            val j =\
    \ x.toString.toInt\n            val k = x.toString.toInt\n            val l =\
    \ x.toString.toInt\n            val m = x.toString.toInt\n            val n =\
    \ x.toString.toInt\n            val o = x.toString.toInt\n            val p =\
    \ x.toString.toInt\n            val q = x.toString.toInt\n            val r =\
    \ x.toString.toInt\n            val s = x.toString.toInt\n            val t =\
    \ x.toString.toInt\n            val u = x.toString.toInt\n            val v =\
    \ x.toString.toInt\n            val w = x.toString.toInt\n            val x =\
    \ x.toString.toInt\n            val y = x.toString.toInt\n            val z =\
    \ x.toString.toInt\n            val w = x.toString.toInt\n            val a =\
    \ x.toString.toInt\n            val b = x.toString.toInt\n            val c =\
    \ x.toString.toInt\n            val d = x.toString.toInt\n            val e =\
    \ x.toString.toInt\n            val f = x.toString.toInt\n            val g =\
    \ x.toString.toInt\n            val h = x.toString.toInt\n            val i =\
    \ x.toString.toInt\n            val j = x.toString.toInt\n            val k =\
    \ x.toString.toInt\n            val l = x.toString.toInt\n            val m =\
    \ x.toString.toInt\n            val n = x.toString.toInt\n            val o =\
    \ x.toString.toInt\n            val p = x.toString.toInt\n            val q =\
    \ x.toString.toInt\n            val r = x.toString.toInt\n            val s =\
    \ x.toString.toInt\n            val t = x.toString.toInt\n            val u =\
    \ x.toString.toInt\n            val v = x.toString.toInt\n            val w =\
    \ x.toString.toInt\n            val x = ", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val zeros = mutable.ListBuffer[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        for(i <- 1 to n){\n            val digit = i / Math.pow(10,\
    \ n.toInt)\n            if(digit == 1){\n                ones += i\n         \
    \   }else{\n                zeros += i\n            }\n            counts(digit)\
    \ += 1\n        }\n        ones.toList.size + (zeros.toList.size - ones.toList.size)",
  "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val count = mutable.ArrayBuffer(0)\n        var i = 0\n        while(i\
    \ < n) {\n            val x = ones(0)\n            val y = zeros(0)\n        \
    \    val z = ones(0)\n            val a = ones(0)\n            val b = zeros(0)\n\
    \            val c = ones(0)\n            val d = zeros(0)\n            val e\
    \ = ones(0)\n            val f = zeros(0)\n            val g = ones(0)\n     \
    \       val h = zeros(0)\n            val i = ones(0)\n            val j = zeros(0)\n\
    \            val k = ones(0)\n            val l = zeros(0)\n            val m\
    \ = ones(0)\n            val n = zeros(0)\n            val o = ones(0)\n     \
    \       val p = zeros(0)\n            val q = ones(0)\n            val r = zeros(0)\n\
    \            val s = ones(0)\n            val t = zeros(0)\n            val u\
    \ = ones(0)\n            val v = zeros(0)\n            val w = ones(0)\n     \
    \       val x = ones(0)\n            val y = zeros(0)\n            val z = ones(0)\n\
    \            val a = ones(0)\n            val b = zeros(0)\n            val c\
    \ = ones(0)\n            val d = zeros(0)\n            val e = ones(0)\n     \
    \       val f = zeros(0)\n            val g = ones(0)\n            val h = zeros(0)\n\
    \            val i = ones(0)\n            val j = zeros(0)\n            val k\
    \ = ones(0)\n            val l = zeros(0)\n            val m = ones(0)\n     \
    \       val n = zeros(0)\n            val o = ones(0)\n            val p = zeros(0)\n\
    \            val q = ones(0)\n            val r = zeros(0)\n            val s\
    \ = ones(0)\n            val t = zeros(0)\n            val u = ones(0)\n     \
    \       val v = zeros(0)\n            val w = ones(0)\n            val x = ones(0)\n\
    \            val y = zeros(0)\n            val z = ones(0)\n            val a\
    \ = ones(0)\n            val b = zeros(0)\n            val c = ones(0)\n     \
    \       val d = zeros(0)\n            val e = ones(0)\n            val f = zeros(0)\n\
    \            val g = ones(0)\n            val h = zeros(0)\n            val i\
    \ = ones(0)\n            val j = zeros(0)\n            val k = ones(0)\n     \
    \       val l = zeros(0)\n            val m = ones(0)", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val zeros = mutable.ListBuffer[Long]()\n        val counts = mutable.ListBuffer[Long]()\n\
    \        val n = n.toInt\n        for(i <- 0 until n) {\n            val digit\
    \ = n.toString.charAt(i)\n            if(digit == '1') {\n                ones\
    \ += i\n            } else if(digit == '0') {\n                zeros += i\n  \
    \          } else {\n                counts += i\n            }\n        }\n \
    \       val onesCount = ones.size\n        val zerosCount = zeros.size\n     \
    \   val countsCount = counts.size\n        val onesZeros = onesCount + zerosCount\n\
    \        val onesCount = ones.size - onesZeros\n        val zerosCount = zeros.size\
    \ - onesZeros\n        val countsCount = counts.size - onesZeros\n        val\
    \ onesZeros = ones.size - onesCount\n        val onesCount = ones.size - onesZeros\n\
    \        val zerosCount = zeros.size - onesZeros\n        val countsCount = counts.size\
    \ - onesZeros\n        val onesZeros = ones.size - onesCount\n        val onesCount\
    \ = ones.size - onesZeros\n        val zerosCount = zeros.size - onesZeros\n \
    \       val countsCount = counts.size - onesZeros\n        val onesZeros = ones.size\
    \ - onesCount\n        val onesCount = ones.size - onesZeros\n        val zerosCount\
    \ = zeros.size - onesZeros\n        val countsCount = counts.size - onesZeros\n\
    \        val onesZeros = ones.size - onesCount\n        val onesCount = ones.size\
    \ - onesZeros\n        val zerosCount = zeros.size - onesZeros\n        val countsCount\
    \ = counts.size - onesZeros\n        val onesZeros = ones.size - onesCount\n \
    \       val onesCount = ones.size - onesZeros\n        val zerosCount = zeros.size\
    \ - onesZeros\n        val countsCount = counts.size - onesZeros\n        val\
    \ onesZeros = ones.size - onesCount\n        val onesCount = ones.size - onesZeros\n\
    \        val zerosCount = zeros.size - onesZeros\n        val countsCount = counts.size\
    \ - onesZeros\n        val onesZeros = ones.size - onesCount\n        val onesCount\
    \ = ones.size - onesZeros\n        val zerosCount = zeros.", "        val counts\
    \ = mutable.HashMap.empty[Long, Long]\n        val ones = mutable.HashSet.empty[Long]\n\
    \        val zeros = mutable.HashSet.empty[Long]\n        val onesCount = mutable.HashSet.empty[Long]\n\
    \        val zerosCount = mutable.HashSet.empty[Long]\n        val onesCounts\
    \ = mutable.HashSet.empty[Long]\n        val zerosCounts = mutable.HashSet.empty[Long]\n\
    \        val onesCountZeros = mutable.HashSet.empty[Long]\n        val zerosCountZeros\
    \ = mutable.HashSet.empty[Long]\n        val onesCountOnes = mutable.HashSet.empty[Long]\n\
    \        val zerosCountOnes = mutable.HashSet.empty[Long]\n        val onesCountZeroOnes\
    \ = mutable.HashSet.empty[Long]\n        val zerosCountZeroOnes = mutable.HashSet.empty[Long]\n\
    \        val onesCountOneOnes = mutable.HashSet.empty[Long]\n        val zerosCountOneOnes\
    \ = mutable.HashSet.empty[Long]\n        val onesCountZeroZeros = mutable.HashSet.empty[Long]\n\
    \        val zerosCountZeroZeros = mutable.HashSet.empty[Long]\n        val onesCountOneZero\
    \ = mutable.HashSet.empty[Long]\n        val zerosCountOneZero = mutable.HashSet.empty[Long]\n\
    \        val onesCountZeroOne = mutable.HashSet.empty[Long]\n        val zerosCountZeroOne\
    \ = mutable.HashSet.empty[Long]\n        val onesCountOneOne = mutable.HashSet.empty[Long]\n\
    \        val zerosCountOneOne = mutable.HashSet.empty[Long]\n        val onesCountZeroZeroOne\
    \ = mutable.HashSet.empty[Long]\n        val zerosCountZeroZeroOne = mutable.HashSet.empty[Long]\n\
    \        val onesCountOneZeroZero = mutable.HashSet.empty[Long]\n        val zerosCountOneZeroZero\
    \ = mutable.HashSet.empty[Long]\n        val onesCountOneOneZero = mutable.HashSet.empty[Long]\n\
    \        val zerosCountOneOneZero = mutable.HashSet.empty[Long]\n        val onesCountZeroZeroOne\
    \ = mutable.HashSet.empty[Long]\n        val zerosCountZeroZeroOne = mutable.HashSet.empty[Long]\n\
    \        val onesCountOneZeroZero = mutable.HashSet.empty[", "        val ones\
    \ = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n        val\
    \ counts = mutable.Map[Long, Long]()\n        val nums = mutable.Seq.fill(n)(0)\n\
    \        val onesCount = mutable.Seq.fill(n)(0)\n        val zerosCount = mutable.Seq.fill(n)(0)\n\
    \        val onesZeros = mutable.Seq.fill(n)(0)\n        val zerosOnes = mutable.Seq.fill(n)(0)\n\
    \        val onesOnes = mutable.Seq.fill(n)(0)\n        val zerosZeros = mutable.Seq.fill(n)(0)\n\
    \        val zerosZeros = mutable.Seq.fill(n)(0)\n        val zerosOnes = mutable.Seq.fill(n)(0)\n\
    \        val onesZeros = mutable.Seq.fill(n)(0)\n        val onesOnes = mutable.Seq.fill(n)(0)\n\
    \        val onesZeros = mutable.Seq.fill(n)(0)\n        val zerosOnes = mutable.Seq.fill(n)(0)\n\
    \        val zerosZeros = mutable.Seq.fill(n)(0)\n        val zerosOnes = mutable.Seq.fill(n)(0)\n\
    \        val zerosZeros = mutable.Seq.fill(n)(0)\n        val zerosOnes = mutable.Seq.fill(n)(0)\n\
    \        val onesOnes = mutable.Seq.fill(n)(0)\n        val onesZeros = mutable.Seq.fill(n)(0)\n\
    \        val onesOnes = mutable.Seq.fill(n)(0)\n        val onesZeros = mutable.Seq.fill(n)(0)\n\
    \        val zerosOnes = mutable.Seq.fill(n)(0)\n        val zerosZeros = mutable.Seq.fill(n)(0)\n\
    \        val zerosOnes = mutable.Seq.fill(n)(0)\n        val zerosZeros = mutable.Seq.fill(n)(0)\n\
    \        val zerosOnes = mutable.Seq.fill(n)(0)\n        val onesOnes = mutable.Seq.fill(n)(0)\n\
    \        val onesZeros = mutable.Seq.fill(n)(0)\n        val onesOnes = mutable.Seq.fill(n)(0)\n\
    \        val onesZeros = mutable.Seq.fill(n)(0)\n        val onesOnes = mutable.Seq.fill(n)(0)\n\
    \        val onesZeros = mutable.Seq.fill(n)(0)\n        val onesOnes = mutable.Seq.fill(n)(0)",
  "        var count = 0\n        var last = 0\n        var lastOne = 0\n        var\
    \ lastTwo = 0\n        var lastThree = 0\n        var lastFour = 0\n        var\
    \ lastFive = 0\n        var lastSix = 0\n        var lastSeven = 0\n        var\
    \ lastEight = 0\n        var lastNine = 0\n        var lastTen = 0\n        var\
    \ lastEleven = 0\n        var lastTwelve = 0\n        var lastThirteen = 0\n \
    \       var lastFourteen = 0\n        var lastFifteen = 0\n        var lastSixteen\
    \ = 0\n        var lastSeventeen = 0\n        var lastEighteen = 0\n        var\
    \ lastNineteen = 0\n        var lastTwenty = 0\n        var lastTwentyOne = 0\n\
    \        var lastTwentyTwo = 0\n        var lastTwentyThree = 0\n        var lastTwentyFour\
    \ = 0\n        var lastTwentyFive = 0\n        var lastTwentySix = 0\n       \
    \ var lastTwentySeven = 0\n        var lastTwentyEight = 0\n        var lastTwentyNine\
    \ = 0\n        var lastThirty = 0\n        var lastThirtyOne = 0\n        var\
    \ lastThirtyTwo = 0\n        var lastThirtyThree = 0\n        var lastThirtyFour\
    \ = 0\n        var lastThirtyFive = 0\n        var lastThirtySix = 0\n       \
    \ var lastThirtySeven = 0\n        var lastThirtyEight = 0\n        var lastThirtyNine\
    \ = 0\n        var lastFourty = 0\n        var lastFourtyOne = 0\n        var\
    \ lastFourtyTwo = 0\n        var lastFourtyThree = 0\n        var lastFourtyFour\
    \ = 0\n        var lastFourtyFive = 0\n        var lastFourtySix = 0\n       \
    \ var lastFourtySeven = 0\n        var lastFourtyEight = 0\n        var lastFourtyNine\
    \ = 0\n        var lastFifty = 0\n        var lastFiftyOne = 0\n        var lastFiftyTwo\
    \ = 0\n        var lastFiftyThree = 0\n        var lastFiftyFour = 0\n       \
    \ var lastFiftyFive = 0\n        var lastFiftySix = 0\n        var lastFiftySeven\
    \ = 0\n        var lastFiftyEight = 0\n        var lastFiftyNine = 0\n       \
    \ var lastSixty = 0\n        var lastSixtyOne = 0\n        var lastSixtyTwo =\
    \ 0\n        var lastSixtyThree = 0\n        var lastSixtyFour = 0\n        var\
    \ lastSixtyFive = 0\n        var lastSixtySix = 0\n        var lastSixtySeven\
    \ = 0\n        var lastSixtyEight = 0", "        val counts = mutable.HashMap[Long,\
    \ Long]()\n        for (i <- 1 to n) {\n            val s = i.toString.length\n\
    \            if (i % 10 == 1 && i % 100 != 11 && i % 100 != 71 && i % 100 != 73\
    \ && i % 100 != 79 && i % 100 != 83 && i % 100 != 89) {\n                counts(i)\
    \ = counts.getOrElse(i, 0) + 1\n            }\n        }\n        counts.values.sum",
  "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val counts = mutable.Map[Long, Long]()\n        for (i <- 1 to n) {\n\
    \            val digit = i / Math.pow(10, n.toInt)\n            if (digit == 1)\
    \ ones += i\n            else if (digit == 0) zeros += i\n            else counts(digit)\
    \ += 1\n        }\n        val oneCount = ones.size\n        val zeroCount = zeros.size\n\
    \        val onesCount = ones.toSeq.distinct\n        val zerosCount = zeros.toSeq.distinct\n\
    \        val onesZeroCount = ones.toSeq.intersect(zeros.toSeq)\n        val onesZeroCount\
    \ = onesZeroCount.size\n        val onesZeroCount = onesZeroCount.toSeq.distinct\n\
    \        val onesZeroCount = onesZeroCount.toSeq.distinct\n        val onesZeroCount\
    \ = onesZeroCount.toSeq.distinct\n        val onesZeroCount = onesZeroCount.toSeq.distinct\n\
    \        val onesZeroCount = onesZeroCount.toSeq.distinct\n        val onesZeroCount\
    \ = onesZeroCount.toSeq.distinct\n        val onesZeroCount = onesZeroCount.toSeq.distinct\n\
    \        val onesZeroCount = onesZeroCount.toSeq.distinct\n        val onesZeroCount\
    \ = onesZeroCount.toSeq.distinct\n        val onesZeroCount = onesZeroCount.toSeq.distinct\n\
    \        val onesZeroCount = onesZeroCount.toSeq.distinct\n        val onesZeroCount\
    \ = onesZeroCount.toSeq.distinct\n        val onesZeroCount = onesZeroCount.toSeq.distinct\n\
    \        val onesZeroCount = onesZeroCount.toSeq.distinct\n        val onesZeroCount\
    \ = onesZeroCount.toSeq.distinct\n        val onesZeroCount = onesZeroCount.toSeq.distinct\n\
    \        val onesZeroCount = onesZeroCount.toSeq.distinct\n        val onesZeroCount\
    \ = onesZeroCount.toSeq.distinct\n        val onesZeroCount = onesZeroCount.toSeq.distinct\n\
    \        val onesZeroCount = onesZeroCount.toSeq.distinct\n        val onesZeroCount\
    \ = onesZeroCount.toSeq.distinct\n        val onesZeroCount = onesZeroCount.toSeq.distinct\n\
    \        val onesZeroCount = ones", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val zerosCount = mutable.Set[Long]()\n        val onesCount2 = mutable.Set[Long]()\n\
    \        val zerosCount2 = mutable.Set[Long]()\n        val onesCount3 = mutable.Set[Long]()\n\
    \        val zerosCount3 = mutable.Set[Long]()\n        val onesCount4 = mutable.Set[Long]()\n\
    \        val zerosCount4 = mutable.Set[Long]()\n        val onesCount5 = mutable.Set[Long]()\n\
    \        val zerosCount5 = mutable.Set[Long]()\n        val onesCount6 = mutable.Set[Long]()\n\
    \        val zerosCount6 = mutable.Set[Long]()\n        val onesCount7 = mutable.Set[Long]()\n\
    \        val zerosCount7 = mutable.Set[Long]()\n        val onesCount8 = mutable.Set[Long]()\n\
    \        val zerosCount8 = mutable.Set[Long]()\n        val onesCount9 = mutable.Set[Long]()\n\
    \        val zerosCount9 = mutable.Set[Long]()\n        val onesCount10 = mutable.Set[Long]()\n\
    \        val zerosCount10 = mutable.Set[Long]()\n        val onesCount11 = mutable.Set[Long]()\n\
    \        val zerosCount11 = mutable.Set[Long]()\n        val onesCount12 = mutable.Set[Long]()\n\
    \        val zerosCount12 = mutable.Set[Long]()\n        val onesCount13 = mutable.Set[Long]()\n\
    \        val zerosCount13 = mutable.Set[Long]()\n        val onesCount14 = mutable.Set[Long]()\n\
    \        val zerosCount14 = mutable.Set[Long]()\n        val onesCount15 = mutable.Set[Long]()\n\
    \        val zerosCount15 = mutable.Set[Long]()\n        val onesCount16 = mutable.Set[Long]()\n\
    \        val zerosCount16 = mutable.Set[Long]()\n        val onesCount17 = mutable.Set[Long]()\n\
    \        val zerosCount17 = mutable.Set[Long]()\n        val onesCount18 = mutable.Set[Long]()\n\
    \        val zerosCount18 = ", "        val ones = mutable.ListBuffer(1)\n   \
    \     val zeros = mutable.ListBuffer(0)\n        val count = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val zerosCount =\
    \ mutable.ListBuffer[Long]()\n        while(n > 0){\n            val digit = n\
    \ % 10\n            n /= 10\n            if(digit == 1){\n                ones\
    \ += digit\n                onesCount += digit\n            }\n            if(digit\
    \ == 0){\n                zeros += digit\n                zerosCount += digit\n\
    \            }\n        }\n        onesCount.reverse.foreach(count += _)\n   \
    \     zerosCount.reverse.foreach(count += _)\n        count += ones.size - onesCount.size\n\
    \        count += zeros.size - zerosCount.size\n        count", "        val ones\
    \ = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n     \
    \   val count = mutable.ArrayBuffer(0)\n        val nums = mutable.ArrayBuffer(n)\n\
    \        val numsLen = nums.length\n        val numsLenMinusOne = numsLen - 1\n\
    \        val numsLenMinusOneMinusOne = numsLen - 2\n        val numsLenMinusOneMinusOneMinusOne\
    \ = numsLen - 3\n        val numsLenMinusOneMinusOneMinusOneMinusOne = numsLen\
    \ - 4\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOne = numsLen -\
    \ 5\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = numsLen\
    \ - 6\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLen - 7\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLen - 8\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLen - 9\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLen - 10\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLen - 11\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLen - 12\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLen - 13\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLen - 14\n        val numsLenMin", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        val ones = mutable.HashSet.empty[Long]\n        val onesCount\
    \ = mutable.HashMap.empty[Long, Int]\n        val zeros = mutable.HashSet.empty[Long]\n\
    \        val zerosCount = mutable.HashMap.empty[Long, Int]\n        val onesCounts\
    \ = mutable.HashMap.empty[Long, Int]\n        val zerosCounts = mutable.HashMap.empty[Long,\
    \ Int]\n        val onesCounts = mutable.HashMap.empty[Long, Int]\n        val\
    \ zerosCounts = mutable.HashMap.empty[Long, Int]\n        val onesCounts = mutable.HashMap.empty[Long,\
    \ Int]\n        val zerosCounts = mutable.HashMap.empty[Long, Int]\n        val\
    \ onesCounts = mutable.HashMap.empty[Long, Int]\n        val zerosCounts = mutable.HashMap.empty[Long,\
    \ Int]\n        val onesCounts = mutable.HashMap.empty[Long, Int]\n        val\
    \ zerosCounts = mutable.HashMap.empty[Long, Int]\n        val onesCounts = mutable.HashMap.empty[Long,\
    \ Int]\n        val zerosCounts = mutable.HashMap.empty[Long, Int]\n        val\
    \ onesCounts = mutable.HashMap.empty[Long, Int]\n        val zerosCounts = mutable.HashMap.empty[Long,\
    \ Int]\n        val onesCounts = mutable.HashMap.empty[Long, Int]\n        val\
    \ zerosCounts = mutable.HashMap.empty[Long, Int]\n        val onesCounts = mutable.HashMap.empty[Long,\
    \ Int]\n        val zerosCounts = mutable.HashMap.empty[Long, Int]\n        val\
    \ onesCounts = mutable.HashMap.empty[Long, Int]\n        val zerosCounts = mutable.HashMap.empty[Long,\
    \ Int]\n        val onesCounts = mutable.HashMap.empty[Long, Int]\n        val\
    \ zerosCounts = mutable.HashMap.empty[Long, Int]\n        val onesCounts = mutable.HashMap.empty[Long,\
    \ Int]\n        val zerosCounts = mutable.HashMap.empty[Long, Int]\n        val\
    \ onesCounts = mutable.HashMap.empty[Long, Int]\n        val zerosCounts = mutable.HashMap.empty[Long,\
    \ Int]\n        val onesCounts = mutable.HashMap.empty", "        val ones = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        while(n > 0) {\n            ones += n\n      \
    \      n -= 1\n        }\n        ones.foreach(n => {\n            if(n == 1)\n\
    \                count += 1\n        })\n        count", "        var count =\
    \ 0\n        var last = 0\n        for(i <- 0 until n){\n            val current\
    \ = math.abs(i).toInt\n            if(current == 1){\n                count +=\
    \ 1\n            }\n            else if(current == 0){\n                if(last\
    \ == 0){\n                    count += 1\n                }\n                else\
    \ {\n                    count = 0\n                }\n            }\n       \
    \     last = current\n        }\n        count", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        for (i <- 1 to n) {\n            val digit = i / 10\n     \
    \       if (i % 10 == 1) {\n                ones += digit\n            } else\
    \ {\n                zeros += digit\n            }\n            counts(digit)\
    \ += 1\n        }\n        ones.size + zeros.size + 1", "        val ones = mutable.ArrayBuffer(1)\n\
    \        var count = 0\n        while(n > 0){\n            val next = n % 10\n\
    \            n /= 10\n            if(next == 1){\n                count += 1\n\
    \                ones += next\n            }\n        }\n        ones.length",
  "        var count = 0\n        var last = 0\n        var lastOne = 0\n        var\
    \ lastTwo = 0\n        var lastThree = 0\n        var lastFour = 0\n        var\
    \ lastFive = 0\n        var lastSix = 0\n        var lastSeven = 0\n        var\
    \ lastEight = 0\n        var lastNine = 0\n        var lastTen = 0\n        var\
    \ lastEleven = 0\n        var lastTwelve = 0\n        var lastThirteen = 0\n \
    \       var lastFourteen = 0\n        var lastFifteen = 0\n        var lastSixteen\
    \ = 0\n        var lastSeventeen = 0\n        var lastEighteen = 0\n        var\
    \ lastNineteen = 0\n        var lastTwenty = 0\n        var lastTwentyOne = 0\n\
    \        var lastTwentyTwo = 0\n        var lastTwentyThree = 0\n        var lastTwentyFour\
    \ = 0\n        var lastTwentyFive = 0\n        var lastTwentySix = 0\n       \
    \ var lastTwentySeven = 0\n        var lastTwentyEight = 0\n        var lastTwentyNine\
    \ = 0\n        var lastThirty = 0\n        var lastThirtyOne = 0\n        var\
    \ lastThirtyTwo = 0\n        var lastThirtyThree = 0\n        var lastThirtyFour\
    \ = 0\n        var lastThirtyFive = 0\n        var lastThirtySix = 0\n       \
    \ var lastThirtySeven = 0\n        var lastThirtyEight = 0\n        var lastThirtyNine\
    \ = 0\n        var lastFourty = 0\n        var lastFourtyOne = 0\n        var\
    \ lastFourtyTwo = 0\n        var lastFourtyThree = 0\n        var lastFourtyFour\
    \ = 0\n        var lastFourtyFive = 0\n        var lastFourtySix = 0\n       \
    \ var lastFourtySeven = 0\n        var lastFourtyEight = 0\n        var lastFourtyNine\
    \ = 0\n        var lastFifty = 0\n        var lastFiftyOne = 0\n        var lastFiftyTwo\
    \ = 0\n        var lastFiftyThree = 0\n        var lastFiftyFour = 0\n       \
    \ var lastFiftyFive = 0\n        var lastFiftySix = 0\n        var lastFiftySeven\
    \ = 0\n        var lastFiftyEight = 0\n        var lastFiftyNine = 0\n       \
    \ var lastSixty = 0\n        var lastSixtyOne = 0\n        var lastSixtyTwo =\
    \ 0\n        var lastSixtyThree = 0\n        var lastSixtyFour = 0\n        var\
    \ lastSixtyFive = 0\n        var lastSixtySix = 0\n        var lastSixtySeven\
    \ = 0\n        var lastSixtyEight = 0", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val maxDigit = math.pow(10, math.ceil(math.log10(n)))\n   \
    \     val digits = math.ceil(n / maxDigit).toInt\n        for(i <- 0 until digits)\
    \ {\n            val digit = math.pow(10, i)\n            val digitValue = math.floor(n\
    \ / digit).toLong\n            if(digitValue == 1) {\n                ones +=\
    \ digitValue\n            } else if(digitValue == 0) {\n                zeros\
    \ += digitValue\n            } else {\n                counts(digitValue) += 1\n\
    \            }\n        }\n        val oneCount = ones.count(_ == 1)\n       \
    \ val zeroCount = zeros.count(_ == 0)\n        val count = oneCount + zeroCount\n\
    \        counts(maxDigit) += count\n        counts(maxDigit - 1) += count\n  \
    \      counts(maxDigit + 1) += count\n        counts(maxDigit + 2) += count\n\
    \        counts(maxDigit + 3) += count\n        counts(maxDigit + 4) += count\n\
    \        counts(maxDigit + 5) += count\n        counts(maxDigit + 6) += count\n\
    \        counts(maxDigit + 7) += count\n        counts(maxDigit + 8) += count\n\
    \        counts(maxDigit + 9) += count\n        counts(maxDigit + 10) += count\n\
    \        counts(maxDigit + 11) += count\n        counts(maxDigit + 12) += count\n\
    \        counts(maxDigit + 13) += count\n        counts(maxDigit + 14) += count\n\
    \        counts(maxDigit + 15) += count\n        counts(maxDigit + 16) += count\n\
    \        counts(maxDigit + 17) += count\n        counts(maxDigit + 18) += count\n\
    \        counts(maxDigit + 19) += count\n        counts(maxDigit + 20) += count\n\
    \        counts(maxDigit + 21) += count\n        counts(maxDigit + 22) += count\n\
    \        counts(maxDigit + 23) += count\n        counts(maxDigit + 24) += count\n\
    \        counts(maxDigit + 25) += count\n        counts(maxDigit + 26) += count\n\
    \        counts(maxDigit + 27) += count\n        counts(maxDigit + 28) += count\n\
    \        counts(maxDigit + 29) += count\n        counts(maxDigit + 30) += count\n\
    \        counts(maxDigit + 31) ", "        val ones = mutable.Set[Long]()\n  \
    \      val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = mut", "        var count = 0\n        var last = 0\n\
    \        for(i <- 0 until n) {\n            val x = math.abs(i.toLong)\n     \
    \       if(last == 0 || x == 1) {\n                count += 1\n            }\n\
    \            last = x\n        }\n        count", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount3 = mutable.ListBuffer[Long]()\n\
    \        val onesCount4 = mutable.ListBuffer[Long]()\n        val onesCount5 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount6 = mutable.ListBuffer[Long]()\n\
    \        val onesCount7 = mutable.ListBuffer[Long]()\n        val onesCount8 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount9 = mutable.ListBuffer[Long]()\n\
    \        val onesCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val onesCount12 = mutable.ListBuffer[Long]()\n\
    \        val onesCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val onesCount15 = mutable.ListBuffer[Long]()\n\
    \        val onesCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n        val onesCount18 = mutable.ListBuffer[Long]()\n\
    \        val onesCount19 = mutable.ListBuffer[Long]()\n        val onesCount20\
    \ = mutable.ListBuffer[Long]()\n        val onesCount21 = mutable.ListBuffer[Long]()\n\
    \        val onesCount22 = mutable.ListBuffer[Long]()\n        val onesCount23\
    \ = mutable.ListBuffer[Long]()\n        val onesCount24 = mutable.ListBuffer[Long]()\n\
    \        val onesCount25 = mutable.ListBuffer[Long]()\n        val onesCount26\
    \ = mutable.ListBuffer[Long]()\n        val onesCount27 = mutable.ListBuffer[Long]()\n\
    \        val onesCount28 = mutable.ListBuffer[Long]()\n        val onesCount29\
    \ = mutable.ListBuffer[Long]()\n        val onesCount30 = mutable.ListBuffer[Long]()\n\
    \        val onesCount31 = mutable.ListBuffer[Long]()\n        val onesCount32\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.ListBuffer[Long]()\n\
    \        val zeros = mutable.ListBuffer[Long]()\n        val counts = mutable.ListBuffer[Long]()\n\
    \        val max = (n / 10).floor\n        val min = (n / 10).ceil\n        val\
    \ digits = math.pow(10, n)\n        val onesCount = math.ceil(digits * 1.0 / n)\n\
    \        val zerosCount = math.ceil(digits * 1.0 / n)\n        val onesZeros =\
    \ math.ceil(digits * 1.0 / n)\n        val onesZeroCount = math.ceil(digits *\
    \ 1.0 / n)\n        val onesZeroMin = math.ceil(digits * 1.0 / n)\n        val\
    \ onesZeroMax = math.ceil(digits * 1.0 / n)\n        val onesZeroMinCount = math.ceil(digits\
    \ * 1.0 / n)\n        val onesZeroMaxCount = math.ceil(digits * 1.0 / n)\n   \
    \     val onesZeroMinMax = math.ceil(digits * 1.0 / n)\n        val onesZeroMinMaxCount\
    \ = math.ceil(digits * 1.0 / n)\n        val onesZeroMinMaxCount = math.ceil(digits\
    \ * 1.0 / n)\n        val onesZeroMinMaxCount = math.ceil(digits * 1.0 / n)\n\
    \        val onesZeroMinMaxCount = math.ceil(digits * 1.0 / n)\n        val onesZeroMinMaxCount\
    \ = math.ceil(digits * 1.0 / n)\n        val onesZeroMinMaxCount = math.ceil(digits\
    \ * 1.0 / n)\n        val onesZeroMinMaxCount = math.ceil(digits * 1.0 / n)\n\
    \        val onesZeroMinMaxCount = math.ceil(digits * 1.0 / n)\n        val onesZeroMinMaxCount\
    \ = math.ceil(digits * 1.0 / n)\n        val onesZeroMinMaxCount = math.ceil(digits\
    \ * 1.0 / n)\n        val onesZeroMinMaxCount = math.ceil(digits * 1.0 / n)\n\
    \        val onesZeroMinMaxCount = math.ceil(digits * 1.0 / n)\n        val onesZeroMinMaxCount\
    \ = math.ceil(digits * 1.0 / n)\n        val onesZeroMinMaxCount = math.ceil(digits\
    \ * 1.0 / n)\n        val onesZeroMinMaxCount = math.ceil(digits * 1.0 / n)\n\
    \        val onesZeroMinMaxCount = math.ceil(digits * 1.0 / n)\n        val onesZeroMinMaxCount\
    \ = math.ceil(digits * 1.0 / n)\n        val onesZeroMinMaxCount = math.ceil(digits\
    \ * 1.0 / n)\n        val onesZeroMinMaxCount = math.ceil(digits * 1.0 / n)\n\
    \        val onesZeroMinMaxCount = math.ceil(digits * 1.0 / n)\n        val onesZeroMinMaxCount\
    \ = math.ceil(digits * 1.0 / n)\n        val onesZeroMinMaxCount = math.", " \
    \       val ones = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val onesAndZeros = mutable.ListBuffer[Long]()\n        val onesAndZerosAndOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosAndOnesAndZeros = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosAndOnesAndZerosAndOnes = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosAndOnesAndZerosAndOnesAndZeros = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnes = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnesAndZeros = mutable.ListBuffer[Long]()\n\
    \        val onesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnesAndOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnesAndOnesAndOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnesAndOnesAndOnesAndZeros\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnesAndOnesAndOnesAndZerosAndOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndZerosAndOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnesAndZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOne",
  "        val ones = mutable.ListBuffer(1)\n        val zeros = mutable.ListBuffer(0)\n\
    \        val count = mutable.ListBuffer[Long]()\n        val starts = mutable.ListBuffer[Long]()\n\
    \        val ends = mutable.ListBuffer[Long]()\n        val zeroCount = mutable.ListBuffer[Long]()\n\
    \        val oneCount = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCount = mutable.ListBuffer[Long]()\n        val onesZeroCount\
    \ = mutable.ListBuffer[Long]()\n        val zerosOneCount = mutable.ListBuffer[Long]()\n\
    \        val onesOneCount = mutable.ListBuffer[Long]()\n        val zerosZeroCount\
    \ = mutable.ListBuffer[Long]()\n        val onesZeroOneCount = mutable.ListBuffer[Long]()\n\
    \        val zerosOneOneCount = mutable.ListBuffer[Long]()\n        val onesOneOneCount\
    \ = mutable.ListBuffer[Long]()\n        val zerosZeroOneCount = mutable.ListBuffer[Long]()\n\
    \        val onesZeroZeroCount = mutable.ListBuffer[Long]()\n        val zerosOneZeroCount\
    \ = mutable.ListBuffer[Long]()\n        val onesOneZeroCount = mutable.ListBuffer[Long]()\n\
    \        val zerosOneOneCount = mutable.ListBuffer[Long]()\n        val onesOneOneCount\
    \ = mutable.ListBuffer[Long]()\n        val zerosZeroZeroCount = mutable.ListBuffer[Long]()\n\
    \        val onesZeroZeroOneCount = mutable.ListBuffer[Long]()\n        val zerosOneZeroOneCount\
    \ = mutable.ListBuffer[Long]()\n        val onesOneZeroOneCount = mutable.ListBuffer[Long]()\n\
    \        val zerosOneOneOneCount = mutable.ListBuffer[Long]()\n        val onesOneOneOneCount\
    \ = mutable.ListBuffer[Long]()\n        val zerosZeroZeroOneCount = mutable.ListBuffer[Long]()\n\
    \        val onesZeroZeroZeroCount = mutable.ListBuffer[Long]()\n        val zerosOneZeroZeroCount\
    \ = mutable.ListBuffer[Long]()\n        val onesOneZeroZeroCount = mutable.ListBuffer[Long]()\n\
    \        val zerosOneOneZeroCount = mutable.ListBuffer[Long]()\n        val onesOneOneZeroCount\
    \ = mutable.ListBuffer[Long]()\n        val zerosOneOneOne", "        var count\
    \ = 0\n        var last = 1\n        while(n > 1) {\n            val next = (last\
    \ * 10 + n) % 1000000007\n            if(next == 1) {\n                count +=\
    \ 1\n            }\n            last = next\n            n -= 1\n        }\n \
    \       count", "        val ones = mutable.ArrayBuffer(1)\n        val zeros\
    \ = mutable.ArrayBuffer(0)\n        val count = mutable.ArrayBuffer(0)\n     \
    \   while(n > 0){\n            val digit = n % 10\n            if(digit == 1){\n\
    \                ones += digit\n            }else{\n                zeros += digit\n\
    \            }\n            n /= 10\n        }\n        while(ones.size > 0){\n\
    \            count += ones.size\n            ones -= 1\n        }\n        while(zeros.size\
    \ > 0){\n            count += zeros.size\n            zeros -= 1\n        }\n\
    \        count.sum", "        val ones = mutable.ArrayBuffer(1)\n        val zeros\
    \ = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        val starts = mutable.ArrayBuffer.empty[Long]\n        val ends = mutable.ArrayBuffer.empty[Long]\n\
    \        val nums = mutable.ArrayBuffer.empty[Long]\n        val numsCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsCount2 = mutable.ArrayBuffer.empty[Long]\n        val numsCount3\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsCount4 = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsCount5 = mutable.ArrayBuffer.empty[Long]\n        val numsCount6\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsCount7 = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsCount8 = mutable.ArrayBuffer.empty[Long]\n        val numsCount9\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsCount10 = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsCount11 = mutable.ArrayBuffer.empty[Long]\n        val numsCount12\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsCount13 = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsCount14 = mutable.ArrayBuffer.empty[Long]\n        val numsCount15\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsCount16 = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsCount17 = mutable.ArrayBuffer.empty[Long]\n        val numsCount18\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsCount19 = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsCount20 = mutable.ArrayBuffer.empty[Long]\n        val numsCount21\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsCount22 = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsCount23 = mutable.ArrayBuffer.empty[Long]\n        val numsCount24\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsCount25 = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsCount26 = mutable.ArrayBuffer.empty[Long]\n        val numsCount27\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsCount28 = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsCount", "        val ones = mutable.Set[Long]()\n        val\
    \ onesCount = mutable.Set[Long]()\n        val onesCount2 = mutable.Set[Long]()\n\
    \        val onesCount3 = mutable.Set[Long]()\n        val onesCount4 = mutable.Set[Long]()\n\
    \        val onesCount5 = mutable.Set[Long]()\n        val onesCount6 = mutable.Set[Long]()\n\
    \        val onesCount7 = mutable.Set[Long]()\n        val onesCount8 = mutable.Set[Long]()\n\
    \        val onesCount9 = mutable.Set[Long]()\n        val onesCount10 = mutable.Set[Long]()\n\
    \        val onesCount11 = mutable.Set[Long]()\n        val onesCount12 = mutable.Set[Long]()\n\
    \        val onesCount13 = mutable.Set[Long]()\n        val onesCount14 = mutable.Set[Long]()\n\
    \        val onesCount15 = mutable.Set[Long]()\n        val onesCount16 = mutable.Set[Long]()\n\
    \        val onesCount17 = mutable.Set[Long]()\n        val onesCount18 = mutable.Set[Long]()\n\
    \        val onesCount19 = mutable.Set[Long]()\n        val onesCount20 = mutable.Set[Long]()\n\
    \        val onesCount21 = mutable.Set[Long]()\n        val onesCount22 = mutable.Set[Long]()\n\
    \        val onesCount23 = mutable.Set[Long]()\n        val onesCount24 = mutable.Set[Long]()\n\
    \        val onesCount25 = mutable.Set[Long]()\n        val onesCount26 = mutable.Set[Long]()\n\
    \        val onesCount27 = mutable.Set[Long]()\n        val onesCount28 = mutable.Set[Long]()\n\
    \        val onesCount29 = mutable.Set[Long]()\n        val onesCount30 = mutable.Set[Long]()\n\
    \        val onesCount31 = mutable.Set[Long]()\n        val onesCount32 = mutable.Set[Long]()\n\
    \        val onesCount33 = mutable.Set[Long]()\n        val onesCount34 = mutable.Set[Long]()\n\
    \        val one", "        val ones = mutable.Set[Long]()\n        val onesCount\
    \ = mutable.Set[Long]()\n        val onesCount2 = mutable.Set[Long]()\n      \
    \  val onesCount3 = mutable.Set[Long]()\n        val onesCount4 = mutable.Set[Long]()\n\
    \        val onesCount5 = mutable.Set[Long]()\n        val onesCount6 = mutable.Set[Long]()\n\
    \        val onesCount7 = mutable.Set[Long]()\n        val onesCount8 = mutable.Set[Long]()\n\
    \        val onesCount9 = mutable.Set[Long]()\n        val onesCount10 = mutable.Set[Long]()\n\
    \        val onesCount11 = mutable.Set[Long]()\n        val onesCount12 = mutable.Set[Long]()\n\
    \        val onesCount13 = mutable.Set[Long]()\n        val onesCount14 = mutable.Set[Long]()\n\
    \        val onesCount15 = mutable.Set[Long]()\n        val onesCount16 = mutable.Set[Long]()\n\
    \        val onesCount17 = mutable.Set[Long]()\n        val onesCount18 = mutable.Set[Long]()\n\
    \        val onesCount19 = mutable.Set[Long]()\n        val onesCount20 = mutable.Set[Long]()\n\
    \        val onesCount21 = mutable.Set[Long]()\n        val onesCount22 = mutable.Set[Long]()\n\
    \        val onesCount23 = mutable.Set[Long]()\n        val onesCount24 = mutable.Set[Long]()\n\
    \        val onesCount25 = mutable.Set[Long]()\n        val onesCount26 = mutable.Set[Long]()\n\
    \        val onesCount27 = mutable.Set[Long]()\n        val onesCount28 = mutable.Set[Long]()\n\
    \        val onesCount29 = mutable.Set[Long]()\n        val onesCount30 = mutable.Set[Long]()\n\
    \        val onesCount31 = mutable.Set[Long]()\n        val onesCount32 = mutable.Set[Long]()\n\
    \        val onesCount33 = mutable.Set[Long]()\n        val onesCount34 = mutable.Set[Long]()\n\
    \        val one", "        var count = 0\n        val ones = Vector.fill(n /\
    \ 10)(1)\n        val zeros = Vector.fill(n / 10)(0)\n        val onesCount =\
    \ ones.count(_ == 1)\n        val zerosCount = zeros.count(_ == 0)\n        if\
    \ (onesCount == 1 && zerosCount == 0) {\n            count = n\n        } else\
    \ if (onesCount == 1 && zerosCount > 0) {\n            count = n - onesCount\n\
    \        } else if (onesCount > 0 && zerosCount == 0) {\n            count = onesCount\
    \ + n\n        } else {\n            count = onesCount + zerosCount + n\n    \
    \    }\n        return count", "        val ones = mutable.ArrayBuffer(1)\n  \
    \      var count = 0\n        while(n > 0){\n            ones += n\n         \
    \   n -= 1\n        }\n        while(ones.size > 0){\n            count += ones.size\
    \ - 1\n            ones = ones.tail\n        }\n        count", "        var count\
    \ = 0\n        for(i <- 1 to n){\n            if(i%10 == 1){\n               \
    \ count += 1\n            }\n        }\n        count", "        val counts =\
    \ mutable.HashMap.empty[Long, Long]\n        for (i <- 1 to n) counts += (i.toLong\
    \ -> 1)\n        val ones = counts.filter(_._1 == 1)\n        val zeros = counts.filter(_._1\
    \ == 0)\n        val onesAndZeros = ones + zeros\n        onesAndZeros.size",
  "        val ones = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n\
    \        val onesCount = ones.count(n / 10)\n        val onesCount = ones.count(n\
    \ / 100)\n        val onesCount = ones.count(n / 1000)\n        val onesCount\
    \ = ones.count(n / 10000)\n        val onesCount = ones.count(n / 100000)\n  \
    \      val onesCount = ones.count(n / 1000000)\n        val onesCount = ones.count(n\
    \ / 10000000)\n        val onesCount = ones.count(n / 100000000)\n        val\
    \ onesCount = ones.count(n / 1000000000)\n        val onesCount = ones.count(n\
    \ / 10000000000)\n        val onesCount = ones.count(n / 100000000000)\n     \
    \   val onesCount = ones.count(n / 1000000000000)\n        val onesCount = ones.count(n\
    \ / 1000000000000)\n        val onesCount = ones.count(n / 10000000000000)\n \
    \       val onesCount = ones.count(n / 10000000000000)\n        val onesCount\
    \ = ones.count(n / 100000000000000)\n        val onesCount = ones.count(n / 100000000000000)\n\
    \        val onesCount = ones.count(n / 1000000000000000)\n        val onesCount\
    \ = ones.count(n / 1000000000000000)\n        val onesCount = ones.count(n / 10000000000000000)\n\
    \        val onesCount = ones.count(n / 10000000000000000)\n        val onesCount\
    \ = ones.count(n / 10000000000000000)\n        val onesCount = ones.count(n /\
    \ 100000000000000000)\n        val onesCount = ones.count(n / 100000000000000000)\n\
    \        val onesCount = ones.count(n / 100000000000000000)\n        val onesCount\
    \ = ones.count(n / 1000000000000000000)\n        val onesCount = ones.count(n\
    \ / 1000000000000000000)\n        val onesCount = ones.count(n / 1000000000000000000)\n\
    \        val onesCount = ones.count(n / 1000000000000000000)\n        val onesCount\
    \ = ones.count(n / 10000000000000000000)\n        val onesCount = ones.count(n\
    \ / 10000000000000000000)\n        val onesCount = ones.count(n / 10000000000000000000)\n\
    \        val onesCount = ones.count(n / 100000000000000000000)\n        val onesCount\
    \ = ones.count(n / 100000000000000000000)\n        val onesCount = ones.count(n\
    \ / 100000000000000000000)\n        val onesCount = ones.count(n / 100000000000000000000)\n\
    \        val onesCount = ones.count(n ", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val count = mutable.Set[Long]()\n\
    \        val remainder = n % 10\n        val remainderDigit = remainder % 10\n\
    \        val remainderDigit2 = remainderDigit % 10\n        val remainderDigit3\
    \ = remainderDigit % 10\n        val remainderDigit4 = remainderDigit % 10\n \
    \       val remainderDigit5 = remainderDigit % 10\n        val remainderDigit6\
    \ = remainderDigit % 10\n        val remainderDigit7 = remainderDigit % 10\n \
    \       val remainderDigit8 = remainderDigit % 10\n        val remainderDigit9\
    \ = remainderDigit % 10\n        val remainderDigit10 = remainderDigit % 10\n\
    \        val remainderDigit11 = remainderDigit % 10\n        val remainderDigit12\
    \ = remainderDigit % 10\n        val remainderDigit13 = remainderDigit % 10\n\
    \        val remainderDigit14 = remainderDigit % 10\n        val remainderDigit15\
    \ = remainderDigit % 10\n        val remainderDigit16 = remainderDigit % 10\n\
    \        val remainderDigit17 = remainderDigit % 10\n        val remainderDigit18\
    \ = remainderDigit % 10\n        val remainderDigit19 = remainderDigit % 10\n\
    \        val remainderDigit20 = remainderDigit % 10\n        val remainderDigit21\
    \ = remainderDigit % 10\n        val remainderDigit22 = remainderDigit % 10\n\
    \        val remainderDigit23 = remainderDigit % 10\n        val remainderDigit24\
    \ = remainderDigit % 10\n        val remainderDigit25 = remainderDigit % 10\n\
    \        val remainderDigit26 = remainderDigit % 10\n        val remainderDigit27\
    \ = remainderDigit % 10\n        val remainderDigit28 = remainderDigit % 10\n\
    \        val remainderDigit29 = remainderDigit % 10\n        val remainderDigit30\
    \ = remainderDigit % 10\n        val remainderDigit31 = remainderDigit % 10\n\
    \        val remainderDigit32 = remainderDigit % 10\n        val remainderDigit33\
    \ = remainderDigit % 10\n        val remainderDigit34 = remainderDigit % 10\n\
    \        val remainderDigit35 = remain", "        val counts = mutable.HashMap.empty[Long,\
    \ Long]\n        val ones = mutable.ArrayBuffer.empty[Long]\n        for (i <-\
    \ 1 to n) ones += i\n        for (i <- ones.take(n)) {\n            if (counts.get(i)\
    \ == null) counts(i) = 1\n            else counts(i) += 1\n        }\n       \
    \ counts.values.sum", "        val ones = mutable.ListBuffer[Long]()\n       \
    \ val twos = mutable.ListBuffer[Long]()\n        val threes = mutable.ListBuffer[Long]()\n\
    \        val fours = mutable.ListBuffer[Long]()\n        val fives = mutable.ListBuffer[Long]()\n\
    \        val sixes = mutable.ListBuffer[Long]()\n        val sevens = mutable.ListBuffer[Long]()\n\
    \        val eights = mutable.ListBuffer[Long]()\n        val nines = mutable.ListBuffer[Long]()\n\
    \        val tens = mutable.ListBuffer[Long]()\n        val hundreds = mutable.ListBuffer[Long]()\n\
    \        val thousands = mutable.ListBuffer[Long]()\n        val millions = mutable.ListBuffer[Long]()\n\
    \        val billions = mutable.ListBuffer[Long]()\n        val trillions = mutable.ListBuffer[Long]()\n\
    \        val quadrillions = mutable.ListBuffer[Long]()\n        val quintillions\
    \ = mutable.ListBuffer[Long]()\n        val sextillions = mutable.ListBuffer[Long]()\n\
    \        val septillions = mutable.ListBuffer[Long]()\n        val octillions\
    \ = mutable.ListBuffer[Long]()\n        val nonillions = mutable.ListBuffer[Long]()\n\
    \        val decillions = mutable.ListBuffer[Long]()\n        val thousandsTens\
    \ = mutable.ListBuffer[Long]()\n        val millionsTens = mutable.ListBuffer[Long]()\n\
    \        val billionsTens = mutable.ListBuffer[Long]()\n        val trillionsTens\
    \ = mutable.ListBuffer[Long]()\n        val quadrillionsTens = mutable.ListBuffer[Long]()\n\
    \        val quintillionsTens = mutable.ListBuffer[Long]()\n        val sextillionsTens\
    \ = mutable.ListBuffer[Long]()\n        val septillionsTens = mutable.ListBuffer[Long]()\n\
    \        val octillionsTens = mutable.ListBuffer[Long]()\n        val nonillionsTens\
    \ = mutable.ListBuffer[Long]()\n        val decillionsTens = mutable.ListBuffer[Long]()\n\
    \        val thousand", "        val ones = mutable.ListBuffer[Long]()\n     \
    \   val onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n",
  "        val counts = mutable.HashMap[Long, Long]()\n        val ones = mutable.Array[Long](1)\n\
    \        val zeros = mutable.Array[Long](0)\n        val onesCount = mutable.Array[Long](1)\n\
    \        val zerosCount = mutable.Array[Long](0)\n        val onesCounts = mutable.Array[Long](1)\n\
    \        val zerosCounts = mutable.Array[Long](0)\n        val onesCounts = mutable.Array[Long](1)\n\
    \        val zerosCounts = mutable.Array[Long](0)\n        val onesCounts = mutable.Array[Long](1)\n\
    \        val zerosCounts = mutable.Array[Long](0)\n        val onesCounts = mutable.Array[Long](1)\n\
    \        val zerosCounts = mutable.Array[Long](0)\n        val onesCounts = mutable.Array[Long](1)\n\
    \        val zerosCounts = mutable.Array[Long](0)\n        val onesCounts = mutable.Array[Long](1)\n\
    \        val zerosCounts = mutable.Array[Long](0)\n        val onesCounts = mutable.Array[Long](1)\n\
    \        val zerosCounts = mutable.Array[Long](0)\n        val onesCounts = mutable.Array[Long](1)\n\
    \        val zerosCounts = mutable.Array[Long](0)\n        val onesCounts = mutable.Array[Long](1)\n\
    \        val zerosCounts = mutable.Array[Long](0)\n        val onesCounts = mutable.Array[Long](1)\n\
    \        val zerosCounts = mutable.Array[Long](0)\n        val onesCounts = mutable.Array[Long](1)\n\
    \        val zerosCounts = mutable.Array[Long](0)\n        val onesCounts = mutable.Array[Long](1)\n\
    \        val zerosCounts = mutable.Array[Long](0)\n        val onesCounts = mutable.Array[Long](1)\n\
    \        val zerosCounts = mutable.Array[Long](0)\n        val onesCounts = mutable.Array[Long](1)\n\
    \        val zerosCounts = mutable.Array[Long](0)\n        val onesCounts = mutable.Array[Long](1)\n\
    \        val zerosCounts = mutable.Array[Long](0)\n        val onesCounts = mutable.Array[Long](1)\n\
    \        val zerosCounts = mutable.Array[Long](0)\n        val onesCounts = mutable.Array[Long](1)\n\
    \        val zeros", "        val counts = mutable.HashMap.empty[Long, Long]\n\
    \        val ones = mutable.HashSet.empty[Long]\n        val zeros = mutable.HashSet.empty[Long]\n\
    \        val onesCount = mutable.HashSet.empty[Long]\n        val zerosCount =\
    \ mutable.HashSet.empty[Long]\n        val onesCounts = mutable.HashSet.empty[Long]\n\
    \        val zerosCounts = mutable.HashSet.empty[Long]\n        val onesCountZeros\
    \ = mutable.HashSet.empty[Long]\n        val zerosCountZeros = mutable.HashSet.empty[Long]\n\
    \        val onesCountOnes = mutable.HashSet.empty[Long]\n        val zerosCountOnes\
    \ = mutable.HashSet.empty[Long]\n        val onesCountZeroOnes = mutable.HashSet.empty[Long]\n\
    \        val zerosCountZeroOnes = mutable.HashSet.empty[Long]\n        val onesCountOneOnes\
    \ = mutable.HashSet.empty[Long]\n        val zerosCountOneOnes = mutable.HashSet.empty[Long]\n\
    \        val onesCountZeroZeros = mutable.HashSet.empty[Long]\n        val zerosCountZeroZeros\
    \ = mutable.HashSet.empty[Long]\n        val onesCountOneZero = mutable.HashSet.empty[Long]\n\
    \        val zerosCountOneZero = mutable.HashSet.empty[Long]\n        val onesCountZeroOne\
    \ = mutable.HashSet.empty[Long]\n        val zerosCountZeroOne = mutable.HashSet.empty[Long]\n\
    \        val onesCountOneOne = mutable.HashSet.empty[Long]\n        val zerosCountOneOne\
    \ = mutable.HashSet.empty[Long]\n        val onesCountZeroZeroOne = mutable.HashSet.empty[Long]\n\
    \        val zerosCountZeroZeroOne = mutable.HashSet.empty[Long]\n        val\
    \ onesCountOneZeroOne = mutable.HashSet.empty[Long]\n        val zerosCountOneZeroOne\
    \ = mutable.HashSet.empty[Long]\n        val onesCountZeroOneOne = mutable.HashSet.empty[Long]\n\
    \        val zerosCountZeroOneOne = mutable.HashSet.empty[Long]\n        val onesCountOneOneOne\
    \ = mutable.HashSet.empty[Long]\n        val zerosCountOneOneOne = mutable.HashSet.empty[Long]\n\
    \        val onesCountZeroZeroZero = mutable.HashSet.empty[", "        val ones\
    \ = mutable.Set[Long]()\n        val onesCount = mutable.Set[Long]()\n       \
    \ val onesCount2 = mutable.Set[Long]()\n        val onesCount3 = mutable.Set[Long]()\n\
    \        val onesCount4 = mutable.Set[Long]()\n        val onesCount5 = mutable.Set[Long]()\n\
    \        val onesCount6 = mutable.Set[Long]()\n        val onesCount7 = mutable.Set[Long]()\n\
    \        val onesCount8 = mutable.Set[Long]()\n        val onesCount9 = mutable.Set[Long]()\n\
    \        val onesCount10 = mutable.Set[Long]()\n        val onesCount11 = mutable.Set[Long]()\n\
    \        val onesCount12 = mutable.Set[Long]()\n        val onesCount13 = mutable.Set[Long]()\n\
    \        val onesCount14 = mutable.Set[Long]()\n        val onesCount15 = mutable.Set[Long]()\n\
    \        val onesCount16 = mutable.Set[Long]()\n        val onesCount17 = mutable.Set[Long]()\n\
    \        val onesCount18 = mutable.Set[Long]()\n        val onesCount19 = mutable.Set[Long]()\n\
    \        val onesCount20 = mutable.Set[Long]()\n        val onesCount21 = mutable.Set[Long]()\n\
    \        val onesCount22 = mutable.Set[Long]()\n        val onesCount23 = mutable.Set[Long]()\n\
    \        val onesCount24 = mutable.Set[Long]()\n        val onesCount25 = mutable.Set[Long]()\n\
    \        val onesCount26 = mutable.Set[Long]()\n        val onesCount27 = mutable.Set[Long]()\n\
    \        val onesCount28 = mutable.Set[Long]()\n        val onesCount29 = mutable.Set[Long]()\n\
    \        val onesCount30 = mutable.Set[Long]()\n        val onesCount31 = mutable.Set[Long]()\n\
    \        val onesCount32 = mutable.Set[Long]()\n        val onesCount33 = mutable.Set[Long]()\n\
    \        val onesCount34 = mutable.Set[Long]()\n        val one", "        val\
    \ ones = mutable.ListBuffer(1)\n        val zeros = mutable.ListBuffer(0)\n  \
    \      val counts = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCount = mutable.ListBuffer[Long]()\n        val onesCounts =\
    \ mutable.ListBuffer[Long]()\n        val zerosCounts = mutable.ListBuffer[Long]()\n\
    \        val onesCountZeros = mutable.ListBuffer[Long]()\n        val zerosCountZeros\
    \ = mutable.ListBuffer[Long]()\n        val onesCountOnes = mutable.ListBuffer[Long]()\n\
    \        val zerosCountOnes = mutable.ListBuffer[Long]()\n        val onesCountZeroOnes\
    \ = mutable.ListBuffer[Long]()\n        val zerosCountZeroOnes = mutable.ListBuffer[Long]()\n\
    \        val onesCountOneOnes = mutable.ListBuffer[Long]()\n        val zerosCountOneOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesCountZeroZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosCountZeroZeros = mutable.ListBuffer[Long]()\n        val onesCountOneZeros\
    \ = mutable.ListBuffer[Long]()\n        val zerosCountOneZeros = mutable.ListBuffer[Long]()\n\
    \        val onesCountZeroOnes = mutable.ListBuffer[Long]()\n        val zerosCountZeroOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesCountOneOneOnes = mutable.ListBuffer[Long]()\n\
    \        val zerosCountOneOneOnes = mutable.ListBuffer[Long]()\n        val onesCountZeroZeroZeros\
    \ = mutable.ListBuffer[Long]()\n        val zerosCountZeroZeroZeros = mutable.ListBuffer[Long]()\n\
    \        val onesCountOneZeroZeros = mutable.ListBuffer[Long]()\n        val zerosCountOneZeroZeros\
    \ = mutable.ListBuffer[Long]()\n        val onesCountZeroOneZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosCountZeroOneZeros = mutable.ListBuffer[Long]()\n        val\
    \ onesCountOneOneOneZeros = mutable.ListBuffer[Long]()\n        val zerosCountOneOneOneZeros\
    \ = mutable.ListBuffer[Long]()\n        val onesCountZeroZeroOneZeros = mutable.ListBuffer[Long]()\n",
  "        val ones = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val zerosCount =\
    \ mutable.ListBuffer[Long]()\n        val onesZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosOnes = mutable.ListBuffer[Long]()\n        val onesOnes = mutable.ListBuffer[Long]()\n\
    \        val zerosZeros = mutable.ListBuffer[Long]()\n        val onesZeroOnes\
    \ = mutable.ListBuffer[Long]()\n        val zerosOneOnes = mutable.ListBuffer[Long]()\n\
    \        val onesOneOnes = mutable.ListBuffer[Long]()\n        val zerosZeroOnes\
    \ = mutable.ListBuffer[Long]()\n        val onesZeroZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosOneZeros = mutable.ListBuffer[Long]()\n        val onesOneZeros\
    \ = mutable.ListBuffer[Long]()\n        val zerosOneOneZeros = mutable.ListBuffer[Long]()\n\
    \        val onesOneOneZeros = mutable.ListBuffer[Long]()\n        val zerosZeroOneZeros\
    \ = mutable.ListBuffer[Long]()\n        val onesZeroZeroOnes = mutable.ListBuffer[Long]()\n\
    \        val zerosOneZeroOnes = mutable.ListBuffer[Long]()\n        val onesOneZeroOnes\
    \ = mutable.ListBuffer[Long]()\n        val zerosOneOneZeroOnes = mutable.ListBuffer[Long]()\n\
    \        val onesOneOneZeroOnes = mutable.ListBuffer[Long]()\n        val zerosZeroOneOneZeros\
    \ = mutable.ListBuffer[Long]()\n        val onesZeroZeroOneOnes = mutable.ListBuffer[Long]()\n\
    \        val zerosOneZeroOneOnes = mutable.ListBuffer[Long]()\n        val onesOneZeroOneOnes\
    \ = mutable.ListBuffer[Long]()\n        val zerosOneOneZeroOneOnes = mutable.ListBuffer[Long]()\n\
    \        val onesOneOneZeroOneOnes = mutable.ListBuffer[Long]()\n        val zerosZeroOneOneOneZeros\
    \ = mutable.ListBuffer[Long]()\n        val onesZeroZeroOneOneOnes = mutable.ListBuffer[Long]()\n\
    \        val zerosOneZeroOneOneOnes = mutable.ListBuffer[", "        var count\
    \ = 0\n        var last = 0\n        var lastStart = 0\n        var lastEnd =\
    \ 0\n        while (n > 0) {\n            val cur = n % 10\n            if (cur\
    \ == 1) {\n                if (lastStart == 0) {\n                    lastStart\
    \ = 1\n                    lastEnd = 1\n                } else {\n           \
    \         lastEnd = 1\n                }\n            } else {\n             \
    \   if (lastStart == 0) {\n                    lastStart = 1\n               \
    \ } else {\n                    lastEnd = 1\n                }\n            }\n\
    \            last = cur\n            n = n / 10\n            count += 1\n    \
    \    }\n        last", "        val ones = mutable.ArrayBuffer(1)\n        val\
    \ zeros = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        while(n > 1) {\n            val digit = n % 10\n            n /= 10\n\
    \            counts += digit\n            if(digit == 1) {\n                ones\
    \ += digit\n            } else {\n                zeros += digit\n           \
    \ }\n        }\n        ones.toList.size + (ones.toList.size - zeros.toList.size)",
  "        val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount2 = mutable.ListBuffer[Long]()\n        val onesCount3 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val onesCount5 = mutable.ListBuffer[Long]()\n        val onesCount6 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val onesCount8 = mutable.ListBuffer[Long]()\n        val onesCount9 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val onesCount11 = mutable.ListBuffer[Long]()\n        val onesCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val onesCount14 = mutable.ListBuffer[Long]()\n        val onesCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val onesCount17 = mutable.ListBuffer[Long]()\n        val onesCount18\
    \ = mutable.ListBuffer[Long]()\n        val onesCount19 = mutable.ListBuffer[Long]()\n\
    \        val onesCount20 = mutable.ListBuffer[Long]()\n        val onesCount21\
    \ = mutable.ListBuffer[Long]()\n        val onesCount22 = mutable.ListBuffer[Long]()\n\
    \        val onesCount23 = mutable.ListBuffer[Long]()\n        val onesCount24\
    \ = mutable.ListBuffer[Long]()\n        val onesCount25 = mutable.ListBuffer[Long]()\n\
    \        val onesCount26 = mutable.ListBuffer[Long]()\n        val onesCount27\
    \ = mutable.ListBuffer[Long]()\n        val onesCount28 = mutable.ListBuffer[Long]()\n\
    \        val onesCount29 = mutable.ListBuffer[Long]()\n        val onesCount30\
    \ = mutable.ListBuffer[Long]()\n        val onesCount31 = mutable.ListBuffer[Long]()\n\
    \        val onesCount32 = mutable.ListBuffer[Long]()\n", "        val ones =\
    \ mutable.ListBuffer[Long]()\n        var count = 0\n        while (n > 0) {\n\
    \            ones += n\n            n -= 1\n        }\n        ones.length", " \
    \       var count = 0\n        var last = 0\n        var lastStart = 0\n     \
    \   var lastEnd = 0\n        var lastStartOne = 0\n        var lastEndOne = 0\n\
    \        var lastStartZero = 0\n        var lastEndZero = 0\n        var lastStartZeroOne\
    \ = 0\n        var lastEndZeroOne = 0\n        var lastStartOneZero = 0\n    \
    \    var lastEndOneZero = 0\n        var lastStartZeroZero = 0\n        var lastEndZeroZero\
    \ = 0\n        var lastStartOneOne = 0\n        var lastEndOneOne = 0\n      \
    \  var lastStartZeroOne = 0\n        var lastEndZeroOne = 0\n        var lastStartOneZeroZero\
    \ = 0\n        var lastEndOneZeroZero = 0\n        var lastStartZeroZeroZero =\
    \ 0\n        var lastEndZeroZeroZero = 0\n        var lastStartOneOneOne = 0\n\
    \        var lastEndOneOneOne = 0\n        var lastStartZeroOneZero = 0\n    \
    \    var lastEndZeroOneZero = 0\n        var lastStartOneZeroOne = 0\n       \
    \ var lastEndOneZeroOne = 0\n        var lastStartZeroZeroOne = 0\n        var\
    \ lastEndZeroZeroOne = 0\n        var lastStartOneOneOne = 0\n        var lastEndOneOneOne\
    \ = 0\n        var lastStartZeroZeroOne = 0\n        var lastEndZeroZeroOne =\
    \ 0\n        var lastStartOneOneOne = 0\n        var lastEndOneOneOne = 0\n  \
    \      var lastStartZeroZeroOne = 0\n        var lastEndZeroZeroOne = 0\n    \
    \    var lastStartOneOneOne = 0\n        var lastEndOneOneOne = 0\n        var\
    \ lastStartZeroZeroOne = 0\n        var lastEndZeroZeroOne = 0\n        var lastStartOneOneOne\
    \ = 0\n        var lastEndOneOneOne = 0\n        var lastStartZeroZeroOne = 0\n\
    \        var lastEndZeroZeroOne = 0\n        var lastStartOneOneOne = 0\n    \
    \    var lastEndOneOneOne = 0\n        var lastStartZeroZeroOne = 0\n        var\
    \ lastEndZeroZeroOne = 0\n        var lastStartOneOneOne = 0\n        var lastEndOneOneOne\
    \ = 0\n        var lastStartZeroZeroOne = 0\n        var lastEndZeroZeroOne =\
    \ 0\n        var lastStartOneOneOne = 0\n        var lastEndOneOneOne = 0\n  \
    \      var lastStartZeroZeroOne = 0\n        var lastEndZeroZeroOne = 0\n    \
    \    var lastStartOneOneOne = 0\n        var lastEndOneOneOne = 0\n        var\
    \ lastStartZeroZeroOne = 0\n        var lastEndZeroZeroOne = 0\n        var lastStartOneOneOne\
    \ = 0\n        var lastEndOneOneOne = 0\n        var lastStartZeroZeroOne = 0\n\
    \        var lastEndZeroZeroOne = 0\n        var lastStartOneOneOne = 0\n    \
    \    var lastEndOneOneOne = 0\n        var ", "        var count = 0\n       \
    \ var last = 1\n        while(n > 0){\n            val next = (last * 10 + n)\
    \ % 100\n            if(next == 1){\n                count += 1\n            }\n\
    \            last = next\n            n -= 1\n        }\n        count", "   \
    \     val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesCount2 = mutable.Set[Long]()\n        val zerosCount2 = mutable.Set[Long]()\n\
    \        val onesCount3 = mutable.Set[Long]()\n        val zerosCount3 = mutable.Set[Long]()\n\
    \        val onesCount4 = mutable.Set[Long]()\n        val zerosCount4 = mutable.Set[Long]()\n\
    \        val onesCount5 = mutable.Set[Long]()\n        val zerosCount5 = mutable.Set[Long]()\n\
    \        val onesCount6 = mutable.Set[Long]()\n        val zerosCount6 = mutable.Set[Long]()\n\
    \        val onesCount7 = mutable.Set[Long]()\n        val zerosCount7 = mutable.Set[Long]()\n\
    \        val onesCount8 = mutable.Set[Long]()\n        val zerosCount8 = mutable.Set[Long]()\n\
    \        val onesCount9 = mutable.Set[Long]()\n        val zerosCount9 = mutable.Set[Long]()\n\
    \        val onesCount10 = mutable.Set[Long]()\n        val zerosCount10 = mutable.Set[Long]()\n\
    \        val onesCount11 = mutable.Set[Long]()\n        val zerosCount11 = mutable.Set[Long]()\n\
    \        val onesCount12 = mutable.Set[Long]()\n        val zerosCount12 = mutable.Set[Long]()\n\
    \        val onesCount13 = mutable.Set[Long]()\n        val zerosCount13 = mutable.Set[Long]()\n\
    \        val onesCount14 = mutable.Set[Long]()\n        val zerosCount14 = mutable.Set[Long]()\n\
    \        val onesCount15 = mutable.Set[Long]()\n        val zerosCount15 = mutable.Set[Long]()\n\
    \        val onesCount16 = mutable.Set[Long]()\n        val zerosCount16 = mutable.Set[Long]()\n\
    \        val onesCount17 = mutable.Set[Long]()\n        val zerosCount17 = mutable.Set[Long]()\n\
    \        val onesCount18 = mutable.Set[Long]()\n        val zerosCount18 = ",
  "        val ones = mutable.ListBuffer(1)\n        val zeros = mutable.ListBuffer(0)\n\
    \        val count = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val zerosCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val zerosCount3\
    \ = mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount4 = mutable.ListBuffer[Long]()\n        val onesCount5\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val zerosCount6\
    \ = mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount7 = mutable.ListBuffer[Long]()\n        val onesCount8\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val zerosCount9\
    \ = mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val zerosCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val zerosCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.List", "        val counts = mutable.HashMap.empty[Long, Long]\n \
    \       val ones = mutable.HashSet.empty[Long]\n        val zeros = mutable.HashSet.empty[Long]\n\
    \        val onesCount = mutable.HashSet.empty[Long]\n        val zerosCount =\
    \ mutable.HashSet.empty[Long]\n        val onesCounts = mutable.HashSet.empty[Long]\n\
    \        val zerosCounts = mutable.HashSet.empty[Long]\n        val onesCountZeros\
    \ = mutable.HashSet.empty[Long]\n        val zerosCountZeros = mutable.HashSet.empty[Long]\n\
    \        val onesCountOnes = mutable.HashSet.empty[Long]\n        val zerosCountOnes\
    \ = mutable.HashSet.empty[Long]\n        val onesCountZeroOnes = mutable.HashSet.empty[Long]\n\
    \        val zerosCountZeroOnes = mutable.HashSet.empty[Long]\n        val onesCountOneOnes\
    \ = mutable.HashSet.empty[Long]\n        val zerosCountOneOnes = mutable.HashSet.empty[Long]\n\
    \        val onesCountZeroZeros = mutable.HashSet.empty[Long]\n        val zerosCountZeroZeros\
    \ = mutable.HashSet.empty[Long]\n        val onesCountOneZeros = mutable.HashSet.empty[Long]\n\
    \        val zerosCountOneZeros = mutable.HashSet.empty[Long]\n        val onesCountOneOneZeros\
    \ = mutable.HashSet.empty[Long]\n        val zerosCountOneOneZeros = mutable.HashSet.empty[Long]\n\
    \        val onesCountZeroOneOnes = mutable.HashSet.empty[Long]\n        val zerosCountZeroOneOnes\
    \ = mutable.HashSet.empty[Long]\n        val onesCountOneZeroOnes = mutable.HashSet.empty[Long]\n\
    \        val zerosCountOneZeroOnes = mutable.HashSet.empty[Long]\n        val\
    \ onesCountOneOneZeroOnes = mutable.HashSet.empty[Long]\n        val zerosCountOneOneZeroOnes\
    \ = mutable.HashSet.empty[Long]\n        val onesCountZeroZeroZeros = mutable.HashSet.empty[Long]\n\
    \        val zerosCountZeroZeroZeros = mutable.HashSet.empty[Long]\n        val\
    \ onesCountOneZeroZeros = mutable.HashSet.empty[Long]\n        val zerosCountOneZeroZeros\
    \ = mutable.HashSet.empty[Long]\n        val onesCountOneOneZeroZero", "     \
    \   val ones = mutable.ListBuffer[Long]()\n        val zeros = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val zerosCount =\
    \ mutable.ListBuffer[Long]()\n        var current = 0L\n        var count = 0L\n\
    \        while (current < n) {\n            current += 1\n            if (current\
    \ % 10 == 1) {\n                ones += current\n                onesCount +=\
    \ count\n            }\n            if (current % 10 == 0) {\n               \
    \ zeros += current\n                zerosCount += count\n            }\n     \
    \       count += 1\n        }\n        val onesCount = onesCount.toList\n    \
    \    val zerosCount = zerosCount.toList\n        val onesSum = ones.sum\n    \
    \    val zerosSum = zeros.sum\n        val onesSumCount = onesCount.sum\n    \
    \    val zerosSumCount = zerosCount.sum\n        val onesSumCount = onesSumCount.toList\n\
    \        val zerosSumCount = zerosSumCount.toList\n        val onesSum = onesSum.toList\n\
    \        val zerosSum = zerosSum.toList\n        val onesSumCount = onesSumCount.toList\n\
    \        val zerosSumCount = zerosSumCount.toList\n        val onesSumCount =\
    \ onesSumCount.toList\n        val zerosSumCount = zerosSumCount.toList\n    \
    \    val onesSum = onesSum.toList\n        val zerosSum = zerosSum.toList\n  \
    \      val onesSumCount = onesSumCount.toList\n        val zerosSumCount = zerosSumCount.toList\n\
    \        val onesSumCount = onesSumCount.toList\n        val zerosSumCount = zerosSumCount.toList\n\
    \        val onesSum = onesSum.toList\n        val zerosSum = zerosSum.toList\n\
    \        val onesSumCount = onesSumCount.toList\n        val zerosSumCount = zerosSumCount.toList\n\
    \        val onesSumCount = onesSumCount.toList\n        val zerosSumCount = zerosSumCount.toList\n\
    \        val onesSum = onesSum.toList\n        val zerosSum = zerosSum.toList\n\
    \        val onesSumCount = onesSumCount.toList\n        val zerosSumCount = zerosSumCount.toList\n\
    \        val onesSumCount = onesSumCount.toList\n        val zerosSumCount = zerosSumCount.toList\n\
    \        val onesSum = onesSum.toList\n", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val onesCount = mutable.Set[Long]()\n        val zerosCount\
    \ = mutable.Set[Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n",
  "        var count = 0\n        val ones = mutable.ArrayBuffer(1)\n        val zeros\
    \ = mutable.ArrayBuffer(0)\n        val onesAndZeros = mutable.ArrayBuffer(1,\
    \ 0)\n        val onesAndOnes = mutable.ArrayBuffer(1, 1)\n        val onesAndZerosAndOnes\
    \ = mutable.ArrayBuffer(1, 1, 0)\n        val onesAndOnesAndZeros = mutable.ArrayBuffer(1,\
    \ 1, 1)\n        val onesAndZerosAndOnesAndZeros = mutable.ArrayBuffer(1, 1, 1,\
    \ 0)\n        val onesAndOnesAndZerosAndOnes = mutable.ArrayBuffer(1, 1, 1, 1)\n\
    \        val onesAndZerosAndOnesAndOnesAndZeros = mutable.ArrayBuffer(1, 1, 1,\
    \ 1, 0)\n        val onesAndOnesAndZerosAndOnesAndOnes = mutable.ArrayBuffer(1,\
    \ 1, 1, 1, 1)\n        val onesAndZerosAndOnesAndOnesAndOnesAndZeros = mutable.ArrayBuffer(1,\
    \ 1, 1, 1, 1, 1)\n        val onesAndOnesAndZerosAndOnesAndOnesAndOnes = mutable.ArrayBuffer(1,\
    \ 1, 1, 1, 1, 1, 1)\n        val onesAndZerosAndOnesAndOnesAndOnesAndOnesAndZeros\
    \ = mutable.ArrayBuffer(1, 1, 1, 1, 1, 1, 1, 1)\n        val onesAndOnesAndZerosAndOnesAndOnesAndOnesAndOnes\
    \ = mutable.ArrayBuffer(1, 1, 1, 1, 1, 1, 1, 1)\n        val onesAndZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndZeros\
    \ = mutable.ArrayBuffer(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n        val onesAndOnesAndZerosAndOnesAndOnesAndOnesAndOnesAndOnes\
    \ = mutable.ArrayBuffer(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n        val onesAndZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndZeros\
    \ = mutable.ArrayBuffer(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n        val onesAndOnesAndZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes\
    \ = mutable.ArrayBuffer(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n        val onesAndZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndZeros\
    \ = mutable.ArrayBuffer(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n        val\
    \ onesAndOnesAndZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndZeros\
    \ = mutable.ArrayBuffer(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n        val\
    \ onesAndZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndZeros\
    \ = mutable.ArrayBuffer(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    \
    \    val onesAndOnesAndZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOne",
  "        var count = 0\n        var last = 1\n        var current = 1\n        while(current\
    \ < n) {\n            current = last\n            while(current < n && current\
    \ % 10 == 1) {\n                current = current * 10 + 1\n            }\n  \
    \          count = count + 1\n            last = current\n        }\n        count",
  "        val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val count = mutable.ArrayBuffer(0)\n        var i = 0\n        while\
    \ (i < n) {\n            if (ones.contains(i)) {\n                count += 1\n\
    \            }\n            if (zeros.contains(i)) {\n                count +=\
    \ 1\n            }\n            i += 1\n        }\n        count.sum", "     \
    \   val ones = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val onesCount = onesCount.init\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        val onesCount = onesCount.update\n        val onesCount = onesCount.update\n\
    \        ", "        var count = 0\n        var last = 0\n        for(i <- 0 until\
    \ n) {\n            val cur = i.toString.toInt\n            if(cur == 1) {\n \
    \               count += 1\n                last = i\n            }\n        }\n\
    \        count", "        var count = 0\n        var last = 1\n        var lastOne\
    \ = 0\n        var lastTwo = 0\n        var lastThree = 0\n        var lastFour\
    \ = 0\n        var lastFive = 0\n        var lastSix = 0\n        var lastSeven\
    \ = 0\n        var lastEight = 0\n        var lastNine = 0\n        var lastTen\
    \ = 0\n        var lastEleven = 0\n        var lastTwelve = 0\n        var lastThirteen\
    \ = 0\n        var lastFourteen = 0\n        var lastFifteen = 0\n        var\
    \ lastSixteen = 0\n        var lastSeventeen = 0\n        var lastEighteen = 0\n\
    \        var lastNineteen = 0\n        var lastTwenty = 0\n        var lastTwentyOne\
    \ = 0\n        var lastTwentyTwo = 0\n        var lastTwentyThree = 0\n      \
    \  var lastTwentyFour = 0\n        var lastTwentyFive = 0\n        var lastTwentySix\
    \ = 0\n        var lastTwentySeven = 0\n        var lastTwentyEight = 0\n    \
    \    var lastTwentyNine = 0\n        var lastThirty = 0\n        var lastThirtyOne\
    \ = 0\n        var lastThirtyTwo = 0\n        var lastThirtyThree = 0\n      \
    \  var lastThirtyFour = 0\n        var lastThirtyFive = 0\n        var lastThirtySix\
    \ = 0\n        var lastThirtySeven = 0\n        var lastThirtyEight = 0\n    \
    \    var lastThirtyNine = 0\n        var lastFourty = 0\n        var lastFourtyOne\
    \ = 0\n        var lastFourtyTwo = 0\n        var lastFourtyThree = 0\n      \
    \  var lastFourtyFour = 0\n        var lastFourtyFive = 0\n        var lastFourtySix\
    \ = 0\n        var lastFourtySeven = 0\n        var lastFourtyEight = 0\n    \
    \    var lastFourtyNine = 0\n        var lastFifty = 0\n        var lastFiftyOne\
    \ = 0\n        var lastFiftyTwo = 0\n        var lastFiftyThree = 0\n        var\
    \ lastFiftyFour = 0\n        var lastFiftyFive = 0\n        var lastFiftySix =\
    \ 0\n        var lastFiftySeven = 0\n        var lastFiftyEight = 0\n        var\
    \ lastFiftyNine = 0\n        var lastSixty = 0\n        var lastSixtyOne = 0\n\
    \        var lastSixtyTwo = 0\n        var lastSixtyThree = 0\n        var lastSixtyFour\
    \ = 0\n        var lastSixtyFive = 0\n        var lastSixtySix = 0\n        var\
    \ lastSixtySeven = 0\n        var lastSixtyEight = 0", "        val ones = mutable.Set[Long]()\n\
    \        val zeros = mutable.Set[Long]()\n        val counts = mutable.Map[Long,\
    \ Long]()\n        val onesCount = mutable.Set[Long]()\n        val zerosCount\
    \ = mutable.Set[Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n\
    \        val zerosCounts = mutable.Map[Long, Long]()\n        val onesCounts =\
    \ mutable.Map[Long, Long]()\n        val zerosCounts = mutable.Map[Long, Long]()\n\
    \        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts =\
    \ mutable.Map[Long, Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n",
  "        val ones = mutable.ArrayBuffer.empty[Long]\n        var count = 0\n   \
    \     while(n > 0){\n            ones += n\n            n -= 1\n        }\n  \
    \      ones.length", "        val counts = mutable.HashMap[Long, Long]()\n   \
    \     val ones = mutable.Array[Long](1)\n        val zeros = mutable.Array[Long](0)\n\
    \        val onesCount = mutable.Array[Long](1)\n        val zerosCount = mutable.Array[Long](0)\n\
    \        var i = 0\n        while (i < n) {\n            val digit = i / Math.pow(10,\
    \ n-1)\n            val digitCount = digits.count(_ == digit)\n            if\
    \ (digitCount == 1) {\n                counts.put(digit, counts.getOrElse(digit,\
    \ 0) + 1L)\n                onesCount += digitCount\n            } else if (digitCount\
    \ == 0) {\n                counts.put(digit, counts.getOrElse(digit, 0) + 1L)\n\
    \                zerosCount += digitCount\n            } else {\n            \
    \    counts.put(digit, counts.getOrElse(digit, 0) + 1L)\n                onesCount\
    \ += digitCount\n                zerosCount += digitCount\n            }\n   \
    \         i += 1\n        }\n        val onesCount = onesCount.sum\n        val\
    \ zerosCount = zerosCount.sum\n        val onesCount = onesCount.toLong\n    \
    \    val zerosCount = zerosCount.toLong\n        val onesCount = onesCount.toLong\n\
    \        val zerosCount = zerosCount.toLong\n        val onesCount = onesCount.toLong\n\
    \        val zerosCount = zerosCount.toLong\n        val onesCount = onesCount.toLong\n\
    \        val zerosCount = zerosCount.toLong\n        val onesCount = onesCount.toLong\n\
    \        val zerosCount = zerosCount.toLong\n        val onesCount = onesCount.toLong\n\
    \        val zerosCount = zerosCount.toLong\n        val onesCount = onesCount.toLong\n\
    \        val zerosCount = zerosCount.toLong\n        val onesCount = onesCount.toLong\n\
    \        val zerosCount = zerosCount.toLong\n        val onesCount = onesCount.toLong\n\
    \        val zerosCount = zerosCount.toLong\n        val onesCount = onesCount.toLong\n\
    \        val zerosCount = zerosCount.toLong\n        val onesCount = onesCount.toLong\n\
    \        val zerosCount = zerosCount.toLong\n        val onesCount = onesCount.toLong\n\
    \        val zerosCount = zerosCount.toLong\n        val onesCount = onesCount.toLong\n\
    \        val zerosCount = zerosCount.toLong\n        val onesCount = onesCount.toLong\n\
    \        val ", "        val ones = mutable.ListBuffer[Long]()\n        val zeros\
    \ = mutable.ListBuffer[Long]()\n        val onesCount = mutable.ListBuffer[Long]()\n\
    \        val zerosCount = mutable.ListBuffer[Long]()\n        val onesCount2 =\
    \ mutable.ListBuffer[Long]()\n        val zerosCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val zerosCount3\
    \ = mutable.ListBuffer[Long]()\n        val onesCount4 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount4 = mutable.ListBuffer[Long]()\n        val onesCount5\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val zerosCount6\
    \ = mutable.ListBuffer[Long]()\n        val onesCount7 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount7 = mutable.ListBuffer[Long]()\n        val onesCount8\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val zerosCount9\
    \ = mutable.ListBuffer[Long]()\n        val onesCount10 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount10 = mutable.ListBuffer[Long]()\n        val onesCount11\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val zerosCount12\
    \ = mutable.ListBuffer[Long]()\n        val onesCount13 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount13 = mutable.ListBuffer[Long]()\n        val onesCount14\
    \ = mutable.ListBuffer[Long]()\n        val zerosCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val zerosCount15\
    \ = mutable.ListBuffer[Long]()\n        val onesCount16 = mutable.ListBuffer[Long]()\n\
    \        val zerosCount16 = mutable.ListBuffer[Long]()\n        val onesCount17\
    \ = mutable.ListBuffer[Long]()\n", "        val ones = mutable.ListBuffer(1)\n\
    \        val zeros = mutable.ListBuffer(0)\n        val count = mutable.ListBuffer[Long]()\n\
    \        val onesCount = mutable.ListBuffer[Long]()\n        val zerosCount =\
    \ mutable.ListBuffer[Long]()\n        val onesZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosOnes = mutable.ListBuffer[Long]()\n        val onesOnes = mutable.ListBuffer[Long]()\n\
    \        val zerosZeros = mutable.ListBuffer[Long]()\n        val zerosZeros =\
    \ mutable.ListBuffer[Long]()\n        val zerosOnes = mutable.ListBuffer[Long]()\n\
    \        val onesZeros = mutable.ListBuffer[Long]()\n        val zerosZeros =\
    \ mutable.ListBuffer[Long]()\n        val zerosOnes = mutable.ListBuffer[Long]()\n\
    \        val onesOnes = mutable.ListBuffer[Long]()\n        val onesZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosOnes = mutable.ListBuffer[Long]()\n        val zerosZeros =\
    \ mutable.ListBuffer[Long]()\n        val zerosOnes = mutable.ListBuffer[Long]()\n\
    \        val onesOnes = mutable.ListBuffer[Long]()\n        val onesZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosOnes = mutable.ListBuffer[Long]()\n        val zerosZeros =\
    \ mutable.ListBuffer[Long]()\n        val zerosOnes = mutable.ListBuffer[Long]()\n\
    \        val onesOnes = mutable.ListBuffer[Long]()\n        val onesZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosOnes = mutable.ListBuffer[Long]()\n        val zerosZeros =\
    \ mutable.ListBuffer[Long]()\n        val zerosOnes = mutable.ListBuffer[Long]()\n\
    \        val onesOnes = mutable.ListBuffer[Long]()\n        val onesZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosOnes = mutable.ListBuffer[Long]()\n        val zerosZeros =\
    \ mutable.ListBuffer[Long]()\n        val zerosOnes = mutable.ListBuffer[Long]()\n\
    \        val onesOnes = mutable.ListBuffer[Long]()\n        val onesZeros = mutable.ListBuffer[Long]()\n\
    \        val zerosOnes = mut", "        var count = 0\n        var last = 1\n\
    \        var lastOne = 0\n        var lastTwo = 0\n        var lastThree = 0\n\
    \        var lastFour = 0\n        var lastFive = 0\n        var lastSix = 0\n\
    \        var lastSeven = 0\n        var lastEight = 0\n        var lastNine =\
    \ 0\n        var lastTen = 0\n        var lastEleven = 0\n        var lastTwelve\
    \ = 0\n        var lastThirteen = 0\n        var lastFourteen = 0\n        var\
    \ lastFifteen = 0\n        var lastSixteen = 0\n        var lastSeventeen = 0\n\
    \        var lastEighteen = 0\n        var lastNineteen = 0\n        var lastTwenty\
    \ = 0\n        var lastTwentyOne = 0\n        var lastTwentyTwo = 0\n        var\
    \ lastTwentyThree = 0\n        var lastTwentyFour = 0\n        var lastTwentyFive\
    \ = 0\n        var lastTwentySix = 0\n        var lastTwentySeven = 0\n      \
    \  var lastTwentyEight = 0\n        var lastTwentyNine = 0\n        var lastThirty\
    \ = 0\n        var lastThirtyOne = 0\n        var lastThirtyTwo = 0\n        var\
    \ lastThirtyThree = 0\n        var lastThirtyFour = 0\n        var lastThirtyFive\
    \ = 0\n        var lastThirtySix = 0\n        var lastThirtySeven = 0\n      \
    \  var lastThirtyEight = 0\n        var lastThirtyNine = 0\n        var lastFourty\
    \ = 0\n        var lastFourtyOne = 0\n        var lastFourtyTwo = 0\n        var\
    \ lastFourtyThree = 0\n        var lastFourtyFour = 0\n        var lastFourtyFive\
    \ = 0\n        var lastFourtySix = 0\n        var lastFourtySeven = 0\n      \
    \  var lastFourtyEight = 0\n        var lastFourtyNine = 0\n        var lastFifty\
    \ = 0\n        var lastFiftyOne = 0\n        var lastFiftyTwo = 0\n        var\
    \ lastFiftyThree = 0\n        var lastFiftyFour = 0\n        var lastFiftyFive\
    \ = 0\n        var lastFiftySix = 0\n        var lastFiftySeven = 0\n        var\
    \ lastFiftyEight = 0\n        var lastFiftyNine = 0\n        var lastSixty = 0\n\
    \        var lastSixtyOne = 0\n        var lastSixtyTwo = 0\n        var lastSixtyThree\
    \ = 0\n        var lastSixtyFour = 0\n        var lastSixtyFive = 0\n        var\
    \ lastSixtySix = 0\n        var lastSixtySeven = 0\n        var lastSixtyEight\
    \ = 0", "        val ones = mutable.Set[Long]()\n        val zeros = mutable.Set[Long]()\n\
    \        val onesCount = mutable.Set[Long]()\n        val zerosCount = mutable.Set[Long]()\n\
    \        val onesZeros = mutable.Set[Long]()\n        val zerosOnes = mutable.Set[Long]()\n\
    \        val onesOnes = mutable.Set[Long]()\n        val zerosZeros = mutable.Set[Long]()\n\
    \        val onesZeroOnes = mutable.Set[Long]()\n        val zerosOneOnes = mutable.Set[Long]()\n\
    \        val onesOneOnes = mutable.Set[Long]()\n        val zerosZeroOnes = mutable.Set[Long]()\n\
    \        val onesZeroZeroOnes = mutable.Set[Long]()\n        val zerosOneZeroOnes\
    \ = mutable.Set[Long]()\n        val onesOneZeroOnes = mutable.Set[Long]()\n \
    \       val zerosZeroOneOnes = mutable.Set[Long]()\n        val onesZeroZeroOneOnes\
    \ = mutable.Set[Long]()\n        val zerosOneZeroZeroOnes = mutable.Set[Long]()\n\
    \        val onesOneZeroZeroOnes = mutable.Set[Long]()\n        val zerosZeroOneZeroOnes\
    \ = mutable.Set[Long]()\n        val onesZeroZeroZeroOnes = mutable.Set[Long]()\n\
    \        val zerosOneZeroZeroOnes = mutable.Set[Long]()\n        val onesOneZeroZeroOnes\
    \ = mutable.Set[Long]()\n        val zerosZeroOneZeroOnes = mutable.Set[Long]()\n\
    \        val onesZeroZeroZeroOnes = mutable.Set[Long]()\n        val zerosOneZeroZeroOnes\
    \ = mutable.Set[Long]()\n        val onesOneZeroZeroOnes = mutable.Set[Long]()\n\
    \        val zerosZeroOneZeroOnes = mutable.Set[Long]()\n        val onesZeroZeroZeroOnes\
    \ = mutable.Set[Long]()\n        val zerosOneZeroZeroOnes = mutable.Set[Long]()\n\
    \        val onesOneZeroZeroOnes = mutable.Set[Long]()\n        val zerosZeroOneZeroOnes\
    \ = mutable.Set[Long]()\n        val onesZeroZeroZeroOnes = mutable.Set[Long]()\n\
    \        val zerosOneZeroZeroOnes = ", "        val ones = mutable.ListBuffer(1)\n\
    \        var count = 0\n        while(n > 0){\n            ones += n\n       \
    \     n -= 1\n        }\n        ones.length"]
stop_tokens:
- "\n    }\n"
