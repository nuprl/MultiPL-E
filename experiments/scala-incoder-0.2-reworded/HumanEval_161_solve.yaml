name: HumanEval_161_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a string s.\n    // if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    //\
  \ If the string contains no letters, reverse the string.\n    // The function should\
  \ return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"))\n \
  \   // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>> solve((\"\
  #a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
  aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
  ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n \
  \   assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
  #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n\
  \    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
completions: ["        val result = new StringBuilder\n        val chars = s.toCharArray\n\
    \        val len = chars.length\n        var i = 0\n        while (i < len) {\n\
    \            val c = chars(i)\n            if (c.isLetter) {\n               \
    \ val lower = c.toLower\n                val upper = c.toUpper\n             \
    \   if (lower != upper) {\n                    result.append(lower)\n        \
    \            result.append(upper)\n                } else {\n                \
    \    result.append(c)\n                }\n            } else {\n             \
    \   result.append(c)\n            }\n            i += 1\n        }\n        result.toString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n \
    \           if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z'){\n                result.append((s.charAt(i) - 'A').toString)\n    \
    \        }\n            else{\n                result.append(s.charAt(i))\n  \
    \          }\n        }\n        return result.toString", "        val result\
    \ = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n       \
    \     val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n           \
    \     result.append(c.toUpperCase)\n            }else if(c == 'b' || c == 'B'){\n\
    \                result.append(c.toLowerCase)\n            }else{\n          \
    \      result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = s.toCharArray\n        val reversed = chars.reverse\n     \
    \   val result = reversed.foldLeft(\"\") { (result, c) => if (c.isLetter) c.toUpperCase(c)\
    \ else c.toLowerCase(c) }\n        if (chars.isEmpty) result\n        else result.reverse",
  "        val chars = s.toCharArray\n        val reversed = new mutable.ListBuffer[Char]()\n\
    \        val result = new mutable.ListBuffer[Char]()\n        chars.foreach(c\
    \ => {\n            if (c.isLetter) reversed.add(c)\n            else result.add(c)\n\
    \        })\n        if (reversed.isEmpty) s.reverse\n        else result.reverse",
  "        val result = new StringBuilder\n        for (i <- 0 until s.length)\n \
    \           if (s(i) >= 'a' && s(i) <= 'z')\n                result.append(s(i).toUpper\
    \ + s(i).toLower)\n            else\n                result.append(s(i))\n   \
    \     return result.toString", "        val result = new StringBuilder\n     \
    \   for(i <- 0 until s.length){\n            val c = s.charAt(i)\n           \
    \ if(c == 'a' || c == 'A'){\n                result.append(\"A\")\n          \
    \  }else if(c == 'b' || c == 'B'){\n                result.append(\"B\")\n   \
    \         }else if(c == 'c' || c == 'C'){\n                result.append(\"C\"\
    )\n            }else if(c == 'd' || c == 'D'){\n                result.append(\"\
    D\")\n            }else if(c == 'e' || c == 'E'){\n                result.append(\"\
    E\")\n            }else if(c == 'f' || c == 'F'){\n                result.append(\"\
    F\")\n            }else if(c == 'g' || c == 'G'){\n                result.append(\"\
    G\")\n            }else if(c == 'h' || c == 'H'){\n                result.append(\"\
    H\")\n            }else if(c == 'i' || c == 'I'){\n                result.append(\"\
    I\")\n            }else if(c == 'j' || c == 'J'){\n                result.append(\"\
    J\")\n            }else if(c == 'k' || c == 'K'){\n                result.append(\"\
    K\")\n            }else if(c == 'l' || c == 'L'){\n                result.append(\"\
    L\")\n            }else if(c == 'm' || c == 'M'){\n                result.append(\"\
    M\")\n            }else if(c == 'n' || c == 'N'){\n                result.append(\"\
    N\")\n            }else if(c == 'o' || c == 'O'){\n                result.append(\"\
    O\")\n            }else if(c == 'p' || c == 'P'){\n                result.append(\"\
    P\")\n            }else if(c == 'q' || c == 'Q'){\n                result.append(\"\
    Q\")\n            }else if(c == 'r' || c == 'R'){\n                result.append(\"\
    R\")\n            }else if(c == 's' || c == 'S'){\n                result.append(\"\
    S\")\n            }else if(c == 't' || c == 'T'){\n                result.append(\"\
    T\")\n            }else if(c == 'u' || c == 'U'){\n                result.append(\"\
    U\")\n            }else if(c == 'v' || c == 'V'){\n                result.append(\"\
    V\")\n            }else if(c == 'w' || c == 'W'){\n                result.append(\"\
    W\")\n            }else if(c == 'x' || c == 'X'){\n                result.append(\"\
    X\")\n            }else if(c == 'y' || c == 'Y'){\n                result.append(\"\
    Y\")\n            }else if(c == 'z' || c == 'Z'){\n                result.", " \
    \       val result = new StringBuilder\n        for(i <- 0 until s.length)\n \
    \           if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      val chars = s.toCharArray\n        for(i <- 0 until chars.length){\n  \
    \          val c = chars(i)\n            if(c.isLetter){\n                val\
    \ l = c.toLower\n                val u = c.toUpper\n                val l = if(l\
    \ == u) l else l + \"@\" + u\n                result.append(l)\n            }\n\
    \            else{\n                result.append(c)\n            }\n        }\n\
    \        result.toString", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      val isLetter = c.isLetter\n            val isUpper = c.toUpper == c\n \
    \           val isLower = c.toLower == c\n            val isUpperOrLower = isUpper\
    \ || isLower\n            val isLetterOrNotLetter = isLetter && !isLetter\n  \
    \          val isLetterOrNotLetterOrNotLetter = isLetterOrNotLetter && !isLetterOrNotLetter\n\
    \            val isLetterOrNotLetterOrNotLetterOrNotLetter = isLetterOrNotLetterOrNotLetter\
    \ && !isLetterOrNotLetterOrNotLetter\n            val isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ = isLetterOrNotLetterOrNotLetterOrNotLetter && !isLetterOrNotLetterOrNotLetterOrNotLetter\n\
    \            val isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ = isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter && !isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\n\
    \            val isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ = isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter && !isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\n\
    \            val isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ = isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ && !isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\n\
    \            val isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ = isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ && !isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\n\
    \            val isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ = isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ && !isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOr", "  \
    \      val result = s.toUpperCase\n        val reversed = result.reverse\n   \
    \     val noLetters = reversed.replaceAll(\"[^a-zA-Z]\", \"\")\n        if (noLetters.isEmpty)\
    \ result else noLetters", "        val chars = mutable.ListBuffer[Char]()\n  \
    \      for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toUpper\n        chars.reverse", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i) -\
    \ 'a').toUpper + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val strList = s.toList\n        val\
    \ strList2 = strList.map(x => x.toUpperCase)\n        val strList3 = strList.map(x\
    \ => x.toLowerCase)\n        val strList4 = strList.map(x => x.toUpperCase)\n\
    \        val strList5 = strList.map(x => x.toLowerCase)\n        val strList6\
    \ = strList.map(x => x.toUpperCase)\n        val strList7 = strList.map(x => x.toLowerCase)\n\
    \        val strList8 = strList.map(x => x.toUpperCase)\n        val strList9\
    \ = strList.map(x => x.toLowerCase)\n        val strList10 = strList.map(x =>\
    \ x.toUpperCase)\n        val strList11 = strList.map(x => x.toLowerCase)\n  \
    \      val strList12 = strList.map(x => x.toUpperCase)\n        val strList13\
    \ = strList.map(x => x.toLowerCase)\n        val strList14 = strList.map(x =>\
    \ x.toUpperCase)\n        val strList15 = strList.map(x => x.toLowerCase)\n  \
    \      val strList16 = strList.map(x => x.toUpperCase)\n        val strList17\
    \ = strList.map(x => x.toLowerCase)\n        val strList18 = strList.map(x =>\
    \ x.toUpperCase)\n        val strList19 = strList.map(x => x.toLowerCase)\n  \
    \      val strList20 = strList.map(x => x.toUpperCase)\n        val strList21\
    \ = strList.map(x => x.toLowerCase)\n        val strList22 = strList.map(x =>\
    \ x.toUpperCase)\n        val strList23 = strList.map(x => x.toLowerCase)\n  \
    \      val strList24 = strList.map(x => x.toUpperCase)\n        val strList25\
    \ = strList.map(x => x.toLowerCase)\n        val strList26 = strList.map(x =>\
    \ x.toUpperCase)\n        val strList27 = strList.map(x => x.toLowerCase)\n  \
    \      val strList28 = strList.map(x => x.toUpperCase)\n        val strList29\
    \ = strList.map(x => x.toLowerCase)\n        val strList30 = strList.map(x =>\
    \ x.toUpperCase)\n        val strList31 = strList.map(x => x.toLowerCase)\n  \
    \      val strList32 = strList.map(x => x.toUpperCase)\n        val strList33\
    \ = strList.map(x => x.toLowerCase)\n        val strList34 = strList.map(x =>\
    \ x.toUpperCase)\n        val str", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                result.append((s.charAt(i) - 'a').toString)\n    \
    \        }\n            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n \
    \               result.append((s.charAt(i) - 'A').toString)\n            }\n \
    \           else{\n                result.append(s.charAt(i))\n            }\n\
    \        }\n        result.reverse", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                result.append((s.charAt(i) - 'a').toUpperCase)\n \
    \           }\n            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n\
    \                result.append((s.charAt(i) - 'A').toUpperCase)\n            }\n\
    \            else{\n                result.append(s.charAt(i))\n            }\n\
    \        }\n        return result.toString()", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.reverse.foldLeft(\"\"){\n            case (acc, c) => if (c.isLetter)\
    \ acc + c.toUpperCase(c) else acc + c.toLowerCase\n        }", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until s.length)\n            if (s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper\
    \ + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      val chars = mutable.HashSet[Char]()\n        for (c <- s) {\n         \
    \   if (chars.contains(c)) {\n                chars.remove(c)\n            } else\
    \ {\n                chars += c\n            }\n        }\n        if (chars.isEmpty)\
    \ {\n            result.append(s)\n        } else {\n            chars.foreach\
    \ { c =>\n                val upper = c.toUpperCase\n                val lower\
    \ = c.toLowerCase\n                if (upper == lower) {\n                   \
    \ result.append(upper)\n                } else {\n                    result.append(lower)\n\
    \                }\n            }\n        }\n        result.toString", "    \
    \    val result = new StringBuilder\n        for(i <- 0 until s.length)\n    \
    \        if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val chars = mutable.ListBuffer[Char]()\n        for\
    \ (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <=\
    \ 'z')\n                chars += s.charAt(i)\n            else chars += s.charAt(i).toUpper\n\
    \n        chars.reverse", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c.isLetter){\n\
    \                val l = c.toUpperCase\n                val u = c.toLowerCase\n\
    \                result.append((if(u == l) u else l))\n            }\n       \
    \     else{\n                result.append(c)\n            }\n        }\n    \
    \    result.toString", "        val strList = s.toList\n        strList.foldLeft(\"\
    \"){ (result, c) =>\n            val isLetter = c.isLetter\n            if (isLetter)\
    \ {\n                val upperCase = c.toUpperCase\n                val lowerCase\
    \ = c.toLowerCase\n                if (strList.contains(lowerCase)) {\n      \
    \              result + lowerCase\n                } else if (strList.contains(upperCase))\
    \ {\n                    result + upperCase\n                } else {\n      \
    \              result + c\n                }\n            } else {\n         \
    \       result + c\n            }\n        }", "        val result = new mutable.StringBuilder\n\
    \        for(i <- 0 until s.length)\n        {\n            val c = s.charAt(i)\n\
    \            if(c.isLetter)\n            {\n                val lower = c.toLower\n\
    \                val upper = c.toUpper\n                if(lower == upper)\n \
    \               {\n                    result.append(lower)\n                }\n\
    \                else\n                {\n                    result.append(upper)\n\
    \                }\n            }\n            else\n            {\n         \
    \       result.append(c)\n            }\n        }\n        return result.toString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n \
    \           val c = s.charAt(i)\n            if(c.isLetter) result.append(c.toUpperCase)\n\
    \            else result.append(c)\n        }\n        result.toString", "   \
    \     val chars = s.toCharArray\n        val reversed = new mutable.ListBuffer[Char]()\n\
    \        val result = new mutable.ListBuffer[Char]()\n        for(i <- 0 until\
    \ chars.length){\n            val c = chars(i)\n            if(c == 'A' || c ==\
    \ 'a'){\n                reversed.add(c)\n            }else if(c == 'B' || c ==\
    \ 'b'){\n                reversed.add(c)\n            }else if(c == 'C' || c ==\
    \ 'c'){\n                reversed.add(c)\n            }else if(c == 'D' || c ==\
    \ 'd'){\n                reversed.add(c)\n            }else if(c == 'E' || c ==\
    \ 'e'){\n                reversed.add(c)\n            }else if(c == 'F' || c ==\
    \ 'f'){\n                reversed.add(c)\n            }else if(c == 'G' || c ==\
    \ 'g'){\n                reversed.add(c)\n            }else if(c == 'H' || c ==\
    \ 'h'){\n                reversed.add(c)\n            }else if(c == 'I' || c ==\
    \ 'i'){\n                reversed.add(c)\n            }else if(c == 'J' || c ==\
    \ 'j'){\n                reversed.add(c)\n            }else if(c == 'K' || c ==\
    \ 'k'){\n                reversed.add(c)\n            }else if(c == 'L' || c ==\
    \ 'l'){\n                reversed.add(c)\n            }else if(c == 'M' || c ==\
    \ 'm'){\n                reversed.add(c)\n            }else if(c == 'N' || c ==\
    \ 'n'){\n                reversed.add(c)\n            }else if(c == 'O' || c ==\
    \ 'o'){\n                reversed.add(c)\n            }else if(c == 'P' || c ==\
    \ 'p'){\n                reversed.add(c)\n            }else if(c == 'Q' || c ==\
    \ 'q'){\n                reversed.add(c)\n            }else if(c == 'R' || c ==\
    \ 'r'){\n                reversed.add(c)\n            }else if(c == 'S' || c ==\
    \ 's'){\n                reversed.add(c)\n            }else if(c == 'T' || c ==\
    \ 't'){\n                reversed.add(c)\n            }else if(c == 'U' || c ==\
    \ 'u'){\n                reversed.add(c)\n            }else if(c == 'V' || c ==\
    \ 'v'){\n                reversed.add(c)\n            }else if(c == 'W' || c ==\
    \ 'w'){\n                reversed.add(c)\n            }else if(c == 'X' || c ==\
    \ 'x'){\n                reversed.add(c)\n            }else if(c == 'Y' || c ==\
    \ 'y'){\n                reverse", "        val chars = s.toCharArray\n      \
    \  val result = new StringBuilder\n        val reversed = new mutable.ListBuffer[Char]()\n\
    \        val reversedChars = new mutable.ListBuffer[Char]()\n        val charsCount\
    \ = chars.length\n        for(i <- 0 until charsCount) {\n            val c =\
    \ chars(i)\n            if(c == 'a') {\n                reversed.add(c)\n    \
    \            reversedChars.add(c)\n            } else if(c == 'A') {\n       \
    \         reversed.add(c)\n                reversedChars.add(c)\n            }\
    \ else if(c == '#') {\n                reversed.add(c)\n                reversedChars.add(c)\n\
    \            } else if(c == '@') {\n                reversed.add(c)\n        \
    \        reversedChars.add(c)\n            } else if(c == 'C') {\n           \
    \     reversed.add(c)\n                reversedChars.add(c)\n            } else\
    \ if(c == 'a' || c == 'A' || c == '#' || c == '@' || c == 'C') {\n           \
    \     reversed.add(c)\n                reversedChars.add(c)\n            } else\
    \ {\n                reversed.add(c)\n                reversedChars.add(c)\n \
    \           }\n        }\n        for(i <- 0 until charsCount) {\n           \
    \ val c = chars(i)\n            if(c == 'a' || c == 'A' || c == '#' || c == '@'\
    \ || c == 'C') {\n                result.append((reversedChars.toList.reverse.toList))\n\
    \            } else {\n                result.append(c)\n            }\n     \
    \   }\n        return result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append(s.charAt(i).toUpper)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString",
  "        val chars = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n     \
    \           chars += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse", "        val chars = s.toCharArray\n        val result\
    \ = new StringBuilder\n        for(i <- 0 until chars.length){\n            val\
    \ c = chars(i)\n            if(c.isLetter){\n                val lower = c.toLower\n\
    \                val upper = c.toUpper\n                if(lower < upper){\n \
    \                   result.append(upper)\n                }else{\n           \
    \         result.append(lower)\n                }\n            }else{\n      \
    \          result.append(c)\n            }\n        }\n        return result.toString",
  "        val strList = s.toList\n        strList.foldLeft(\"\") { (str, c) =>\n\
    \            if (c.isLetter) str + c.toUpperCase\n            else str + c\n \
    \       }", "        val result = s.toUpperCase\n        val chars = result.toCharArray\n\
    \        chars.foreach(c => {\n            val index = chars.indexOf(c)\n    \
    \        if (index >= 0) {\n                chars(index) = chars(index).swap\n\
    \            }\n        })\n        result.toString", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (c <- s) {\n            if (c.isLetter) {\n                chars\
    \ += c.toUpperCase\n            } else {\n                chars += c.toLowerCase\n\
    \            }\n        }\n        if (chars.isEmpty) {\n            s.reverse\n\
    \        } else {\n            chars.reverse\n        }", "        val chars =\
    \ mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n          \
    \  chars += s.charAt(i)\n        }\n        chars.toList.sortWith(_ < _).reverse.mkString",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val chars = s.toCharArray\n       \
    \ val result = new mutable.ListBuffer[String]()\n        val len = chars.length\n\
    \        for(i <- 0 until len){\n            if(chars(i) >= 'a' && chars(i) <=\
    \ 'z'){\n                result.append((chars(i) - 'a').toString)\n          \
    \  }\n            else if(chars(i) >= 'A' && chars(i) <= 'Z'){\n             \
    \   result.append((chars(i) - 'A').toString)\n            }\n            else{\n\
    \                result.append(chars(i))\n            }\n        }\n        result.reverse",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n \
    \           val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n     \
    \           result.append(\"A\")\n            }else if(c == 'b' || c == 'B'){\n\
    \                result.append(\"B\")\n            }else if(c == 'c' || c == 'C'){\n\
    \                result.append(\"C\")\n            }else if(c == 'd' || c == 'D'){\n\
    \                result.append(\"D\")\n            }else if(c == 'e' || c == 'E'){\n\
    \                result.append(\"E\")\n            }else if(c == 'f' || c == 'F'){\n\
    \                result.append(\"F\")\n            }else if(c == 'g' || c == 'G'){\n\
    \                result.append(\"G\")\n            }else if(c == 'h' || c == 'H'){\n\
    \                result.append(\"H\")\n            }else if(c == 'i' || c == 'I'){\n\
    \                result.append(\"I\")\n            }else if(c == 'j' || c == 'J'){\n\
    \                result.append(\"J\")\n            }else if(c == 'k' || c == 'K'){\n\
    \                result.append(\"K\")\n            }else if(c == 'l' || c == 'L'){\n\
    \                result.append(\"L\")\n            }else if(c == 'm' || c == 'M'){\n\
    \                result.append(\"M\")\n            }else if(c == 'n' || c == 'N'){\n\
    \                result.append(\"N\")\n            }else if(c == 'o' || c == 'O'){\n\
    \                result.append(\"O\")\n            }else if(c == 'p' || c == 'P'){\n\
    \                result.append(\"P\")\n            }else if(c == 'q' || c == 'Q'){\n\
    \                result.append(\"Q\")\n            }else if(c == 'r' || c == 'R'){\n\
    \                result.append(\"R\")\n            }else if(c == 's' || c == 'S'){\n\
    \                result.append(\"S\")\n            }else if(c == 't' || c == 'T'){\n\
    \                result.append(\"T\")\n            }else if(c == 'u' || c == 'U'){\n\
    \                result.append(\"U\")\n            }else if(c == 'v' || c == 'V'){\n\
    \                result.append(\"V\")\n            }else if(c == 'w' || c == 'W'){\n\
    \                result.append(\"W\")\n            }else if(c == 'x' || c == 'X'){\n\
    \                result.append(\"X\")\n            }else if(c == 'y' || c == 'Y'){\n\
    \                result.append(\"Y\")\n            }else if(c == 'z' || c == 'Z'){\n\
    \                result.", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ 'a' || c == 'A'){\n                result.append((s.charAt(i).toUpperCase +\
    \ s.charAt(i).toLowerCase))\n            }else if(c == 'b' || c == 'B'){\n   \
    \             result.append((s.charAt(i).toLowerCase + s.charAt(i).toUpperCase))\n\
    \            }else if(c == 'c' || c == 'C'){\n                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase))\n            }else if(c == 'd' || c == 'D'){\n \
    \               result.append((s.charAt(i).toLowerCase + s.charAt(i).toUpperCase))\n\
    \            }else if(c == 'e' || c == 'E'){\n                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase))\n            }else if(c == 'f' || c == 'F'){\n \
    \               result.append((s.charAt(i).toLowerCase + s.charAt(i).toUpperCase))\n\
    \            }else if(c == 'g' || c == 'G'){\n                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase))\n            }else if(c == 'h' || c == 'H'){\n \
    \               result.append((s.charAt(i).toLowerCase + s.charAt(i).toUpperCase))\n\
    \            }else if(c == 'i' || c == 'I'){\n                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase))\n            }else if(c == 'j' || c == 'J'){\n \
    \               result.append((s.charAt(i).toLowerCase + s.charAt(i).toUpperCase))\n\
    \            }else if(c == 'k' || c == 'K'){\n                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase))\n            }else if(c == 'l' || c == 'L'){\n \
    \               result.append((s.charAt(i).toLowerCase + s.charAt(i).toUpperCase))\n\
    \            }else if(c == 'm' || c == 'M'){\n                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase))\n            }else if(c == 'n' || c == 'N'){\n \
    \               result.append((s.charAt(i).toLowerCase + s.charAt(i).toUpperCase))\n\
    \            }else if(c == 'o' || c == 'O'){\n                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase))\n            }else if(c == 'p' || c == 'P'){\n \
    \               result.append((s.charAt(i).toLowerCase + s.charAt(i).toUpperCase))\n\
    \            }else if(c == 'q' || c == 'Q", "        val result = s.toUpperCase\n\
    \        val chars = s.toCharArray\n        chars.foreach(c => {\n           \
    \ if (c.isLetter) {\n                val newChar = c.toUpperCase\n           \
    \     if (newChar != c) {\n                    result = result.replace(c.toString,\
    \ newChar.toString)\n                }\n            }\n        })\n        result",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val result = new StringBuilder\n        for(i <-\
    \ 0 until s.length){\n            val c = s.charAt(i)\n            if(c == 'a'\
    \ || c == 'A'){\n                result.append(\"A\")\n            }else if(c\
    \ == 'b' || c == 'B'){\n                result.append(\"B\")\n            }else\
    \ if(c == 'c' || c == 'C'){\n                result.append(\"C\")\n          \
    \  }else if(c == 'd' || c == 'D'){\n                result.append(\"D\")\n   \
    \         }else if(c == 'e' || c == 'E'){\n                result.append(\"E\"\
    )\n            }else if(c == 'f' || c == 'F'){\n                result.append(\"\
    F\")\n            }else if(c == 'g' || c == 'G'){\n                result.append(\"\
    G\")\n            }else if(c == 'h' || c == 'H'){\n                result.append(\"\
    H\")\n            }else if(c == 'i' || c == 'I'){\n                result.append(\"\
    I\")\n            }else if(c == 'j' || c == 'J'){\n                result.append(\"\
    J\")\n            }else if(c == 'k' || c == 'K'){\n                result.append(\"\
    K\")\n            }else if(c == 'l' || c == 'L'){\n                result.append(\"\
    L\")\n            }else if(c == 'm' || c == 'M'){\n                result.append(\"\
    M\")\n            }else if(c == 'n' || c == 'N'){\n                result.append(\"\
    N\")\n            }else if(c == 'o' || c == 'O'){\n                result.append(\"\
    O\")\n            }else if(c == 'p' || c == 'P'){\n                result.append(\"\
    P\")\n            }else if(c == 'q' || c == 'Q'){\n                result.append(\"\
    Q\")\n            }else if(c == 'r' || c == 'R'){\n                result.append(\"\
    R\")\n            }else if(c == 's' || c == 'S'){\n                result.append(\"\
    S\")\n            }else if(c == 't' || c == 'T'){\n                result.append(\"\
    T\")\n            }else if(c == 'u' || c == 'U'){\n                result.append(\"\
    U\")\n            }else if(c == 'v' || c == 'V'){\n                result.append(\"\
    V\")\n            }else if(c == 'w' || c == 'W'){\n                result.append(\"\
    W\")\n            }else if(c == 'x' || c == 'X'){\n                result.append(\"\
    X\")\n            }else if(c == 'y' || c == 'Y'){\n                result.append(\"\
    Y\")\n            }else if(c == 'z' || c == 'Z'){\n                result.", " \
    \       val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i).toLowerCase == s.charAt(i).toUpperCase || s.charAt(i).toLowerCase\
    \ == s.charAt(i).toLowerCase){\n                chars += s.charAt(i)\n       \
    \     }\n        }\n        if(chars.size == 0){\n            return s\n     \
    \   }\n        else{\n            val reversed = chars.toSeq.reverse\n       \
    \     val result = reversed.mkString(\"\")\n            return result\n      \
    \  }", "        val result = new mutable.ListBuffer[String]()\n        for(i <-\
    \ 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n\
    \                result.add(s.charAt(i).toUpper + s.charAt(i).toLower)\n     \
    \       }\n            else{\n                result.add(s.charAt(i))\n      \
    \      }\n        }\n        if(result.isEmpty){\n            s.reverse\n    \
    \    }\n        else{\n            result.reverse\n        }", "        val result\
    \ = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n        {\n\
    \            val c = s.charAt(i)\n            if(c.isLetter)\n            {\n\
    \                val l = c.toLower\n                val u = c.toUpper\n      \
    \          if(l == u)\n                    result.setCharAt(i, l)\n          \
    \      else\n                    result.setCharAt(i, u)\n            }\n     \
    \       else\n                result.setCharAt(i, c)\n        }\n        result.toString",
  "        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n\
    \            chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString",
  "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse", "        val result = s.toUpperCase\n        val list\
    \ = s.toList\n        list.foreach { x =>\n            val index = list.indexOf(x)\n\
    \            if (index != -1) {\n                if (x.isLetter) {\n         \
    \           val temp = list.remove(index)\n                    list.remove(index)\n\
    \                    list.insert(index, temp)\n                } else {\n    \
    \                list.remove(index)\n                }\n            }\n      \
    \  }\n        result", "        val chars = mutable.Set[Char]()\n        for(i\
    \ <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.sortWith(_ <\
    \ _).reverse.mkString", "        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toUpper\n\n        chars.reverse", "        val chars\
    \ = s.toCharArray\n        val reversed = chars.reverse\n        val result =\
    \ reversed.foldLeft(\"\") { (acc, c) =>\n            if (c.isLetter) acc + c.toUpperCase\n\
    \            else acc + c\n        }\n        result", "        val str = new\
    \ StringBuilder(s)\n        val chars = str.map(_.toChar)\n        val charsMap\
    \ = chars.toMap\n        val charsSet = chars.toSet\n        val charsArray =\
    \ chars.toArray\n        val charsArrayMap = charsArray.toMap\n        val charsArraySet\
    \ = charsArray.toSet\n        val charsArrayArray = charsArray.toArray\n     \
    \   val charsArrayArrayMap = charsArrayArray.toMap\n        val charsArrayArraySet\
    \ = charsArrayArray.toSet\n        val charsArrayArrayArray = charsArrayArray.toArray\n\
    \        val charsArrayArrayArrayMap = charsArrayArrayArray.toMap\n        val\
    \ charsArrayArrayArraySet = charsArrayArrayArray.toSet\n        val charsArrayArrayArrayArray\
    \ = charsArrayArrayArray.toArray\n        val charsArrayArrayArrayArrayMap = charsArrayArrayArrayArray.toMap\n\
    \        val charsArrayArrayArrayArraySet = charsArrayArrayArrayArray.toSet\n\
    \        val charsArrayArrayArrayArrayArray = charsArrayArrayArrayArray.toArray\n\
    \        val charsArrayArrayArrayArrayArrayMap = charsArrayArrayArrayArrayArray.toMap\n\
    \        val charsArrayArrayArrayArrayArraySet = charsArrayArrayArrayArrayArray.toSet\n\
    \        val charsArrayArrayArrayArrayArrayArray = charsArrayArrayArrayArrayArray.toArray\n\
    \        val charsArrayArrayArrayArrayArrayArrayMap = charsArrayArrayArrayArrayArrayArray.toMap\n\
    \        val charsArrayArrayArrayArrayArrayArraySet = charsArrayArrayArrayArrayArrayArray.toSet\n\
    \        val charsArrayArrayArrayArrayArrayArrayArray = charsArrayArrayArrayArrayArrayArray.toArray\n\
    \        val charsArrayArrayArrayArrayArrayArrayArrayMap = charsArrayArrayArrayArrayArrayArrayArrayArray.toMap\n\
    \        val charsArrayArrayArrayArrayArrayArrayArraySet = charsArrayArrayArrayArrayArrayArrayArray.toSet\n\
    \        val charsArrayArrayArrayArrayArrayArrayArrayArray = charsArrayArrayArrayArrayArrayArrayArray.toArray\n\
    \        val charsArrayArrayArrayArrayArrayArrayArrayMap = charsArrayArrayArrayArrayArrayArrayArray.toMap\n\
    \        val charsArrayArrayArrayArrayArrayArrayArraySet = charsArrayArrayArrayArrayArrayArrayArray.toSet\n\
    \        val charsArrayArrayArrayArrayArrayArrayArrayArray = charsArrayArrayArrayArray",
  "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            chars += s.charAt(i)\n        }\n        chars.reverse.foldLeft(\"\
    \"){ (result, c) =>\n            if(c.isLetter){\n                result + c.toUpperCase\n\
    \            } else {\n                result + c\n            }\n        }",
  "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            chars += s.charAt(i)\n        }\n        chars.toList.reverse.foldLeft(\"\
    \"){ (result, c) => result + c.toUpperCase() }", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (c <- s) {\n            if (c.isLetter) {\n                chars\
    \ += c.toUpperCase\n            } else {\n                chars += c\n       \
    \     }\n        }\n        chars.reverse", "        val result = new StringBuilder\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append(s.charAt(i).toUpper)\n            else\n\
    \                result.append(s.charAt(i))\n        result.toString", "     \
    \   val result = new StringBuilder\n        val chars = s.toCharArray\n      \
    \  for (i <- 0 until chars.length)\n            if (chars(i) >= 'a' && chars(i)\
    \ <= 'z')\n                chars(i) match {\n                    case 'a' -> chars(i)\
    \ match {\n                        case 'A' -> chars(i) match {\n            \
    \                case 'a' -> chars(i) match {\n                              \
    \  case 'A' -> chars(i) match {\n                                    case 'a'\
    \ -> chars(i) match {\n                                        case 'A' -> chars(i)\
    \ match {\n                                            case 'a' -> chars(i) match\
    \ {\n                                                case 'A' -> chars(i) match\
    \ {\n                                                    case 'a' -> chars(i)\
    \ match {\n                                                        case 'A' ->\
    \ chars(i) match {\n                                                         \
    \   case 'a' -> chars(i) match {\n                                           \
    \                     case 'A' -> chars(i) match {\n                         \
    \                                           case 'a' -> chars(i) match {\n   \
    \                                                                     case 'A'\
    \ -> chars(i) match {\n                                                      \
    \                      case \"a\" -> chars(i) match {\n                      \
    \                                                          case \"A\" -> chars(i)\
    \ match {\n                                                                  \
    \                  case \"a\" -> chars(i) match {\n                          \
    \                                                              case \"A\" -> chars(i)\
    \ match {\n                                                                  \
    \                          case \"a\" -> chars(i) match {\n                  \
    \                                                                            \
    \  case \"A\" -> chars(i) match {\n                                          \
    \                                                          case \"a\" -> chars(i)\
    \ match {\n                                                                  \
    \                                      case \"A\" -> chars(i) match {\n      \
    \                                                                            \
    \                          case \"a\" -> chars(i) match {\n                  \
    \                                                                            \
    \                  case \"A\" -> chars(i) match {\n                          \
    \                                                                            \
    \              case \"a\" -> chars(i) match {\n                              \
    \                                                                            \
    \              case \"A\" -> chars(i) match {\n                              \
    \                                                                            \
    \                  case \"a\" -> chars(i) match {\n                          \
    \                                                                            \
    \                          case \"A\" -> chars(i) match {\n                  \
    \                                                                            \
    \                                      case \"a\" -> chars(i) match {\n      \
    \                                                                            \
    \                                                      case \"A\" -> chars(i)\
    \ match {\n                                                                  \
    \                                                                          case\
    \ \"a\" -> chars(i) match {\n                                                \
    \                                                                            \
    \                    case \"A\" -> chars(i) match {\n                        \
    \                                                                            \
    \                                                case \"a\" -> chars(i) match\
    \ {\n                                                                        \
    \                                                                            \
    \    case \"A\" -> chars(i) match {\n                                        \
    \                                                                            \
    \                                        case \"a\" -> chars(i) match {\n    \
    \                                                                            \
    \                                                                            \
    \    case \"A\" -> chars(i) match {\n                                        \
    \                                                                            \
    \                                                case \"a\" -> chars(i) match\
    \ {\n                                                                        \
    \                                                                            \
    \                    case \"A\" -> chars(i) match {\n                        \
    \                                                                            \
    \                                                                        case\
    \ \"a\" -> chars(i) ", "        val chars = s.toCharArray\n        val reversed\
    \ = new mutable.ListBuffer[Char]()\n        val result = new mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until chars.length){\n            val c = chars(i)\n     \
    \       if(c.isLetter){\n                val c = c.toUpperCase\n             \
    \   reversed.add(c)\n            }\n            else{\n                val c =\
    \ c.toLowerCase\n                reversed.add(c)\n            }\n        }\n \
    \       for(i <- 0 until reversed.length){\n            result.add(reversed(i))\n\
    \        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == 'a' || c == 'A'){\n                result.append(\"A\")\n     \
    \       }else if(c == 'b' || c == 'B'){\n                result.append(\"B\")\n\
    \            }else if(c == 'c' || c == 'C'){\n                result.append(\"\
    C\")\n            }else if(c == 'd' || c == 'D'){\n                result.append(\"\
    D\")\n            }else if(c == 'e' || c == 'E'){\n                result.append(\"\
    E\")\n            }else if(c == 'f' || c == 'F'){\n                result.append(\"\
    F\")\n            }else if(c == 'g' || c == 'G'){\n                result.append(\"\
    G\")\n            }else if(c == 'h' || c == 'H'){\n                result.append(\"\
    H\")\n            }else if(c == 'i' || c == 'I'){\n                result.append(\"\
    I\")\n            }else if(c == 'j' || c == 'J'){\n                result.append(\"\
    J\")\n            }else if(c == 'k' || c == 'K'){\n                result.append(\"\
    K\")\n            }else if(c == 'l' || c == 'L'){\n                result.append(\"\
    L\")\n            }else if(c == 'm' || c == 'M'){\n                result.append(\"\
    M\")\n            }else if(c == 'n' || c == 'N'){\n                result.append(\"\
    N\")\n            }else if(c == 'o' || c == 'O'){\n                result.append(\"\
    O\")\n            }else if(c == 'p' || c == 'P'){\n                result.append(\"\
    P\")\n            }else if(c == 'q' || c == 'Q'){\n                result.append(\"\
    Q\")\n            }else if(c == 'r' || c == 'R'){\n                result.append(\"\
    R\")\n            }else if(c == 's' || c == 'S'){\n                result.append(\"\
    S\")\n            }else if(c == 't' || c == 'T'){\n                result.append(\"\
    T\")\n            }else if(c == 'u' || c == 'U'){\n                result.append(\"\
    U\")\n            }else if(c == 'v' || c == 'V'){\n                result.append(\"\
    V\")\n            }else if(c == 'w' || c == 'W'){\n                result.append(\"\
    W\")\n            }else if(c == 'x' || c == 'X'){\n                result.append(\"\
    X\")\n            }else if(c == 'y' || c == 'Y'){\n                result.append(\"\
    Y\")\n            }else if(c == 'z' || c == 'Z'){\n                result.", " \
    \       val chars = s.toCharArray\n        val reversed = new mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length) {\n            if (chars(i) >= 'a' &&\
    \ chars(i) <= 'z') {\n                reversed.append((chars(i) - 'a').toUpperCase)\n\
    \            } else if (chars(i) >= 'A' && chars(i) <= 'Z') {\n              \
    \  reversed.append((chars(i) - 'A').toUpperCase)\n            } else {\n     \
    \           reversed.append(chars(i))\n            }\n        }\n        if (reversed.isEmpty)\
    \ {\n            s.reverse\n        } else {\n            reversed.mkString.reverse\n\
    \        }", "        val chars = mutable.ListBuffer[Char]()\n        for(i <-\
    \ 0 until s.length){\n            chars += s.charAt(i)\n        }\n        chars.toList.reverse.foldLeft(\"\
    \"){ (res, c) =>\n            if(c.isLetter) res += c.toUpperCase\n          \
    \  else res += c.toLowerCase\n        }", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c.isLetter){\n                val c = c.toUpperCase\n              \
    \  val c = c.toLower\n                result.append((c))\n            }\n    \
    \        else{\n                result.append(c)\n            }\n        }\n \
    \       result.toString", "        val chars = mutable.ListBuffer[Char]()\n  \
    \      for (i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toUpper\n        chars.reverse", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until s.length){\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z'){\n                val c = s.charAt(i).toChar\n\
    \                val cc = c.toUpperCase\n                val ccc = cc.toLowerCase\n\
    \                val cccc = ccc.toUpperCase\n                val ccccc = cccc.toLowerCase\n\
    \                val cccccc = ccccc.toUpperCase\n                val ccccccc =\
    \ cccccc.toLowerCase\n                val cccccccc =ccccccc.toUpperCase\n    \
    \            val cccccccc =ccccccc.toLowerCase\n                val cccccccc =ccccccc.toUpperCase\n\
    \                val cccccccc =ccccccc.toLowerCase\n                val cccccccc\
    \ =ccccccc.toUpperCase\n                val cccccccc =ccccccc.toLowerCase\n  \
    \              val cccccccc =ccccccc.toUpperCase\n                val cccccccc\
    \ =ccccccc.toLowerCase\n                val cccccccc =ccccccc.toUpperCase\n  \
    \              val cccccccc =ccccccc.toLowerCase\n                val cccccccc\
    \ =ccccccc.toUpperCase\n                val cccccccc =ccccccc.toLowerCase\n  \
    \              val cccccccc =ccccccc.toUpperCase\n                val cccccccc\
    \ =ccccccc.toLowerCase\n                val cccccccc =ccccccc.toUpperCase\n  \
    \              val cccccccc =ccccccc.toLowerCase\n                val cccccccc\
    \ =ccccccc.toUpperCase\n                val cccccccc =ccccccc.toLowerCase\n  \
    \              val cccccccc =ccccccc.toUpperCase\n                val cccccccc\
    \ =ccccccc.toLowerCase\n                val cccccccc =ccccccc.toUpperCase\n  \
    \              val cccccccc =ccccccc.toLowerCase\n                val cccccccc\
    \ =ccccccc.toUpperCase\n                val cccccccc =ccccccc.toLowerCase\n  \
    \              val cccccccc =ccccccc.toUpperCase\n                val cccccccc\
    \ =ccccccc.toLowerCase\n                val cccccccc =ccccccc.toUpperCase\n  \
    \              val cccccccc =ccccccc.toLowerCase\n                val cccccccc ",
  "        val result = s.toUpperCase\n        val reversed = result.map(c => if (c.isLetter)\
    \ c.toUpperCase(c) else c)\n        if (reversed.isEmpty) result\n        else\
    \ reversed.mkString", "        val result = new StringBuilder\n        for(i <-\
    \ 0 until s.length){\n            val c = s.charAt(i)\n            if(c.isLetter){\n\
    \                val c = c.toUpperCase\n                val c = c.toLower\n  \
    \              val c = c.toUpperCase\n                val c = c.toLower\n    \
    \            result.append((c))\n            }\n            else{\n          \
    \      result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else if (s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z')\n                chars += s.charAt(i).swapCase\n\
    \            else\n                chars += s.charAt(i)\n        chars.reverse",
  "        val chars = s.toCharArray\n        val reversed = chars.reverse\n     \
    \   val result = reversed.foldLeft(\"\")( (acc, c) => acc + (if (c.isLetter) c.toUpperCase()\
    \ else c.toLowerCase()) )\n        if (chars.isEmpty) result\n        else result.reverse",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length)\n  \
    \      {\n            val c = s.charAt(i)\n            if(c.isLetter)\n      \
    \      {\n                val l = c.toUpperCase\n                val u = c.toLowerCase\n\
    \                if(result.length == 0)\n                    result.append(u)\n\
    \                else\n                {\n                    if(result.length\
    \ == 1)\n                        result.append(l)\n                    else\n\
    \                    {\n                        val last = result.charAt(result.length-1)\n\
    \                        if(last.isLetter)\n                            result.append(u+last)\n\
    \                        else\n                            result.append(u+last+l)\n\
    \                    }\n                }\n            }\n            else\n \
    \               result.append(c)\n        }\n        result.toString", "     \
    \   val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            chars += s.charAt(i)\n        }\n        chars.toList.reverse.foldLeft(\"\
    \"){ (result, c) =>\n            if(c.isLetter){\n                result + c.toUpperCase\n\
    \            }else{\n                result + c\n            }\n        }", " \
    \       val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                chars\
    \ += s.charAt(i)\n            }\n        }\n        if(chars.isEmpty){\n     \
    \       return s\n        }\n        chars.reverse", "        val result = new\
    \ StringBuilder\n        val chars = s.toCharArray\n        val len = chars.length\n\
    \        val charsMap = mutable.HashMap[Char, Int]()\n        for (i <- 0 until\
    \ len) {\n            charsMap += chars(i) -> i\n        }\n        for (i <-\
    \ 0 until len) {\n            val c = chars(i)\n            if (charsMap.contains(c))\
    \ {\n                val index = charsMap(c)\n                val c = chars(index)\n\
    \                charsMap.remove(c)\n                charsMap += c -> index\n\
    \            }\n            result.append(c)\n        }\n        result.toString",
  "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ 'a' || c == 'A'){\n                result.append(c.toUpperCase)\n          \
    \  }else if(c == 'b' || c == 'B'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'c' || c == 'C'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'd' || c == 'D'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'e' || c == 'E'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'f' || c == 'F'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'g' || c == 'G'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'h' || c == 'H'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'i' || c == 'I'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'j' || c == 'J'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'k' || c == 'K'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'l' || c == 'L'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'm' || c == 'M'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'n' || c == 'N'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'o' || c == 'O'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'p' || c == 'P'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'q' || c == 'Q'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'r' || c == 'R'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 's' || c == 'S'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 't' || c == 'T'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'u' || c == 'U'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'v' || c == 'V'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'w' || c == 'W'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'x' || c == 'X'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'y' || c == 'Y'){\n                result.append(c.toUpperCase)\n\
    \            }else ", "        val result = new StringBuilder\n        for(i <-\
    \ 0 until s.length)\n        {\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n            {\n                result.append((s.charAt(i) - 'a').toString)\n\
    \            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\n\
    \            {\n                result.append((s.charAt(i) - 'A').toString)\n\
    \            }\n            else\n            {\n                result.append(s.charAt(i))\n\
    \            }\n        }\n        return result.toString", "        val result\
    \ = new StringBuilder\n        val chars = s.toCharArray\n        for(i <- 0 until\
    \ chars.length){\n            val c = chars(i)\n            if(c == 'a'){\n  \
    \              result.append(\"A\")\n            }else if(c == 'A'){\n       \
    \         result.append(\"a\")\n            }else if(c == 'b'){\n            \
    \    result.append(\"B\")\n            }else if(c == 'B'){\n                result.append(\"\
    b\")\n            }else if(c == 'c'){\n                result.append(\"C\")\n\
    \            }else if(c == 'C'){\n                result.append(\"c\")\n     \
    \       }else if(c == 'd'){\n                result.append(\"D\")\n          \
    \  }else if(c == 'D'){\n                result.append(\"d\")\n            }else\
    \ if(c == 'e'){\n                result.append(\"E\")\n            }else if(c\
    \ == 'E'){\n                result.append(\"e\")\n            }else if(c == 'f'){\n\
    \                result.append(\"F\")\n            }else if(c == 'F'){\n     \
    \           result.append(\"f\")\n            }else if(c == 'g'){\n          \
    \      result.append(\"G\")\n            }else if(c == 'G'){\n               \
    \ result.append(\"g\")\n            }else if(c == 'h'){\n                result.append(\"\
    H\")\n            }else if(c == 'H'){\n                result.append(\"h\")\n\
    \            }else if(c == 'i'){\n                result.append(\"I\")\n     \
    \       }else if(c == 'I'){\n                result.append(\"i\")\n          \
    \  }else if(c == 'j'){\n                result.append(\"J\")\n            }else\
    \ if(c == 'J'){\n                result.append(\"j\")\n            }else if(c\
    \ == 'k'){\n                result.append(\"K\")\n            }else if(c == 'K'){\n\
    \                result.append(\"k\")\n            }else if(c == 'l'){\n     \
    \           result.append(\"L\")\n            }else if(c == 'L'){\n          \
    \      result.append(\"l\")\n            }else if(c == 'm'){\n               \
    \ result.append(\"M\")\n            }else if(c == 'M'){\n                result.append(\"\
    m\")\n            }else if(c == 'n'){\n                result.append(\"N\")\n\
    \            }else if(c == 'N'){\n                result.append(\"n\")\n     \
    \       }else if(c == 'o'){\n                result.append(\"O\")\n          \
    \  }else if(c == 'O'){\n                result.append(\"o\")\n            }else\
    \ if(c == 'p'){\n                result.append(\"P\")\n            }else if(c\
    \ == 'P'){\n                result.append(\"p\")\n            }else if(c == 'q'){\n",
  "        val result = new StringBuilder\n        val chars = s.toCharArray\n   \
    \     for(i <- 0 until chars.length){\n            val c = chars(i)\n        \
    \    if(c == 'a' || c == 'A'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'b' || c == 'B'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'c' || c == 'C'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'd' || c == 'D'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'e' || c == 'E'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'f' || c == 'F'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'g' || c == 'G'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'h' || c == 'H'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'i' || c == 'I'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'j' || c == 'J'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'k' || c == 'K'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'l' || c == 'L'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'm' || c == 'M'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'n' || c == 'N'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'o' || c == 'O'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'p' || c == 'P'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n",
  "        val result = s.toUpperCase\n        val chars = result.toCharArray\n  \
    \      val reversed = chars.reverse\n        val newString = new StringBuilder\n\
    \        for (i <- 0 until reversed.length) {\n            if (chars(i) != reversed(i))\
    \ {\n                newString.append(chars(i))\n            } else {\n      \
    \          newString.append(reversed(i))\n            }\n        }\n        newString.toString",
  "        val chars = mutable.ListBuffer[Char]()\n        for (c <- s) {\n      \
    \      if (c.isLetter) chars += c.toUpperCase\n            else chars += c.toLowerCase\n\
    \        }\n        if (chars.isEmpty) s.reverse\n        else chars.reverse.mkString.reverse",
  "        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                result.append((s.charAt(i) - 'a').toString)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until s.length)\n \
    \           if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        result.toString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n \
    \           val c = s.charAt(i)\n            if(c == 'a'){\n                result.append(\"\
    A\")\n            }else if(c == 'A'){\n                result.append(\"a\")\n\
    \            }else if(c == 'b'){\n                result.append(\"B\")\n     \
    \       }else if(c == 'B'){\n                result.append(\"b\")\n          \
    \  }else if(c == 'c'){\n                result.append(\"C\")\n            }else\
    \ if(c == 'C'){\n                result.append(\"c\")\n            }else if(c\
    \ == 'd'){\n                result.append(\"D\")\n            }else if(c == 'D'){\n\
    \                result.append(\"d\")\n            }else if(c == 'e'){\n     \
    \           result.append(\"E\")\n            }else if(c == 'E'){\n          \
    \      result.append(\"e\")\n            }else if(c == 'f'){\n               \
    \ result.append(\"F\")\n            }else if(c == 'F'){\n                result.append(\"\
    f\")\n            }else if(c == 'g'){\n                result.append(\"G\")\n\
    \            }else if(c == 'G'){\n                result.append(\"g\")\n     \
    \       }else if(c == 'h'){\n                result.append(\"H\")\n          \
    \  }else if(c == 'H'){\n                result.append(\"h\")\n            }else\
    \ if(c == 'i'){\n                result.append(\"I\")\n            }else if(c\
    \ == 'I'){\n                result.append(\"i\")\n            }else if(c == 'j'){\n\
    \                result.append(\"J\")\n            }else if(c == 'J'){\n     \
    \           result.append(\"j\")\n            }else if(c == 'k'){\n          \
    \      result.append(\"K\")\n            }else if(c == 'K'){\n               \
    \ result.append(\"k\")\n            }else if(c == 'l'){\n                result.append(\"\
    L\")\n            }else if(c == 'L'){\n                result.append(\"l\")\n\
    \            }else if(c == 'm'){\n                result.append(\"M\")\n     \
    \       }else if(c == 'M'){\n                result.append(\"m\")\n          \
    \  }else if(c == 'n'){\n                result.append(\"N\")\n            }else\
    \ if(c == 'N'){\n                result.append(\"n\")\n            }else if(c\
    \ == 'o'){\n                result.append(\"O\")\n            }else if(c == 'O'){\n\
    \                result.append(\"o\")\n            }else if(c == 'p'){\n     \
    \           result.append(\"P\")\n            }else if(c == 'P'){\n          \
    \      result.append(\"p\")\n            }else if(c == 'q'){\n               \
    \ result.append(\"Q\")\n            }else if(c", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (c <- s) {\n            if (c.isLetter) {\n                chars\
    \ += c.toUpperCase\n            } else {\n                chars += c\n       \
    \     }\n        }\n        chars.reverse", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.reverse.foldLeft(\"\")(_ + _)", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toString)\n     \
    \       else\n                result.append(s.charAt(i))\n        return result.toString",
  "        val result = new StringBuilder\n        val chars = s.toCharArray\n   \
    \     val len = chars.length\n        val reversed = new mutable.ListBuffer[Char]()\n\
    \        val upperCase = new mutable.ListBuffer[Char]()\n        val lowerCase\
    \ = new mutable.ListBuffer[Char]()\n        for (i <- 0 until len) {\n       \
    \     val c = chars(i)\n            if (c.isLetter) {\n                if (c.toUpperCase\
    \ == c) {\n                    upperCase += c\n                } else {\n    \
    \                lowerCase += c\n                }\n            } else {\n   \
    \             reversed += c\n            }\n        }\n        if (upperCase.isEmpty)\
    \ {\n            upperCase = lowerCase\n        }\n        if (lowerCase.isEmpty)\
    \ {\n            lowerCase = reversed\n        }\n        upperCase.foreach {\
    \ c => result += c.toUpperCase }\n        lowerCase.foreach { c => result += c.toLowerCase\
    \ }\n        result.append(reversed.mkString)", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length)\n            if((s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z') || (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'))\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val result = s.toUpperCase\n        val reversed\
    \ = result.reverse\n        if (result.isEmpty) reversed\n        else reversed.replaceAll(\"\
    [^A-Z]\", \"\")", "        val chars = s.toCharArray\n        val len = chars.length\n\
    \        val result = new Array[Char](len)\n        var i = 0\n        while (i\
    \ < len) {\n            val c = chars(i)\n            if (c.isLetter) {\n    \
    \            val lower = c.toLower\n                val upper = c.toUpper\n  \
    \              if (lower == upper) {\n                    result(i) = lower\n\
    \                } else {\n                    result(i) = upper\n           \
    \     }\n            } else {\n                result(i) = c\n            }\n\
    \            i += 1\n        }\n        new String(result)", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i) -\
    \ 'a').toUpper + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                result.append((s.charAt(i) - 'a').toUpperCase)\n \
    \           }\n            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n\
    \                result.append((s.charAt(i) - 'A').toUpperCase)\n            }\n\
    \            else{\n                result.append(s.charAt(i))\n            }\n\
    \        }\n        return result.toString()", "        val strList = s.toList\n\
    \        val reversed = strList.foldLeft(\"\"){\n            case (acc, x) =>\
    \ acc + (if (x.isLetter) x.toUpperCase() else x.toLowerCase)\n        }\n    \
    \    if (strList.size == 0) reversed\n        else reversed.reverse", "      \
    \  val result = new mutable.StringBuilder\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        result.reverse", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                result.append((s.charAt(i) - 'a').toUpper + s.charAt(i))\n  \
    \          else\n                result.append(s.charAt(i))\n        return result.toString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n \
    \           val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n     \
    \           result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }else if(c == 'b' || c == 'B'){\n                result.append((s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase))\n            }else if(c == '#' || c == '@'){\n \
    \               result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase\
    \ + s.charAt(i)))\n            }else{\n                result.append(c)\n    \
    \        }\n        }\n        return result.toString", "        val result =\
    \ new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n          \
    \  if(i == 0 || s.charAt(i) != s.charAt(i-1))\n                result.append(s.charAt(i))\n\
    \            else\n                result.append(s.charAt(i).toUpper)\n      \
    \  result.toString", "        val chars = mutable.HashSet[Char]()\n        for(i\
    \ <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n       \
    \ chars.toList.sortWith(_ < _).reverse.mkString", "        val result = new StringBuilder\n\
    \        val chars = mutable.HashSet[Char]()\n        for (c <- s) {\n       \
    \     if (chars.contains(c)) {\n                result.append(c.toUpperCase)\n\
    \            } else {\n                result.append(c)\n            }\n     \
    \       chars += c\n        }\n        result.toString", "        val result =\
    \ new StringBuilder\n        val chars = mutable.HashSet[Char]()\n        for\
    \ (i <- 0 until s.length)\n            if (s.charAt(i).toLowerCase != s.charAt(i).toUpperCase\
    \ && !chars.contains(s.charAt(i)))\n                result.append(s.charAt(i))\n\
    \            else\n                chars += s.charAt(i)\n        result.reverse",
  "        val chars = mutable.HashSet[Char]()\n        for (c <- s) {\n         \
    \   if (c.isLetter) chars += c\n            else chars += c.toUpperCase\n    \
    \    }\n        if (chars.isEmpty) s.reverse\n        else chars.toList.foldLeft(\"\
    \")(_ + _.toUpperCase)", "        val chars = s.toCharArray\n        val reversed\
    \ = new mutable.ListBuffer[Char]()\n        for(i <- 0 until chars.length){\n\
    \            val c = chars(i)\n            if(c == 'a' || c == 'A'){\n       \
    \         reversed.add(c)\n            }else if(c == 'b' || c == 'B'){\n     \
    \           reversed.add(c)\n            }else if(c == 'c' || c == 'C'){\n   \
    \             reversed.add(c)\n            }else if(c == 'd' || c == 'D'){\n \
    \               reversed.add(c)\n            }else if(c == 'e' || c == 'E'){\n\
    \                reversed.add(c)\n            }else if(c == 'f' || c == 'F'){\n\
    \                reversed.add(c)\n            }else if(c == 'g' || c == 'G'){\n\
    \                reversed.add(c)\n            }else if(c == 'h' || c == 'H'){\n\
    \                reversed.add(c)\n            }else if(c == 'i' || c == 'I'){\n\
    \                reversed.add(c)\n            }else if(c == 'j' || c == 'J'){\n\
    \                reversed.add(c)\n            }else if(c == 'k' || c == 'K'){\n\
    \                reversed.add(c)\n            }else if(c == 'l' || c == 'L'){\n\
    \                reversed.add(c)\n            }else if(c == 'm' || c == 'M'){\n\
    \                reversed.add(c)\n            }else if(c == 'n' || c == 'N'){\n\
    \                reversed.add(c)\n            }else if(c == 'o' || c == 'O'){\n\
    \                reversed.add(c)\n            }else if(c == 'p' || c == 'P'){\n\
    \                reversed.add(c)\n            }else if(c == 'q' || c == 'Q'){\n\
    \                reversed.add(c)\n            }else if(c == 'r' || c == 'R'){\n\
    \                reversed.add(c)\n            }else if(c == 's' || c == 'S'){\n\
    \                reversed.add(c)\n            }else if(c == 't' || c == 'T'){\n\
    \                reversed.add(c)\n            }else if(c == 'u' || c == 'U'){\n\
    \                reversed.add(c)\n            }else if(c == 'v' || c == 'V'){\n\
    \                reversed.add(c)\n            }else if(c == 'w' || c == 'W'){\n\
    \                reversed.add(c)\n            }else if(c == 'x' || c == 'X'){\n\
    \                reversed.add(c)\n            }else if(c == 'y' || c == 'Y'){\n\
    \                reversed.add(c)", "        val chars = s.toCharArray\n      \
    \  val charsReversed = chars.reverse\n        val charsReversedString = charsReversed.mkString.reverse\n\
    \        charsReversedString.toUpperCase", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n        {\n            val c = s.charAt(i)\n\
    \            if(c == 'a' || c == 'A')\n            {\n                result.append(c.toUpperCase)\n\
    \            }\n            else\n            {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val result\
    \ = new StringBuilder\n        val len = s.length\n        var i = 0\n       \
    \ while (i < len) {\n            val c = s.charAt(i)\n            if (c.isLetter)\
    \ {\n                val upper = c.toUpperCase\n                val lower = c.toLowerCase\n\
    \                if (upper == lower) {\n                    result.append(upper)\n\
    \                } else {\n                    result.append(lower)\n        \
    \        }\n            } else {\n                result.append(c)\n         \
    \   }\n            i += 1\n        }\n        result.toString", "        val chars\
    \ = s.toCharArray\n        val result = new mutable.ListBuffer[String]()\n   \
    \     val len = chars.length\n        for (i <- 0 until len) {\n            val\
    \ c = chars(i)\n            if (c.isLetter) {\n                val upper = c.toUpperCase\n\
    \                val lower = c.toLowerCase\n                if (upper != lower)\
    \ {\n                    result += upper\n                } else {\n         \
    \           result += lower\n                }\n            } else {\n       \
    \         result += c\n            }\n        }\n        if (result.isEmpty) {\n\
    \            s.reverse\n        } else {\n            new String(result.toArray)\n\
    \        }", "        val chars = mutable.ListBuffer[Char]()\n        for(i <-\
    \ 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n\
    \                chars += s.charAt(i)\n            }\n        }\n        if(chars.isEmpty){\n\
    \            return s\n        }\n        chars.reverse.mkString", "        val\
    \ result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n  \
    \      for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      result += s.charAt(i)\n        chars.toSeq.reverse.foreach(c => result\
    \ += c.toUpperCase)\n        if(chars.size == 0)\n            result.reverse\n\
    \        else\n            result", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n        {\n            if(s.charAt(i) >=\
    \ 'a' && s.charAt(i) <= 'z')\n            {\n                result.append((s.charAt(i)\
    \ - 'a').toUpperCase)\n            }\n            else\n            {\n      \
    \          result.append((s.charAt(i) - 'a'))\n            }\n        }\n    \
    \    return result.toString", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (c <- s) {\n            if (c.isLetter) chars += c.toUpperCase\n\
    \            else chars += c.toLowerCase\n        }\n        if (chars.isEmpty)\
    \ s.reverse\n        else chars.reverse.mkString.reverse", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until s.length){\n            val c\
    \ = s.charAt(i)\n            if(c.isLetter){\n                val c = c.toUpperCase\n\
    \                val c = c.toLower\n                result += c\n            }else{\n\
    \                result += c\n            }\n        }\n        result.toString",
  "        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until s.length)\
    \ chars += s(i)\n        chars.toList.reverse.mkString", "        val result =\
    \ new StringBuilder(s.length)\n        for (i <- 0 until s.length)\n         \
    \   if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      val chars = mutable.Set[Char]()\n        for(i <- 0 until s.length)\n \
    \           chars += s.charAt(i)\n        chars.foreach {\n            case c\
    \ if c.isLetter => result.append(c.toUpperCase)\n            case c => result.append(c)\n\
    \        }\n        if(chars.isEmpty) result.reverse\n        else result.toString",
  "        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until s.length){\n\
    \            chars += s(i)\n        }\n        chars.toList.reverse.mkString",
  "        val chars = mutable.HashSet[Char]()\n        for (c <- s) {\n         \
    \   if (c.isLetter) chars += c\n            else chars += c.toUpperCase\n    \
    \    }\n        if (chars.isEmpty) s.reverse\n        else chars.toList.foldLeft(\"\
    \") { (s, c) => s + c.toUpperCase }", "        val chars = s.toCharArray\n   \
    \     val reversed = new mutable.ListBuffer[Char]()\n        for(i <- 0 until\
    \ chars.length){\n            val c = chars(i)\n            if(c.isLetter){\n\
    \                val upper = c.toUpperCase\n                val lower = c.toLowerCase\n\
    \                if(upper.isLetter && lower.isLetter){\n                    reversed.append(upper)\n\
    \                    reversed.append(lower)\n                }else if(upper.isLetter\
    \ && !lower.isLetter){\n                    reversed.append(upper)\n         \
    \       }else if(!upper.isLetter && lower.isLetter){\n                    reversed.append(lower)\n\
    \                }\n            }else{\n                reversed.append(c)\n \
    \           }\n        }\n        if(reversed.isEmpty){\n            s.reverse\n\
    \        }else{\n            reversed.mkString\n        }", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until s.length)\n            if (s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        result.toString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n \
    \           val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n     \
    \           result.append(\"A\")\n            }else if(c == 'b' || c == 'B'){\n\
    \                result.append(\"B\")\n            }else if(c == 'c' || c == 'C'){\n\
    \                result.append(\"C\")\n            }else if(c == 'd' || c == 'D'){\n\
    \                result.append(\"D\")\n            }else if(c == 'e' || c == 'E'){\n\
    \                result.append(\"E\")\n            }else if(c == 'f' || c == 'F'){\n\
    \                result.append(\"F\")\n            }else if(c == 'g' || c == 'G'){\n\
    \                result.append(\"G\")\n            }else if(c == 'h' || c == 'H'){\n\
    \                result.append(\"H\")\n            }else if(c == 'i' || c == 'I'){\n\
    \                result.append(\"I\")\n            }else if(c == 'j' || c == 'J'){\n\
    \                result.append(\"J\")\n            }else if(c == 'k' || c == 'K'){\n\
    \                result.append(\"K\")\n            }else if(c == 'l' || c == 'L'){\n\
    \                result.append(\"L\")\n            }else if(c == 'm' || c == 'M'){\n\
    \                result.append(\"M\")\n            }else if(c == 'n' || c == 'N'){\n\
    \                result.append(\"N\")\n            }else if(c == 'o' || c == 'O'){\n\
    \                result.append(\"O\")\n            }else if(c == 'p' || c == 'P'){\n\
    \                result.append(\"P\")\n            }else if(c == 'q' || c == 'Q'){\n\
    \                result.append(\"Q\")\n            }else if(c == 'r' || c == 'R'){\n\
    \                result.append(\"R\")\n            }else if(c == 's' || c == 'S'){\n\
    \                result.append(\"S\")\n            }else if(c == 't' || c == 'T'){\n\
    \                result.append(\"T\")\n            }else if(c == 'u' || c == 'U'){\n\
    \                result.append(\"U\")\n            }else if(c == 'v' || c == 'V'){\n\
    \                result.append(\"V\")\n            }else if(c == 'w' || c == 'W'){\n\
    \                result.append(\"W\")\n            }else if(c == 'x' || c == 'X'){\n\
    \                result.append(\"X\")\n            }else if(c == 'y' || c == 'Y'){\n\
    \                result.append(\"Y\")\n            }else if(c == 'z' || c == 'Z'){\n\
    \                result.", "        val chars = mutable.ListBuffer[Char]()\n \
    \       for (c <- s) {\n            if (c.isLetter) {\n                chars +=\
    \ c.toUpperCase\n            } else {\n                chars += c\n          \
    \  }\n        }\n        if (chars.isEmpty) {\n            return s\n        }\
    \ else {\n            chars.reverse\n        }", "        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toString)\n     \
    \       else\n                result.append((s.charAt(i) - 'A').toString)\n  \
    \      result.reverse", "        val result = new StringBuilder(s.length)\n  \
    \      for(i <- 0 until s.length){\n            val c = s.charAt(i)\n        \
    \    if(c == 'a'){\n                result.append(c.toUpperCase)\n           \
    \ }else if(c == 'A'){\n                result.append(c.toLowerCase)\n        \
    \    }else{\n                result.append(c)\n            }\n        }\n    \
    \    result.toString", "        val result = new StringBuilder\n        val chars\
    \ = mutable.HashSet[Char]()\n        for(c <- s) {\n            if(c == '@') {\n\
    \                chars += '@'\n            }\n            if(c == '#') {\n   \
    \             chars += '#'\n            }\n            if(c == '@' || c == '#')\
    \ {\n                chars += c\n            }\n        }\n        if(chars.isEmpty)\
    \ {\n            result.append(s)\n        } else {\n            for(c <- chars)\
    \ {\n                val index = s.indexOf(c)\n                if(index != -1)\
    \ {\n                    val newChar = s.charAt(index).toUpperCase + s.charAt(index).toLowerCase\n\
    \                    result.append(newChar)\n                }\n            }\n\
    \        }\n        result.toString", "        val chars = mutable.Set[Char]()\n\
    \        for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == 'a'){\n                result.append(\"A\")\n            }else\
    \ if(c == 'A'){\n                result.append(\"a\")\n            }else if(c\
    \ == 'b'){\n                result.append(\"B\")\n            }else if(c == 'B'){\n\
    \                result.append(\"b\")\n            }else if(c == 'c'){\n     \
    \           result.append(\"C\")\n            }else if(c == 'C'){\n          \
    \      result.append(\"c\")\n            }else if(c == 'd'){\n               \
    \ result.append(\"D\")\n            }else if(c == 'D'){\n                result.append(\"\
    d\")\n            }else if(c == 'e'){\n                result.append(\"E\")\n\
    \            }else if(c == 'E'){\n                result.append(\"e\")\n     \
    \       }else if(c == 'f'){\n                result.append(\"F\")\n          \
    \  }else if(c == 'F'){\n                result.append(\"f\")\n            }else\
    \ if(c == 'g'){\n                result.append(\"G\")\n            }else if(c\
    \ == 'G'){\n                result.append(\"g\")\n            }else if(c == 'h'){\n\
    \                result.append(\"H\")\n            }else if(c == 'H'){\n     \
    \           result.append(\"h\")\n            }else if(c == 'i'){\n          \
    \      result.append(\"I\")\n            }else if(c == 'I'){\n               \
    \ result.append(\"i\")\n            }else if(c == 'j'){\n                result.append(\"\
    J\")\n            }else if(c == 'J'){\n                result.append(\"j\")\n\
    \            }else if(c == 'k'){\n                result.append(\"K\")\n     \
    \       }else if(c == 'K'){\n                result.append(\"k\")\n          \
    \  }else if(c == 'l'){\n                result.append(\"L\")\n            }else\
    \ if(c == 'L'){\n                result.append(\"l\")\n            }else if(c\
    \ == 'm'){\n                result.append(\"M\")\n            }else if(c == 'M'){\n\
    \                result.append(\"m\")\n            }else if(c == 'n'){\n     \
    \           result.append(\"N\")\n            }else if(c == 'N'){\n          \
    \      result.append(\"n\")\n            }else if(c == 'o'){\n               \
    \ result.append(\"O\")\n            }else if(c == 'O'){\n                result.append(\"\
    o\")\n            }else if(c == 'p'){\n                result.append(\"P\")\n\
    \            }else if(c == 'P'){\n                result.append(\"p\")\n     \
    \       }else if(c == 'q'){\n                result.append(\"Q\")\n          \
    \  }else ", "        val chars = mutable.ArrayBuffer.empty[Char]\n        for\
    \ (i <- 0 until s.length)\n            if (s.charAt(i).toLowerCase == s.charAt(i).toUpperCase\
    \ || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase)\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i)\n   \
    \     chars.reverse", "        val result = new mutable.StringBuilder\n      \
    \  for (i <- 0 until s.length)\n            if (s(i).isLetter) result.append(s(i).swapCase)\n\
    \            else result.append(s(i))\n        result.toString", "        val\
    \ result = new StringBuilder\n        for(i <- 0 until s.length)\n           \
    \ if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        result.toString",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val chars = mutable.HashSet[Char]()\n        for(i\
    \ <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else\n                chars\
    \ += s.charAt(i).toUpper\n        chars.toSeq.reverse.mkString", "        val\
    \ result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n \
    \           if((s.charAt(i) >= 'a' && s.charAt(i) <= 'z') || (s.charAt(i) >= 'A'\
    \ && s.charAt(i) <= 'Z'))\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val result = new StringBuilder(s.length)\n      \
    \  for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toString)\n     \
    \       else\n                result.append(s.charAt(i))\n        return result.toString",
  "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toLower\n\
    \        chars.reverse", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                chars += s.charAt(i)\n            }\n            else\
    \ if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n                chars += s.charAt(i).toUpper\n\
    \            }\n            else{\n                chars += s.charAt(i)\n    \
    \        }\n        }\n        chars.reverse", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toUpper + s.charAt(i))\n\
    \            else\n                result.append(s.charAt(i))\n        result.toString",
  "        val chars = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n     \
    \           chars += s.charAt(i)\n            else if (s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z')\n                chars += s.charAt(i).toUpper\n            else\n  \
    \              chars += s.charAt(i)\n        chars.reverse", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until s.length){\n            val c\
    \ = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'b' || c == 'B'){\n                result.append(c.toLowerCase)\n\
    \            }else{\n                result.append(c)\n            }\n       \
    \ }\n        return result.toString", "        val result = s.toUpperCase\n  \
    \      val reversed = result.map(c => if (c.isLetter) c.toUpperCase(c) else c)\n\
    \        if (result.isEmpty) result\n        else reversed.mkString", "      \
    \  val result = new mutable.StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a'){\n                result.append(\"\
    A\")\n            }else if(c == 'A'){\n                result.append(\"a\")\n\
    \            }else if(c == 'b'){\n                result.append(\"B\")\n     \
    \       }else if(c == 'B'){\n                result.append(\"b\")\n          \
    \  }else if(c == 'c'){\n                result.append(\"C\")\n            }else\
    \ if(c == 'C'){\n                result.append(\"c\")\n            }else if(c\
    \ == 'd'){\n                result.append(\"D\")\n            }else if(c == 'D'){\n\
    \                result.append(\"d\")\n            }else if(c == 'e'){\n     \
    \           result.append(\"E\")\n            }else if(c == 'E'){\n          \
    \      result.append(\"e\")\n            }else if(c == 'f'){\n               \
    \ result.append(\"F\")\n            }else if(c == 'F'){\n                result.append(\"\
    f\")\n            }else if(c == 'g'){\n                result.append(\"G\")\n\
    \            }else if(c == 'G'){\n                result.append(\"g\")\n     \
    \       }else if(c == 'h'){\n                result.append(\"H\")\n          \
    \  }else if(c == 'H'){\n                result.append(\"h\")\n            }else\
    \ if(c == 'i'){\n                result.append(\"I\")\n            }else if(c\
    \ == 'I'){\n                result.append(\"i\")\n            }else if(c == 'j'){\n\
    \                result.append(\"J\")\n            }else if(c == 'J'){\n     \
    \           result.append(\"j\")\n            }else if(c == 'k'){\n          \
    \      result.append(\"K\")\n            }else if(c == 'K'){\n               \
    \ result.append(\"k\")\n            }else if(c == 'l'){\n                result.append(\"\
    L\")\n            }else if(c == 'L'){\n                result.append(\"l\")\n\
    \            }else if(c == 'm'){\n                result.append(\"M\")\n     \
    \       }else if(c == 'M'){\n                result.append(\"m\")\n          \
    \  }else if(c == 'n'){\n                result.append(\"N\")\n            }else\
    \ if(c == 'N'){\n                result.append(\"n\")\n            }else if(c\
    \ == 'o'){\n                result.append(\"O\")\n            }else if(c == 'O'){\n\
    \                result.append(\"o\")\n            }else if(c == 'p'){\n     \
    \           result.append(\"P\")\n            }else if(c == 'P'){\n          \
    \      result.append(\"p\")\n            }else if(c == 'q'){\n               \
    \ result.append(\"Q\")\n            }else ", "        val result = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == 'a' || c == 'A'){\n                result.append(\"A\")\n     \
    \       }else if(c == 'b' || c == 'B'){\n                result.append(\"B\")\n\
    \            }else if(c == 'c' || c == 'C'){\n                result.append(\"\
    C\")\n            }else if(c == 'd' || c == 'D'){\n                result.append(\"\
    D\")\n            }else if(c == 'e' || c == 'E'){\n                result.append(\"\
    E\")\n            }else if(c == 'f' || c == 'F'){\n                result.append(\"\
    F\")\n            }else if(c == 'g' || c == 'G'){\n                result.append(\"\
    G\")\n            }else if(c == 'h' || c == 'H'){\n                result.append(\"\
    H\")\n            }else if(c == 'i' || c == 'I'){\n                result.append(\"\
    I\")\n            }else if(c == 'j' || c == 'J'){\n                result.append(\"\
    J\")\n            }else if(c == 'k' || c == 'K'){\n                result.append(\"\
    K\")\n            }else if(c == 'l' || c == 'L'){\n                result.append(\"\
    L\")\n            }else if(c == 'm' || c == 'M'){\n                result.append(\"\
    M\")\n            }else if(c == 'n' || c == 'N'){\n                result.append(\"\
    N\")\n            }else if(c == 'o' || c == 'O'){\n                result.append(\"\
    O\")\n            }else if(c == 'p' || c == 'P'){\n                result.append(\"\
    P\")\n            }else if(c == 'q' || c == 'Q'){\n                result.append(\"\
    Q\")\n            }else if(c == 'r' || c == 'R'){\n                result.append(\"\
    R\")\n            }else if(c == 's' || c == 'S'){\n                result.append(\"\
    S\")\n            }else if(c == 't' || c == 'T'){\n                result.append(\"\
    T\")\n            }else if(c == 'u' || c == 'U'){\n                result.append(\"\
    U\")\n            }else if(c == 'v' || c == 'V'){\n                result.append(\"\
    V\")\n            }else if(c == 'w' || c == 'W'){\n                result.append(\"\
    W\")\n            }else if(c == 'x' || c == 'X'){\n                result.append(\"\
    X\")\n            }else if(c == 'y' || c == 'Y'){\n                result.append(\"\
    Y\")\n            }else if(c == 'z' || c == '", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == 'a' || c == 'A'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'b' || c == 'B'){\n                result.append(c.toLowerCase)\n\
    \            }else{\n                result.append(c)\n            }\n       \
    \ }\n        return result.toString", "        val result = new StringBuilder\n\
    \        val chars = s.toCharArray\n        for(i <- 0 until chars.length) {\n\
    \            val c = chars(i)\n            if(c == 'a' || c == 'A') {\n      \
    \          result.append((chars(i).toUpperCase + chars(i).toLowerCase))\n    \
    \        } else {\n                result.append(c)\n            }\n        }\n\
    \        return result.toString", "        val result = s.toUpperCase\n      \
    \  val reversed = result.reverse\n        val letters = result.filter(_ >= 'a'\
    \ && _ <= 'z')\n        if (letters.isEmpty) {\n            reversed\n       \
    \ } else {\n            val newLetters = letters.map(_ - 'a').toList\n       \
    \     val newReversed = reversed.zip(newLetters).map { case (letter, newLetter)\
    \ => newLetter + letter }\n            newReversed.mkString\n        }", "   \
    \     val result = new StringBuilder\n        for(i <- 0 until s.length){\n  \
    \          val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n      \
    \          result.append(c.toUpperCase)\n            }else if(c == 'b' || c ==\
    \ 'B'){\n                result.append(c.toLowerCase)\n            }else if(c\
    \ == 'c' || c == 'C'){\n                result.append(c.toUpperCase)\n       \
    \     }else if(c == 'd' || c == 'D'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'e' || c == 'E'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'f' || c == 'F'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'g' || c == 'G'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'h' || c == 'H'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'i' || c == 'I'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'j' || c == 'J'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'k' || c == 'K'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'l' || c == 'L'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'm' || c == 'M'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'n' || c == 'N'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'o' || c == 'O'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'p' || c == 'P'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'q' || c == 'Q'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'r' || c == 'R'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 's' || c == 'S'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 't' || c == 'T'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'u' || c == 'U'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'v' || c == 'V'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'w' || c == 'W'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'x' || c == 'X'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'y' || c == 'Y'){\n                result.append(c.toUpperCase)\n\
    \            }else ", "        val chars = mutable.ArrayBuffer.empty[Char]\n \
    \       for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toUpper\n        chars.reverse", "        val chars\
    \ = s.toCharArray\n        val result = new StringBuilder\n        val charsCount\
    \ = chars.length\n        val charsReversed = chars.reverse\n        val charsReversedCount\
    \ = charsReversed.length\n        var i = 0\n        var j = 0\n        while\
    \ (i < charsCount) {\n            if (chars(i) >= 'a' && chars(i) <= 'z') {\n\
    \                charsReversed(j) = chars(i)\n                j++\n          \
    \  } else if (chars(i) >= 'A' && chars(i) <= 'Z') {\n                charsReversed(j)\
    \ = chars(i)\n                j++\n            } else {\n                result.append(chars(i))\n\
    \                i++\n            }\n        }\n        result.toString", "  \
    \      val chars = s.toCharArray\n        val result = new StringBuilder\n   \
    \     for (i <- 0 until chars.length) {\n            val c = chars(i)\n      \
    \      if (c.isLetter) {\n                val lower = c.toLower\n            \
    \    val upper = c.toUpper\n                if (lower == upper) {\n          \
    \          result.append(lower)\n                } else {\n                  \
    \  result.append(upper)\n                }\n            } else {\n           \
    \     result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = mutable.Set[Char]()\n        for(i <- 0 until s.length) chars\
    \ += s(i)\n        chars.toList.sortWith(_ < _).reverse.mkString", "        val\
    \ result = new StringBuilder\n        for(i <- 0 until s.length){\n          \
    \  val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n              \
    \  result.append(c.toUpperCase)\n            }else if(c == 'b' || c == 'B'){\n\
    \                result.append(c.toLowerCase)\n            }else if(c == 'c' ||\
    \ c == 'C'){\n                result.append(c.toUpperCase)\n            }else\
    \ if(c == 'd' || c == 'D'){\n                result.append(c.toLowerCase)\n  \
    \          }else if(c == 'e' || c == 'E'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'f' || c == 'F'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'g' || c == 'G'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'h' || c == 'H'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'i' || c == 'I'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'j' || c == 'J'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'k' || c == 'K'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'l' || c == 'L'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'm' || c == 'M'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'n' || c == 'N'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'o' || c == 'O'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'p' || c == 'P'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'q' || c == 'Q'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'r' || c == 'R'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 's' || c == 'S'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 't' || c == 'T'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'u' || c == 'U'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'v' || c == 'V'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'w' || c == 'W'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'x' || c == 'X'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'y' || c == 'Y'){\n                result.append(c.toUpperCase)\n\
    \            }else ", "        val chars = mutable.HashSet[Char]()\n        for(i\
    \ <- 0 until s.length)\n            if(s.charAt(i).toLowerCase != s.charAt(i).toUpperCase\
    \ && chars.contains(s.charAt(i)))\n                chars.remove(s.charAt(i))\n\
    \            else\n                chars.add(s.charAt(i))\n        chars.toList.map(_.toUpperCase).mkString(\"\
    \")", "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == c.toUpperCase || c == c.toLowerCase\
    \ ){\n                result.append(c.toUpperCase)\n            }else{\n     \
    \           result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toLower\n\
    \        chars.reverse", "        val strArray = s.toCharArray\n        val strArrayReversed\
    \ = strArray.reverse\n        strArrayReversed.foldLeft(\"\"){ (result, c) =>\n\
    \            val isLetter = c.toString.isLetter\n            if(isLetter){\n \
    \               result + c.toUpperCase\n            }else{\n                result\
    \ + c.toLowerCase\n            }\n        }", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.reverse.foldLeft(\"\
    \")(_ + _)", "        val chars = mutable.ListBuffer[Char]()\n        for (i <-\
    \ 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else if (s.charAt(i) >= 'A'\
    \ && s.charAt(i) <= 'Z')\n                chars += s.charAt(i).toUpper\n     \
    \       else\n                chars += s.charAt(i)\n        chars.reverse", " \
    \       val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\
    \ chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString",
  "        val result = s.toUpperCase\n        val chars = result.toCharArray\n  \
    \      val reversed = new mutable.ListBuffer[Char]()\n        chars.foreach(c\
    \ => {\n            val isLetter = c.isLetter\n            val isUpper = c.toUpper\
    \ == c\n            val isLower = c.toLower == c\n            if (isLetter) {\n\
    \                if (isUpper) {\n                    reversed.add(c)\n       \
    \         } else {\n                    reversed.add(c.toLower)\n            \
    \    }\n            } else {\n                reversed.add(c)\n            }\n\
    \        })\n        reversed.toString.toUpperCase", "        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toList.sortWith(_ < _).reverse.mkString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i).toLowerCase ==\
    \ s.charAt(i).toUpperCase || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase){\n\
    \                result.append((s.charAt(i).toLowerCase).reverse)\n          \
    \  }else{\n                result.append(s.charAt(i))\n            }\n       \
    \ }\n        return result.toString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toString)\n     \
    \       else\n                result.append(s.charAt(i))\n        return result.toString",
  "        val chars = s.toCharArray\n        val len = chars.length\n        val\
    \ result = new Array[Char](len)\n        var i = 0\n        var j = 0\n      \
    \  var k = 0\n        var temp = 0\n        var flag = false\n        var flag2\
    \ = false\n        var flag3 = false\n        var flag4 = false\n        var flag5\
    \ = false\n        var flag6 = false\n        var flag7 = false\n        var flag8\
    \ = false\n        var flag9 = false\n        var flag10 = false\n        var\
    \ flag11 = false\n        var flag12 = false\n        var flag13 = false\n   \
    \     var flag14 = false\n        var flag15 = false\n        var flag16 = false\n\
    \        var flag17 = false\n        var flag18 = false\n        var flag19 =\
    \ false\n        var flag20 = false\n        var flag21 = false\n        var flag22\
    \ = false\n        var flag23 = false\n        var flag24 = false\n        var\
    \ flag25 = false\n        var flag26 = false\n        var flag27 = false\n   \
    \     var flag28 = false\n        var flag29 = false\n        var flag30 = false\n\
    \        var flag31 = false\n        var flag32 = false\n        var flag33 =\
    \ false\n        var flag34 = false\n        var flag35 = false\n        var flag36\
    \ = false\n        var flag37 = false\n        var flag38 = false\n        var\
    \ flag39 = false\n        var flag40 = false\n        var flag41 = false\n   \
    \     var flag42 = false\n        var flag43 = false\n        var flag44 = false\n\
    \        var flag45 = false\n        var flag46 = false\n        var flag47 =\
    \ false\n        var flag48 = false\n        var flag49 = false\n        var flag50\
    \ = false\n        var flag51 = false\n        var flag52 = false\n        var\
    \ flag53 = false\n        var flag54 = false\n        var flag55 = false\n   \
    \     var flag56 = false\n        var flag57 = false\n        var flag58 = false\n\
    \        var flag59 = false\n        var flag60 = false\n        var flag61 =\
    \ false\n        var flag62 = false\n        var flag63 = false\n        var flag64\
    \ = false\n        var flag65 = false\n        var flag66 = false\n        var\
    \ flag67 = false\n        var flag68 = false\n        var flag69 = false\n   \
    \     var flag70 = false\n        var flag71 = false\n        var flag72 = false\n\
    \        var flag73 = false\n        var flag74 = false\n        var flag75 =\
    \ false\n        var flag76 = false\n        var flag77 = false\n        var flag78\
    \ = false\n        var flag79 = false\n        var flag80 = false\n        var\
    \ flag81 = false\n        var flag82 = false\n        var flag83 = false\n   \
    \     var flag84 = false\n        var flag85 = false\n        var flag86 = false\n\
    \        var flag87 = false\n        var flag88 = false\n        var flag89 =\
    \ false\n        var flag90 = false\n        var flag9", "        val result =\
    \ s.toUpperCase\n        val reversed = result.reverse\n        val letters =\
    \ result.filter(_.isLetter)\n        if(letters.isEmpty) reversed\n        else\
    \ letters.foldLeft(reversed)((acc, letter) => acc + letter)", "        val chars\
    \ = mutable.Set[Char]()\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n                chars += s.charAt(i)\n      \
    \      else\n                chars += s.charAt(i).toUpper\n        chars.toList.foldLeft(\"\
    \")(_ + _)", "        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i\
    \ <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else\n                chars\
    \ += s.charAt(i).toUpper\n        chars.reverse", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == 'a' || c == 'A'){\n                result.append(\"A\")\n     \
    \       }else if(c == 'b' || c == 'B'){\n                result.append(\"B\")\n\
    \            }else if(c == 'c' || c == 'C'){\n                result.append(\"\
    C\")\n            }else if(c == 'd' || c == 'D'){\n                result.append(\"\
    D\")\n            }else if(c == 'e' || c == 'E'){\n                result.append(\"\
    E\")\n            }else if(c == 'f' || c == 'F'){\n                result.append(\"\
    F\")\n            }else if(c == 'g' || c == 'G'){\n                result.append(\"\
    G\")\n            }else if(c == 'h' || c == 'H'){\n                result.append(\"\
    H\")\n            }else if(c == 'i' || c == 'I'){\n                result.append(\"\
    I\")\n            }else if(c == 'j' || c == 'J'){\n                result.append(\"\
    J\")\n            }else if(c == 'k' || c == 'K'){\n                result.append(\"\
    K\")\n            }else if(c == 'l' || c == 'L'){\n                result.append(\"\
    L\")\n            }else if(c == 'm' || c == 'M'){\n                result.append(\"\
    M\")\n            }else if(c == 'n' || c == 'N'){\n                result.append(\"\
    N\")\n            }else if(c == 'o' || c == 'O'){\n                result.append(\"\
    O\")\n            }else if(c == 'p' || c == 'P'){\n                result.append(\"\
    P\")\n            }else if(c == 'q' || c == 'Q'){\n                result.append(\"\
    Q\")\n            }else if(c == 'r' || c == 'R'){\n                result.append(\"\
    R\")\n            }else if(c == 's' || c == 'S'){\n                result.append(\"\
    S\")\n            }else if(c == 't' || c == 'T'){\n                result.append(\"\
    T\")\n            }else if(c == 'u' || c == 'U'){\n                result.append(\"\
    U\")\n            }else if(c == 'v' || c == 'V'){\n                result.append(\"\
    V\")\n            }else if(c == 'w' || c == 'W'){\n                result.append(\"\
    W\")\n            }else if(c == 'x' || c == 'X'){\n                result.append(\"\
    X\")\n            }else if(c == 'y' || c == 'Y'){\n                result.append(\"\
    Y\")\n            }else if(c == 'z' || c == 'Z'){\n                result.", " \
    \       val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append(c.toUpperCase)\n            }else if(c == 'b' || c\
    \ == 'B'){\n                result.append(c.toLowerCase)\n            }else{\n\
    \                result.append(c)\n            }\n        }\n        return result.toString"]
stop_tokens:
- "\n    }\n"
