name: HumanEval_59_largest_prime_factor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  \    // >>> largestPrimeFactor((13195l))\n    // (29l)\n    // >>> largestPrimeFactor((2048l))\n\
  \    // (2l)\n    def largestPrimeFactor(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
  \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
  \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
  \ == (29l));\n    }\n\n}\n"
completions: ["        val factors = mutable.Set[Long]()\n        val primes = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Boolean]()\n        val isPrimeIter = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter2 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter3 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 1)\n        val isPrimeIter4 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 2)\n        val isPrimeIter5 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 3)\n        val isPrimeIter6 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 4)\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 5)\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 6)\n        val isPrimeIter9 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 7)\n        val isPrimeIter10 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 8)\n        val isPrimeIter11 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 9)\n        val isPrimeIter12 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 10)\n        val isPrimeIter13 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 11)\n        val isPrimeIter14 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 12)\n        val isPrimeIter15 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 13)\n        val isPrimeIter16 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 14)\n        val isPrimeIter", "    \
    \    val factors = mutable.ListBuffer[Long]()\n        val i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n > 1) {\n            factors += n\n        }\n        factors.max", " \
    \       val factors = mutable.HashSet[Long]()\n        val i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  factors.max", "        val factors = mutable.HashSet[Long]()\n        for(i\
    \ <- 2 to n by 2)\n            factors += i\n        factors.max", "        val\
    \ factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n  \
    \      val isPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n     \
    \   val isPrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n  \
    \      val isPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeFactor = mutable.Array",
  "        val factors = mutable.HashSet[Long]()\n        val isPrime = mutable.HashSet[Boolean]()\n\
    \        val isPrimeIter = Iterator.iterate(n)(_ => true).takeWhile(_ < n).iterator\n\
    \        val isPrimeIter2 = Iterator.iterate(n)(_ => false).takeWhile(_ < n).iterator\n\
    \        val isPrimeIter3 = Iterator.iterate(n)(_ => true).takeWhile(_ < n).iterator\n\
    \        val isPrimeIter4 = Iterator.iterate(n)(_ => false).takeWhile(_ < n).iterator\n\
    \        val isPrimeIter5 = Iterator.iterate(n)(_ => true).takeWhile(_ < n).iterator\n\
    \        val isPrimeIter6 = Iterator.iterate(n)(_ => false).takeWhile(_ < n).iterator\n\
    \        val isPrimeIter7 = Iterator.iterate(n)(_ => true).takeWhile(_ < n).iterator\n\
    \        val isPrimeIter8 = Iterator.iterate(n)(_ => false).takeWhile(_ < n).iterator\n\
    \        val isPrimeIter9 = Iterator.iterate(n)(_ => true).takeWhile(_ < n).iterator\n\
    \        val isPrimeIter10 = Iterator.iterate(n)(_ => false).takeWhile(_ < n).iterator\n\
    \        val isPrimeIter11 = Iterator.iterate(n)(_ => true).takeWhile(_ < n).iterator\n\
    \        val isPrimeIter12 = Iterator.iterate(n)(_ => false).takeWhile(_ < n).iterator\n\
    \        val isPrimeIter13 = Iterator.iterate(n)(_ => true).takeWhile(_ < n).iterator\n\
    \        val isPrimeIter14 = Iterator.iterate(n)(_ => false).takeWhile(_ < n).iterator\n\
    \        val isPrimeIter15 = Iterator.iterate(n)(_ => true).takeWhile(_ < n).iterator\n\
    \        val isPrimeIter16 = Iterator.iterate(n)(_ => false).takeWhile(_ < n).iterator\n\
    \        val isPrimeIter17 = Iterator.iterate(n)(_ => true).takeWhile(_ < n).iterator\n\
    \        val isPrimeIter18 = Iterator.iterate(n)(_ => false).takeWhile(_ < n).iterator\n\
    \        val isPrimeIter19 = Iterator.iterate(n)(_ => true).takeWhile(_ < n).iterator\n\
    \        val ", "        val factors = mutable.ArrayBuffer.empty[Long]\n     \
    \   for(i <- 2 to Math.sqrt(n)) {\n            if(n % i == 0) {\n            \
    \    factors += i\n                n /= i\n            }\n        }\n        if(n\
    \ > 1) {\n            factors += n\n        }\n        factors.max", "       \
    \ val factors = mutable.Set[Long]()\n        var largestPrimeFactor = Long.MaxValue\n\
    \        for (i <- 2 to n by 2)\n            if (n % i == 0)\n               \
    \ factors += i\n        for (i <- factors) {\n            if (i <= largestPrimeFactor)\n\
    \                largestPrimeFactor = i\n        }\n        largestPrimeFactor",
  "        val factors = mutable.ListBuffer[Long]()\n        val i = 2l\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  factors.max", "        var maxFactor = BigInt(1)\n        var maxFactorPrime\
    \ = BigInt(1)\n        var maxFactorPrimePrime = BigInt(1)\n        var maxFactorPrimePrimePrime\
    \ = BigInt(1)\n        var maxFactorPrimePrimePrimePrime = BigInt(1)\n       \
    \ var maxFactorPrimePrimePrimePrimePrime = BigInt(1)\n        var maxFactorPrimePrimePrimePrimePrimePrime\
    \ = BigInt(1)\n        var maxFactorPrimePrimePrimePrimePrimePrimePrime = BigInt(1)\n\
    \        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = BigInt(1)\n \
    \       var maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = BigInt(1)\n  \
    \      var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = BigInt(1)\n\
    \        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = BigInt(1)\n\
    \        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = BigInt(1)\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = BigInt(1)\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = BigInt(1)\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = BigInt(1)\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = BigInt(1)\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = BigInt(1)\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = BigInt(1)\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = BigInt(1)\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePri", " \
    \       val factors = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        var i = 2\n        while(i <= n && isPrime.size < 2) {\n            val\
    \ isPrime = n.toInt % i == 0\n            factors += i\n            i += isPrime\n\
    \        }\n        factors.max", "        val factors = mutable.Set[Long]()\n\
    \        val maxFactor = math.max(n / 2, 1)\n        for(i <- 2 to maxFactor)\
    \ {\n            if(n%i==0) {\n                factors += i\n                n\
    \ /= i\n            }\n        }\n        factors.last", "        val factors\
    \ = mutable.Set[Long]()\n        for(i <- 2 to n by 2)\n            if(n % i ==\
    \ 0)\n                factors += i\n        factors.max", "        val factors\
    \ = mutable.HashSet[Long]()\n        var factor = 2\n        while (n != 1) {\n\
    \            if (n % factor == 0) {\n                factors += factor\n     \
    \           n /= factor\n            } else {\n                factor += 1\n \
    \           }\n        }\n        factors.last", "        val factors = mutable.HashSet[Long]()\n\
    \        var maxFactor = 0\n        var maxFactorIndex = 0\n        for(i <- 2\
    \ to n by 2){\n            if(n%i==0){\n                factors.add(i)\n     \
    \           if(i>maxFactor){\n                    maxFactor = i\n            \
    \        maxFactorIndex = factors.indexOf(i)\n                }\n            }\n\
    \        }\n        if(maxFactorIndex==0){\n            factors.add(n)\n     \
    \   }\n        maxFactor", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 2 to n by 2)\n            if(n % i == 0)\n                factors\
    \ += i\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(n)(_ => true).takeWhile(_ > 1).dropWhile(_ < n).iterator\n\
    \        var factor = 1\n        var isPrime = true\n        isPrimeIter.foreach(x\
    \ => {\n            if (x % factor == 0) {\n                factors += factor\n\
    \                isPrime += false\n            }\n            factor += 1\n  \
    \      })\n        if (isPrime.length == 0) {\n            return n\n        }\n\
    \        val largestPrimeFactor = factors.max\n        factors -= largestPrimeFactor\n\
    \        isPrime -= true\n        largestPrimeFactor", "        val primes = mutable.ArrayBuffer(2l)\
    \ ++ (2l to n by 2l)\n        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        var factor = 2l\n        while (primes.contains(factor)) {\n        \
    \    factors += factor\n            factor += 2l\n        }\n        factors.max",
  "        val factors = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter = Iterator.continually(isPrime)\n        val isPrimeIterIter\
    \ = Iterator.continually(isPrimeIter)\n        val isPrimeIterIterIter = Iterator.continually(isPrimeIterIter)\n\
    \        val isPrimeIterIterIterIter = Iterator.continually(isPrimeIterIterIter)\n\
    \        val isPrimeIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIterIter =\
    \ Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIter", "        val\
    \ primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        var factor = 2\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                primes += factor\n                isPrime += true\n\
    \            }\n            factor += 1\n        }\n        primes.max", "   \
    \     val primes = mutable.ArrayBuffer(2)\n        var i = 2\n        while (i\
    \ < n) {\n            if (n % i == 0) {\n                primes += i\n       \
    \         n /= i\n            }\n            i += 1\n        }\n        if (n\
    \ > 1) {\n            primes += n\n        }\n        primes.max", "        var\
    \ maxFactor = 0\n        var maxFactorIndex = 0\n        var isPrime = true\n\
    \        var isPrimeIndex = 0\n        var isPrime2 = true\n        var isPrime2Index\
    \ = 0\n        var isPrime3 = true\n        var isPrime3Index = 0\n        var\
    \ isPrime4 = true\n        var isPrime4Index = 0\n        var isPrime5 = true\n\
    \        var isPrime5Index = 0\n        var isPrime6 = true\n        var isPrime6Index\
    \ = 0\n        var isPrime7 = true\n        var isPrime7Index = 0\n        var\
    \ isPrime8 = true\n        var isPrime8Index = 0\n        var isPrime9 = true\n\
    \        var isPrime9Index = 0\n        var isPrime10 = true\n        var isPrime10Index\
    \ = 0\n        var isPrime11 = true\n        var isPrime11Index = 0\n        var\
    \ isPrime12 = true\n        var isPrime12Index = 0\n        var isPrime13 = true\n\
    \        var isPrime13Index = 0\n        var isPrime14 = true\n        var isPrime14Index\
    \ = 0\n        var isPrime15 = true\n        var isPrime15Index = 0\n        var\
    \ isPrime16 = true\n        var isPrime16Index = 0\n        var isPrime17 = true\n\
    \        var isPrime17Index = 0\n        var isPrime18 = true\n        var isPrime18Index\
    \ = 0\n        var isPrime19 = true\n        var isPrime19Index = 0\n        var\
    \ isPrime20 = true\n        var isPrime20Index = 0\n        var isPrime21 = true\n\
    \        var isPrime21Index = 0\n        var isPrime22 = true\n        var isPrime22Index\
    \ = 0\n        var isPrime23 = true\n        var isPrime23Index = 0\n        var\
    \ isPrime24 = true\n        var isPrime24Index = 0\n        var isPrime25 = true\n\
    \        var isPrime25Index = 0\n        var isPrime26 = true\n        var isPrime26Index\
    \ = 0\n        var isPrime27 = true\n        var isPrime27Index = 0\n        var\
    \ isPrime28 = true\n        var isPrime28Index = 0\n        var isPrime29 = true\n\
    \        var isPrime29Index = 0\n        var isPrime30 = true\n        var isPrime30Index\
    \ = 0\n        var isPrime31 = true\n        var isPrime31Index = 0\n        var\
    \ isPrime32 = true\n        var isPrime32Index = 0\n        var isPrime33 = true\n\
    \        var isPrime33Index = 0\n        var isPrime34 = true", "        val primes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        var i = 2\n\
    \        while (i <= n) {\n            val isPrime = n.isPrime\n            if\
    \ (isPrime) {\n                primes += i\n                factors += i\n   \
    \             isPrime += false\n            }\n            i += 1\n        }\n\
    \        val largestPrime = primes.max\n        val largestFactor = factors.max\n\
    \        val largestPrimeFactor = if (largestPrime == 0) largestFactor else largestPrime\
    \ * largestFactor\n        largestPrimeFactor", "        val factors = mutable.Set[Long]()\n\
    \        val i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        var maxFactor = Long.MinValue\n   \
    \     var maxFactorPrime = Long.MinValue\n        var maxFactorPrimePrime = Long.MinValue\n\
    \        var maxFactorPrimePrimePrime = Long.MinValue\n        var maxFactorPrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrime = Long.MinValue\n\
    \        var maxFactorPrimePrimePrimePrimePrimePrime = Long.MinValue\n       \
    \ var maxFactorPrimePrimePrimePrimePrimePrimePrime = Long.MinValue\n        var\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = Long.MinValue\n        var\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = Long.MinValue\n        var\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = Long.MinValue\n   \
    \     var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = Long.MinValue\n\
    \        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime",
  "        val factors = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_\
    \ % _ == 0).iterator\n        val isPrimeIter2 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ > 1).filter(_ % _ != 0).iterator\n        while(isPrimeIter.hasNext && isPrimeIter2.hasNext)\
    \ {\n            val p = isPrimeIter.next()\n            val q = isPrimeIter2.next()\n\
    \            if(p * q > n) break\n            factors += p\n            factors\
    \ += q\n            isPrime += true\n            isPrime += false\n        }\n\
    \        factors.max", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        var factor = 2\n        while(factor <= n) {\n            primes += factor\n\
    \            factor += 2\n        }\n        primes.max", "        val factors\
    \ = mutable.ListBuffer[Long]()\n        for(i <- 2 to n by 2){\n            if(n%i==0){\n\
    \                factors += i\n            }\n        }\n        factors.max",
  "        val primes = mutable.Set[Long]()\n        val factors = mutable.Set[Long]()\n\
    \        val largestPrime = mutable.Set[Long]()\n        val largestFactor = mutable.Set[Long]()\n\
    \        val primeFactors = mutable.Set[Long]()\n        val largestPrimeFactor\
    \ = mutable.Set[Long]()\n        val largestPrimeFactors = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCount = mutable.Set[Long]()\n        val largestPrimeFactorsCount2\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCount3 = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCount4 = mutable.Set[Long]()\n        val largestPrimeFactorsCount5\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCount6 = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCount7 = mutable.Set[Long]()\n        val largestPrimeFactorsCount8\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCount9 = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCount10 = mutable.Set[Long]()\n        val largestPrimeFactorsCount11\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCount12 = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCount13 = mutable.Set[Long]()\n        val largestPrimeFactorsCount14\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCount15 = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCount16 = mutable.Set[Long]()\n        val largestPrimeFactorsCount17\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCount18 = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCount19 = mutable.Set[Long]()\n        val largestPrimeFactorsCount20\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCount21 = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCount22 = mutable.Set[Long]()\n        val largestPrimeFactorsCount",
  "        val primes = mutable.ArrayBuffer.empty[Long]\n        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val largestPrime = mutable.ArrayBuffer.empty[Long]\n        val largestFactor\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val largestPrimeFactor = mutable.ArrayBuffer.empty[Long]\n        val\
    \ largestPrimeFactors = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorsIndex", " \
    \       val factors = mutable.ListBuffer[Long]()\n        var i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n != 1) {\n            factors += n\n        }\n        factors.max", " \
    \       val factors = mutable.HashSet[Long]()\n        val i = 2l\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n > 1) {\n            factors += n\n        }\n        factors.max", " \
    \       val factors = mutable.ListBuffer[Long]()\n        val i = 2l\n       \
    \ while (i <= n / i) {\n            if (n % i == 0) {\n                factors\
    \ += i\n                n /= i\n            }\n            i += 1\n        }\n\
    \        if (n > 1) {\n            factors += n\n        }\n        factors.max",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_ % _ == 0).dropWhile(_\
    \ < n).takeWhile(_ > 1).filter(_ % _ == 0).dropWhile(_ < n).takeWhile(_ > 1).filter(_\
    \ % _ == 0).dropWhile(_ < n).takeWhile(_ > 1).filter(_ % _ == 0).dropWhile(_ <\
    \ n).takeWhile(_ > 1).filter(_ % _ == 0).dropWhile(_ < n).takeWhile(_ > 1).filter(_\
    \ % _ == 0).dropWhile(_ < n).takeWhile(_ > 1).filter(_ % _ == 0).dropWhile(_ <\
    \ n).takeWhile(_ > 1).filter(_ % _ == 0).dropWhile(_ < n).takeWhile(_ > 1).filter(_\
    \ % _ == 0).dropWhile(_ < n).takeWhile(_ > 1).filter(_ % _ == 0).dropWhile(_ <\
    \ n).takeWhile(_ > 1).filter(_ % _ == 0).dropWhile(_ < n).takeWhile(_ > 1).filter(_\
    \ % _ == 0).dropWhile(_ < n).takeWhile(_ > 1).filter(_ % _ == 0).dropWhile(_ <\
    \ n).takeWhile(_ > 1).filter(_ % _ == 0).dropWhile(_ < n).takeWhile(_ > 1).filter(_\
    \ % _ == 0).dropWhile(_ < n).takeWhile(_ > 1).filter(_ % _ == 0).dropWhile(_ <\
    \ n).takeWhile(_ > 1).filter(_ % _ == 0).dropWhile(_ < n).takeWhile(_ > 1).filter(_\
    \ % _ == 0).dropWhile(_ < n).takeWhile(_ > 1).filter(_ % _ == 0).dropWhile(_ <\
    \ n).takeWhile(_ > 1).filter(_ % _ == 0).dropWhile(_ < n).takeWhile(_ > 1).filter(_\
    \ % _ == 0).dropWhile(_ < n).takeWhile(_ > 1).filter(_ % _ == 0).dropWhile(_ <\
    \ n).takeWhile(_ > 1).filter(_ % _ == 0).dropWhile(_ < n).takeWhile(_ > 1).filter(_\
    \ % _ == 0).dropWhile(_ < n).takeWhile(_ > 1).filter(_ % _ == 0).dropWhile(_ <\
    \ n).takeWhile(_ > 1).filter(_ % _ == 0).dropWhile(_ < n).takeWhile(_ > 1).filter(_\
    \ % _ == 0).drop", "        val factors = mutable.ListBuffer[Long]()\n       \
    \ for (i <- 2 to n/2) {\n            if (n % i == 0) {\n                factors\
    \ += i\n            }\n        }\n        factors.max", "        val factors =\
    \ mutable.ArrayBuffer.empty[Long]\n        val i = 2\n        while (i <= n /\
    \ i) {\n            if (n % i == 0) {\n                factors += i\n        \
    \        n /= i\n            }\n            i += 1\n        }\n        if (n !=\
    \ 1) {\n            factors += n\n        }\n        factors.max", "        val\
    \ factors = mutable.Set[Long]()\n        val primes = mutable.Set[Long]()\n  \
    \      val isPrime = mutable.Set[Boolean]()\n        val isPrimeIter = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter2 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter3 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 1)\n        val isPrimeIter4 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 2)\n        val isPrimeIter5 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 3)\n        val isPrimeIter6 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 4)\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 5)\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 6)\n        val isPrimeIter9 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 7)\n        val isPrimeIter10 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 8)\n        val isPrimeIter11 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 9)\n        val isPrimeIter12 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 10)\n        val isPrimeIter13 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 11)\n        val isPrimeIter14 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 12)\n        val isPrimeIter15 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 13)\n        val isPrimeIter16 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 14)\n        val isPrimeIter", "    \
    \    val factors = mutable.Set[Long]()\n        val i = 2\n        while (i <=\
    \ n / i) {\n            if (n % i == 0) {\n                factors += i\n    \
    \            n /= i\n            }\n            i += 1\n        }\n        if\
    \ (n > 1) {\n            factors += n\n        }\n        factors.max", "    \
    \    val primes = mutable.ArrayBuffer(2l) \n        val factors = mutable.ArrayBuffer(2l)\n\
    \        var i = 2l\n        while(i < n) {\n            val isPrime = primes.contains(i)\n\
    \            if(!isPrime) {\n                primes += i\n                while(i\
    \ < n && primes.contains(i)) {\n                    factors += i\n           \
    \         i += 1\n                }\n            }\n            i += 1\n     \
    \   }\n        factors.max", "        val factors = mutable.Set[Long]()\n    \
    \    val isPrime = mutable.Set[Boolean]()\n        for (i <- 2 to n by 2)\n  \
    \          if (n % i == 0)\n                factors += i\n            else\n \
    \               isPrime += false\n        val largestPrime = factors.max\n   \
    \     val isPrimeIndex = isPrime.indexOf(true)\n        if (isPrimeIndex != -1)\n\
    \            largestPrime\n        else\n            largestPrimeFactor(n / largestPrime)",
  "        val factors = mutable.ListBuffer[Long]()\n        val i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n    \
    \    val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                primes += i\n             \
    \   isPrime += true\n            }\n            i += 1\n        }\n        val\
    \ largestPrime = primes.max\n        val largestPrimeIndex = factors.indexOf(largestPrime)\n\
    \        val largestPrimeFactor = factors(largestPrimeIndex)\n        val isPrimeIndex\
    \ = primes.indexOf(largestPrime)\n        val isPrime = isPrimeIndex(isPrimeIndex)\n\
    \        if (isPrime) {\n            largestPrimeFactor\n        } else {\n  \
    \          largestPrimeFactor\n        }", "        var maxFactor = 0\n      \
    \  var maxFactorIndex = 0\n        var isPrime = true\n        var isPrimeIndex\
    \ = 0\n        var isPrimeFactor = false\n        var isPrimeFactorIndex = 0\n\
    \        var isPrimeFactor2 = false\n        var isPrimeFactor2Index = 0\n   \
    \     var isPrimeFactor3 = false\n        var isPrimeFactor3Index = 0\n      \
    \  var isPrimeFactor4 = false\n        var isPrimeFactor4Index = 0\n        var\
    \ isPrimeFactor5 = false\n        var isPrimeFactor5Index = 0\n        var isPrimeFactor6\
    \ = false\n        var isPrimeFactor6Index = 0\n        var isPrimeFactor7 = false\n\
    \        var isPrimeFactor7Index = 0\n        var isPrimeFactor8 = false\n   \
    \     var isPrimeFactor8Index = 0\n        var isPrimeFactor9 = false\n      \
    \  var isPrimeFactor9Index = 0\n        var isPrimeFactor10 = false\n        var\
    \ isPrimeFactor10Index = 0\n        var isPrimeFactor11 = false\n        var isPrimeFactor11Index\
    \ = 0\n        var isPrimeFactor12 = false\n        var isPrimeFactor12Index =\
    \ 0\n        var isPrimeFactor13 = false\n        var isPrimeFactor13Index = 0\n\
    \        var isPrimeFactor14 = false\n        var isPrimeFactor14Index = 0\n \
    \       var isPrimeFactor15 = false\n        var isPrimeFactor15Index = 0\n  \
    \      var isPrimeFactor16 = false\n        var isPrimeFactor16Index = 0\n   \
    \     var isPrimeFactor17 = false\n        var isPrimeFactor17Index = 0\n    \
    \    var isPrimeFactor18 = false\n        var isPrimeFactor18Index = 0\n     \
    \   var isPrimeFactor19 = false\n        var isPrimeFactor19Index = 0\n      \
    \  var isPrimeFactor20 = false\n        var isPrimeFactor20Index = 0\n       \
    \ var isPrimeFactor21 = false\n        var isPrimeFactor21Index = 0\n        var\
    \ isPrimeFactor22 = false\n        var isPrimeFactor22Index = 0\n        var isPrimeFactor23\
    \ = false\n        var isPrimeFactor23Index = 0\n        var isPrimeFactor24 =\
    \ false\n        var isPrimeFactor24Index = 0\n        var isPrimeFactor25 = false\n\
    \        var isPrimeFactor25Index = 0\n        var isPrimeFactor26 = false\n \
    \       var isPrimeFactor26Index = 0\n        var isPrimeFactor27 = false\n  \
    \      var isPrimeFactor27Index = 0\n        var isPrimeFactor28 = false\n   \
    \     var isPrimeFactor28Index = 0\n        var isPrimeFactor29 = false\n    \
    \    var isPrimeFactor", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 2 to n by 2){\n            val test = i * i\n            while(test\
    \ < n){\n                if(n % test == 0){\n                    factors += test\n\
    \                    n /= test\n                }\n                test += i\n\
    \            }\n        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n       \
    \ val isPrimePrimeFactors = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimeFactor =\
    \ mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimeFactors = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n   \
    \     val isPrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePri", "        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n  \
    \      val isPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n     \
    \   val isPrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n  \
    \      val isPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePri", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxFactor = 0\n        var maxFactorPrime = 0\n        var primeFactor\
    \ = 1\n        for(i <- 2 to n){\n            primeFactor = 1\n            for(j\
    \ <- 2 to i){\n                if(i % j == 0){\n                    primeFactor\
    \ *= j\n                    primes += j\n                }\n            }\n  \
    \          if(primeFactor > maxFactor){\n                maxFactor = primeFactor\n\
    \                maxFactorPrime = primes.last\n            }\n        }\n    \
    \    maxFactor", "        val factors = mutable.ArrayBuffer.empty[Long]\n    \
    \    val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(2l)(_ + 2l).takeWhile(_ <= n).filter(_\
    \ % _ == 0)\n        val isPrimeIter2 = Iterator.iterate(2l)(_ + 2l).takeWhile(_\
    \ <= n).filter(_ % _ != 0)\n        val isPrimeIter3 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter4 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter5 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter6 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter7 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter9 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter10 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter11 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter12 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter13 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter14 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter15 = Iterator.iterate(2l)(_\
    \ + 2l).take", "        val factors = mutable.HashSet[Long]()\n        val primes\
    \ = mutable.HashSet[Long]()\n        val isPrime = mutable.HashSet[Boolean]()\n\
    \        val isPrimeIter = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ == 0).iterator\n        val isPrimeIter2 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ == 1).iterator\n        val isPrimeIter3 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 2).iterator\n        val isPrimeIter4\
    \ = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ == 3).iterator\n\
    \        val isPrimeIter5 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ == 4).iterator\n        val isPrimeIter6 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ == 5).iterator\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 6).iterator\n        val isPrimeIter8\
    \ = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ == 7).iterator\n\
    \        val isPrimeIter9 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ == 8).iterator\n        val isPrimeIter10 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ == 9).iterator\n        val isPrimeIter11 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 10).iterator\n        val isPrimeIter12\
    \ = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ == 11).iterator\n\
    \        val isPrimeIter13 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ == 12).iterator\n        val isPrimeIter14 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ == 13).iterator\n        val isPrimeIter15 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 14).iterator\n        val isPrimeIter16\
    \ = Iterator.iterate(n)(_ + ", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 2 to n by 2){\n            if(n%i == 0){\n                factors\
    \ += i\n                n /= i\n            }\n        }\n        factors.max",
  "        val primes = mutable.ArrayBuffer.empty[Long]\n        val i = 2\n     \
    \   while (i <= n) {\n            if (n % i == 0) {\n                primes +=\
    \ i\n                n /= i\n            }\n            i += 1\n        }\n  \
    \      primes.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n \
    \       val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        for (i <- 2\
    \ to n by 2) {\n            if (n % i == 0) {\n                factors += i\n\
    \                isPrime += false\n            }\n        }\n        val largestPrimeFactor\
    \ = factors.max\n        val isPrimeIndex = factors.indexOf(largestPrimeFactor)\n\
    \        if (isPrime(isPrimeIndex)) {\n            largestPrimeFactor\n      \
    \  } else {\n            largestPrimeFactor\n        }", "        val primes =\
    \ mutable.ArrayBuffer(2l)\n        val primeFactors = mutable.ArrayBuffer(2l)\n\
    \        val isPrime = mutable.ArrayBuffer(false)\n        val isPrimeFactor =\
    \ mutable.ArrayBuffer(false)\n        val isPrimeFactor2 = mutable.ArrayBuffer(false)\n\
    \        val isPrimeFactor3 = mutable.ArrayBuffer(false)\n        val isPrimeFactor4\
    \ = mutable.ArrayBuffer(false)\n        val isPrimeFactor5 = mutable.ArrayBuffer(false)\n\
    \        val isPrimeFactor6 = mutable.ArrayBuffer(false)\n        val isPrimeFactor7\
    \ = mutable.ArrayBuffer(false)\n        val isPrimeFactor8 = mutable.ArrayBuffer(false)\n\
    \        val isPrimeFactor9 = mutable.ArrayBuffer(false)\n        val isPrimeFactor10\
    \ = mutable.ArrayBuffer(false)\n        val isPrimeFactor11 = mutable.ArrayBuffer(false)\n\
    \        val isPrimeFactor12 = mutable.ArrayBuffer(false)\n        val isPrimeFactor13\
    \ = mutable.ArrayBuffer(false)\n        val isPrimeFactor14 = mutable.ArrayBuffer(false)\n\
    \        val isPrimeFactor15 = mutable.ArrayBuffer(false)\n        val isPrimeFactor16\
    \ = mutable.ArrayBuffer(false)\n        val isPrimeFactor17 = mutable.ArrayBuffer(false)\n\
    \        val isPrimeFactor18 = mutable.ArrayBuffer(false)\n        val isPrimeFactor19\
    \ = mutable.ArrayBuffer(false)\n        val isPrimeFactor20 = mutable.ArrayBuffer(false)\n\
    \        val isPrimeFactor21 = mutable.ArrayBuffer(false)\n        val isPrimeFactor22\
    \ = mutable.ArrayBuffer(false)\n        val isPrimeFactor23 = mutable.ArrayBuffer(false)\n\
    \        val isPrimeFactor24 = mutable.ArrayBuffer(false)\n        val isPrimeFactor25\
    \ = mutable.ArrayBuffer(false)\n        val isPrimeFactor26 = mutable.ArrayBuffer(false)\n\
    \        val isPrimeFactor27 = mutable.ArrayBuffer(false)\n        val isPrimeFactor28\
    \ = mutable.ArrayBuffer(false)\n        val isPrimeFactor29 = mutable.ArrayBuffer(false)\n\
    \        val isPrimeFactor30 = mutable.ArrayBuffer(false)\n        val isPrimeFactor31\
    \ = mutable.ArrayBuffer(false)\n        val isPrimeFactor32 = mutable.ArrayBuffer(false)\n\
    \        val isPrimeFactor33 = ", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val factors = mutable.Set[Long]()\n\
    \        val i = 2\n        while(i <= n/i) {\n            if(n%i == 0) {\n  \
    \              factors += i\n                n /= i\n            }\n         \
    \   i += 1\n        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter2\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter3 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter4 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter5\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter6 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter7 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter8\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter9 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter10 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter11\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter12 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter13 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter14\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter15 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter16 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter17\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter18 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter19 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter20\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter21 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter22 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter23\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter24 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter25 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter26\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter27 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter28 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter29",
  "        val factors = mutable.ListBuffer[Long]()\n        for(i <- 2 to n by 2)\n\
    \            if(n%i == 0)\n                factors += i\n        factors.max",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        var i = 2\n\
    \        while (i <= n) {\n            if (n % i == 0) {\n                factors\
    \ += i\n                primes += i\n                isPrime += true\n       \
    \     }\n            i += 1\n        }\n        val largestPrime = primes.max\n\
    \        val largestPrimeFactor = factors.max\n        val largestPrimeIsPrime\
    \ = isPrime.max\n        (largestPrime, largestPrimeFactor, largestPrimeIsPrime)",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                primes += i\n            }\n\
    \            i += 1\n        }\n        val largestPrime = primes.max\n      \
    \  factors.max", "        val primes = mutable.Set[Long]()\n        val factors\
    \ = mutable.Set[Long]()\n        val largestPrime = Long.MaxValue\n        val\
    \ largestFactor = Long.MaxValue\n        for (i <- 2 to n) {\n            if (n\
    \ % i == 0) {\n                primes.add(i)\n                factors.add(i)\n\
    \            }\n        }\n        for (prime <- primes) {\n            val factor\
    \ = (n / prime).toInt\n            if (factor > largestFactor) {\n           \
    \     largestFactor = factor\n                largestPrime = prime\n         \
    \   }\n        }\n        largestPrime", "        val primes = mutable.ArrayBuffer(2l)\
    \ ++ (2l to n by 2l) filter (_ % _ == 0)\n        primes.max", "        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factor = 2\n        while(factor\
    \ <= n){\n            factors += factor\n            factor += 2\n        }\n\
    \        factors.max", "        val primes = mutable.ArrayBuffer(2l)\n       \
    \ var factor = 2l\n        while (factor <= n) {\n            if (n % factor ==\
    \ 0) {\n                primes += factor\n                n /= factor\n      \
    \      }\n            else {\n                factor += 1\n            }\n   \
    \     }\n        primes.last", "        val primes = mutable.ArrayBuffer(2l)\n\
    \        val factors = mutable.ArrayBuffer(2l)\n        val largestPrime = mutable.ArrayBuffer(2l)\n\
    \        val largestPrimeFactor = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount\
    \ = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n\
    \        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount\
    \ = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n\
    \        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount\
    \ = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n\
    \        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount\
    \ = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n\
    \        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount\
    \ = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n\
    \        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount\
    \ = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n\
    \        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount\
    \ = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n\
    \        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount\
    \ = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n\
    \        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount\
    \ = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n\
    \        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount\
    \ = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n\
    \        val largestPrimeFactorCount = mutable.ArrayBuffer(2l)\n        val largestPrimeFactorCount\
    \ = mutable.Array", "        val factors = mutable.ListBuffer[Long]()\n      \
    \  var i = 2\n        while (i <= n / i) {\n            if (n % i == 0) {\n  \
    \              factors += i\n                n /= i\n            }\n         \
    \   i += 1\n        }\n        if (n != 1) {\n            factors += n\n     \
    \   }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n != 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        factors += 2\n        while(n > 1) {\n            val nextFactor = n\
    \ % factors.last\n            factors += nextFactor\n            n /= nextFactor\n\
    \        }\n        factors.last", "        val primes = mutable.ArrayBuffer(2l)\n\
    \        var i = 2l\n        while (i < n) {\n            if (n % i == 0) {\n\
    \                primes += i\n                n /= i\n            }\n        \
    \    i += 1\n        }\n        if (n > 1) {\n            primes += n\n      \
    \  }\n        primes.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n != 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val factors = mutable.HashSet[Long]()\n\
    \        var largestPrimeFactor = 0\n        for(i <- 2 to n by 2){\n        \
    \    if(n%i == 0){\n                factors += i\n                largestPrimeFactor\
    \ = i\n            }\n        }\n        largestPrimeFactor", "        val factors\
    \ = mutable.HashSet[Long]()\n        val primes = mutable.HashSet[Long]()\n  \
    \      val primeFactors = mutable.HashMap[Long, Long]()\n        val isPrime =\
    \ mutable.HashMap[Long, Boolean]()\n        var maxFactor = 0\n        val isPrimeIter\
    \ = Iterator.continually(isPrime(n % _))\n        val isPrimeIterIter = Iterator.continually(isPrimeIter.next)\n\
    \        val isPrimeIterIterIter = Iterator.continually(isPrimeIterIter.next)\n\
    \        val isPrimeIterIterIterIter = Iterator.continually(isPrimeIterIterIter.next)\n\
    \        val isPrimeIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIter.next)\n\
    \        val isPrimeIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIter.next)\n\
    \        val isPrimeIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIter.next)\n\
    \        val isPrimeIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIter.next)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIter.next)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIter.next)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIter.next)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIter.next)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIter.next)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.continually(isPrimeIterIterIterIterIterIterIterIterIterIterIter.next)\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter", " \
    \       val factors = mutable.ArrayBuffer.empty[Long]\n        var maxFactor =\
    \ 0\n        var maxFactorIndex = 0\n        for(i <- 2 to n){\n            val\
    \ factor = (n%i)\n            if(factor != 0){\n                factors += factor\n\
    \                if(factor > maxFactor){\n                    maxFactor = factor\n\
    \                    maxFactorIndex = i\n                }\n            }\n  \
    \      }\n        factors.last", "        val factors = mutable.HashSet[Long]()\n\
    \        var largestPrimeFactor = 0\n        var currentPrime = 1\n        var\
    \ currentFactor = 1\n        while (n > 1) {\n            factors += currentPrime\n\
    \            currentPrime += 1\n            n /= currentPrime\n        }\n   \
    \     factors.foreach { factor =>\n            if (factor > largestPrimeFactor)\
    \ {\n                largestPrimeFactor = factor\n            }\n        }\n \
    \       largestPrimeFactor", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimePri",
  "        val factors = mutable.ListBuffer[Long]()\n        for (i <- 2 to n by 2)\n\
    \            if (n % i == 0)\n                factors += i\n        factors.max",
  "        val primes = mutable.ArrayBuffer(2l)\n        val i = 2l\n        while\
    \ (i < n) {\n            if (n % i == 0) {\n                primes += i\n    \
    \            n /= i\n            }\n            i += 1\n        }\n        primes.last",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        var i = 2\n    \
    \    while(i <= n/i) {\n            if(n%i == 0) {\n                factors +=\
    \ i\n                n /= i\n            }\n            i += 1\n        }\n  \
    \      if(n > 1) {\n            factors += n\n        }\n        factors.max",
  "        val factors = mutable.HashSet[Long]()\n        val i = 2\n        while(i\
    \ <= sqrt(n)) {\n            if(n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if(n > 1) {\n            factors += n\n        }\n        factors.max", " \
    \       val factors = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        var i = 2\n        while (i <= n / 2) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                isPrime += false\n        \
    \    }\n            else {\n                isPrime += true\n            }\n \
    \           i += 1\n        }\n        val largestPrimeFactor = factors.max\n\
    \        val isPrime = factors.toList.map(_.toBoolean).max\n        if (isPrime)\
    \ {\n            largestPrimeFactor\n        }\n        else {\n            largestPrimeFactor\n\
    \        }", "        val factors = mutable.ListBuffer[Long]()\n        var i\
    \ = 2\n        while (i <= n / i) {\n            if (n % i == 0) {\n         \
    \       factors += i\n                n /= i\n            }\n            i +=\
    \ 1\n        }\n        if (n > 1) {\n            factors += n\n        }\n  \
    \      factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ == 0).iterator\n\
    \        val isPrimeIter2 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ != 0).iterator\n        val isPrimeIter3 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ == 0).takeWhile(_ % _ != 0).iterator\n        val isPrimeIter4\
    \ = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ != 0).takeWhile(_\
    \ % _ == 0).iterator\n        val isPrimeIter5 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ == 0).takeWhile(_ % _ != 0).takeWhile(_ % _ == 0).iterator\n\
    \        val isPrimeIter6 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ != 0).takeWhile(_ % _ == 0).takeWhile(_ % _ != 0).iterator\n        val\
    \ isPrimeIter7 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ !=\
    \ 0).takeWhile(_ % _ == 0).takeWhile(_ % _ != 0).takeWhile(_ % _ == 0).iterator\n\
    \        val isPrimeIter8 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ != 0).takeWhile(_ % _ == 0).takeWhile(_ % _ != 0).takeWhile(_ % _ == 0).takeWhile(_\
    \ % _ != 0).iterator\n        val isPrimeIter9 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ != 0).takeWhile(_ % _ == 0).takeWhile(_ % _ != 0).takeWhile(_\
    \ % _ == 0).takeWhile(_ % _ != 0).takeWhile(_ % _ == 0).iterator\n        val\
    \ isPrimeIter10 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ !=\
    \ 0).takeWhile(_ % _ == 0).takeWhile(_ % _ != 0).takeWhile(_ % _ == 0).takeWhile(_\
    \ % _ != 0).takeWhile(_ % _ == 0).takeWhile(_ % _ != 0).iterator\n        val\
    \ isPrimeIter11 = Iterator.iterate(n)(_ + 2).", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        var factor = 2\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                factors += factor\n                n /= factor\n  \
    \          }\n            else {\n                factor += 1\n            }\n\
    \        }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        for(i <- 2 to Math.sqrt(n))\
    \ {\n            if(n % i == 0) {\n                factors += i\n            \
    \    isPrime += false\n            }\n            else {\n                isPrime\
    \ += true\n            }\n        }\n        val largestPrimeFactor = factors.max\n\
    \        if(isPrime.contains(false)) {\n            largestPrimeFactor\n     \
    \   } else {\n            largestPrimeFactor * largestPrimeFactor\n        }",
  "        val factors = mutable.HashSet[Long]()\n        val primes = mutable.HashSet[Long]()\n\
    \        val primeFactors = mutable.HashMap[Long, Long]()\n        val isPrime\
    \ = mutable.HashMap[Long, Boolean]()\n        val isPrimeFactor = mutable.HashMap[Long,\
    \ Boolean]()\n        val isPrimePrime = mutable.HashMap[Long, Boolean]()\n  \
    \      val isPrimePrimeFactor = mutable.HashMap[Long, Boolean]()\n        val\
    \ isPrimePrimePrime = mutable.HashMap[Long, Boolean]()\n        val isPrimePrimePrimeFactor\
    \ = mutable.HashMap[Long, Boolean]()\n        val isPrimePrimePrimeFactor = mutable.HashMap[Long,\
    \ Boolean]()\n        val isPrimePrimePrimePrime = mutable.HashMap[Long, Boolean]()\n\
    \        val isPrimePrimePrimePrimeFactor = mutable.HashMap[Long, Boolean]()\n\
    \        val isPrimePrimePrimePrimePrime = mutable.HashMap[Long, Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimeFactor = mutable.HashMap[Long, Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimeFactor = mutable.HashMap[Long, Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeFactor = mutable.HashMap[Long,\
    \ Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrimePrimeFactor = mutable.HashMap[Long,\
    \ Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrimePrimeFactor = mutable.HashMap[Long,\
    \ Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.HashMap[Long, Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.HashMap[Long, Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.HashMap[Long, Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = mut", "        val factors = mutable.Set[Long]()\n        var factor = 2\n\
    \        while (n >= factor) {\n            if (n % factor == 0) {\n         \
    \       factors += factor\n                n /= factor\n            }\n      \
    \      else {\n                factor += 1\n            }\n        }\n       \
    \ factors.last", "        val factors = mutable.Set[Long]()\n        val i = 2\n\
    \        while (i <= n / i) {\n            if (n % i == 0) {\n               \
    \ factors += i\n                n /= i\n            }\n            i += 1\n  \
    \      }\n        if (n != 1) {\n            factors += n\n        }\n       \
    \ factors.max", "        val primes = mutable.ArrayBuffer.empty[Long]\n      \
    \  val primeFactors = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        var i = 2\n        while (i <= n / 2) {\n            if (n % i == 0)\
    \ {\n                primes += i\n                primeFactors += i\n        \
    \        isPrime += true\n            }\n            i += 1\n        }\n     \
    \   val largestPrime = primes.max\n        val largestPrimeFactor = primeFactors.max\n\
    \        val largestPrimeIsPrime = isPrime.max\n        if (largestPrimeIsPrime)\
    \ {\n            largestPrimeFactor\n        } else {\n            largestPrimeFactor\
    \ * largestPrime\n        }", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 2 to n by 2){\n            if(n%i == 0){\n                factors\
    \ += i\n                n /= i\n            }\n        }\n        factors.max",
  "        val factors = mutable.HashSet[Long]()\n        for(i <- 2 to n by 2)\n\
    \            if(n % i == 0)\n                factors.add(i)\n        factors.max",
  "        var maxFactor = Long.MinValue\n        var maxFactorPrime = Long.MinValue\n\
    \        var maxFactorPrimePrime = Long.MinValue\n        var maxFactorPrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrime = Long.MinValue\n\
    \        var maxFactorPrimePrimePrimePrimePrime = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrime =\
    \ Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime",
  "        val primes = mutable.ArrayBuffer(2l) ++ (2l to n.toInt)\n        var largestPrime\
    \ = 0l\n        var largestPrimeFactor = 0l\n        var primeFactor = 0l\n  \
    \      var primeFactor2 = 0l\n        var primeFactor3 = 0l\n        var primeFactor4\
    \ = 0l\n        var primeFactor5 = 0l\n        var primeFactor6 = 0l\n       \
    \ var primeFactor7 = 0l\n        var primeFactor8 = 0l\n        var primeFactor9\
    \ = 0l\n        var primeFactor10 = 0l\n        var primeFactor11 = 0l\n     \
    \   var primeFactor12 = 0l\n        var primeFactor13 = 0l\n        var primeFactor14\
    \ = 0l\n        var primeFactor15 = 0l\n        var primeFactor16 = 0l\n     \
    \   var primeFactor17 = 0l\n        var primeFactor18 = 0l\n        var primeFactor19\
    \ = 0l\n        var primeFactor20 = 0l\n        var primeFactor21 = 0l\n     \
    \   var primeFactor22 = 0l\n        var primeFactor23 = 0l\n        var primeFactor24\
    \ = 0l\n        var primeFactor25 = 0l\n        var primeFactor26 = 0l\n     \
    \   var primeFactor27 = 0l\n        var primeFactor28 = 0l\n        var primeFactor29\
    \ = 0l\n        var primeFactor30 = 0l\n        var primeFactor31 = 0l\n     \
    \   var primeFactor32 = 0l\n        var primeFactor33 = 0l\n        var primeFactor34\
    \ = 0l\n        var primeFactor35 = 0l\n        var primeFactor36 = 0l\n     \
    \   var primeFactor37 = 0l\n        var primeFactor38 = 0l\n        var primeFactor39\
    \ = 0l\n        var primeFactor40 = 0l\n        var primeFactor41 = 0l\n     \
    \   var primeFactor42 = 0l\n        var primeFactor43 = 0l\n        var primeFactor44\
    \ = 0l\n        var primeFactor45 = 0l\n        var primeFactor46 = 0l\n     \
    \   var primeFactor47 = 0l\n        var primeFactor48 = 0l\n        var primeFactor49\
    \ = 0l\n        var primeFactor50 = 0l\n        var primeFactor51 = 0l\n     \
    \   var primeFactor52 = 0l\n        var primeFactor53 = 0l\n        var primeFactor54\
    \ = 0l\n        var primeFactor55 = 0l\n        var primeFactor56 = 0l\n     \
    \   var primeFactor57 = 0l\n        var primeFactor58 = 0l\n        var primeFactor59\
    \ = 0l\n        var primeFactor60 = 0l\n        var primeFactor61 = 0l\n     \
    \   var primeFactor62 = 0l\n        var primeFactor63 = 0l\n        var primeFactor64\
    \ = 0l\n        var primeFactor65 = 0l\n        var primeFactor66 = 0l\n     \
    \   var primeFactor67 = 0l\n        var primeFactor68 = 0l", "        val primes\
    \ = mutable.ArrayBuffer(2)\n        var i = 2\n        while (i < n) {\n     \
    \       if (n % i == 0) {\n                primes += i\n                n /= i\n\
    \            }\n            i += 1\n        }\n        primes.last", "       \
    \ val factors = mutable.HashSet[Long]()\n        val primes = mutable.HashSet[Long]()\n\
    \        val isPrime = mutable.HashSet[Boolean]()\n        val isPrimeIter = mutable.HashSet[Boolean]()\n\
    \        val isPrimeIter2 = mutable.HashSet[Boolean]()\n        val isPrimeIter3\
    \ = mutable.HashSet[Boolean]()\n        val isPrimeIter4 = mutable.HashSet[Boolean]()\n\
    \        val isPrimeIter5 = mutable.HashSet[Boolean]()\n        val isPrimeIter6\
    \ = mutable.HashSet[Boolean]()\n        val isPrimeIter7 = mutable.HashSet[Boolean]()\n\
    \        val isPrimeIter8 = mutable.HashSet[Boolean]()\n        val isPrimeIter9\
    \ = mutable.HashSet[Boolean]()\n        val isPrimeIter10 = mutable.HashSet[Boolean]()\n\
    \        val isPrimeIter11 = mutable.HashSet[Boolean]()\n        val isPrimeIter12\
    \ = mutable.HashSet[Boolean]()\n        val isPrimeIter13 = mutable.HashSet[Boolean]()\n\
    \        val isPrimeIter14 = mutable.HashSet[Boolean]()\n        val isPrimeIter15\
    \ = mutable.HashSet[Boolean]()\n        val isPrimeIter16 = mutable.HashSet[Boolean]()\n\
    \        val isPrimeIter17 = mutable.HashSet[Boolean]()\n        val isPrimeIter18\
    \ = mutable.HashSet[Boolean]()\n        val isPrimeIter19 = mutable.HashSet[Boolean]()\n\
    \        val isPrimeIter20 = mutable.HashSet[Boolean]()\n        val isPrimeIter21\
    \ = mutable.HashSet[Boolean]()\n        val isPrimeIter22 = mutable.HashSet[Boolean]()\n\
    \        val isPrimeIter23 = mutable.HashSet[Boolean]()\n        val isPrimeIter24\
    \ = mutable.HashSet[Boolean]()\n        val isPrimeIter25 = mutable.HashSet[Boolean]()\n\
    \        val isPrimeIter26 = mutable.HashSet[Boolean]()\n        val isPrimeIter27\
    \ = mutable.HashSet[Boolean]()\n        val isPrimeIter28 = mutable.HashSet[Boolean]()\n\
    \        val isPrimeIter29", "        val primes = mutable.ArrayBuffer(2l) ++\
    \ (2l to n.toInt)\n        val factors = mutable.ArrayBuffer.empty[Long]\n   \
    \     while(primes.nonEmpty) {\n            val p = primes.head\n            primes\
    \ = primes.tail\n            factors += p\n            val q = n / p\n       \
    \     if(q > 1) {\n                factors += q\n                n -= q * p\n\
    \            }\n        }\n        factors.last", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(n)(n => isPrime.append(false))\n \
    \       val isPrimeIterIter = Iterator.iterate(isPrime)(_ => primes.append(false))\n\
    \        val isPrimeIterIterIter = Iterator.iterate(primes)(_ => factors.append(false))\n\
    \        val isPrimeIterIterIterIter = Iterator.iterate(factors)(_ => isPrime.append(true))\n\
    \        val isPrimeIterIterIterIterIter = Iterator.iterate(isPrime)(_ => primes.append(true))\n\
    \        val isPrimeIterIterIterIterIterIter = Iterator.iterate(primes)(_ => factors.append(true))\n\
    \        val isPrimeIterIterIterIterIterIterIter = Iterator.iterate(factors)(_\
    \ => isPrime.append(false))\n        val isPrimeIterIterIterIterIterIterIterIter\
    \ = Iterator.iterate(isPrime)(_ => primes.append(false))\n        val isPrimeIterIterIterIterIterIterIterIterIter\
    \ = Iterator.iterate(primes)(_ => factors.append(false))\n        val isPrimeIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.iterate(factors)(_ => isPrime.append(true))\n        val isPrimeIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.iterate(isPrime)(_ => primes.append(true))\n        val isPrimeIterIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.iterate(primes)(_ => factors.append(true))\n        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.iterate(factors)(_ => isPrime.append(false))\n        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.iterate(isPrime)(_ => primes.append(false))\n        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.iterate(primes)(_ => factors.append(false))\n        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.iterate(factors)(_ => isPrime.append(true))\n        val isPrimeIterIterIterIterIterIter",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        var i = 2\n    \
    \    while (i <= n / i) {\n            if (n % i == 0) {\n                factors\
    \ += i\n                n /= i\n            }\n            i += 1\n        }\n\
    \        if (n > 1) {\n            factors += n\n        }\n        factors.max",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                primes += i\n            }\n\
    \            i += 1\n        }\n        val largest = factors.max\n        val\
    \ largestPrime = primes.max\n        if (largest == largestPrime) {\n        \
    \    largestPrime\n        } else {\n            largestPrimeFactor(largest)\n\
    \        }", "        val primes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primesCount = mutable.ArrayBuffer.empty[Int]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeCount = mutable.ArrayBuffer.empty[Int]\n        val isPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeFactor2 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeFactor2Count = mutable.ArrayBuffer.empty[Int]\n        val isPrimeFactor3\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor3Count = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeFactor4 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeFactor4Count = mutable.ArrayBuffer.empty[Int]\n        val isPrimeFactor5\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor5Count = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeFactor6 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeFactor6Count = mutable.ArrayBuffer.empty[Int]\n        val isPrimeFactor7\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor7Count = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeFactor8 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeFactor8Count = mutable.ArrayBuffer.empty[Int]\n        val isPrimeFactor9\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor9Count = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeFactor10 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeFactor10Count = mutable.ArrayBuffer.empty[Int]\n        val isPrimeFactor11\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor11Count = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeFactor12 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeFactor12Count = mutable.ArrayBuffer.empty[Int]\n        val isPrimeFactor13\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor13Count = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeFactor14 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeFactor14Count = mut", "        val factors = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxFactor = 0\n        for (i <- 2 to n) {\n            if (n % i\
    \ == 0) {\n                primes += i\n                if (primes.max == i) maxFactor\
    \ = i\n            }\n        }\n        maxFactor", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter2 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter3 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter4\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter5 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter6 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter7\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter8 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter9 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter10\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter11 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter12 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter13\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter14 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter15 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter16\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter17 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter18 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter19\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter20 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter21 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter22\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter23 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter24 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter25\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter26 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter27 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter28\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter29 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val is", "        val primes = mutable.ArrayBuffer.empty[Long]\n    \
    \    var maxFactor = 0\n        var maxFactorPrime = 0\n        for(i <- 2 to\
    \ n by 2){\n            val isPrime = true\n            for(j <- 2 to i by 2){\n\
    \                if(i % j == 0){\n                    isPrime = false\n      \
    \              break\n                }\n            }\n            if(isPrime){\n\
    \                primes += i\n                if(primes.last > maxFactor){\n \
    \                   maxFactor = primes.last\n                    maxFactorPrime\
    \ = i\n                }\n            }\n        }\n        maxFactor", "    \
    \    val factors = mutable.ArrayBuffer.empty[Long]\n        factors += 2\n   \
    \     factors += 3\n        factors += 5\n        factors += 7\n        factors\
    \ += 11\n        factors += 13\n        factors += 17\n        factors += 19\n\
    \        factors += 23\n        factors += 29\n        factors += 31\n       \
    \ factors += 37\n        factors += 41\n        factors += 43\n        factors\
    \ += 47\n        factors += 53\n        factors += 59\n        factors += 61\n\
    \        factors += 67\n        factors += 71\n        factors += 73\n       \
    \ factors += 79\n        factors += 83\n        factors += 89\n        factors\
    \ += 97\n        factors += 101\n        factors += 103\n        factors += 107\n\
    \        factors += 109\n        factors += 113\n        factors += 127\n    \
    \    factors += 131\n        factors += 137\n        factors += 139\n        factors\
    \ += 149\n        factors += 151\n        factors += 157\n        factors += 163\n\
    \        factors += 167\n        factors += 173\n        factors += 179\n    \
    \    factors += 181\n        factors += 191\n        factors += 193\n        factors\
    \ += 197\n        factors += 199\n        factors += 211\n        factors += 223\n\
    \        factors += 227\n        factors += 229\n        factors += 233\n    \
    \    factors += 239\n        factors += 241\n        factors += 247\n        factors\
    \ += 249\n        factors += 251\n        factors += 253\n        factors += 257\n\
    \        factors += 263\n        factors += 269\n        factors += 271\n    \
    \    factors += 277\n        factors += 281\n        factors += 283\n        factors\
    \ += 293\n        factors += 307\n        factors += 311\n        factors += 313\n\
    \        factors += 317\n        factors += 323\n        factors += 329\n    \
    \    factors += 331\n        factors += 337\n        factors += 347\n        factors\
    \ += 349\n        factors += 353\n        factors += 359\n        factors += 363\n\
    \        factors += 369\n        factors += 373\n        factors += 379\n    \
    \    factors += 383\n        factors += 389\n        factors += 397\n        factors\
    \ += 401\n        factors += 409\n        factors += 419\n        factors += 421\n\
    \        factors += 431\n        factors += 433\n        factors += 439\n    \
    \    factors += 443\n        factors += 449\n        factors += 457\n        ",
  "        val primes = mutable.Set[Long]()\n        val factors = mutable.Set[Long]()\n\
    \        val primeFactors = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n\
    \        val isPrimeFactor = mutable.Set[Boolean]()\n        val isPrimeFactors\
    \ = mutable.Set[Boolean]()\n        val isPrimeFactorsSet = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSet2 = mutable.Set[Boolean]()\n        val isPrimeFactorsSet3\
    \ = mutable.Set[Boolean]()\n        val isPrimeFactorsSet4 = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSet5 = mutable.Set[Boolean]()\n        val isPrimeFactorsSet6\
    \ = mutable.Set[Boolean]()\n        val isPrimeFactorsSet7 = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSet8 = mutable.Set[Boolean]()\n        val isPrimeFactorsSet9\
    \ = mutable.Set[Boolean]()\n        val isPrimeFactorsSet10 = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSet11 = mutable.Set[Boolean]()\n        val isPrimeFactorsSet12\
    \ = mutable.Set[Boolean]()\n        val isPrimeFactorsSet13 = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSet14 = mutable.Set[Boolean]()\n        val isPrimeFactorsSet15\
    \ = mutable.Set[Boolean]()\n        val isPrimeFactorsSet16 = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSet17 = mutable.Set[Boolean]()\n        val isPrimeFactorsSet18\
    \ = mutable.Set[Boolean]()\n        val isPrimeFactorsSet19 = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSet20 = mutable.Set[Boolean]()\n        val isPrimeFactorsSet21\
    \ = mutable.Set[Boolean]()\n        val isPrimeFactorsSet22 = mutable.Set[Boolean]()\n\
    \        val isPrimeFactorsSet23 = mutable.Set[Boolean]()\n        val isPrimeFactorsSet24\
    \ = mutable.Set[Boolean]()\n        val isPrimeFactorsSet25 = mut", "        val\
    \ factors = mutable.HashSet[Long]()\n        val primes = mutable.HashSet[Long]()\n\
    \        val primeFactors = mutable.HashMap[Long, Long]()\n        val isPrime\
    \ = mutable.HashMap[Long, Boolean]()\n        val isPrimeFactor = mutable.HashMap[Long,\
    \ Boolean]()\n        val isPrimeFactors = mutable.HashMap[Long, Boolean]()\n\
    \        val isPrimeFactorsPrime = mutable.HashMap[Long, Boolean]()\n        val\
    \ isPrimeFactorsPrimePrime = mutable.HashMap[Long, Boolean]()\n        val isPrimeFactorsPrimePrimePrime\
    \ = mutable.HashMap[Long, Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrime\
    \ = mutable.HashMap[Long, Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrime\
    \ = mutable.HashMap[Long, Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrime\
    \ = mutable.HashMap[Long, Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrime\
    \ = mutable.HashMap[Long, Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.HashMap[Long, Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.HashMap[Long, Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.HashMap[Long, Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.HashMap[Long, Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.HashMap[Long, Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.HashMap[Long, Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime",
  "        var maxFactor = Long.MinValue\n        var maxFactorPrime = Long.MinValue\n\
    \        var maxFactorPrimePrime = Long.MinValue\n        var maxFactorPrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrime = Long.MinValue\n\
    \        var maxFactorPrimePrimePrimePrimePrime = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrime =\
    \ Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime",
  "        val factors = mutable.ListBuffer[Long]()\n        val i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n != 1) {\n            factors += n\n        }\n        factors.max", " \
    \       val factors = mutable.ArrayBuffer.empty[Long]\n        var i = 2\n   \
    \     while (i <= n / i) {\n            if (n % i == 0) {\n                factors\
    \ += i\n                n /= i\n            }\n            i += 1\n        }\n\
    \        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_\
    \ > 1l).filter(_ % _ == 0)\n        val isPrimeIter2 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ > 1l).filter(_ % _ != 0)\n        val isPrimeIter3\
    \ = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_ > 1l).filter(_ % _\
    \ == 0)\n        val isPrimeIter4 = Iterator.iterate(2l)(_ + 2l).takeWhile(_ <\
    \ n).filter(_ > 1l).filter(_ % _ != 0)\n        val isPrimeIter5 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ > 1l).filter(_ % _ == 0)\n        val isPrimeIter6\
    \ = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_ > 1l).filter(_ % _\
    \ != 0)\n        val isPrimeIter7 = Iterator.iterate(2l)(_ + 2l).takeWhile(_ <\
    \ n).filter(_ > 1l).filter(_ % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ > 1l).filter(_ % _ != 0)\n        val isPrimeIter9\
    \ = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_ > 1l).filter(_ % _\
    \ == 0)\n        val isPrimeIter10 = Iterator.iterate(2l)(_ + 2l).takeWhile(_\
    \ < n).filter(_ > 1l).filter(_ % _ != 0)\n        val isPrimeIter11 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ > 1l).filter(_ % _ == 0)\n        val isPrimeIter12\
    \ = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_ > 1l).filter(_ % _\
    \ != 0)\n        val isPrimeIter13 = Iterator.iterate(2l)(", "        var maxFactor\
    \ = Long.MinValue\n        var maxFactorPrime = Long.MinValue\n        var maxFactorPrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrime = Long.MinValue\n    \
    \    var maxFactorPrimePrimePrimePrime = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrime = Long.MinValue\n\
    \        var maxFactorPrimePrimePrimePrimePrimePrimePrime = Long.MinValue\n  \
    \      var maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = Long.MinValue\n\
    \        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = Long.MinValue\n\
    \        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = Long.MinValue\n\
    \        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = Long.MinValue\n\
    \        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Long.MinValue\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime",
  "        var maxFactor = n / 2\n        var maxFactorPrime = 0\n        while (maxFactorPrime\
    \ < maxFactor) {\n            if (n % maxFactor == 0) {\n                maxFactorPrime\
    \ += 1\n            }\n            maxFactor /= 2\n        }\n        maxFactor",
  "        val factors = mutable.ListBuffer[Long]()\n        val i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n > 1) {\n            factors += n\n        }\n        factors.max", " \
    \       val primes = mutable.ArrayBuffer.empty[Long]\n        val i = 2\n    \
    \    while (i <= n / i) {\n            if (n % i == 0) {\n                primes\
    \ += i\n                n /= i\n            }\n            i += 1\n        }\n\
    \        if (n > 1) {\n            primes += n\n        }\n        primes.max",
  "        val factors = mutable.ListBuffer[Long]()\n        var i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n > 1) {\n            factors += n\n        }\n        factors.max", " \
    \       val factors = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to\
    \ n by 2) {\n            if (n % i == 0) {\n                factors += i\n   \
    \         }\n        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 2 to n by 2)\n            if (n % i == 0)\n               \
    \ factors += i\n        factors.max", "        val primes = mutable.ArrayBuffer(2L);\n\
    \        val isPrime = mutable.ArrayBuffer(false);\n        val isPrimeIter =\
    \ mutable.ArrayBuffer(false);\n        val isPrimeIter2 = mutable.ArrayBuffer(false);\n\
    \        val isPrimeIter3 = mutable.ArrayBuffer(false);\n        val isPrimeIter4\
    \ = mutable.ArrayBuffer(false);\n        val isPrimeIter5 = mutable.ArrayBuffer(false);\n\
    \        val isPrimeIter6 = mutable.ArrayBuffer(false);\n        val isPrimeIter7\
    \ = mutable.ArrayBuffer(false);\n        val isPrimeIter8 = mutable.ArrayBuffer(false);\n\
    \        val isPrimeIter9 = mutable.ArrayBuffer(false);\n        val isPrimeIter10\
    \ = mutable.ArrayBuffer(false);\n        val isPrimeIter11 = mutable.ArrayBuffer(false);\n\
    \        val isPrimeIter12 = mutable.ArrayBuffer(false);\n        val isPrimeIter13\
    \ = mutable.ArrayBuffer(false);\n        val isPrimeIter14 = mutable.ArrayBuffer(false);\n\
    \        val isPrimeIter15 = mutable.ArrayBuffer(false);\n        val isPrimeIter16\
    \ = mutable.ArrayBuffer(false);\n        val isPrimeIter17 = mutable.ArrayBuffer(false);\n\
    \        val isPrimeIter18 = mutable.ArrayBuffer(false);\n        val isPrimeIter19\
    \ = mutable.ArrayBuffer(false);\n        val isPrimeIter20 = mutable.ArrayBuffer(false);\n\
    \        val isPrimeIter21 = mutable.ArrayBuffer(false);\n        val isPrimeIter22\
    \ = mutable.ArrayBuffer(false);\n        val isPrimeIter23 = mutable.ArrayBuffer(false);\n\
    \        val isPrimeIter24 = mutable.ArrayBuffer(false);\n        val isPrimeIter25\
    \ = mutable.ArrayBuffer(false);\n        val isPrimeIter26 = mutable.ArrayBuffer(false);\n\
    \        val isPrimeIter27 = mutable.ArrayBuffer(false);\n        val isPrimeIter28\
    \ = mutable.ArrayBuffer(false);\n        val isPrimeIter29 = mutable.ArrayBuffer(false);\n\
    \        val isPrimeIter30 = mutable.ArrayBuffer(false);\n        val isPrimeIter31\
    \ = mutable.ArrayBuffer(false);\n        val isPrimeIter32 = mutable.ArrayBuffer(false);\n\
    \        val isPrimeIter33 = mutable.ArrayBuffer(false);\n        val isPrimeIter34\
    \ = mutable.ArrayBuffer(false);\n        val isPrimeIter35 = mutable.ArrayBuffer(false);\n\
    \        val isPrimeIter36 = mutable.", "        val factors = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Boolean]()\n        val isPrimeIter = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 0).iterator\n        val isPrimeIter2\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_ % _ != 0).iterator\n\
    \        val isPrimeIter3 = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_\
    \ % _ == 0).takeWhile(_ % _ != 0).iterator\n        val isPrimeIter4 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ != 0).takeWhile(_ % _ == 0).iterator\n  \
    \      val isPrimeIter5 = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_\
    \ % _ == 0).takeWhile(_ % _ != 0).takeWhile(_ % _ == 0).iterator\n        val\
    \ isPrimeIter6 = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_ % _ != 0).takeWhile(_\
    \ % _ == 0).takeWhile(_ % _ != 0).iterator\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_ % _ != 0).takeWhile(_ %\
    \ _ == 0).takeWhile(_ % _ != 0).iterator\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ != 0).takeWhile(_ % _ == 0).takeWhile(_ %\
    \ _ != 0).takeWhile(_ % _ == 0).iterator\n        val isPrimeIter9 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ != 0).takeWhile(_ % _ == 0).takeWhile(_ %\
    \ _ != 0).takeWhile(_ % _ == 0).takeWhile(_ % _ != 0).iterator\n        val isPrimeIter10\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_\
    \ % _ != 0).takeWhile(_ % _ == 0).takeWhile(_ % _ != 0).takeWhile(_ % _ == 0).takeWhile(_\
    \ % _ != 0).iterator\n        val isPrimeIter11 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ > 1).filter(_ % _ != 0).takeWhile(_ % _ == 0).takeWhile(_ % ", "        val\
    \ factors = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                isPrime += false\n        \
    \    }\n            i += 1\n        }\n        val largestPrimeFactor = factors.max\n\
    \        val isPrimeFactor = isPrime.contains(largestPrimeFactor)\n        if\
    \ (isPrimeFactor) {\n            largestPrimeFactor\n        } else {\n      \
    \      largestPrimeFactor * largestPrimeFactor\n        }", "        val factors\
    \ = mutable.Set[Long]()\n        for(i <- 2 to n by 2){\n            if(n%i ==\
    \ 0){\n                factors += i\n            }\n        }\n        factors.max",
  "        var largestPrimeFactor = n / 2\n        while (largestPrimeFactor != 1)\
    \ {\n            if (n % largestPrimeFactor == 0) {\n                largestPrimeFactor\
    \ = n\n            } else {\n                largestPrimeFactor = largestPrimeFactor\
    \ / 2\n            }\n        }\n        largestPrimeFactor", "        val factors\
    \ = mutable.HashSet[Long]()\n        for(i <- 2 to n by 2)\n            factors\
    \ += i\n        factors.max", "        var maxFactor = n / 2\n        var maxFactorPrime\
    \ = 2 // start at 2\n        while (maxFactorPrime < maxFactor) {\n          \
    \  if (n % maxFactorPrime == 0) {\n                maxFactorPrime += 1\n     \
    \       }\n            else {\n                maxFactorPrime = maxFactor\n  \
    \          }\n        }\n        maxFactor", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        var factor = 2\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                primes += factor\n                n /= factor\n   \
    \         }\n            else {\n                factor += 1\n            }\n\
    \        }\n        primes.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isFactor = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimeFactor = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimePrimePrimePrimeFactor = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrimePrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrimePrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrimePri", " \
    \       val factors = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n\
    \        val isPrimeIter = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ == 0).iterator\n        val isPrimeIter2 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ != 0).iterator\n        val isPrimeIter3 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0).filter(_ % _ != 0).iterator\n    \
    \    val isPrimeIter4 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ != 0).filter(_ % _ == 0).iterator\n        val isPrimeIter5 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0).filter(_ % _ == 0).filter(_ % _ !=\
    \ 0).iterator\n        val isPrimeIter6 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ != 0).filter(_ % _ == 0).filter(_ % _ != 0).filter(_ % _\
    \ != 0).iterator\n        val isPrimeIter7 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ != 0).filter(_ % _ == 0).filter(_ % _ != 0).filter(_ % _\
    \ != 0).filter(_ % _ != 0).iterator\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0).filter(_ % _ == 0).filter(_ % _ !=\
    \ 0).filter(_ % _ != 0).filter(_ % _ != 0).filter(_ % _ != 0).filter(_ % _ !=\
    \ 0).iterator\n        val isPrimeIter9 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ != 0).filter(_ % _ == 0).filter(_ % _ != 0).filter(_ % _\
    \ != 0).filter(_ % _ != 0).filter(_ % _ != 0).filter(_ % _ != 0).filter(_ % _\
    \ != 0).filter(_ % _ != 0).iterator\n        val isPrimeIter10 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0).filter(_ % _ == 0).filter(_ % _ !=\
    \ 0).filter(_ % _ != 0).filter(_ % _ != 0).filter(_ % _ != 0).filter(_ % _ !=\
    \ 0).filter(_", "        var maxFactor = 0\n        var maxFactorIndex = 0\n \
    \       var isPrime = true\n        var isPrimeIndex = 0\n        var isPrimeEven\
    \ = true\n        var isPrimeEvenIndex = 0\n        var isPrimeOdd = true\n  \
    \      var isPrimeOddIndex = 0\n        var isPrimeEvenOdd = true\n        var\
    \ isPrimeEvenOddIndex = 0\n        var isPrimeOddEven = true\n        var isPrimeOddEvenIndex\
    \ = 0\n        var isPrimeEvenOddEven = true\n        var isPrimeEvenOddEvenIndex\
    \ = 0\n        var isPrimeOddEvenOdd = true\n        var isPrimeOddEvenOddIndex\
    \ = 0\n        var isPrimeEvenOddEvenOdd = true\n        var isPrimeEvenOddEvenOddIndex\
    \ = 0\n        var isPrimeOddEvenOddEvenOdd = true\n        var isPrimeOddEvenOddEvenOddIndex\
    \ = 0\n        var isPrimeEvenOddEvenOddEvenOdd = true\n        var isPrimeEvenOddEvenOddEvenOddIndex\
    \ = 0\n        var isPrimeOddEvenOddEvenOddEvenOdd = true\n        var isPrimeEvenOddEvenOddEvenOddEvenIndex\
    \ = 0\n        var isPrimeOddEvenOddEvenOddEvenOdd = true\n        var isPrimeEvenOddEvenOddEvenOddEvenOdd\
    \ = true\n        var isPrimeEvenOddEvenOddEvenOddEvenOddIndex = 0\n        var\
    \ isPrimeOddEvenOddEvenOddEvenOddEvenOdd = true\n        var isPrimeEvenOddEvenOddEvenOddEvenOddEvenIndex\
    \ = 0\n        var isPrimeOddEvenOddEvenOddEvenOddEvenOddEven = true\n       \
    \ var isPrimeEvenOddEvenOddEvenOddEvenOddEvenOdd = true\n        var isPrimeEvenOddEvenOddEvenOddEvenOddEvenOddIndex\
    \ = 0\n        var isPrimeOddEvenOddEvenOddEvenOddEvenOddEvenOdd = true\n    \
    \    var isPrimeEvenOddEvenOddEvenOddEvenOddEvenOddEvenIndex = 0\n        var\
    \ isPrimeOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = true\n        var isPrimeEvenOddEvenOddEvenOdd",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n\
    \ by 2){\n            if(n%i==0){\n                factors += i\n            }\n\
    \        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_\
    \ % _ != 0)\n        val isPrimeIter2 = Iterator.iterate(2l)(_ + 2l).takeWhile(_\
    \ < n).filter(_ % _ == 0)\n        val isPrimeIter3 = Iterator.iterate(2l)(_ +\
    \ 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter4 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter5 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter6 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter7 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter9 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter10 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter11 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter12 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter13 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter14 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter15 = Iterator.iterate(2l)(_\
    \ + 2l).take", "        val primes = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factors = mutable.ArrayBuffer.empty[Long]\n        var i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                primes += i\n\
    \                factors += i\n            }\n            i += 1\n        }\n\
    \        val largestPrime = primes.max\n        val largestFactor = factors.max\n\
    \        if (largestPrime == largestFactor) {\n            largestPrime\n    \
    \    } else {\n            largestPrime * largestFactor\n        }", "       \
    \ val factors = mutable.ListBuffer[Long]()\n        for (i <- 2 to n by 2)\n \
    \           if (n % i == 0)\n                factors += i\n        factors.max",
  "        val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var i = 2L\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                primes += i\n            }\n\
    \            i += 1\n        }\n        val largestPrime = primes.max\n      \
    \  factors.max", "        val factors = mutable.HashSet[Long]()\n        val primes\
    \ = mutable.HashSet[Long]()\n        val largestPrime = Long.MaxValue\n      \
    \  val largestPrimeFactor = Long.MaxValue\n        val isPrime = true\n      \
    \  for(i <- 2 to n by 2){\n            val isPrime = true\n            for(j <-\
    \ 2 to i by 2){\n                if(i % j == 0){\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if(isPrime){\n                primes += i\n            }\n           \
    \ factors += i\n        }\n        for(prime <- primes){\n            val factors\
    \ = primes.filter(_ % prime == 0)\n            if(factors.size > largestPrimeFactor){\n\
    \                largestPrimeFactor = factors.last\n                largestPrime\
    \ = prime\n            }\n        }\n        largestPrimeFactor", "        val\
    \ factors = mutable.ArrayBuffer.empty[Long]\n        var i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n > 1) {\n            factors += n\n        }\n        factors.max", " \
    \       val factors = mutable.Set[Long]()\n        val i = 2\n        while (i\
    \ <= n / i) {\n            if (n % i == 0) {\n                factors += i\n \
    \               n /= i\n            }\n            i += 1\n        }\n       \
    \ factors.max", "        val factors = mutable.Set[Long]()\n        var largestPrimeFactor\
    \ = Long.MaxValue\n        var currentPrime = 1\n        while (n != 1) {\n  \
    \          while (n % currentPrime == 0) {\n                factors += currentPrime\n\
    \                n /= currentPrime\n            }\n            currentPrime +=\
    \ 1\n        }\n        factors.toList.sortWith(_ < _).last", "        val factors\
    \ = mutable.Set[Long]()\n        for(i <- 2 to Math.sqrt(n)) {\n            if(n\
    \ % i == 0) {\n                factors += i\n                n /= i\n        \
    \    }\n        }\n        factors.max", "        val primes = mutable.ArrayBuffer(2l)\n\
    \        var i = 2l\n        while (i < n) {\n            if (n % i == 0) {\n\
    \                primes += i\n                n /= i\n            }\n        \
    \    i += 1\n        }\n        primes.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val maxFactor = math.ceil(math.sqrt(n))\n        for(i <- 2 to maxFactor)\
    \ {\n            if(n%i == 0) {\n                factors += i\n              \
    \  n /= i\n            }\n        }\n        factors.max", "        val factors\
    \ = mutable.ListBuffer[Long]()\n        for(i <- 2 to n by 2){\n            val\
    \ isPrime = n % i == 0\n            if(isPrime){\n                factors += i\n\
    \            }\n        }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        for(i <- 2 to n by 2){\n            if(n%i == 0){\n                factors\
    \ += i\n            }\n        }\n        factors.max", "        val factors =\
    \ mutable.Set[Long]()\n        val maxFactor = math.max(2, math.ceil(math.sqrt(n)))\n\
    \        for(i <- 2 to maxFactor) {\n            val isPrime = n % i == 0\n  \
    \          if(isPrime) {\n                factors += i\n            }\n      \
    \  }\n        factors.max", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = 2\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                primes += i\n                n /= i\n            }\n        \
    \    i += 1\n        }\n        primes.max", "        val primes = mutable.Set[Long]()\n\
    \        val factors = mutable.Set[Long]()\n        val largestPrime = mutable.Set[Long]()\n\
    \        val largestPrimeFactor = mutable.Set[Long]()\n        val largestPrimeFactors\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCount = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCount2 = mutable.Set[Long]()\n        val largestPrimeFactorsCount3\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCount4 = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCount5 = mutable.Set[Long]()\n        val largestPrimeFactorsCount6\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCount7 = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCount8 = mutable.Set[Long]()\n        val largestPrimeFactorsCount9\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCount10 = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCount11 = mutable.Set[Long]()\n        val largestPrimeFactorsCount12\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCount13 = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCount14 = mutable.Set[Long]()\n        val largestPrimeFactorsCount15\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCount16 = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCount17 = mutable.Set[Long]()\n        val largestPrimeFactorsCount18\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCount19 = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCount20 = mutable.Set[Long]()\n        val largestPrimeFactorsCount21\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCount22 = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCount23 = mutable.Set[Long]()\n        val largestPrimeFactorsCount24\
    \ = mutable.Set[Long]", "        val primes = mutable.ArrayBuffer(2l) ++ (2l..n).filter(x\
    \ => n % x == 0)\n        val largestPrime = primes.max\n        largestPrime",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to n\
    \ by 2) {\n            if (n % i == 0) {\n                factors += i\n     \
    \       }\n        }\n        factors.max", "        val primes = mutable.Set[Long]()\n\
    \        val factors = mutable.Set[Long]()\n        val maxFactor = mutable.Set[Long]()\n\
    \        val maxFactors = mutable.Set[Long]()\n        val maxFactorsIndex = mutable.Set[Long]()\n\
    \        val maxFactorsIndex = mutable.Set[Long]()\n        val maxFactorsIndex\
    \ = mutable.Set[Long]()\n        val maxFactorsIndex = mutable.Set[Long]()\n \
    \       val maxFactorsIndex = mutable.Set[Long]()\n        val maxFactorsIndex\
    \ = mutable.Set[Long]()\n        val maxFactorsIndex = mutable.Set[Long]()\n \
    \       val maxFactorsIndex = mutable.Set[Long]()\n        val maxFactorsIndex\
    \ = mutable.Set[Long]()\n        val maxFactorsIndex = mutable.Set[Long]()\n \
    \       val maxFactorsIndex = mutable.Set[Long]()\n        val maxFactorsIndex\
    \ = mutable.Set[Long]()\n        val maxFactorsIndex = mutable.Set[Long]()\n \
    \       val maxFactorsIndex = mutable.Set[Long]()\n        val maxFactorsIndex\
    \ = mutable.Set[Long]()\n        val maxFactorsIndex = mutable.Set[Long]()\n \
    \       val maxFactorsIndex = mutable.Set[Long]()\n        val maxFactorsIndex\
    \ = mutable.Set[Long]()\n        val maxFactorsIndex = mutable.Set[Long]()\n \
    \       val maxFactorsIndex = mutable.Set[Long]()\n        val maxFactorsIndex\
    \ = mutable.Set[Long]()\n        val maxFactorsIndex = mutable.Set[Long]()\n \
    \       val maxFactorsIndex = mutable.Set[Long]()\n        val maxFactorsIndex\
    \ = mutable.Set[Long]()\n        val maxFactorsIndex = mutable.Set[Long]()\n \
    \       val maxFactorsIndex = mutable.Set[Long]()\n        val maxFactorsIndex\
    \ = mutable.Set[Long]()\n        val maxFactorsIndex = mutable.Set[Long]()\n \
    \       val maxFactorsIndex = mutable.Set[Long]()\n        val maxFactorsIndex\
    \ = mutable.Set[Long]()\n        val maxFactorsIndex = mutable.Set[Long]()\n \
    \       val maxFactorsIndex = mutable.Set[Long]()\n        val maxFactorsIndex\
    \ = mutable.Set[Long]()\n", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor2 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor3 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor4\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor5 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor6 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor7 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor8\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor9 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor10 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor11 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor12\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor13 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor14 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor15 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor16\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor17 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor18 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor19 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor20\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor21 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor22 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor23 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor24\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeDivisor25 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeDivisor26 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeDivisor27 = mutable.Array", "        val factors = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i < n) {\n            if (n % i == 0) {\n \
    \               factors += i\n                n /= i\n            }\n        \
    \    i += 1\n        }\n        if (n != 1) {\n            factors += n\n    \
    \    }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     factors += i\n            }\n        }\n        factors.max", "        val\
    \ factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                factors += i\n                primes += i\n            }\n  \
    \          i += 1\n        }\n        val largestPrime = primes.max\n        factors.max",
  "        var maxFactor = 0\n        var maxFactorPrime = 0\n        var maxFactorPrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrime = 0\n        var maxFactorPrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrime = 0\n        var maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrime = 0\n        var\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n\
    \        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n    \
    \    var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n   \
    \     var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n  \
    \      var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n \
    \       var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n\
    \        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePri", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_ % _ != 0l).takeWhile(_\
    \ > 2l).map(_ % _ != 0l).iterator\n        val isPrimeIter2 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ != 0l).takeWhile(_ > 2l).map(_ % _ != 0l).iterator\n\
    \        val isPrimeIter3 = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_\
    \ % _ != 0l).takeWhile(_ > 2l).map(_ % _ != 0l).iterator\n        val isPrimeIter4\
    \ = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_ % _ != 0l).takeWhile(_\
    \ > 2l).map(_ % _ != 0l).iterator\n        val isPrimeIter5 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ != 0l).takeWhile(_ > 2l).map(_ % _ != 0l).iterator\n\
    \        val isPrimeIter6 = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_\
    \ % _ != 0l).takeWhile(_ > 2l).map(_ % _ != 0l).iterator\n        val isPrimeIter7\
    \ = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_ % _ != 0l).takeWhile(_\
    \ > 2l).map(_ % _ != 0l).iterator\n        val isPrimeIter8 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ != 0l).takeWhile(_ > 2l).map(_ % _ != 0l).iterator\n\
    \        val isPrimeIter9 = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_\
    \ % _ != 0l).takeWhile(_ > 2l).map(_ % _ != 0l).iterator\n        val isPrimeIter10\
    \ = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_ % _ != 0l).take", " \
    \       val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val\
    \ isPrimeIter2 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ ==\
    \ 0)\n        val isPrimeIter3 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ == 1)\n        val isPrimeIter4 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ == 2)\n        val isPrimeIter5 = Iterator.iterate(n)(_ +\
    \ 2).takeWhile(_ <= n).filter(_ % _ == 3)\n        val isPrimeIter6 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 4)\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 5)\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 6)\n        val isPrimeIter9 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 7)\n        val isPrimeIter10 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 8)\n        val isPrimeIter11 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 9)\n        val isPrimeIter12 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 10)\n        val isPrimeIter13 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 11)\n        val isPrimeIter14 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 12)\n        val isPrimeIter15 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 13)\n        val isPrimeIter16 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 14)\n        val is", "        val factors\
    \ = mutable.Set[Long]()\n        for(i <- 2 to n by 2){\n            if(n%i ==\
    \ 0){\n                factors += i\n            }\n        }\n        factors.max",
  "        val factors = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter = Iterator.iterate(n)(x => isPrime.append(x % 2 != 0)).takeWhile(_\
    \ => true)\n        val isPrimeIter2 = Iterator.iterate(n)(x => isPrime.append(x\
    \ % 2 != 0)).takeWhile(_ => false)\n        val isPrimeIter3 = Iterator.iterate(n)(x\
    \ => isPrime.append(x % 2 != 0)).takeWhile(_ => true)\n        val isPrimeIter4\
    \ = Iterator.iterate(n)(x => isPrime.append(x % 2 != 0)).takeWhile(_ => false)\n\
    \        val isPrimeIter5 = Iterator.iterate(n)(x => isPrime.append(x % 2 != 0)).takeWhile(_\
    \ => true)\n        val isPrimeIter6 = Iterator.iterate(n)(x => isPrime.append(x\
    \ % 2 != 0)).takeWhile(_ => false)\n        val isPrimeIter7 = Iterator.iterate(n)(x\
    \ => isPrime.append(x % 2 != 0)).takeWhile(_ => true)\n        val isPrimeIter8\
    \ = Iterator.iterate(n)(x => isPrime.append(x % 2 != 0)).takeWhile(_ => false)\n\
    \        val isPrimeIter9 = Iterator.iterate(n)(x => isPrime.append(x % 2 != 0)).takeWhile(_\
    \ => true)\n        val isPrimeIter10 = Iterator.iterate(n)(x => isPrime.append(x\
    \ % 2 != 0)).takeWhile(_ => false)\n        val isPrimeIter11 = Iterator.iterate(n)(x\
    \ => isPrime.append(x % 2 != 0)).takeWhile(_ => true)\n        val isPrimeIter12\
    \ = Iterator.iterate(n)(x => isPrime.append(x % 2 != 0)).takeWhile(_ => false)\n\
    \        val isPrimeIter13 = Iterator.iterate(n)(x => isPrime.append(x % 2 !=\
    \ 0)).takeWhile(_ => true)\n        val isPrimeIter14 = Iterator.iterate(n)(x\
    \ => isPrime.append(x % 2 != 0)).takeWhile(_ => false)\n        val isPrimeIter15\
    \ = Iterator.iterate(n)(x => isPrime.append(x % 2 != 0)).take", "        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        var i = 2\n\
    \        while (i <= n) {\n            if (n % i == 0) {\n                factors\
    \ += i\n                primes += i\n                isPrime += true\n       \
    \     }\n            i += 1\n        }\n        val largestPrime = primes.max\n\
    \        val largestFactor = factors.max\n        val largestPrimeFactor = if\
    \ (largestFactor == 1) largestPrime else largestPrime * largestFactor\n      \
    \  if (largestPrimeFactor == n) largestPrimeFactor else largestPrimeFactor", " \
    \       val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                factors += i\n                primes += i\n            }\n  \
    \          i += 1\n        }\n        val largestPrime = primes.max\n        factors.find(_\
    \ == largestPrime)", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        factors += 2\n        factors += 3\n        factors += 5\n        factors\
    \ += 7\n        factors += 11\n        factors += 13\n        factors += 17\n\
    \        factors += 19\n        factors += 23\n        factors += 29\n       \
    \ factors += 31\n        factors += 37\n        factors += 41\n        factors\
    \ += 43\n        factors += 47\n        factors += 53\n        factors += 59\n\
    \        factors += 61\n        factors += 67\n        factors += 71\n       \
    \ factors += 73\n        factors += 79\n        factors += 83\n        factors\
    \ += 89\n        factors += 97\n        factors += 101\n        factors += 103\n\
    \        factors += 107\n        factors += 109\n        factors += 113\n    \
    \    factors += 127\n        factors += 131\n        factors += 137\n        factors\
    \ += 139\n        factors += 149\n        factors += 151\n        factors += 157\n\
    \        factors += 163\n        factors += 167\n        factors += 173\n    \
    \    factors += 179\n        factors += 181\n        factors += 191\n        factors\
    \ += 193\n        factors += 197\n        factors += 199\n        factors += 211\n\
    \        factors += 223\n        factors += 227\n        factors += 229\n    \
    \    factors += 233\n        factors += 239\n        factors += 241\n        factors\
    \ += 247\n        factors += 249\n        factors += 251\n        factors += 253\n\
    \        factors += 257\n        factors += 263\n        factors += 269\n    \
    \    factors += 271\n        factors += 277\n        factors += 281\n        factors\
    \ += 283\n        factors += 293\n        factors += 307\n        factors += 311\n\
    \        factors += 313\n        factors += 317\n        factors += 323\n    \
    \    factors += 329\n        factors += 331\n        factors += 337\n        factors\
    \ += 347\n        factors += 349\n        factors += 353\n        factors += 359\n\
    \        factors += 363\n        factors += 369\n        factors += 373\n    \
    \    factors += 379\n        factors += 383\n        factors += 389\n        factors\
    \ += 397\n        factors += 401\n        factors += 409\n        factors += 419\n\
    \        factors += 421\n        factors += 431\n        factors += 433\n    \
    \    factors += 439\n        factors += 443\n        factors += 449\n        factors\
    \ += 457\n        ", "        val factors = mutable.ListBuffer[Long]()\n     \
    \   for(i <- 2 to n by 2)\n            if(!isPrime(i) && factors.contains(i))\
    \ factors += i\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        var i = 2\n   \
    \     while (i <= n / i) {\n            if (n % i == 0) {\n                factors\
    \ += i\n                primes += i\n            }\n            i += 1\n     \
    \   }\n        val largest = factors.max\n        val largestPrime = primes.max\n\
    \        if (largest == largestPrime) {\n            return largest\n        }\n\
    \        largestPrime", "        val primes = mutable.ArrayBuffer(2)\n       \
    \ var i = 2\n        while (i <= n / 2) {\n            if (n % i == 0) {\n   \
    \             primes += i\n                n /= i\n            }\n           \
    \ i += 1\n        }\n        primes.last", "        val factors = mutable.ListBuffer[Long]()\n\
    \        for (i <- 2 to n by 2)\n            if (n % i == 0)\n               \
    \ factors += i\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxFactor = math.max(2, math.floor(math.sqrt(n)))\n        for(i\
    \ <- 2 to maxFactor) {\n            if(n%i == 0) {\n                factors +=\
    \ i\n                n /= i\n            }\n        }\n        if(n > 1) {\n \
    \           factors += n\n        }\n        factors.max", "        val factors\
    \ = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter = Iterator.iterate(n)(n / _)\n        val isPrimeIterIter\
    \ = Iterator.iterate(isPrime)(_ / _)\n        val isPrimeIterIterIter = Iterator.iterate(isPrimeIter)(_\
    \ / _)\n        val isPrimeIterIterIterIter = Iterator.iterate(isPrimeIterIter)(_\
    \ / _)\n        val isPrimeIterIterIterIterIter = Iterator.iterate(isPrimeIterIterIter)(_\
    \ / _)\n        val isPrimeIterIterIterIterIterIter = Iterator.iterate(isPrimeIterIterIterIter)(_\
    \ / _)\n        val isPrimeIterIterIterIterIterIterIterIter = Iterator.iterate(isPrimeIterIterIterIterIter)(_\
    \ / _)\n        val isPrimeIterIterIterIterIterIterIterIter = Iterator.iterate(isPrimeIterIterIterIterIterIter)(_\
    \ / _)\n        val isPrimeIterIterIterIterIterIterIterIterIter = Iterator.iterate(isPrimeIterIterIterIterIterIterIter)(_\
    \ / _)\n        val isPrimeIterIterIterIterIterIterIterIterIterIter = Iterator.iterate(isPrimeIterIterIterIterIterIterIterIter)(_\
    \ / _)\n        val isPrimeIterIterIterIterIterIterIterIterIterIter = Iterator.iterate(isPrimeIterIterIterIterIterIterIterIterIter)(_\
    \ / _)\n        val isPrimeIterIterIterIterIterIterIterIterIterIterIter = Iterator.iterate(isPrimeIterIterIterIterIterIterIterIterIter)(_\
    \ / _)\n        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIter =\
    \ Iterator.iterate(isPrimeIterIterIterIterIterIterIterIterIter)(_ / _)\n     \
    \   val isPrimeIterIterIterIterIterIterIterIterIterIterIterIter = Iterator.iterate(isPrimeIterIterIterIterIterIterIterIterIterIter)(_\
    \ / _)\n        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIter =\
    \ Iterator.iterate(isPrimeIterIterIterIterIterIterIterIterIterIterIter)(_ / _)\n\
    \        val isPri"]
stop_tokens:
- "\n    }\n"
