language: scala
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordsWithNConsonants = s.split(\"\
    \\\\s\").filter(_ => _.length == n).map(_.toLowerCase)\n        wordsWithNConsonants.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpdhtj982k.scala:21:62 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonants\e[0m\
    \ = s.split(\e[31m\"\\\\s\"\e[0m).filter(_ => _.length == n).map(_.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => _$2.length == n.\n1 error found\n"
  stdout: ''
  timestamp: 1659805632
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.map(x => x.replaceAll(\"[^a-zA-Z ]\", \"\"))\n     \
    \   val list3 = list2.filter(x => x.length == n)\n        list3.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2jomsv6y.scala:27)\n\tat Problem.main(tmp2jomsv6y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach(x =>\
    \ {\n            val count = x.count(c => c.isLetter)\n            if (count ==\
    \ n) {\n                result += x\n            }\n        })\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzcgqqc5z.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.isLetter)\n            if\
    \ (count == n) {\n                result += word\n            }\n        }\n \
    \       if (result.isEmpty) {\n            List()\n        } else {\n        \
    \    result.toList\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ksh3h_b.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        val consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n        val vowels = \"aeiou\"\n        wordList.foreach\
    \ { word =>\n            val charList = word.split(\"\").toList\n            val\
    \ consonantCount = charList.count(c => consonants.indexOf(c) > -1)\n         \
    \   val vowelCount = charList.count(c => vowels.indexOf(c) > -1)\n           \
    \ if (consonantCount == n && vowelCount == n) {\n                result += (word\
    \ + \" \")\n            }\n        }\n        return result.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5jf8tm2r.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase)\n\
    \        val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\", \"y\")\n        val consonantCount = wordList.map(_.count(c => consonants.contains(c))).sum\n\
    \        val vowelCount = wordList.map(_.count(c => vowels.contains(c))).sum\n\
    \        if (consonantCount == n && vowelCount == n) {\n            wordList\n\
    \        } else {\n            wordList.filter(_.count(c => consonants.contains(c)).toList.sorted\
    \ == n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa9pjauyn.scala:27:12\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            wordList\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (wordList\
    \ : Array[String])\n\e[31m   |\e[0m            Required: List[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa9pjauyn.scala:29:65 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            wordList.filter(_.count(\e[36mc\e[0m => consonants.contains(c)).toList.sorted\
    \ == n)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value toList is not a member of Int - did you mean\
    \ Int.toInt?\n2 errors found\n"
  stdout: ''
  timestamp: 1659805639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach(x\
    \ => {\n            val count = x.count(_ == 'a')\n            if (count == n)\
    \ result += (x :: \"\")\n        })\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm_bjy84y.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { x\
    \ =>\n            val list = x.split(\" \")\n            list.foreach { y =>\n\
    \                if (y.length == n) {\n                    result += y\n     \
    \           }\n            }\n        }\n        return result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpavnbezm0.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.isLetter)\n            if\
    \ (count == n) result += word\n        }\n        if (result.isEmpty) List()\n\
    \        else result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1mcahwli.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\
    \").filter(_.nonEmpty).map(_.toLowerCase))\n        words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbp279ar5.scala:21:34\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m).filter(_.nonEmpty).map(_.toLowerCase))\n\e\
    [31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    Array[Array[String]]\n\
    \e[31m   |\e[0m                                  Required: List[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x\
    \ => x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"E\"\
    ))\n        val list5 = list4.filter(x => x.contains(\"I\"))\n        val list6\
    \ = list5.filter(x => x.contains(\"O\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"U\"))\n        val list8 = list7.filter(x => x.contains(\"a\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"e\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"i\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"o\"))\n        val list12 = list11.filter(x => x.contains(\"\
    u\"))\n        val list13 = list12.filter(x => x.contains(\"A\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"E\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"I\"))\n        val list16 = list15.filter(x => x.contains(\"\
    O\"))\n        val list17 = list16.filter(x => x.contains(\"U\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"a\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"e\"))\n        val list20 = list19.filter(x => x.contains(\"\
    i\"))\n        val list21 = list20.filter(x => x.contains(\"o\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"u\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"A\"))\n        val list24 = list23.filter(x => x.contains(\"\
    E\"))\n        val list25 = list24.filter(x => x.contains(\"I\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"O\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"U\"))\n        val list28 = list27.filter(x => x.contains(\"\
    a\"))\n        val list29 = list28.filter(x => x.contains(\"e\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"i\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"o\"))\n        val list32 = list31.filter(x => x.contains(\"\
    u\"))\n        val list33 = list32.filter(x => x.contains(\"A\"))\n        val\
    \ list34 = list33.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjxjf10_5.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjxjf10_5.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(x => x.contains(\"a\"))\n        val list3 =\
    \ list.filter(x => x.contains(\"e\"))\n        val list4 = list.filter(x => x.contains(\"\
    i\"))\n        val list5 = list.filter(x => x.contains(\"o\"))\n        val list6\
    \ = list.filter(x => x.contains(\"u\"))\n        val list7 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list8 = list.filter(x => x.contains(\"n\"))\n\
    \        val list9 = list.filter(x => x.contains(\"d\"))\n        val list10 =\
    \ list.filter(x => x.contains(\"g\"))\n        val list11 = list.filter(x => x.contains(\"\
    h\"))\n        val list12 = list.filter(x => x.contains(\"p\"))\n        val list13\
    \ = list.filter(x => x.contains(\"s\"))\n        val list14 = list.filter(x =>\
    \ x.contains(\"w\"))\n        val list15 = list.filter(x => x.contains(\"c\"))\n\
    \        val list16 = list.filter(x => x.contains(\"m\"))\n        val list17\
    \ = list.filter(x => x.contains(\"y\"))\n        val list18 = list.filter(x =>\
    \ x.contains(\"k\"))\n        val list19 = list.filter(x => x.contains(\"b\"))\n\
    \        val list20 = list.filter(x => x.contains(\"r\"))\n        val list21\
    \ = list.filter(x => x.contains(\"f\"))\n        val list22 = list.filter(x =>\
    \ x.contains(\"v\"))\n        val list23 = list.filter(x => x.contains(\"z\"))\n\
    \        val list24 = list.filter(x => x.contains(\"x\"))\n        val list25\
    \ = list.filter(x => x.contains(\"q\"))\n        val list26 = list.filter(x =>\
    \ x.contains(\"z\"))\n        val list27 = list.filter(x => x.contains(\"s\"))\n\
    \        val list28 = list.filter(x => x.contains(\"t\"))\n        val list29\
    \ = list.filter(x => x.contains(\"h\"))\n        val list30 = list.filter(x =>\
    \ x.contains(\"r\"))\n        val list31 = list.filter(x => x.contains(\"e\"))\n\
    \        val list32 = list.filter(x => x.contains(\"a\"))\n        val list33\
    \ = list.filter(x => x.contains(\"l\"))\n        val list34 = list.filter(x =>\
    \ x.contains(\"m\"))\n        val list35 = list.filter(x => x.contains(\"y\"))\n\
    \        val list36 = \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2pjvtm8l.scala:56:20 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mlist36\e[0m = \n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2pjvtm8l.scala:57:5 ---------------------\e[0m\e[0m\n\e[31m57\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").filter(_.isLetter).filter(_.isLetterOrDigit)\n\
    \        val nConsonants = n\n        val nConsonantsList = List(\"b\", \"c\"\
    , \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val nConsonantsSet\
    \ = nConsonantsList.map(_.toChar)\n        val nConsonantsSetSet = Set.empty[Set[Char]]\n\
    \        val nConsonantsSetSetSet = Set.empty[Set[Set[Char]]]\n        val nConsonantsSetSetSet\
    \ = Set.empty[Set[Set[Set[Char]]]]\n        val nConsonantsSetSetSetSet = Set.empty[Set[Set[Set[Set[Char]]]]]\n\
    \        val nConsonantsSetSetSetSetSet = Set.empty[Set[Set[Set[Set[Char]]]]]\n\
    \        val nConsonantsSetSetSetSetSet = Set.empty[Set[Set[Set[Set[Set[Char]]]]]]\n\
    \        val nConsonantsSetSetSetSetSet = Set.empty[Set[Set[Set[Set[Set[Set[Char]]]]]]]\n\
    \        val nConsonantsSetSetSetSetSetSet = Set.empty[Set[Set[Set[Set[Set[Set[Char]]]]]]]\n\
    \        val nConsonantsSetSetSetSetSetSet = Set.empty[Set[Set[Set[Set[Set[Set[Char]]]]]]]\n\
    \        val nConsonantsSetSetSetSetSetSet = Set.empty[Set[Set[Set[Set[Set[Set[Char]]]]]]]\n\
    \        val nConsonantsSetSetSetSetSetSet = Set.empty[Set[Set[Set[Set[Set[Set[Set[Char]]]]]]]]\n\
    \        val nConsonantsSetSetSetSetSetSetSet = Set.empty[Set[Set[Set[Set[Set[Set[Set[Char]]]]]]]]]\n\
    \        val nConsonantsSetSetSetSetSetSetSet = Set.empty[Set[Set[Set[Set[Set[Set[Set[Char]]]]]]]]]\n\
    \        val nConsonantsSetSetSetSetSetSetSet = Set.empty[Set[Set[Set[Set[Set[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpee5yi2kz.scala:36:97 -----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mnConsonantsSetSetSetSetSetSetSet\e\
    [0m = Set.empty[\e[35mSet\e[0m[\e[35mSet\e[0m[\e[35mSet\e[0m[\e[35mSet\e[0m[\e\
    [35mSet\e[0m[\e[35mSet\e[0m[\e[35mSet\e[0m[\e[35mChar\e[0m]]]]]]]]]\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \             end of statement expected but ']' found\n\e[31m\e[31m-- Error: /tmp/tmpee5yi2kz.scala:37:97\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m37 |\e[0m       \
    \ \e[33mval\e[0m \e[36mnConsonantsSetSetSetSetSetSetSet\e[0m = Set.empty[\e[35mSet\e\
    [0m[\e[35mSet\e[0m[\e[35mSet\e[0m[\e[35mSet\e[0m[\e[35mSet\e[0m[\e[35mSet\e[0m[\e\
    [35mSet\e[0m[\e[35mChar\e[0m]]]]]]]]]\n\e[31m\e[31m   |\e[0m                 \
    \                                                                            \
    \    ^\e[0m\n\e[31m   |\e[0m                                 end of statement\
    \ expected but ']' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpee5yi2kz.scala:39:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    an identifier expected, but '}' found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpee5yi2kz.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnConsonantsSetSetSet\e[0m\
    \ = Set.empty[\e[35mSet\e[0m[\e[35mSet\e[0m[\e[35mSet\e[0m[\e[35mChar\e[0m]]]]\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnConsonantsSetSetSet is already defined as \e[33mvalue\e[0m\
    \ \e[35mnConsonantsSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpee5yi2kz.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnConsonantsSetSetSetSetSet\e\
    [0m = Set.empty[\e[35mSet\e[0m[\e[35mSet\e[0m[\e[35mSet\e[0m[\e[35mSet\e[0m[\e\
    [35mSet\e[0m[\e[35mChar\e[0m]]]]]]\n\e[31m\e[31m   |\e[0m        "
  stdout: ''
  timestamp: 1659805639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ x =>\n            val count = x.count(_ == 'a')\n            if (count == n)\
    \ {\n                result += x\n            }\n        }\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn2sabf5d.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val list = words.toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += word\n        }\n        if (result.isEmpty)\
    \ List()\n        else result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnxe1k17w.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordsWithNConsonants = mutable.ListBuffer[String]()\n\
    \        val wordsWithNConsonantsCount = mutable.ListBuffer[Int]()\n        val\
    \ wordsWithNConsonantsCount2 = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount3\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount4 = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCount5 = mutable.ListBuffer[Int]()\n        val\
    \ wordsWithNConsonantsCount6 = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount7\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount8 = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCount9 = mutable.ListBuffer[Int]()\n        val\
    \ wordsWithNConsonantsCount10 = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount11\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount12 = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCount13 = mutable.ListBuffer[Int]()\n       \
    \ val wordsWithNConsonantsCount14 = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount15\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount16 = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCount17 = mutable.ListBuffer[Int]()\n       \
    \ val wordsWithNConsonantsCount18 = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount19\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount20 = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCount21 = mutable.ListBuffer[Int]()\n       \
    \ val wordsWithNConsonantsCount22 = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount23\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCount24 = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCount25 = mutable.ListBuffer[Int]()\n       \
    \ val wordsWithNConson\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphsd9pr_h.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphsd9pr_h.scala:21:35\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsWithNConsonants\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphsd9pr_h.scala:22:40 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonantsCount\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphsd9pr_h.scala:23:41 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonantsCount2\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphsd9pr_h.scala:24:41 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonantsCount3\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphsd9pr_h.scala:25:41 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[3"
  stdout: ''
  timestamp: 1659805635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val result: List[String] = new mutable.ListBuffer[String]()\n        val\
    \ consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n  \
    \      val vowelsCount = vowels.count(_ == s)\n        val consonantsCount = consonants.count(_\
    \ == s)\n        val vowelsCount2 = vowels.count(_ == s.charAt(0))\n        val\
    \ consonantsCount2 = consonants.count(_ == s.charAt(0))\n        val vowelsCount3\
    \ = vowels.count(_ == s.charAt(1))\n        val consonantsCount3 = consonants.count(_\
    \ == s.charAt(1))\n        val vowelsCount4 = vowels.count(_ == s.charAt(2))\n\
    \        val consonantsCount4 = consonants.count(_ == s.charAt(2))\n        val\
    \ vowelsCount5 = vowels.count(_ == s.charAt(3))\n        val consonantsCount5\
    \ = consonants.count(_ == s.charAt(3))\n        val vowelsCount6 = vowels.count(_\
    \ == s.charAt(4))\n        val consonantsCount6 = consonants.count(_ == s.charAt(4))\n\
    \        val vowelsCount7 = vowels.count(_ == s.charAt(5))\n        val consonantsCount7\
    \ = consonants.count(_ == s.charAt(5))\n        val vowelsCount8 = vowels.count(_\
    \ == s.charAt(6))\n        val consonantsCount8 = consonants.count(_ == s.charAt(6))\n\
    \        val vowelsCount9 = vowels.count(_ == s.charAt(7))\n        val consonantsCount9\
    \ = consonants.count(_ == s.charAt(7))\n        val vowelsCount10 = vowels.count(_\
    \ == s.charAt(8))\n        val consonantsCount10 = consonants.count(_ == s.charAt(8))\n\
    \        val vowelsCount11 = vowels.count(_ == s.charAt(9))\n        val consonantsCount11\
    \ = consonants.count(_ == s.charAt(9))\n        val vowelsCount12 = vowels.count(_\
    \ == s.charAt(10))\n        val consonantsCount12 = consonants.count(_ == s.charAt(10))\n\
    \        val vowelsCount13 = vowels.count(_ == s.charAt(11))\n        val consonantsCount13\
    \ = consonants.count(_ == s.charAt(11))\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpjn0_kqw5.scala:51:11 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpjn0_kqw5.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpjn0_kqw5.scala:27:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount2\e[0m = vowels.count(_\
    \ == s.charAt(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                          \
    \              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpjn0_kqw5.scala:28:48\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m       \
    \ \e[33mval\e[0m \e[36mconsonantsCount2\e[0m = consonants.count(_ == s.charAt(\e\
    [31m0\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \      ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and\
    \ Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpjn0_kqw5.scala:29:40\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m       \
    \ \e[33mval\e[0m \e[36mvowelsCount3\e[0m = vowels.count(_ == s.charAt(\e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpjn0_kqw5.scala:30:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount3\e[0m =\
    \ consonants.count(_ == s.c"
  stdout: ''
  timestamp: 1659805643
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = list.filter(x => x.toString.toList.count(_ == 'a') >= n).toList\n\
    \        if (result.isEmpty) List() else result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt6bayv1d.scala:26)\n\tat Problem.main(tmpt6bayv1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").filter(_.isLetter).map(_.toLowerCase).toList\n\
    \        val list = words.filter(_.length == n).map(_.toLowerCase).toList\n  \
    \      list.filter(_.contains(\"a\")).filter(_.contains(\"e\")).filter(_.contains(\"\
    i\")).filter(_.contains(\"o\")).filter(_.contains(\"u\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp03z688wc.scala:21:42 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = s.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).map(_.toLowerCase).toList\n\e[31m\e[31m   |\e\
    [0m                                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                              value isLetter is not a member of String\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659805637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.filter(x => x.contains(\"a\"))\n        val list3 = list.filter(x\
    \ => x.contains(\"e\"))\n        val list4 = list.filter(x => x.contains(\"i\"\
    ))\n        val list5 = list.filter(x => x.contains(\"o\"))\n        val list6\
    \ = list.filter(x => x.contains(\"u\"))\n        val list7 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list8 = list.filter(x => x.contains(\"h\"))\n\
    \        val list9 = list.filter(x => x.contains(\"l\"))\n        val list10 =\
    \ list.filter(x => x.contains(\"l\"))\n        val list11 = list.filter(x => x.contains(\"\
    a\"))\n        val list12 = list.filter(x => x.contains(\"e\"))\n        val list13\
    \ = list.filter(x => x.contains(\"i\"))\n        val list14 = list.filter(x =>\
    \ x.contains(\"o\"))\n        val list15 = list.filter(x => x.contains(\"u\"))\n\
    \        val list16 = list.filter(x => x.contains(\"y\"))\n        val list17\
    \ = list.filter(x => x.contains(\"h\"))\n        val list18 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list19 = list.filter(x => x.contains(\"l\"))\n\
    \        val list20 = list.filter(x => x.contains(\"a\"))\n        val list21\
    \ = list.filter(x => x.contains(\"e\"))\n        val list22 = list.filter(x =>\
    \ x.contains(\"i\"))\n        val list23 = list.filter(x => x.contains(\"o\"))\n\
    \        val list24 = list.filter(x => x.contains(\"u\"))\n        val list25\
    \ = list.filter(x => x.contains(\"y\"))\n        val list26 = list.filter(x =>\
    \ x.contains(\"h\"))\n        val list27 = list.filter(x => x.contains(\"l\"))\n\
    \        val list28 = list.filter(x => x.contains(\"l\"))\n        val list29\
    \ = list.filter(x => x.contains(\"a\"))\n        val list30 = list.filter(x =>\
    \ x.contains(\"e\"))\n        val list31 = list.filter(x => x.contains(\"i\"))\n\
    \        val list32 = list.filter(x => x.contains(\"o\"))\n        val list33\
    \ = list.filter(x => x.contains(\"u\"))\n        val list34 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list35 = list.filter(x => x.contains(\"h\"))\n\
    \        val list36 = list.filter(\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpedesvm1m.scala:56:33 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mlist36\e[0m = list.filter(\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpedesvm1m.scala:57:5\
    \ ---------------------\e[0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val result: List[String] = words.filter(word => word.count(_ == 'a')\
    \ == n)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn413p6f_.scala:26)\n\tat Problem.main(tmpn413p6f_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ => _.length == n).toList\n        list2.sortBy(_.toLowerCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpuoi57in1.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n).toList\n\e[31m\e[31m   |\e[0m                            \
    \         ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => _$2.length == n.\n1 error found\n"
  stdout: ''
  timestamp: 1659805632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x\
    \ => x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"E\"\
    ))\n        val list5 = list4.filter(x => x.contains(\"I\"))\n        val list6\
    \ = list5.filter(x => x.contains(\"O\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"U\"))\n        val list8 = list7.filter(x => x.contains(\"a\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"e\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"i\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"o\"))\n        val list12 = list11.filter(x => x.contains(\"\
    u\"))\n        val list13 = list12.filter(x => x.contains(\"A\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"E\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"I\"))\n        val list16 = list15.filter(x => x.contains(\"\
    O\"))\n        val list17 = list16.filter(x => x.contains(\"U\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"a\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"e\"))\n        val list20 = list19.filter(x => x.contains(\"\
    i\"))\n        val list21 = list20.filter(x => x.contains(\"o\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"u\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"A\"))\n        val list24 = list23.filter(x => x.contains(\"\
    E\"))\n        val list25 = list24.filter(x => x.contains(\"I\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"O\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"U\"))\n        val list28 = list27.filter(x => x.contains(\"\
    a\"))\n        val list29 = list28.filter(x => x.contains(\"e\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"i\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"o\"))\n        val list32 = list31.filter(x => x.contains(\"\
    u\"))\n        val list33 = list32.filter(x => x.contains(\"A\"))\n        val\
    \ list34 = list33.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjxjf10_5.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjxjf10_5.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = list.filter(_ => _.length == n).map(_.toLowerCase)\n   \
    \     result.filter(_.contains(\"a\")).map(_.split(\" \"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmplf_rz465.scala:22:38 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => _.length == n).map(_.toLowerCase)\n\e[31m\e[31m   |\e[0m                \
    \                      ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2\
    \ of expanded function:\n\e[31m   |\e[0m   _$2 => _$2.length == n.\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplf_rz465.scala:23:50 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        result.filter(_.contains(\e[31m\"a\"\e[0m)).map(_.split(\e\
    [31m\" \"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \      Found:    \e[1m\e[31mArray\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\
    \e[31m   |\e[0m                                           Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += word\n        }\n        if (result.isEmpty) List()\n      \
    \  else result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5dvtynn6.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val vowels = \"aeiou\"\n     \
    \   val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantSet = consonants.toSet\n\
    \        val vowelSet = vowels.toSet\n        val result: List[String] = Nil\n\
    \        val words: List[String] = s.split(\" \").toList\n        val wordSet\
    \ = words.toSet\n        val wordList = words.toList\n        val wordSetSize\
    \ = wordSet.size\n        val wordListSize = wordList.size\n        val wordSetIterator\
    \ = wordSet.iterator\n        val wordListIterator = wordList.iterator\n     \
    \   val wordSetIteratorSize = wordSetIterator.size\n        val wordListIteratorSize\
    \ = wordListIterator.size\n        val wordSetIteratorIterator = wordSetIterator.iterator\n\
    \        val wordListIteratorIterator = wordListIterator.iterator\n        val\
    \ wordSetIteratorIteratorSize = wordSetIteratorIterator.size\n        val wordListIteratorIteratorSize\
    \ = wordListIteratorIterator.size\n        val wordSetIteratorIteratorIterator\
    \ = wordSetIteratorIterator.iterator\n        val wordListIteratorIteratorIterator\
    \ = wordListIteratorIterator.iterator\n        val wordSetIteratorIteratorIteratorSize\
    \ = wordSetIteratorIteratorIterator.size\n        val wordListIteratorIteratorIteratorSize\
    \ = wordListIteratorIteratorIterator.size\n        val wordSetIteratorIteratorIteratorIterator\
    \ = wordSetIteratorIteratorIterator.iterator\n        val wordListIteratorIteratorIteratorIterator\
    \ = wordListIteratorIteratorIterator.iterator\n        val wordSetIteratorIteratorIteratorIteratorSize\
    \ = wordSetIteratorIteratorIteratorIterator.size\n        val wordListIteratorIteratorIteratorIteratorSize\
    \ = wordListIteratorIteratorIteratorIterator.size\n        val wordSetIteratorIteratorIteratorIteratorIterator\
    \ = wordSetIteratorIteratorIteratorIterator.iterator\n        val wordListIteratorIteratorIteratorIteratorIterator\
    \ = wordListIteratorIteratorIteratorIterator.iterator\n        val wordSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = wordSetIteratorIteratorIteratorIteratorIterator.size\n        val wordListIteratorIteratorIteratorIteratorIteratorSize\
    \ = wordListIteratorIteratorIteratorIteratorIterator.size\n        val wordSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = wordSetIteratorIteratorIteratorIteratorIterator.iterator\n        val wordListIteratorIteratorIteratorIteratorIteratorIterator\
    \ = wordListIteratorIteratorIteratorIteratorIterator.iterator\n        val wordSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = wordSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ wordListIteratorIteratorIteratorIteratorIteratorIteratorSize = wordListIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val wordSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ word\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwsk1h89u.scala:55:78 ------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \e[36mwordSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = word\n\e[31m\e[31m   |\e[0m                                            \
    \                                  ^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                         Not found: word\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwsk1h89u.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\
    \")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\")).filter(_.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb3z9sbte.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpb3z9sbte.scala:21:1915 ------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e[0m[\e[35mString\e\
    [0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e\
    [31m\"\"\e[0m)).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length == n).map(_.split(\e\
    [31m\"\"\e[0m)).filter(_.length == n).map(_.mkString(\e[31m\"\"\e[0m))"
  stdout: ''
  timestamp: 1659805661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result: List[String] = new mutable.ListBuffer[String]()\n       \
    \ list.foreach { word =>\n            val count = word.count(_ == 'a')\n     \
    \       if (count == n) {\n                result += word\n            }\n   \
    \     }\n        if (result.isEmpty) {\n            List()\n        } else {\n\
    \            result.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphwwy6c12.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphwwy6c12.scala:26:23 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                result += word\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value += is not a member\
    \ of List[String] - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659805653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        val vowels = \"\
    aeiou\".toList\n        val consonants = \"bcdfghjklmnpqrstvwxyz\".toList\n  \
    \      val vowelCount = list.count(vowels)\n        val consonantCount = list.count(consonants)\n\
    \        val consonantCountInWord = list.count(consonants.filter(_ == \" \"))\n\
    \        val consonantCountInWordInWord = list.count(consonants.filter(_ == \"\
    \ \").filter(_ == \" \"))\n        val consonantCountInWordInWordInWord = list.count(consonants.filter(_\
    \ == \" \").filter(_ == \" \").filter(_ == \" \"))\n        val consonantCountInWordInWordInWordInWord\
    \ = list.count(consonants.filter(_ == \" \").filter(_ == \" \").filter(_ == \"\
    \ \").filter(_ == \" \"))\n        val consonantCountInWordInWordInWordInWordInWord\
    \ = list.count(consonants.filter(_ == \" \").filter(_ == \" \").filter(_ == \"\
    \ \").filter(_ == \" \").filter(_ == \" \"))\n        val consonantCountInWordInWordInWordInWordInWordInWord\
    \ = list.count(consonants.filter(_ == \" \").filter(_ == \" \").filter(_ == \"\
    \ \").filter(_ == \" \").filter(_ == \" \").filter(_ == \" \"))\n        val consonantCountInWordInWordInWordInWordInWordInWordInWord\
    \ = list.count(consonants.filter(_ == \" \").filter(_ == \" \").filter(_ == \"\
    \ \").filter(_ == \" \").filter(_ == \" \").filter(_ == \" \").filter(_ == \"\
    \ \"))\n        val consonantCountInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = list.count(consonants.filter(_ == \" \").filter(_ == \" \").filter(_ == \"\
    \ \").filter(_ == \" \").filter(_ == \" \").filter(_ == \" \").filter(_ == \"\
    \ \").filter(_ == \" \"))\n        val consonantCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = list.count(consonants.filter(_ == \" \").filter(_ == \" \").filter(_ == \"\
    \ \").filter(_ == \" \").filter(_ == \" \").filter(_ == \" \").filter(_ == \"\
    \ \").filter(_ == \" \").filter(_ == \" \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmper_hc_lc.scala:35:253 ----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mconsonantCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\e\
    [0m = list.count(consonants.filter(_ == \e[31m\" \"\e[0m).filter(_ == \e[31m\"\
    \ \"\e[0m).filter(_ == \e[31m\" \"\e[0m).filter(_ == \e[31m\" \"\e[0m).filter(_\
    \ == \e[31m\" \"\e[0m).filter(_ == \e[31m\" \"\e[0m).filter(_ == \e[31m\" \"\e\
    [0m).filter(_ == \e[31m\" \"\e[0m).filter(_ == \" \n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \                 unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmper_hc_lc.scala:37:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m37 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmper_hc_lc.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmper_hc_lc.scala:25:36\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e\
    [0m = list.count(vowels)\n\e[31m\e[31m   |\e[0m                              \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m                                    Found:\
    \    (vowels : List[Char])\n\e[31m   |\e[0m                                  \
    \  Required: String => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e"
  stdout: ''
  timestamp: 1659805662
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase)\n        val counts = words.map(word\
    \ => word + word.count(_ == 'a'))\n        val maxCount = counts.max\n       \
    \ val maxCountIndex = counts.indexWhere(_ == maxCount)\n        val maxCountWord\
    \ = words(maxCountIndex)\n        val maxCountWordCount = maxCountWord.count(_\
    \ == 'a')\n        val maxCountWordIndex = words.indexWhere(_ == maxCountWord)\n\
    \        val maxCountWordIndex = maxCountWordIndex + maxCountWordCount\n     \
    \   val maxCountWordCount = maxCountWord.count(_ == 'a')\n        val maxCountWordIndex\
    \ = maxCountWordIndex + maxCountWordCount\n        val maxCountWordCount = maxCountWord.count(_\
    \ == 'a')\n        val maxCountWordIndex = maxCountWordIndex + maxCountWordCount\n\
    \        val maxCountWordCount = maxCountWord.count(_ == 'a')\n        val maxCountWordIndex\
    \ = maxCountWordIndex + maxCountWordCount\n        val maxCountWordCount = maxCountWord.count(_\
    \ == 'a')\n        val maxCountWordIndex = maxCountWordIndex + maxCountWordCount\n\
    \        val maxCountWordCount = maxCountWord.count(_ == 'a')\n        val maxCountWordIndex\
    \ = maxCountWordIndex + maxCountWordCount\n        val maxCountWordCount = maxCountWord.count(_\
    \ == 'a')\n        val maxCountWordIndex = maxCountWordIndex + maxCountWordCount\n\
    \        val maxCountWordCount = maxCountWord.count(_ == 'a')\n        val maxCountWordIndex\
    \ = maxCountWordIndex + maxCountWordCount\n        val maxCountWordCount = maxCountWord.count(_\
    \ == 'a')\n        val maxCountWordIndex = maxCountWordIndex + maxCountWordCount\n\
    \        val maxCountWordCount = maxCountWord.count(_ == 'a')\n        val maxCountWordIndex\
    \ = maxCountWordIndex + maxCountWordCount\n        val maxCountWordCount = maxCountWord.count(_\
    \ == 'a')\n        val maxCountWordIndex = maxCountWordIndex + maxCountWordCount\n\
    \        val maxCountWordCount = maxCountWord.count(_ == 'a')\n        val maxCountWordIndex\
    \ = maxCountWordIndex + maxCountWordCount\n        val maxCountWordCount = maxCountWord.count(_\
    \ == 'a')\n        val maxCountWordIndex = maxCountWordIndex + maxCountWordCount\n\
    \        val maxCountWordCount = maxCountWord.count(_ == 'a')\n        val maxCountWordIndex\
    \ = maxCountWord\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6even3vf.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxCountWordIndex\e[0m =\
    \ maxCountWordIndex + maxCountWordCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountWordIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxCountWordIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6even3vf.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxCountWordCount\e[0m =\
    \ maxCountWord.count(_ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountWordCount is already defined as \e[33mvalue\e[0m \e\
    [35mmaxCountWordCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6even3vf.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxCountWordIndex\e[0m =\
    \ maxCountWordIndex + maxCountWordCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountWordIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxCountWordIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6even3vf.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxCountWordCount\e[0m =\
    \ maxCountWord.count(_ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountWordCount is already defined as \e[33mvalue\e[0m \e\
    [35mmaxCountWordCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6eve"
  stdout: ''
  timestamp: 1659805656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase)\n\
    \        val list = words.toList.sortWith(_.length < n.toLong).take(n)\n     \
    \   list.map(_.split(\"\").filter(_.isLetter).mkString(\"\")).filter(_.nonEmpty)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpnizjlq_e.scala:22:41 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = words.toList.sortWith(_.length\
    \ < n.toLong).take(n)\n\e[31m\e[31m   |\e[0m                                 \
    \        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Wrong number of parameters, expected: 2\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnizjlq_e.scala:22:67 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = words.toList.sortWith(_.length\
    \ < n.toLong).take(n)\n\e[31m\e[31m   |\e[0m                                 \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                                 Found:    (n : Long)\n\e[31m   |\e[0m      \
    \                                              Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnizjlq_e.scala:23:38 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        list.map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e\
    [31m\"\"\e[0m)).filter(_.nonEmpty)\n\e[31m\e[31m   |\e[0m                    \
    \                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \    value isLetter is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1659805656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.count(_ == 'a')\n            if (count == n)\
    \ result += (word :: \"\")\n        }\n        if (result.isEmpty) List()\n  \
    \      else result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvz7q92hg.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805647
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase).toList\n        val consonants: List[String]\
    \ = words.filter(_.contains(\"a\")).map(_.toLowerCase).toList\n        val vowels:\
    \ List[String] = words.filter(_.contains(\"e\")).map(_.toLowerCase).toList\n \
    \       val consonantsCount: Long = consonants.count(_.size == n)\n        val\
    \ vowelsCount: Long = vowels.count(_.size == n)\n        if (consonantsCount ==\
    \ n && vowelsCount == n) {\n            consonants.toList ++ vowels.toList\n \
    \       } else {\n            words.filter(_.size == n).map(_.toLowerCase).toList\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfgczsoz_.scala:33)\n\tat Problem.main(tmpfgczsoz_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        val map = new\
    \ mutable.HashMap[String, Long]()\n        list.foreach(word => {\n          \
    \  val count = map.get(word)\n            if (count == null) {\n             \
    \   map.put(word, 1l)\n            } else {\n                map.put(word, count\
    \ + 1l)\n            }\n        })\n        map.foreach(word => {\n          \
    \  if (map.get(word) == n) {\n                result += (word + \" \")\n     \
    \       }\n        })\n        if (result.isEmpty) {\n            List()\n   \
    \     } else {\n            result.dropRight(result.length).reverse\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdfsub08d.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdfsub08d.scala:23:22\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mmap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805648
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").map(_.toUpperCase)\n\
    \        val list = words.filter(_.length == n).map(_.split(\"\")).map(_.toUpperCase)\n\
    \        list.filter(_.contains(\"CONSONANTS\")).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpynabn1qi.scala:22:70 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = words.filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m)).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m\
    \                                                                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value toUpperCase is not a member of\
    \ Array[String]\n\e[31m\e[31m-- Error: /tmp/tmpynabn1qi.scala:22:82 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = words.filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m)).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \      ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659805659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ => _.length == n).sortBy(_.toLowerCase)\n \
    \       list2.map(x => x.split(\"\").filter(_.isLetter).mkString(\"\").toLowerCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpr55v9_qk.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n).sortBy(_.toLowerCase)\n\e[31m\e[31m   |\e[0m             \
    \                        ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2\
    \ of expanded function:\n\e[31m   |\e[0m   _$2 => _$2.length == n.\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpr55v9_qk.scala:23:44 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        list2.map(\e[36mx\e[0m => x.split(\e[31m\"\"\e\
    [0m).filter(_.isLetter).mkString(\e[31m\"\"\e[0m).toLowerCase)\n\e[31m\e[31m \
    \  |\e[0m                                          ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value isLetter is not a member of String\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(x => x.contains(\"a\"))\n        val list3 =\
    \ list.filter(x => x.contains(\"e\"))\n        val list4 = list.filter(x => x.contains(\"\
    i\"))\n        val list5 = list.filter(x => x.contains(\"o\"))\n        val list6\
    \ = list.filter(x => x.contains(\"u\"))\n        val list7 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list8 = list.filter(x => x.contains(\"h\"))\n\
    \        val list9 = list.filter(x => x.contains(\"l\"))\n        val list10 =\
    \ list.filter(x => x.contains(\"l\"))\n        val list11 = list.filter(x => x.contains(\"\
    a\"))\n        val list12 = list.filter(x => x.contains(\"e\"))\n        val list13\
    \ = list.filter(x => x.contains(\"i\"))\n        val list14 = list.filter(x =>\
    \ x.contains(\"o\"))\n        val list15 = list.filter(x => x.contains(\"u\"))\n\
    \        val list16 = list.filter(x => x.contains(\"y\"))\n        val list17\
    \ = list.filter(x => x.contains(\"h\"))\n        val list18 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list19 = list.filter(x => x.contains(\"l\"))\n\
    \        val list20 = list.filter(x => x.contains(\"a\"))\n        val list21\
    \ = list.filter(x => x.contains(\"e\"))\n        val list22 = list.filter(x =>\
    \ x.contains(\"i\"))\n        val list23 = list.filter(x => x.contains(\"o\"))\n\
    \        val list24 = list.filter(x => x.contains(\"u\"))\n        val list25\
    \ = list.filter(x => x.contains(\"y\"))\n        val list26 = list.filter(x =>\
    \ x.contains(\"h\"))\n        val list27 = list.filter(x => x.contains(\"l\"))\n\
    \        val list28 = list.filter(x => x.contains(\"l\"))\n        val list29\
    \ = list.filter(x => x.contains(\"a\"))\n        val list30 = list.filter(x =>\
    \ x.contains(\"e\"))\n        val list31 = list.filter(x => x.contains(\"i\"))\n\
    \        val list32 = list.filter(x => x.contains(\"o\"))\n        val list33\
    \ = list.filter(x => x.contains(\"u\"))\n        val list34 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list35 = list.filter(x => x.contains(\"h\"))\n\
    \        val list36 = \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpneyd25fl.scala:56:20 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mlist36\e[0m = \n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpneyd25fl.scala:57:5 ---------------------\e[0m\e[0m\n\e[31m57\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result: List[String] = new ListBuffer[String]()\n        list.foreach\
    \ { word =>\n            val wordList = word.split(\"\")\n            val consonants\
    \ = wordList.filter(x => x.toString.toLowerCase == \"a\" ||\n                x.toString.toLowerCase\
    \ == \"e\" ||\n                x.toString.toLowerCase == \"i\" ||\n          \
    \      x.toString.toLowerCase == \"o\" ||\n                x.toString.toLowerCase\
    \ == \"u\")\n            if (consonants.size == n) {\n                result.append(word)\n\
    \            }\n        }\n        if (result.isEmpty) {\n            List()\n\
    \        } else {\n            result.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuooqwkjh.scala:22:35\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m                   Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpuooqwkjh.scala:31:23 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                result.append(word)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue append is not a member\
    \ of List[String] - did you mean result.appended?\n2 errors found\n"
  stdout: ''
  timestamp: 1659805660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").map(_.toUpperCase)\n\
    \        val list2 = list.filter(x => x.contains(\"A\") || x.contains(\"E\") ||\
    \ x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list3\
    \ = list2.filter(x => x.contains(\"N\") || x.contains(\"S\") || x.contains(\"\
    T\") || x.contains(\"D\"))\n        val list4 = list3.filter(x => x.contains(\"\
    P\") || x.contains(\"F\") || x.contains(\"G\") || x.contains(\"H\") || x.contains(\"\
    J\") || x.contains(\"K\") || x.contains(\"L\") || x.contains(\"M\") || x.contains(\"\
    N\") || x.contains(\"R\") || x.contains(\"S\") || x.contains(\"T\") || x.contains(\"\
    W\") || x.contains(\"V\") || x.contains(\"X\") || x.contains(\"Y\") || x.contains(\"\
    Z\"))\n        val list5 = list4.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list6 = list5.filter(x => x.contains(\"N\") || x.contains(\"S\") || x.contains(\"\
    T\") || x.contains(\"D\"))\n        val list7 = list6.filter(x => x.contains(\"\
    P\") || x.contains(\"F\") || x.contains(\"G\") || x.contains(\"H\") || x.contains(\"\
    J\") || x.contains(\"K\") || x.contains(\"L\") || x.contains(\"M\") || x.contains(\"\
    N\") || x.contains(\"R\") || x.contains(\"S\") || x.contains(\"T\") || x.contains(\"\
    W\") || x.contains(\"V\") || x.contains(\"X\") || x.contains(\"Y\") || x.contains(\"\
    Z\"))\n        val list8 = list7.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list9 = list8.filter(x => x.contains(\"N\") || x.contains(\"S\") || x.contains(\"\
    T\") || x.contains(\"D\"))\n        val list10 = list9.filter(x => x.contains(\"\
    P\") || x.contains(\"F\") || x.contains(\"G\") || x.contains(\"H\") || x.contains(\"\
    J\") || x.contains(\"K\") || x.contains(\"L\") || x.contains(\"M\") || x.contains(\"\
    N\") \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpctdquytl.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpctdquytl.scala:31:5 ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase).toList\n        val counts: List[Long]\
    \ = words.map(_.length).distinct\n        val maxCount = counts.max\n        val\
    \ maxCountIndex = counts.indexOf(maxCount)\n        val maxCountWords = words.take(maxCountIndex\
    \ + 1)\n        val maxCountWordsCount = maxCountWords.map(_.length).distinct\n\
    \        val maxCountWordsIndex = maxCountWordsCount.indexOf(maxCount)\n     \
    \   val maxCountWordsCount = maxCountWordsCount.take(maxCountWordsIndex + 1)\n\
    \        val maxCountWordsIndex = maxCountWordsIndex.take(maxCountWordsCount.length)\n\
    \        val maxCountWordsCount = maxCountWordsCount.take(maxCountWordsIndex.length)\n\
    \        val maxCountWordsCount = maxCountWordsCount.take(maxCountWordsIndex.length)\n\
    \        val maxCountWordsCount = maxCountWordsCount.take(maxCountWordsIndex.length)\n\
    \        val maxCountWordsCount = maxCountWordsCount.take(maxCountWordsIndex.length)\n\
    \        val maxCountWordsCount = maxCountWordsCount.take(maxCountWordsIndex.length)\n\
    \        val maxCountWordsCount = maxCountWordsCount.take(maxCountWordsIndex.length)\n\
    \        val maxCountWordsCount = maxCountWordsCount.take(maxCountWordsIndex.length)\n\
    \        val maxCountWordsCount = maxCountWordsCount.take(maxCountWordsIndex.length)\n\
    \        val maxCountWordsCount = maxCountWordsCount.take(maxCountWordsIndex.length)\n\
    \        val maxCountWordsCount = maxCountWordsCount.take(maxCountWordsIndex.length)\n\
    \        val maxCountWordsCount = maxCountWordsCount.take(maxCountWordsIndex.length)\n\
    \        val maxCountWordsCount = maxCountWordsCount.take(maxCountWordsIndex.length)\n\
    \        val maxCountWordsCount = maxCountWordsCount.take(maxCountWordsIndex.length)\n\
    \        val maxCountWordsCount = maxCountWordsCount.take(maxCountWordsIndex.length)\n\
    \        val maxCountWordsCount = maxCountWordsCount.take(maxCountWordsIndex.length)\n\
    \        val maxCountWordsCount = maxCountWordsCount.take(maxCountWordsIndex.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7m599_4j.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7m599_4j.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxCountWordsCount\e[0m = maxCountWordsCount.take(maxCountWordsIndex +\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountWordsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxCountWordsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp7m599_4j.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxCountWordsIndex\e[0m\
    \ = maxCountWordsIndex.take(maxCountWordsCount.length)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountWordsIndex is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxCountWordsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp7m599_4j.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxCountWordsCount\e[0m\
    \ = maxCountWordsCount.take(maxCountWordsIndex.length)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountWordsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxCountWordsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp7m599_4j.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxCountWordsCount\e[0m\
    \ = maxCountWordsCount.take(maxCountWordsIndex.length)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^"
  stdout: ''
  timestamp: 1659805661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \")\n\
    \        val resultList = mutable.ListBuffer[String]()\n        for(word <- wordList){\n\
    \            if(word.length == n){\n                resultList += word\n     \
    \       }\n        }\n        if(resultList.isEmpty){\n            resultList.clear()\n\
    \        }\n        resultList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd6ff7a01.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresultList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659805654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.filter(x => x.contains(\"a\") || x.contains(\"e\") ||\
    \ x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\"))\n        val list3\
    \ = list2.filter(x => x.contains(\"a\") || x.contains(\"e\") || x.contains(\"\
    i\") || x.contains(\"o\") || x.contains(\"u\"))\n        val list4 = list3.filter(x\
    \ => x.contains(\"a\") || x.contains(\"e\") || x.contains(\"i\") || x.contains(\"\
    o\") || x.contains(\"u\"))\n        val list5 = list4.filter(x => x.contains(\"\
    a\") || x.contains(\"e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"\
    u\"))\n        val list6 = list5.filter(x => x.contains(\"a\") || x.contains(\"\
    e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\"))\n       \
    \ val list7 = list6.filter(x => x.contains(\"a\") || x.contains(\"e\") || x.contains(\"\
    i\") || x.contains(\"o\") || x.contains(\"u\"))\n        val list8 = list7.filter(x\
    \ => x.contains(\"a\") || x.contains(\"e\") || x.contains(\"i\") || x.contains(\"\
    o\") || x.contains(\"u\"))\n        val list9 = list8.filter(x => x.contains(\"\
    a\") || x.contains(\"e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"\
    u\"))\n        val list10 = list9.filter(x => x.contains(\"a\") || x.contains(\"\
    e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\"))\n       \
    \ val list11 = list10.filter(x => x.contains(\"a\") || x.contains(\"e\") || x.contains(\"\
    i\") || x.contains(\"o\") || x.contains(\"u\"))\n        val list12 = list11.filter(x\
    \ => x.contains(\"a\") || x.contains(\"e\") || x.contains(\"i\") || x.contains(\"\
    o\") || x.contains(\"u\"))\n        val list13 = list12.filter(x => x.contains(\"\
    a\") || x.contains(\"e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"\
    u\"))\n        val list14 = list13.filter(x => x.contains(\"a\") || x.contains(\"\
    e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmplkqvnw9l.scala:34:127 ----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mlist14\e[0m = list13.filter(\e\
    [36mx\e[0m => x.contains(\e[31m\"a\"\e[0m) || x.contains(\e[31m\"e\"\e[0m) ||\
    \ x.contains(\e[31m\"i\"\e[0m) || x.contains(\e[31m\"o\"\e[0m) || x.contains(\"\
    u\n\e[31m\e[31m   |\e[0m                                                     \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                                 unclosed\
    \ string literal\n\e[31m\e[31m-- Error: /tmp/tmplkqvnw9l.scala:36:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmplkqvnw9l.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmplkqvnw9l.scala:36:4 -------------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m\
    \    Not found: udef\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val vowelCount = s.count(vowels)\n        val consonantCount = s.count(consonants)\n\
    \        val vowelCountInString = vowelCount / n\n        val consonantCountInString\
    \ = consonantCount / n\n        val vowelCountInString2 = vowelCount % n\n   \
    \     val consonantCountInString2 = consonantCount % n\n        val vowelCountInString3\
    \ = vowelCount * n\n        val consonantCountInString3 = consonantCount * n\n\
    \        val vowelCountInString4 = vowelCount * n\n        val consonantCountInString4\
    \ = consonantCount * n\n        val vowelCountInString5 = vowelCount * n\n   \
    \     val consonantCountInString5 = consonantCount * n\n        val vowelCountInString6\
    \ = vowelCount * n\n        val consonantCountInString6 = consonantCount * n\n\
    \        val vowelCountInString7 = vowelCount * n\n        val consonantCountInString7\
    \ = consonantCount * n\n        val vowelCountInString8 = vowelCount * n\n   \
    \     val consonantCountInString8 = consonantCount * n\n        val vowelCountInString9\
    \ = vowelCount * n\n        val consonantCountInString9 = consonantCount * n\n\
    \        val vowelCountInString10 = vowelCount * n\n        val consonantCountInString10\
    \ = consonantCount * n\n        val vowelCountInString11 = vowelCount * n\n  \
    \      val consonantCountInString11 = consonantCount * n\n        val vowelCountInString12\
    \ = vowelCount * n\n        val consonantCountInString12 = consonantCount * n\n\
    \        val vowelCountInString13 = vowelCount * n\n        val consonantCountInString13\
    \ = consonantCount * n\n        val vowelCountInString14 = vowelCount * n\n  \
    \      val consonantCountInString14 = consonantCount * n\n        val vowelCountInString15\
    \ = vowelCount * n\n        val consonantCountInString15 = consonantCount * n\n\
    \        val vowelCountInString16 = vowelCount * n\n        val consonantCountInString16\
    \ = consonantCount \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvd64mwgu.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvd64mwgu.scala:24:33\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e\
    [0m = s.count(vowels)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    (vowels : String)\n\
    \e[31m   |\e[0m                                 Required: Char => Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvd64mwgu.scala:25:37\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e\
    [0m = s.count(consonants)\n\e[31m\e[31m   |\e[0m                             \
    \        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Found:    (consonants : String)\n\e[31m   |\e[0m                           \
    \          Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpvd64mwgu.scala:58:5 ---------------------\e[0m\e\
    [0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805662
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += word\n        }\n        if (result.isEmpty) List()\n      \
    \  else result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5dvtynn6.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ => _.length == n).map(_.toUpperCase)\n    \
    \    list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpyxed_pks.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m                \
    \                     ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2\
    \ of expanded function:\n\e[31m   |\e[0m   _$2 => _$2.length == n.\n1 error found\n"
  stdout: ''
  timestamp: 1659805656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.isLetter)\n            if\
    \ (count == n) result += word\n        }\n        if (result.isEmpty) List()\n\
    \        else result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1mcahwli.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.split(\"[^aeiou]\").length\n            if\
    \ (count == n) result += (word + \" \")\n        }\n        result.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx06aagjf.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val counts = words.map(word => word.split(\"[^aeiou]\").length).sum\n\
    \        val list = words.filter(word => word.split(\"[^aeiou]\").length == n)\n\
    \        list.map(word => word.split(\"[^aeiou]\").mkString(\"\")).filter(word\
    \ => counts == word.length).map(word => word).distinct\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4hwcdky6.scala:24:118\
    \ -------------------\e[0m\e[0m\n\e[31m24 |\e[0m        list.map(\e[36mword\e\
    [0m => word.split(\e[31m\"[^aeiou]\"\e[0m).mkString(\e[31m\"\"\e[0m)).filter(\e\
    [36mword\e[0m => counts == word.length).map(\e[36mword\e[0m => word).distinct\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659805663
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val result: List[String] = new mutable.ListBuffer[String]()\n        val\
    \ count = new mutable.HashMap[String, Long]()\n        for (word <- words) {\n\
    \            val count = count.getOrElse(word, 0) + 1\n            if (count ==\
    \ n) {\n                result += (word + \" \")\n            }\n            count.put(word,\
    \ count)\n        }\n        if (result.isEmpty) {\n            List()\n     \
    \   } else {\n            result.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprv_kqi5o.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprv_kqi5o.scala:23:24 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprv_kqi5o.scala:27:23\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                result +=\
    \ (word + \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value += is not a member of List[String] - did you mean\
    \ result.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659805665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.length == n).map(_.toLowerCase).toList\n        words.filter(_.contains(\"\
    a\")).map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.toLowerCase).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmjfbjfhv.scala:25)\n\tat Problem.main(tmpmjfbjfhv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = new mutable.ListBuffer[String]()\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n   \
    \     val vowels = \"aeiouAEIOU\"\n        val consonantCount = s.count(c => consonants.contains(c))\n\
    \        val vowelCount = s.count(c => vowels.contains(c))\n        val consonantWords\
    \ = s.filter(c => consonants.contains(c))\n        val vowelWords = s.filter(c\
    \ => vowels.contains(c))\n        val consonantWordCount = consonantWords.length\n\
    \        val vowelWordCount = vowelWords.length\n        val consonantWordsCount\
    \ = consonantWords.length\n        val vowelWordsCount = vowelWords.length\n \
    \       if (consonantWordCount == n) {\n            words += consonantWords\n\
    \        } else if (vowelWordCount == n) {\n            words += vowelWords\n\
    \        } else if (consonantWordCount + vowelWordCount == n) {\n            words\
    \ += consonantWords\n            words += vowelWords\n        } else if (consonantWordCount\
    \ + consonantWordsCount + vowelWordCount + vowelWordsCount == n) {\n         \
    \   words += consonantWords\n            words += consonantWords\n           \
    \ words += vowelWords\n            words += vowelWords\n        }\n        if\
    \ (words.length == 0) {\n            words\n        } else {\n            words\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0sm259ft.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        for (i <- 0 until\
    \ list.size) {\n            if (list(i).length == n) {\n                result\
    \ += list(i)\n            }\n        }\n        if (result.isEmpty) {\n      \
    \      List()\n        } else {\n            result.toList\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnubp_524.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ x =>\n            if (x.contains(\"a\") || x.contains(\"e\") || x.contains(\"\
    i\") || x.contains(\"o\") || x.contains(\"u\") || x.contains(\"y\")) result.add(x)\n\
    \        }\n        if (result.size == 0) result.add(\"empty\")\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6cdx_2um.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiouAEIOU\".toCharArray\n        val consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".toCharArray\n        val length =\
    \ s.length\n        val vowelCount = s.count(vowels)\n        val consonantCount\
    \ = s.count(consonants)\n        val consonantCountInWord = consonantCount / length\n\
    \        val consonantCountInWordInWord = consonantCountInWord * consonantCountInWord\n\
    \        val consonantCountInWordInWordInWord = consonantCountInWordInWord * consonantCountInWordInWord\n\
    \        val consonantCountInWordInWordInWordInWord = consonantCountInWordInWordInWord\
    \ * consonantCountInWordInWordInWord\n        val consonantCountInWordInWordInWordInWordInWord\
    \ = consonantCountInWordInWordInWordInWord * consonantCountInWordInWordInWordInWordInWord\n\
    \        val consonantCountInWordInWordInWordInWordInWordInWord = consonantCountInWordInWordInWordInWordInWordInWord\
    \ * consonantCountInWordInWordInWordInWordInWordInWord\n        val consonantCountInWordInWordInWordInWordInWordInWordInWord\
    \ = consonantCountInWordInWordInWordInWordInWordInWordInWord * consonantCountInWordInWordInWordInWordInWordInWordInWord\n\
    \        val consonantCountInWordInWordInWordInWordInWordInWordInWordInWord =\
    \ consonantCountInWordInWordInWordInWordInWordInWordInWordInWord * consonantCountInWordInWordInWordInWordInWordInWordInWordInWord\n\
    \        val consonantCountInWordInWordInWordInWordInWordInWordInWordInWord =\
    \ consonantCountInWordInWordInWordInWordInWordInWordInWordInWordInWord * consonantCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\n\
    \        val consonantCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = con\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt6lzzjdp.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mconsonantCountInWordInWordInWordInWordInWordInWordInWordInWord\e\
    [0m = consonantCountInWordInWordInWordInWordInWordInWordInWordInWordInWord * consonantCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCountInWordInWordInWordInWordInWordInWordInWordInWord\
    \ is already defined as \e[33mvalue\e[0m \e[35mconsonantCountInWordInWordInWordInWordInWordInWordInWordInWord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpt6lzzjdp.scala:21:25 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt6lzzjdp.scala:25:33 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = s.count(vowels)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Found:    (vowels : Array[Char])\n\e[31m \
    \  |\e[0m                                 Required: Char => Boolean\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt6lzzjdp.scala:26:37 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = s.count(consonants)\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       "
  stdout: ''
  timestamp: 1659805675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ != \"\")\n        val list3 = list2.filter(_\
    \ == \"\")\n        val list4 = list3.filter(_ != \" \")\n        val list5 =\
    \ list4.filter(_ == \" \")\n        val list6 = list5.filter(_ != \" \")\n   \
    \     val list7 = list6.filter(_ == \" \")\n        val list8 = list7.filter(_\
    \ != \" \")\n        val list9 = list8.filter(_ == \" \")\n        val list10\
    \ = list9.filter(_ != \" \")\n        val list11 = list10.filter(_ == \" \")\n\
    \        val list12 = list11.filter(_ != \" \")\n        val list13 = list12.filter(_\
    \ == \" \")\n        val list14 = list13.filter(_ != \" \")\n        val list15\
    \ = list14.filter(_ == \" \")\n        val list16 = list15.filter(_ != \" \")\n\
    \        val list17 = list16.filter(_ == \" \")\n        val list18 = list17.filter(_\
    \ != \" \")\n        val list19 = list18.filter(_ == \" \")\n        val list20\
    \ = list19.filter(_ != \" \")\n        val list21 = list20.filter(_ == \" \")\n\
    \        val list22 = list21.filter(_ != \" \")\n        val list23 = list22.filter(_\
    \ == \" \")\n        val list24 = list23.filter(_ != \" \")\n        val list25\
    \ = list24.filter(_ == \" \")\n        val list26 = list25.filter(_ != \" \")\n\
    \        val list27 = list26.filter(_ == \" \")\n        val list28 = list27.filter(_\
    \ != \" \")\n        val list29 = list28.filter(_ == \" \")\n        val list30\
    \ = list29.filter(_ != \" \")\n        val list31 = list30.filter(_ == \" \")\n\
    \        val list32 = list31.filter(_ != \" \")\n        val list33 = list32.filter(_\
    \ == \" \")\n        val list34 = list33.filter(_ != \" \")\n        val list35\
    \ = list34.filter(_ == \" \")\n        val list36 = list35.filter(_ != \" \")\n\
    \        val list37 = list36.filter(_ == \" \")\n        val list38 = list37.filter(_\
    \ != \" \")\n        val list39 = list38.filter(_ == \" \")\n        val list40\
    \ = list39.filter(_ != \" \")\n        val list41 = list40.filter(_ == \" \")\n\
    \        val list42 = list41.filter(_ != \" \")\n        val list43 = list42.filter(_\
    \ == \" \")\n        val list44 = list43.filter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8hxdyl2n.scala:65:5\
    \ ---------------------\e[0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805674
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = list.filter(x => x.toString.count(_ == 'a') == n)\n    \
    \    result.map(x => x.split(\" \").filter(y => y.toString.count(_ == 'a') ==\
    \ n).mkString(\" \"))\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0di1imrn.scala:26)\n\tat Problem.main(tmp0di1imrn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            if (word.length == n) {\n                result ++= word.split(\"\
    \").filter(x => x != \"a\" && x != \"e\" && x != \"i\" && x != \"o\" && x != \"\
    u\")\n            }\n        }\n        if (result.isEmpty) {\n            List()\n\
    \        } else {\n            result.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5xm7rgd.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val wordList = list.filter(_.length == n)\n        val wordList = wordList.map(_.toLowerCase)\n\
    \        wordList.filter(_.contains(\"a\")).map(_.split(\" \")).flatten.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7fbib6hv.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = wordList.map(_.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mwordList is already defined as \e[33mvalue\e[0m \e[35mwordList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659805670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase).toList\n        val consonants: List[String]\
    \ = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.matches(\"[b-df-hj-np-tv-z]\"\
    )).toList\n        val consonantsCount: Map[String, Long] = consonants.groupBy(c\
    \ => c).mapValues(_.size).toMap\n        val consonantsCountSorted: Map[String,\
    \ Long] = consonantsCount.sortBy(_._2).reverse\n        val consonantsCountSortedWithCount:\
    \ Map[String, Long] = consonantsCountSorted.map{case (k, v) => k -> v}\n     \
    \   val consonantsCountSortedWithCountAndWords: Map[String, Long] = consonantsCountSortedWithCount.map{case\
    \ (k, v) => k -> v}\n        val consonantsCountSortedWithCountAndWordsSorted:\
    \ Map[String, Long] = consonantsCountSortedWithCountAndWords.sortBy(_._1).reverse\n\
    \        val consonantsCountSortedWithCountAndWordsSortedWithCount: Map[String,\
    \ Long] = consonantsCountSortedWithCountAndWordsSorted.map{case (k, v) => k ->\
    \ v}\n        val consonantsCountSortedWithCountAndWordsSortedWithCountAndWords:\
    \ Map[String, Long] = consonantsCountSortedWithCountAndWordsSortedWithCount.map{case\
    \ (k, v) => k -> v}\n        val consonantsCountSortedWithCountAndWordsSortedWithCountAndWordsSorted:\
    \ Map[String, Long] = consonantsCountSortedWithCountAndWordsSortedWithCountAndWords.sortBy(_._1).reverse\n\
    \        val consonantsCountSortedWithCountAndWordsSortedWithCountAndWordsSortedWithCount:\
    \ Map[String, Long] = consonantsCountSortedWithCountAndWordsSortedWithCountAndWordsSorted.map{case\
    \ (k, v) => k -> v}\n        val consonantsCountSortedWithCountAndWordsSortedWithCountAndWordsSortedWithCountAndWords:\
    \ Map[String, Long] = consonantsCountSortedWithCountAndWordsSortedWithCountAndWordsSortedWithCount.map{case\
    \ (k, v) => k -> v}\n        val consonantsCountSortedWithCountAndWordsSortedWithCountAndWordsSortedWithCountAndWordsSorted:\
    \ Map[String, Long] = consonantsCountSortedWithCountAndWordsSortedWithCountAndWords\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpac11jkdn.scala:23:49\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e\
    [0m: \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = consonants.groupBy(\e\
    [36mc\e[0m => c).mapValues(_.size).toMap\n\e[31m\e[31m   |\e[0m              \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Map[String, Int]\n\e[31m\
    \   |\e[0m                          Required: collection.mutable.Map[String, Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpac11jkdn.scala:24:71\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantsCountSorted\e[0m: \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e\
    [0m] = consonantsCount.sortBy(_._2).reverse\n\e[31m\e[31m   |\e[0m           \
    \                                            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m    value sortBy is not a member of collection.mutable.Map[String, Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpac11jkdn.scala:27:117 -----------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCountSortedWithCountAndWordsSorted\e\
    [0m: \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = consonantsCountSortedWithCountAndWords.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m    value sortBy is not a member of collection.mutable.Map[String,\
    \ Long]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpac11jkdn.scala:30:163\
    \ -----------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantsCountSortedWithCountAndWordsSortedWithCountAndWordsSorted\e[0m:\
    \ \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = consonantsCountSortedWithCountAndWordsSortedWithCountAndWords.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                           "
  stdout: ''
  timestamp: 1659805682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.isLetter)\n            if\
    \ (count == n) result += word\n        }\n        if (result.isEmpty) List()\n\
    \        else result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1mcahwli.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val result: List[String] = new mutable.ListBuffer[String]()\n       \
    \ val vowels = \"aeiou\".toList\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    .toList\n        val consonantsCount = consonants.count(_ == \" \").toLong\n \
    \       val vowelsCount = vowels.count(_ == \" \").toLong\n        val consonantsCount2\
    \ = consonants.count(_ == \" \").toLong\n        val vowelsCount2 = vowels.count(_\
    \ == \" \").toLong\n        val consonantsCount3 = consonants.count(_ == \" \"\
    ).toLong\n        val vowelsCount3 = vowels.count(_ == \" \").toLong\n       \
    \ val consonantsCount4 = consonants.count(_ == \" \").toLong\n        val vowelsCount4\
    \ = vowels.count(_ == \" \").toLong\n        val consonantsCount5 = consonants.count(_\
    \ == \" \").toLong\n        val vowelsCount5 = vowels.count(_ == \" \").toLong\n\
    \        val consonantsCount6 = consonants.count(_ == \" \").toLong\n        val\
    \ vowelsCount6 = vowels.count(_ == \" \").toLong\n        val consonantsCount7\
    \ = consonants.count(_ == \" \").toLong\n        val vowelsCount7 = vowels.count(_\
    \ == \" \").toLong\n        val consonantsCount8 = consonants.count(_ == \" \"\
    ).toLong\n        val vowelsCount8 = vowels.count(_ == \" \").toLong\n       \
    \ val consonantsCount9 = consonants.count(_ == \" \").toLong\n        val vowelsCount9\
    \ = vowels.count(_ == \" \").toLong\n        val consonantsCount10 = consonants.count(_\
    \ == \" \").toLong\n        val vowelsCount10 = vowels.count(_ == \" \").toLong\n\
    \        val consonantsCount11 = consonants.count(_ == \" \").toLong\n       \
    \ val vowelsCount11 = vowels.count(_ == \" \").toLong\n        val consonantsCount12\
    \ = consonants.count(_ == \" \").toLong\n        val vowelsCount12 = vowels.count(_\
    \ == \" \").toLong\n        val consonantsCount13 = consonants.count(_ == \" \"\
    ).toLong\n        val vowelsCount13 = vowels.count(_ == \" \").toLong\n      \
    \  val consonantsCount14 = consonants.count(_ == \" \").toLong\n        val vowelsCount14\
    \ = vowels.count(\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoy8p_bv3.scala:52:41 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount14\e[0m = vowels.count(\n\
    \e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e[31m \
    \  |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoy8p_bv3.scala:22:39\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m: \e[35mList\e[0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                                    \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpoy8p_bv3.scala:25:47\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \ \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.count(_ == \e[31m\" \"\
    \e[0m).toLong\n\e[31m\e[31m   |\e[0m                                         \
    \      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpoy8p_bv3.scala:26:39\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \ \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.count(_ == \e[31m\" \"\e[0m).toLong\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpoy8p_bv3.scala:27:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount2\e[0m =\
    \ consonants.count(_ == \e[31m\" \"\e[0m).toLong\n\e[31m\e[31m   |\e[0m      \
    \                                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpoy8p_bv3.scala:28:40 ------------------------------"
  stdout: ''
  timestamp: 1659805685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val result = new mutable.ListBuffer[String]()\n        words.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) {\n                result += (word + \" \")\n            }\n        })\n\
    \        return result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkikvzg_k.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").map(_.toLowerCase)\n\
    \        val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\", \"y\")\n        val consonantCount = wordList.filter(x => consonants.contains(x)).size\n\
    \        val vowelCount = wordList.filter(x => vowels.contains(x)).size\n    \
    \    val consonantWords = wordList.filter(x => consonants.contains(x))\n     \
    \   val vowelWords = wordList.filter(x => vowels.contains(x))\n        val consonantWordsCount\
    \ = consonantWords.size\n        val vowelWordsCount = vowelWords.size\n     \
    \   val consonantWordsContain = consonantWords.take(n)\n        val vowelWordsContain\
    \ = vowelWords.take(n)\n        if (consonantWordsCount < n && vowelWordsCount\
    \ < n) {\n            consonantWordsContain\n        } else if (consonantWordsCount\
    \ < n && vowelWordsCount >= n) {\n            vowelWordsContain\n        } else\
    \ if (consonantWordsCount >= n && vowelWordsCount < n) {\n            consonantWordsContain.union(vowelWordsContain)\n\
    \        } else if (consonantWordsCount >= n && vowelWordsCount >= n) {\n    \
    \        consonantWordsContain.union(vowelWordsContain)\n        } else {\n  \
    \          consonantWordsContain.union(vowelWordsContain)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj779n4rj.scala:30:56\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mconsonantWordsContain\e\
    [0m = consonantWords.take(n)\n\e[31m\e[31m   |\e[0m                          \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                             Found:    (n : Long)\n\e[31m   |\e[0m          \
    \                                          Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj779n4rj.scala:31:48 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelWordsContain\e[0m =\
    \ vowelWords.take(n)\n\e[31m\e[31m   |\e[0m                                  \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpj779n4rj.scala:33:12 --------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m            consonantWordsContain\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (consonantWordsContain : Array[String])\n\
    \e[31m   |\e[0m            Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpj779n4rj.scala:35:12 --------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            vowelWordsContain\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (vowelWordsContain\
    \ : Array[String])\n\e[31m   |\e[0m            Required: List[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj779n4rj.scala:37:39 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            consonantWordsContain.union(vowelWordsContain)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(n)).map(_.split(\"\
    \ \")).flatten\n        words.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa00q2q28.scala:21:34\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(n)).map(_.split(\e\
    [31m\" \"\e[0m)).flatten\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list4 = list3.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list5 = list4.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list6 = list5.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list7 = list6.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list8 = list7.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list9 = list8.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list10 = list9.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list12 = list11.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list13 = list12.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list14 = list13.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpskq7g7mc.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpskq7g7mc.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.filter(x => x.contains(\"a\"))\n        val list3 = list2.filter(x\
    \ => x.contains(\"e\"))\n        val list4 = list3.filter(x => x.contains(\"i\"\
    ))\n        val list5 = list4.filter(x => x.contains(\"o\"))\n        val list6\
    \ = list5.filter(x => x.contains(\"u\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"l\"))\n        val list8 = list7.filter(x => x.contains(\"n\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"d\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"h\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"w\"))\n        val list12 = list11.filter(x => x.contains(\"\
    s\"))\n        val list13 = list12.filter(x => x.contains(\"p\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"b\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"f\"))\n        val list16 = list15.filter(x => x.contains(\"\
    v\"))\n        val list17 = list16.filter(x => x.contains(\"k\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"j\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"q\"))\n        val list20 = list19.filter(x => x.contains(\"\
    x\"))\n        val list21 = list20.filter(x => x.contains(\"z\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"c\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"m\"))\n        val list24 = list23.filter(x => x.contains(\"\
    y\"))\n        val list25 = list24.filter(x => x.contains(\"r\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"g\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"q\"))\n        val list28 = list27.filter(x => x.contains(\"\
    p\"))\n        val list29 = list28.filter(x => x.contains(\"b\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"f\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"v\"))\n        val list32 = list31.filter(x => x.contains(\"\
    k\"))\n        val list33 = list32.filter(x => x.contains(\"j\"))\n        val\
    \ list34 = list\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2moioneg.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { x\
    \ =>\n            val count = x.count(_ == 'a')\n            if (count == n) result\
    \ += x\n        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vkye3kx.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ != \" \")\n        val list3 = list2.filter(_\
    \ != \"\")\n        val list4 = list3.filter(_ != \" \")\n        val list5 =\
    \ list4.filter(_ != \"\")\n        val list6 = list5.filter(_ != \"\")\n     \
    \   val list7 = list6.filter(_ != \"\")\n        val list8 = list7.filter(_ !=\
    \ \"\")\n        val list9 = list8.filter(_ != \"\")\n        val list10 = list9.filter(_\
    \ != \"\")\n        val list11 = list10.filter(_ != \"\")\n        val list12\
    \ = list11.filter(_ != \"\")\n        val list13 = list12.filter(_ != \"\")\n\
    \        val list14 = list13.filter(_ != \"\")\n        val list15 = list14.filter(_\
    \ != \"\")\n        val list16 = list15.filter(_ != \"\")\n        val list17\
    \ = list16.filter(_ != \"\")\n        val list18 = list17.filter(_ != \"\")\n\
    \        val list19 = list18.filter(_ != \"\")\n        val list20 = list19.filter(_\
    \ != \"\")\n        val list21 = list20.filter(_ != \"\")\n        val list22\
    \ = list21.filter(_ != \"\")\n        val list23 = list22.filter(_ != \"\")\n\
    \        val list24 = list23.filter(_ != \"\")\n        val list25 = list24.filter(_\
    \ != \"\")\n        val list26 = list25.filter(_ != \"\")\n        val list27\
    \ = list26.filter(_ != \"\")\n        val list28 = list27.filter(_ != \"\")\n\
    \        val list29 = list28.filter(_ != \"\")\n        val list30 = list29.filter(_\
    \ != \"\")\n        val list31 = list30.filter(_ != \"\")\n        val list32\
    \ = list31.filter(_ != \"\")\n        val list33 = list32.filter(_ != \"\")\n\
    \        val list34 = list33.filter(_ != \"\")\n        val list35 = list34.filter(_\
    \ != \"\")\n        val list36 = list35.filter(_ != \"\")\n        val list37\
    \ = list36.filter(_ != \"\")\n        val list38 = list37.filter(_ != \"\")\n\
    \        val list39 = list38.filter(_ != \"\")\n        val list40 = list39.filter(_\
    \ != \"\")\n        val list41 = list40.filter(_ != \"\")\n        val list42\
    \ = list41.filter(_ != \"\")\n        val list43 = list42.filter(_ != \"\")\n\
    \        val list44 = list43.filter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgh9r4m1m.scala:65:5\
    \ ---------------------\e[0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").toList\n\
    \        val wordSet = wordList.map(_.toUpperCase).toSet\n        val consonantSet\
    \ = Set.of(\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\"\
    , \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\
    )\n        val consonantList = consonantSet.map(_.toUpperCase).toList\n      \
    \  val consonantSet2 = consonantSet.map(_.toLowerCase).toList\n        val consonantSet3\
    \ = consonantSet.map(_.toUpperCase).toSet\n        val consonantSet4 = consonantSet.map(_.toLowerCase).toSet\n\
    \        val consonantSet5 = consonantSet.map(_.toUpperCase).toSet\n        val\
    \ consonantSet6 = consonantSet.map(_.toLowerCase).toSet\n        val consonantSet7\
    \ = consonantSet.map(_.toUpperCase).toSet\n        val consonantSet8 = consonantSet.map(_.toLowerCase).toSet\n\
    \        val consonantSet9 = consonantSet.map(_.toUpperCase).toSet\n        val\
    \ consonantSet10 = consonantSet.map(_.toLowerCase).toSet\n        val consonantSet11\
    \ = consonantSet.map(_.toUpperCase).toSet\n        val consonantSet12 = consonantSet.map(_.toLowerCase).toSet\n\
    \        val consonantSet13 = consonantSet.map(_.toUpperCase).toSet\n        val\
    \ consonantSet14 = consonantSet.map(_.toLowerCase).toSet\n        val consonantSet15\
    \ = consonantSet.map(_.toUpperCase).toSet\n        val consonantSet16 = consonantSet.map(_.toLowerCase).toSet\n\
    \        val consonantSet17 = consonantSet.map(_.toUpperCase).toSet\n        val\
    \ consonantSet18 = consonantSet.map(_.toLowerCase).toSet\n        val consonantSet19\
    \ = consonantSet.map(_.toUpperCase).toSet\n        val consonantSet20 = consonantSet.map(_.toLowerCase).toSet\n\
    \        val consonantSet21 = consonantSet.map(_.toUpperCase).toSet\n        val\
    \ consonantSet22 = consonantSet.map(_.toLowerCase).toSet\n        val consonantSet23\
    \ = consonantSet.map(_.toUpperCase).toSet\n        val consonantSet24 = consonantSet.map(_.toLowerCase).toSet\n\
    \        val consonantSet25 = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa2z1flsp.scala:48:28 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mconsonantSet25\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa2z1flsp.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mconsonantSet\e[0m = Set.of(\e\
    [31m\"B\"\e[0m, \e[31m\"C\"\e[0m, \e[31m\"D\"\e[0m, \e[31m\"F\"\e[0m, \e[31m\"\
    G\"\e[0m, \e[31m\"H\"\e[0m, \e[31m\"J\"\e[0m, \e[31m\"K\"\e[0m, \e[31m\"L\"\e\
    [0m, \e[31m\"M\"\e[0m, \e[31m\"N\"\e[0m, \e[31m\"P\"\e[0m, \e[31m\"Q\"\e[0m, \e\
    [31m\"R\"\e[0m, \e[31m\"S\"\e[0m, \e[31m\"T\"\e[0m, \e[31m\"V\"\e[0m, \e[31m\"\
    W\"\e[0m, \e[31m\"X\"\e[0m, \e[31m\"Y\"\e[0m, \e[31m\"Z\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^\e[0m\n\e[31m   |\e[0m         value\
    \ of is not a member of object scala.collection.mutable.Set\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpa2z1flsp.scala:49:5 ---------------------\e[0m\e\
    [0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x\
    \ => x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"E\"\
    ))\n        val list5 = list4.filter(x => x.contains(\"I\"))\n        val list6\
    \ = list5.filter(x => x.contains(\"O\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"U\"))\n        val list8 = list7.filter(x => x.contains(\"a\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"e\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"i\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"o\"))\n        val list12 = list11.filter(x => x.contains(\"\
    u\"))\n        val list13 = list12.filter(x => x.contains(\"A\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"E\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"I\"))\n        val list16 = list15.filter(x => x.contains(\"\
    O\"))\n        val list17 = list16.filter(x => x.contains(\"U\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"a\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"e\"))\n        val list20 = list19.filter(x => x.contains(\"\
    i\"))\n        val list21 = list20.filter(x => x.contains(\"o\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"u\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"A\"))\n        val list24 = list23.filter(x => x.contains(\"\
    E\"))\n        val list25 = list24.filter(x => x.contains(\"I\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"O\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"U\"))\n        val list28 = list27.filter(x => x.contains(\"\
    a\"))\n        val list29 = list28.filter(x => x.contains(\"e\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"i\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"o\"))\n        val list32 = list31.filter(x => x.contains(\"\
    u\"))\n        val list33 = list32.filter(x => x.contains(\"A\"))\n        val\
    \ list34 = list33.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjxjf10_5.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjxjf10_5.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val list2 = list.filter(_ => !_.isEmpty)\n        val list3 = list2.filter(_\
    \ => _.length == n)\n        val list4 = list3.filter(_ => _.contains(\"A\"))\n\
    \        val list5 = list4.filter(_ => _.contains(\"E\"))\n        val list6 =\
    \ list5.filter(_ => _.contains(\"I\"))\n        val list7 = list6.filter(_ =>\
    \ _.contains(\"O\"))\n        val list8 = list7.filter(_ => _.contains(\"U\"))\n\
    \        val list9 = list8.filter(_ => _.contains(\"a\"))\n        val list10\
    \ = list9.filter(_ => _.contains(\"e\"))\n        val list11 = list10.filter(_\
    \ => _.contains(\"i\"))\n        val list12 = list11.filter(_ => _.contains(\"\
    o\"))\n        val list13 = list12.filter(_ => _.contains(\"u\"))\n        val\
    \ list14 = list13.filter(_ => _.contains(\"A\"))\n        val list15 = list14.filter(_\
    \ => _.contains(\"E\"))\n        val list16 = list15.filter(_ => _.contains(\"\
    I\"))\n        val list17 = list16.filter(_ => _.contains(\"O\"))\n        val\
    \ list18 = list17.filter(_ => _.contains(\"U\"))\n        val list19 = list18.filter(_\
    \ => _.contains(\"a\"))\n        val list20 = list19.filter(_ => _.contains(\"\
    e\"))\n        val list21 = list20.filter(_ => _.contains(\"i\"))\n        val\
    \ list22 = list21.filter(_ => _.contains(\"o\"))\n        val list23 = list22.filter(_\
    \ => _.contains(\"u\"))\n        val list24 = list23.filter(_ => _.contains(\"\
    A\"))\n        val list25 = list24.filter(_ => _.contains(\"E\"))\n        val\
    \ list26 = list25.filter(_ => _.contains(\"I\"))\n        val list27 = list26.filter(_\
    \ => _.contains(\"O\"))\n        val list28 = list27.filter(_ => _.contains(\"\
    U\"))\n        val list29 = list28.filter(_ => _.contains(\"a\"))\n        val\
    \ list30 = list29.filter(_ => _.contains(\"e\"))\n        val list31 = list30.filter(_\
    \ => _.contains(\"i\"))\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpk_k6gbgw.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E081] Type Error: /tmp/tmpk_k6gbgw.scala:22:38 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => !_.isEmpty)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$3 of expanded function:\n\e\
    [31m   |\e[0m   _$3 => ! _$3.isEmpty.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpk_k6gbgw.scala:23:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e\
    [0m \e[36mlist3\e[0m = list2.filter(_ => _.length == n)\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$5 of expanded function:\n\e[31m   |\e[0m   _$5 => _$5.length == n.\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpk_k6gbgw.scala:24:38 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlist4\e[0m = list3.filter(_\
    \ => _.contains(\e[31m\"A\"\e[0m))\n\e[31m\e[31m   |\e[0m                    \
    \                  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$7 of\
    \ expanded function:\n\e[31m   |\e[0m   _$7 => _$7.contains(\e[32m\"A\"\e[0m).\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpk_k6gbgw.scala:25:38 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mlist5\e[0m = list4.filter(_\
    \ => _.contains(\e[31m\"E\"\e[0m))\n\e[31m\e[31m   |\e[0m                    \
    \                  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$9 of\
    \ expanded function:\n\e[31m   |\e[0m   _$9 => _$9.contains(\e[32m\"E\"\e[0m).\n\
    \e[31m\e[31m-- [E0"
  stdout: ''
  timestamp: 1659805687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val wordsWithCount = words.map(word => (word, 1))\n        val counts\
    \ = wordsWithCount.groupBy(_._1).mapValues(_.map(_._2))\n        val maxCount\
    \ = counts.maxBy(_._2).get._1\n        val wordsWithMaxCount = words.filter(word\
    \ => counts(word) == maxCount)\n        val wordsWithMaxCountWithCount = wordsWithMaxCount.map(word\
    \ => (word, counts(word)))\n        val maxCountWords = wordsWithMaxCountWithCount.maxBy(_._2).get._1\n\
    \        val wordsWithMaxCountWithMaxCount = wordsWithMaxCountWithCount.filter(word\
    \ => counts(word) == maxCountWords)\n        val wordsWithMaxCountWithMaxCountWithCount\
    \ = wordsWithMaxCountWithMaxCount.map(word => (word, counts(word)))\n        val\
    \ maxCountWordsWithMaxCount = wordsWithMaxCountWithMaxCountWithCount.maxBy(_._2).get._1\n\
    \        val wordsWithMaxCountWithMaxCountWithMaxCount = wordsWithMaxCountWithMaxCountWithMaxCount.filter(word\
    \ => counts(word) == maxCountWordsWithMaxCount)\n        val wordsWithMaxCountWithMaxCountWithMaxCountWithCount\
    \ = wordsWithMaxCountWithMaxCountWithMaxCountWithCount.map(word => (word, counts(word)))\n\
    \        val maxCountWordsWithMaxCountWithMaxCount = wordsWithMaxCountWithMaxCountWithMaxCountWithCount.maxBy(_._2).get._1\n\
    \        val wordsWithMaxCountWithMaxCountWithMaxCountWithMaxCount = wordsWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithCount.filter(word\
    \ => counts(word) == maxCountWordsWithMaxCountWithMaxCount)\n        val wordsWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = wordsWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithCount.map(word =>\
    \ (word, counts(word)))\n        val maxCountWordsWithMaxCountWithMaxCountWithMaxCount\
    \ = wordsWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithCount.maxBy(_._2).get._1\n\
    \        val wordsWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = wordsWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithCount.filter(word\
    \ => counts(word) == maxCountWordsWithMaxCountWithMaxCountWithMaxCount)\n    \
    \    val wordsWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl7drcw69.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mwordsWithMaxCountWithMaxCountWithMaxCountWithMaxCount\e\
    [0m = wordsWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithCount.map(\e[36mword\e\
    [0m => (word, counts(word)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsWithMaxCountWithMaxCountWithMaxCountWithMaxCount is already\
    \ defined as \e[33mvalue\e[0m \e[35mwordsWithMaxCountWithMaxCountWithMaxCountWithMaxCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl7drcw69.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mwordsWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\e\
    [0m = words\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mwordsWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpl7drcw69.scala:24:41\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxCount\e[0m = counts.maxBy(_._2).get._1\n\e[31m\e[31m\
    \   |\e[0m                                         ^\e[0m\n\e[31m   |\e[0mNo implicit\
    \ Ordering defined for List[Int]..\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e[35mList[Int]\e\
    [0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[List[Int]]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[List[Int]].\n\e[31m   |\e[0m\n\e\
    [31m  "
  stdout: ''
  timestamp: 1659805689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x\
    \ => x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"E\"\
    ))\n        val list5 = list4.filter(x => x.contains(\"I\"))\n        val list6\
    \ = list5.filter(x => x.contains(\"O\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"U\"))\n        val list8 = list7.filter(x => x.contains(\"Y\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"S\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"T\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"H\"))\n        val list12 = list11.filter(x => x.contains(\"\
    L\"))\n        val list13 = list12.filter(x => x.contains(\"E\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"W\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"R\"))\n        val list16 = list15.filter(x => x.contains(\"\
    D\"))\n        val list17 = list16.filter(x => x.contains(\"G\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"B\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"M\"))\n        val list20 = list19.filter(x => x.contains(\"\
    P\"))\n        val list21 = list20.filter(x => x.contains(\"F\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"V\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"C\"))\n        val list24 = list23.filter(x => x.contains(\"\
    B\"))\n        val list25 = list24.filter(x => x.contains(\"K\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"J\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"X\"))\n        val list28 = list27.filter(x => x.contains(\"\
    Q\"))\n        val list29 = list28.filter(x => x.contains(\"Z\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"J\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"Q\"))\n        val list32 = list31.filter(x => x.contains(\"\
    Z\"))\n        val list33 = list32.filter(x => x.contains(\"J\"))\n        val\
    \ list34 = list33.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1ltnocs2.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1ltnocs2.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c >= 'a' && c <= 'z' || c >=\
    \ 'A' && c <= 'Z')\n            if (count == n) {\n                result += (word\
    \ + \" \")\n            }\n        }\n        if (result.isEmpty) {\n        \
    \    List()\n        } else {\n            result.mkString(\" \")\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxg7m2gb3.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val list = mutable.ListBuffer[String]()\n        for (word <- words) {\n\
    \            if (word.length == n) {\n                list += word\n         \
    \   }\n        }\n        if (list.isEmpty) {\n            List()\n        } else\
    \ {\n            list.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdf679l6.scala:22:19 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ != \"\")\n        val list3 = list2.filter(_\
    \ == \" \")\n        val list4 = list3.filter(_ == \" \")\n        val list5 =\
    \ list4.filter(_ == \" \")\n        val list6 = list5.filter(_ == \" \")\n   \
    \     val list7 = list6.filter(_ == \" \")\n        val list8 = list7.filter(_\
    \ == \" \")\n        val list9 = list8.filter(_ == \" \")\n        val list10\
    \ = list9.filter(_ == \" \")\n        val list11 = list10.filter(_ == \" \")\n\
    \        val list12 = list11.filter(_ == \" \")\n        val list13 = list12.filter(_\
    \ == \" \")\n        val list14 = list13.filter(_ == \" \")\n        val list15\
    \ = list14.filter(_ == \" \")\n        val list16 = list15.filter(_ == \" \")\n\
    \        val list17 = list16.filter(_ == \" \")\n        val list18 = list17.filter(_\
    \ == \" \")\n        val list19 = list18.filter(_ == \" \")\n        val list20\
    \ = list19.filter(_ == \" \")\n        val list21 = list20.filter(_ == \" \")\n\
    \        val list22 = list21.filter(_ == \" \")\n        val list23 = list22.filter(_\
    \ == \" \")\n        val list24 = list23.filter(_ == \" \")\n        val list25\
    \ = list24.filter(_ == \" \")\n        val list26 = list25.filter(_ == \" \")\n\
    \        val list27 = list26.filter(_ == \" \")\n        val list28 = list27.filter(_\
    \ == \" \")\n        val list29 = list28.filter(_ == \" \")\n        val list30\
    \ = list29.filter(_ == \" \")\n        val list31 = list30.filter(_ == \" \")\n\
    \        val list32 = list31.filter(_ == \" \")\n        val list33 = list32.filter(_\
    \ == \" \")\n        val list34 = list33.filter(_ == \" \")\n        val list35\
    \ = list34.filter(_ == \" \")\n        val list36 = list35.filter(_ == \" \")\n\
    \        val list37 = list36.filter(_ == \" \")\n        val list38 = list37.filter(_\
    \ == \" \")\n        val list39 = list38.filter(_ == \" \")\n        val list40\
    \ = list39.filter(_ == \" \")\n        val list41 = list40.filter(_ == \" \")\n\
    \        val list42 = list41.filter(_ == \" \")\n        val list43 = list42.filter(_\
    \ == \" \")\n        val list44 = list43.filter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqvs42h9x.scala:65:5\
    \ ---------------------\e[0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(x => x.contains(\"a\"))\n        val list3 =\
    \ list.filter(x => x.contains(\"e\"))\n        val list4 = list.filter(x => x.contains(\"\
    i\"))\n        val list5 = list.filter(x => x.contains(\"o\"))\n        val list6\
    \ = list.filter(x => x.contains(\"u\"))\n        val list7 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list8 = list.filter(x => x.contains(\"l\"))\n\
    \        val list9 = list.filter(x => x.contains(\"d\"))\n        val list10 =\
    \ list.filter(x => x.contains(\"h\"))\n        val list11 = list.filter(x => x.contains(\"\
    w\"))\n        val list12 = list.filter(x => x.contains(\"o\"))\n        val list13\
    \ = list.filter(x => x.contains(\"n\"))\n        val list14 = list.filter(x =>\
    \ x.contains(\"s\"))\n        val list15 = list.filter(x => x.contains(\"e\"))\n\
    \        val list16 = list.filter(x => x.contains(\"r\"))\n        val list17\
    \ = list.filter(x => x.contains(\"a\"))\n        val list18 = list.filter(x =>\
    \ x.contains(\"m\"))\n        val list19 = list.filter(x => x.contains(\"y\"))\n\
    \        val list20 = list.filter(x => x.contains(\"p\"))\n        val list21\
    \ = list.filter(x => x.contains(\"t\"))\n        val list22 = list.filter(x =>\
    \ x.contains(\"i\"))\n        val list23 = list.filter(x => x.contains(\"n\"))\n\
    \        val list24 = list.filter(x => x.contains(\"g\"))\n        val list25\
    \ = list.filter(x => x.contains(\"h\"))\n        val list26 = list.filter(x =>\
    \ x.contains(\"a\"))\n        val list27 = list.filter(x => x.contains(\"l\"))\n\
    \        val list28 = list.filter(x => x.contains(\"l\"))\n        val list29\
    \ = list.filter(x => x.contains(\"d\"))\n        val list30 = list.filter(x =>\
    \ x.contains(\"e\"))\n        val list31 = list.filter(x => x.contains(\"r\"))\n\
    \        val list32 = list.filter(x => x.contains(\"a\"))\n        val list33\
    \ = list.filter(x => x.contains(\"m\"))\n        val list34 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list35 = list.filter(x => x.contains(\"p\"))\n\
    \        val list36 = \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe1pa3upn.scala:56:20 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mlist36\e[0m = \n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpe1pa3upn.scala:57:5 ---------------------\e[0m\e[0m\n\e[31m57\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805689
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = list.filter(_ contains n).sortBy(_.length)\n        result\
    \ match {\n            case Nil => List()\n            case x => x\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5xv56v80.scala:29)\n\tat Problem.main(tmp5xv56v80.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            if (word.count(_ == 'a') >= n) result += word\n        })\n\
    \        if (result.isEmpty) List()\n        else result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe8t5n4v2.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) {\n                result += word\n            }\n        }\n        if\
    \ (result.isEmpty) {\n            List()\n        } else {\n            result.toList\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiuuc5mbo.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805690
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.length == n).map(_.toLowerCase).toList\n        val consonants:\
    \ List[String] = words.filter(_.contains(\"a\")).filter(_.contains(\"e\")).filter(_.contains(\"\
    i\")).filter(_.contains(\"o\")).filter(_.contains(\"u\")).map(_.toLowerCase).toList\n\
    \        val vowels: List[String] = words.filter(_.contains(\"a\")).filter(_.contains(\"\
    e\")).filter(_.contains(\"i\")).filter(_.contains(\"o\")).filter(_.contains(\"\
    u\")).filter(_.contains(\"y\")).map(_.toLowerCase).toList\n        val consonantsAndVowels:\
    \ List[String] = consonants.union(vowels)\n        consonantsAndVowels.filter(_.contains(s))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp_zm55zf.scala:28)\n\tat Problem.main(tmpp_zm55zf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.split(\"[^aeiou]\").length\n            if\
    \ (count == n) result += (word + \" \")\n        }\n        if (result.isEmpty)\
    \ List()\n        else result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt2w7uw1a.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").map(_.toUpperCase)\n\
    \        val list = words.filter(_.length == n)\n        list.sortBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbu49s3ro.scala:23:8\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m        list.sortBy(_.length)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \   Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.length == n).map(_.toLowerCase).toList\n        words.filter(_.contains(\"\
    a\"))\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbcestzkg.scala:25)\n\tat Problem.main(tmpbcestzkg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val list2 = list.filter(_ => !_.isEmpty)\n        val list3 = list2.filter(_\
    \ => _.length == n)\n        list3.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp9h9a7max.scala:22:38 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => !_.isEmpty)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$3 of expanded function:\n\e\
    [31m   |\e[0m   _$3 => ! _$3.isEmpty.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp9h9a7max.scala:23:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e\
    [0m \e[36mlist3\e[0m = list2.filter(_ => _.length == n)\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$5 of expanded function:\n\e[31m   |\e[0m   _$5 => _$5.length == n.\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filterNot(_.isEmpty)\n        val list3 = list2.filter(_\
    \ => n.toString.toLong == list2.count(_ == _))\n        list3.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp121vyt0x.scala:23:71 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlist3\e[0m = list2.filter(_\
    \ => n.toString.toLong == list2.count(_ == _))\n\e[31m\e[31m   |\e[0m        \
    \                                                               ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n1 error found\n"
  stdout: ''
  timestamp: 1659805697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ => _.length == n)\n        list2.toList.sortBy(_.toLowerCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpcgkfrfzc.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n)\n\e[31m\e[31m   |\e[0m                                   \
    \  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => _$2.length == n.\n1 error found\n"
  stdout: ''
  timestamp: 1659805697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        for (i <- 0 until\
    \ list.size) {\n            if (list(i).length == n) {\n                result\
    \ += list(i)\n            }\n        }\n        if (result.isEmpty) {\n      \
    \      List()\n        } else {\n            result.toList\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6i22f9mx.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val vowelsCount = vowels.length\n        val consonantsCount = consonants.length\n\
    \        val vowelsArray = vowels.toArray\n        val consonantsArray = consonants.toArray\n\
    \        val vowelsArrayLength = vowelsArray.length\n        val consonantsArrayLength\
    \ = consonantsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val consonantsArrayLength = consonantsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val consonantsArrayLength = consonantsArray.length\n\
    \        val vowelsArrayLength = vowelsArray.length\n        val consonantsArrayLength\
    \ = consonantsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val consonantsArrayLength = consonantsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val consonantsArrayLength = consonantsArray.length\n\
    \        val vowelsArrayLength = vowelsArray.length\n        val consonantsArrayLength\
    \ = consonantsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val consonantsArrayLength = consonantsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val consonantsArrayLength = consonantsArray.length\n\
    \        val vowelsArrayLength = vowelsArray.length\n        val consonantsArrayLength\
    \ = consonantsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val consonantsArrayLength = consonantsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val consonantsArrayLength = consonantsArray.length\n\
    \        val vowelsArrayLength = vowelsArray.length\n        val consonantsArrayLength\
    \ = consonantsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val consonantsArrayLength = consonantsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val consonantsArrayLength = consonantsArray.length\n\
    \        val vowelsArrayLength = vowelsArray.length\n        val consonantsArrayLength\
    \ = consonantsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val consonantsArrayLength = consonantsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val consonantsArrayLength = consonants\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdbv9o3ah.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdbv9o3ah.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mconsonantsArrayLength\e\
    [0m = consonantsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdbv9o3ah.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdbv9o3ah.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mconsonantsArrayLength\e\
    [0m = consonantsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdbv9o3ah.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m"
  stdout: ''
  timestamp: 1659805701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val list = words.filter(word => word.forall(c => c.isLetter) && word.count(_\
    \ == 'a') == n)\n        list.map(word => word.split(\"\").filter(c => c.isLetter).mkString(\"\
    \")).filter(_.nonEmpty)\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqrp_44ts.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        list.map(\e[36mword\e[0m => word.split(\e[31m\"\
    \"\e[0m).filter(\e[36mc\e[0m => c.isLetter).mkString(\e[31m\"\"\e[0m)).filter(_.nonEmpty)\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1659805702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").toList\n\
    \        val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\", \"y\")\n        val consonantCount = consonants.count(_ == s)\n     \
    \   val vowelCount = vowels.count(_ == s)\n        val consonantCountAndVowelCount\
    \ = consonantCount + vowelCount\n        val consonantCountAndVowelCountAndWordCount\
    \ = consonantCountAndVowelCount + wordList.size\n        val consonantCountAndVowelCountAndWordCountAndWords\
    \ = consonantCountAndVowelCountAndWordCount + wordList.size\n        val consonantCountAndVowelCountAndWordCountAndWordsOrZero\
    \ = consonantCountAndVowelCountAndWordCountAndWords + wordList.size + (if (wordList.isEmpty)\
    \ 0 else 1)\n        val consonantCountAndVowelCountAndWordCountAndWordsOrZeroOrZero\
    \ = consonantCountAndVowelCountAndWordCountAndWordsOrZero + wordList.size + (if\
    \ (wordList.isEmpty) 0 else 0)\n        val consonantCountAndVowelCountAndWordCountAndWordsOrZeroOrZeroOrZero\
    \ = consonantCountAndVowelCountAndWordCountAndWordsOrZeroOrZero + wordList.size\
    \ + (if (wordList.isEmpty) 0 else 0)\n        val consonantCountAndVowelCountAndWordCountAndWordsOrZeroOrZeroOrZero\
    \ = consonantCountAndVowelCountAndWordCountAndWordsOrZeroOrZeroOrZero + wordList.size\
    \ + (if (wordList.isEmpty) 0 else 0)\n        val consonantCountAndVowelCountAndWordCountAndWordsOrZeroOrZeroOrZeroOrZero\
    \ = consonantCountAndVowelCountAndWordCountAndWordsOrZeroOrZeroOrZero + wordList.size\
    \ + (if (wordList.isEmpty) 0 else 0)\n        val consonantCountAndVowelCountAndWordCountAndWordsOrZeroOrZeroOrZeroOrZero\
    \ = consonantCountAndVowelCountAndWordCountAndWordsOrZeroOrZeroOrZero + wordList.size\
    \ + (if (wordList.isEmpty) 0 else \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_2vd4_zx.scala:34:199 --------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mconsonantCountAndVowelCountAndWordCountAndWordsOrZeroOrZeroOrZeroOrZero\e\
    [0m = consonantCountAndVowelCountAndWordCountAndWordsOrZeroOrZeroOrZero + wordList.size\
    \ + (\e[33mif\e[0m (wordList.isEmpty) \e[31m0\e[0m \e[33melse\e[0m \n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_2vd4_zx.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantCountAndVowelCountAndWordCountAndWordsOrZeroOrZeroOrZero\e[0m\
    \ = consonantCountAndVowelCountAndWordCountAndWordsOrZeroOrZeroOrZero + wordList.size\
    \ + (\e[33mif\e[0m (wordList.isEmpty) \e[31m0\e[0m \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCountAndVowelCountAndWordCountAndWordsOrZeroOrZeroOrZero\
    \ is already defined as \e[33mvalue\e[0m \e[35mconsonantCountAndVowelCountAndWordCountAndWordsOrZeroOrZeroOrZero\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmp_2vd4_zx.scala:34:168 ----------------------------\e[0m\e[0m\n\
    \e[31m34 |\e[0m        \e[33mval\e[0m \e[36mconsonantCountAndVowelCountAndWordCountAndWordsOrZeroOrZeroOrZeroOrZero\e\
    [0m = consonantCountAndVowelCountAndWordCountAndWordsOrZeroOrZeroOrZero + wordList.size\
    \ + (\e[33mif\e[0m (wordList.isEmpty) \e[31m0\e[0m \e[33melse\e[0m \n\e[31m\e\
    [31m   |\e[0m                 "
  stdout: ''
  timestamp: 1659805703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.count(_ == 'a')\n            if (count == n)\
    \ {\n                result += word\n            }\n        }\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb7vbvszs.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(x => x.contains(\"a\"))\n        val list3 =\
    \ list.filter(x => x.contains(\"e\"))\n        val list4 = list.filter(x => x.contains(\"\
    i\"))\n        val list5 = list.filter(x => x.contains(\"o\"))\n        val list6\
    \ = list.filter(x => x.contains(\"u\"))\n        val list7 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list8 = list.filter(x => x.contains(\"h\"))\n\
    \        val list9 = list.filter(x => x.contains(\"l\"))\n        val list10 =\
    \ list.filter(x => x.contains(\"l\"))\n        val list11 = list.filter(x => x.contains(\"\
    a\"))\n        val list12 = list.filter(x => x.contains(\"e\"))\n        val list13\
    \ = list.filter(x => x.contains(\"i\"))\n        val list14 = list.filter(x =>\
    \ x.contains(\"o\"))\n        val list15 = list.filter(x => x.contains(\"u\"))\n\
    \        val list16 = list.filter(x => x.contains(\"y\"))\n        val list17\
    \ = list.filter(x => x.contains(\"h\"))\n        val list18 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list19 = list.filter(x => x.contains(\"l\"))\n\
    \        val list20 = list.filter(x => x.contains(\"a\"))\n        val list21\
    \ = list.filter(x => x.contains(\"e\"))\n        val list22 = list.filter(x =>\
    \ x.contains(\"i\"))\n        val list23 = list.filter(x => x.contains(\"o\"))\n\
    \        val list24 = list.filter(x => x.contains(\"u\"))\n        val list25\
    \ = list.filter(x => x.contains(\"y\"))\n        val list26 = list.filter(x =>\
    \ x.contains(\"h\"))\n        val list27 = list.filter(x => x.contains(\"l\"))\n\
    \        val list28 = list.filter(x => x.contains(\"l\"))\n        val list29\
    \ = list.filter(x => x.contains(\"a\"))\n        val list30 = list.filter(x =>\
    \ x.contains(\"e\"))\n        val list31 = list.filter(x => x.contains(\"i\"))\n\
    \        val list32 = list.filter(x => x.contains(\"o\"))\n        val list33\
    \ = list.filter(x => x.contains(\"u\"))\n        val list34 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list35 = list.filter(x => x.contains(\"h\"))\n\
    \        val list36 = \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpneyd25fl.scala:56:20 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mlist36\e[0m = \n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpneyd25fl.scala:57:5 ---------------------\e[0m\e[0m\n\e[31m57\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        for (i <- 0 until\
    \ list.size) {\n            val word = list(i)\n            if (word.contains(\"\
    a\") || word.contains(\"e\") || word.contains(\"i\") || word.contains(\"o\") ||\
    \ word.contains(\"u\")) {\n                result.add(word)\n            }\n \
    \       }\n        if (result.size == 0) {\n            List()\n        } else\
    \ {\n            result.take(n).toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpop1d2056.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = list.filter(x => x.toString.length == n)\n        result.map(x\
    \ => x.split(\"\").filter(y => y == \"c\").mkString(\"\")).filter(x => x.toString.length\
    \ > 0).map(x => x.split(\"\").filter(y => y == \"c\").mkString(\"\")).filter(x\
    \ => x.toString.length == n).map(x => x.split(\"\").filter(y => y == \"c\").mkString(\"\
    \")).filter(x => x.toString.length == n).map(x => x.split(\"\").filter(y => y\
    \ == \"c\").mkString(\"\")).filter(x => x.toString.length == n).map(x => x.split(\"\
    \").filter(y => y == \"c\").mkString(\"\")).filter(x => x.toString.length == n).map(x\
    \ => x.split(\"\").filter(y => y == \"c\").mkString(\"\")).filter(x => x.toString.length\
    \ == n).map(x => x.split(\"\").filter(y => y == \"c\").mkString(\"\")).filter(x\
    \ => x.toString.length == n).map(x => x.split(\"\").filter(y => y == \"c\").mkString(\"\
    \")).filter(x => x.toString.length == n).map(x => x.split(\"\").filter(y => y\
    \ == \"c\").mkString(\"\")).filter(x => x.toString.length == n).map(x => x.split(\"\
    \").filter(y => y == \"c\").mkString(\"\")).filter(x => x.toString.length == n).map(x\
    \ => x.split(\"\").filter(y => y == \"c\").mkString(\"\")).filter(x => x.toString.length\
    \ == n).map(x => x.split(\"\").filter(y => y == \"c\").mkString(\"\")).filter(x\
    \ => x.toString.length == n).map(x => x.split(\"\").filter(y => y == \"c\").mkString(\"\
    \")).filter(x => x.toString.length == n).map(x => x.split(\"\").filter(y => y\
    \ == \"c\").mkString(\"\")).filter(x => x.toString.length == n).map(x => x.split(\"\
    \").filter(y => y == \"c\").mkString(\"\")).filter(x => x.toString.length == n).map(x\
    \ => x.split(\"\").filter(y => y == \"c\").mkString(\"\")).filter(x => x.toString.length\
    \ == n).map(x => x.split(\"\").filter(y => y == \"c\").mkString(\"\")).filter(x\
    \ => x.toString.length == n).map(x => x.split(\"\").filter(y => y == \"c\").mk\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqoenkf7y.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqoenkf7y.scala:23:1638\
    \ ----------------------\e[0m\e[0m\n\e[31m23 |\e[0m        result.map(\e[36mx\e\
    [0m => x.split(\e[31m\"\"\e[0m).filter(\e[36my\e[0m => y == \e[31m\"c\"\e[0m).mkString(\e\
    [31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.toString.length > \e[31m0\e[0m).map(\e\
    [36mx\e[0m => x.split(\e[31m\"\"\e[0m).filter(\e[36my\e[0m => y == \e[31m\"c\"\
    \e[0m).mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.toString.length ==\
    \ n).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m).filter(\e[36my\e[0m => y ==\
    \ \e[31m\"c\"\e[0m).mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.toString.length\
    \ == n).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m).filter(\e[36my\e[0m => y\
    \ == \e[31m\"c\"\e[0m).mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.toString.length\
    \ == n).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m).filter(\e[36my\e[0m => y\
    \ == \e[31m\"c\"\e[0m).mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.toString.length\
    \ == n).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m).filter(\e[36my\e[0m => y\
    \ == \e[31m\"c\"\e[0m).mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.toString.length\
    \ == n).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m).filter(\e[36my\e[0m => y\
    \ == \e[31m\"c\"\e[0m).mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.toString.length\
    \ == n).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m).filter(\e[36my\e[0m => y\
    \ == \e[31m\"c\"\e[0m).mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.toString.length\
    \ == n).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m).filter(\e[36my\e[0m => y\
    \ == \e[31m\"c\"\e[0m).mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.toString.length\
    \ == n).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m).filter(\e[36my\e[0m => y\
    \ == \e[31m\"c\"\e[0m).mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.toString.length\
    \ == n).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m).filter(\e[36my\e[0m => y\
    \ == \e[31m\"c\"\e[0m).mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.toString.length\
    \ == n).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m).filter(\e[36my\e[0m => y\
    \ == \e[31m\"c\"\e[0m).mkString(\e[31m\"\"\e[0m)).fil"
  stdout: ''
  timestamp: 1659805704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c >= 'a' && c <= 'z' || c >= 'A'\
    \ && c <= 'Z')\n            if (count == n) {\n                result += (word\
    \ + \" \")\n            }\n        })\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpih7z24cf.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase)\n        val consonants: List[String]\
    \ = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val vowels: List[String] = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val consonantCount: Map[String, Long] = words.map(word => word -> consonants.count(_\
    \ == word)).toMap\n        val vowelCount: Map[String, Long] = words.map(word\
    \ => word -> vowels.count(_ == word)).toMap\n        val consonantWords: List[String]\
    \ = words.filter(word => consonantCount(word) == n).toList\n        val vowelWords:\
    \ List[String] = words.filter(word => vowelCount(word) == n).toList\n        consonantWords.flatMap(word\
    \ => vowelWords.filter(word => word == word))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp50eo8m_f.scala:21:34\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp50eo8m_f.scala:24:48\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e\
    [0m: \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = words.map(\e[36mword\e\
    [0m => word -> consonants.count(_ == word)).toMap\n\e[31m\e[31m   |\e[0m     \
    \                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Map[String, Int]\n\e[31m\
    \   |\e[0m                          Required: collection.mutable.Map[String, Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp50eo8m_f.scala:25:44\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e\
    [0m: \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = words.map(\e[36mword\e\
    [0m => word -> vowels.count(_ == word)).toMap\n\e[31m\e[31m   |\e[0m         \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Map[String, Int]\n\e[31m\
    \   |\e[0m                          Required: collection.mutable.Map[String, Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").toList\n\
    \        val wordSet = wordList.map(x => x.toLowerCase)\n        val consonantSet\
    \ = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val consonantList = consonantSet.toList\n        val consonantSetList\
    \ = consonantList.map(x => x.toLowerCase)\n        val consonantSetSet = consonantSetList.map(x\
    \ => x.toUpperCase)\n        val consonantSetSetList = consonantSetSet.toList\n\
    \        val consonantSetSetSet = consonantSetSetList.map(x => x.toUpperCase)\n\
    \        val consonantSetSetSetList = consonantSetSetSet.toList\n        val consonantSetSetSetSet\
    \ = consonantSetSetSetList.toList\n        val consonantSetSetSetSetList = consonantSetSetSetSet.toList\n\
    \        val consonantSetSetSetSetSet = consonantSetSetSetSetList.toList\n   \
    \     val consonantSetSetSetSetSetList = consonantSetSetSetSetSet.toList\n   \
    \     val consonantSetSetSetSetSet = consonantSetSetSetSetSetList.toList\n   \
    \     val consonantSetSetSetSetSetList = consonantSetSetSetSetSetSet.toList\n\
    \        val consonantSetSetSetSetSet = consonantSetSetSetSetSetList.toList\n\
    \        val consonantSetSetSetSetSetList = consonantSetSetSetSetSetSet.toList\n\
    \        val consonantSetSetSetSetSet = consonantSetSetSetSetSetList.toList\n\
    \        val consonantSetSetSetSetSetList = consonantSetSetSetSetSetSetSet.toList\n\
    \        val consonantSetSetSetSetSet = consonantSetSetSetSetSetList.toList\n\
    \        val consonantSetSetSetSetSetList = consonantSetSetSetSetSetSet.toList\n\
    \        val consonantSetSetSetSetSet = consonantSetSetSetSetSetList.toList\n\
    \        val consonantSetSetSetSetSetList = consonantSetSetSetSetSetSet.toList\n\
    \        val consonantSetSetSetSetSet = consonantSetSetSetSetSetList.to\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2cvsm7sx.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mconsonantSetSetSetSetSet\e\
    [0m = consonantSetSetSetSetSetList.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2cvsm7sx.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mconsonantSetSetSetSetSetList\e\
    [0m = consonantSetSetSetSetSetSet.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantSetSetSetSetSetList is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantSetSetSetSetSetList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2cvsm7sx.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mconsonantSetSetSetSetSet\e\
    [0m = consonantSetSetSetSetSetList.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2cvsm7sx.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mconsonantSetSetSetSetSetList\e\
    [0m = consonantSetSetSetSetSetSet.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantSetSetSetSetSetList is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantSetSetSetSetSetList\e[0m\n\e[31m   |\e[0m\n\e[31m   "
  stdout: ''
  timestamp: 1659805707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.split(\"[^aeiou]\").length\n         \
    \   if (count == n) result += (word + \" \")\n        }\n        if (result.isEmpty)\
    \ List()\n        else result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkwd4qbpk.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        val consonants\
    \ = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n     \
    \   val vowelsCount = vowels.map(_.length).sum\n        val consonantsCount =\
    \ consonants.map(_.length).sum\n        val vowelsCount = vowelsCount + consonantsCount\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount\
    \ = vowelsCount + consonantsCount\n        val vowelsCount = vowelsCount + consonantsCount\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount\
    \ = vowelsCount + consonantsCount\n        val vowelsCount = vowelsCount + consonantsCount\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount\
    \ = vowelsCount + consonantsCount\n        val vowelsCount = vowelsCount + consonantsCount\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount\
    \ = vowelsCount + consonantsCount\n        val vowelsCount = vowelsCount + consonantsCount\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount\
    \ = vowelsCount + consonantsCount\n        val vowelsCount = vowelsCount + consonantsCount\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount\
    \ = vowelsCount + consonantsCount\n        val vowelsCount = vowelsCount + consonantsCount\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount\
    \ = vowelsCount + consonantsCount\n        val vowelsCount = vowelsCount + consonantsCount\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount\
    \ = vowelsCount + consonantsCount\n        val vowelsCount = vowelsCount + consonantsCount\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount\
    \ = vowelsCount + consonantsCount\n        val vowelsCount = vowelsCount + consonantsCount\n\
    \        val vowelsCount = vowelsCount + conson\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzyx559a4.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzyx559a4.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + consonantsCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzyx559a4.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + consonantsCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzyx559a4.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + consonantsCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzyx559a4.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + consonantsCount\n\
    \e["
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val wordsWithCounts = words.map(word => (word, 1))\n        val wordsWithCountSortedByCount\
    \ = wordsWithCounts.sortBy(_._2)\n        val wordsWithCountSortedByCountReversed\
    \ = wordsWithCountSortedByCount.reverse\n        val wordsWithCountSortedByCountReversedWithCount\
    \ = wordsWithCountSortedByCountReversed.map(_._1)\n        val wordsWithCountSortedByCountReversedWithCountSortedByCount\
    \ = wordsWithCountSortedByCountReversedWithCount.sortBy(_._2)\n        val wordsWithCountSortedByCountReversedWithCountSortedByCountReversed\
    \ = wordsWithCountSortedByCountReversedWithCountSortedByCount.reverse\n      \
    \  val wordsWithCountSortedByCountReversedWithCountSortedByCountReversedWithCount\
    \ = wordsWithCountSortedByCountReversedWithCountSortedByCountReversed.map(_._1)\n\
    \        val wordsWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCount\
    \ = wordsWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCount.sortBy(_._2)\n\
    \        val wordsWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCountReversed\
    \ = wordsWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCountReversedWithCount.reverse\n\
    \        val wordsWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCount\
    \ = wordsWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCount.sortBy(_._2)\n\
    \        val wordsWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCountReversed\
    \ = wordsWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCountReversedWithCount.reverse\n\
    \        val wordsWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCount\
    \ = wordsWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCount.sortBy(_._2)\n\
    \        val wordsWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpal45ubrv.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpal45ubrv.scala:26:126\
    \ -----------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsWithCountSortedByCountReversedWithCountSortedByCount\e[0m = wordsWithCountSortedByCountReversedWithCount.sortBy(_._2)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                    ^^^^\e[0m\n\
    \e[31m   |\e[0m                                      value _2 is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmpal45ubrv.scala:26:129 ----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mwordsWithCountSortedByCountReversedWithCountSortedByCount\e\
    [0m = wordsWithCountSortedByCountReversedWithCount.sortBy(_._2)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mclass\e[0m \e[35mArrayOps\e\
    [0m\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpal45ubrv.scala:29:102 --------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mwordsWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCount\e\
    [0m = wordsWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCount.sortBy(_._2)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                              ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  wordsWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCount\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659805710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x\
    \ => x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"E\"\
    ))\n        val list5 = list4.filter(x => x.contains(\"I\"))\n        val list6\
    \ = list5.filter(x => x.contains(\"O\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"U\"))\n        val list8 = list7.filter(x => x.contains(\"a\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"e\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"i\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"o\"))\n        val list12 = list11.filter(x => x.contains(\"\
    u\"))\n        val list13 = list12.filter(x => x.contains(\"A\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"E\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"I\"))\n        val list16 = list15.filter(x => x.contains(\"\
    O\"))\n        val list17 = list16.filter(x => x.contains(\"U\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"a\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"e\"))\n        val list20 = list19.filter(x => x.contains(\"\
    i\"))\n        val list21 = list20.filter(x => x.contains(\"o\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"u\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"A\"))\n        val list24 = list23.filter(x => x.contains(\"\
    E\"))\n        val list25 = list24.filter(x => x.contains(\"I\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"O\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"U\"))\n        val list28 = list27.filter(x => x.contains(\"\
    a\"))\n        val list29 = list28.filter(x => x.contains(\"e\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"i\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"o\"))\n        val list32 = list31.filter(x => x.contains(\"\
    u\"))\n        val list33 = list32.filter(x => x.contains(\"A\"))\n        val\
    \ list34 = list33.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjxjf10_5.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjxjf10_5.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            if (word.contains(\"a\") || word.contains(\"e\") || word.contains(\"\
    i\") || word.contains(\"o\") || word.contains(\"u\")) {\n                result.add(word)\n\
    \            }\n        }\n        if (result.size == 0) {\n            result.add(\"\
    \")\n        }\n        if (result.size == 1) {\n            result.add(\"\")\n\
    \        }\n        if (result.size == 2) {\n            result.add(\"\")\n  \
    \      }\n        if (result.size == 3) {\n            result.add(\"\")\n    \
    \    }\n        if (result.size == 4) {\n            result.add(\"\")\n      \
    \  }\n        if (result.size == 5) {\n            result.add(\"\")\n        }\n\
    \        if (result.size == 6) {\n            result.add(\"\")\n        }\n  \
    \      if (result.size == 7) {\n            result.add(\"\")\n        }\n    \
    \    if (result.size == 8) {\n            result.add(\"\")\n        }\n      \
    \  if (result.size == 9) {\n            result.add(\"\")\n        }\n        if\
    \ (result.size == 10) {\n            result.add(\"\")\n        }\n        if (result.size\
    \ == 11) {\n            result.add(\"\")\n        }\n        if (result.size ==\
    \ 12) {\n            result.add(\"\")\n        }\n        if (result.size == 13)\
    \ {\n            result.add(\"\")\n        }\n        if (result.size == 14) {\n\
    \            result.add(\"\")\n        }\n        if (result.size == 15) {\n \
    \           result.add(\"\")\n        }\n        if (result.size == 16) {\n  \
    \          result.add(\"\")\n        }\n        if (result.size == 17) {\n   \
    \         result.add(\"\")\n        }\n        if (result.size == 18) {\n    \
    \        result.add(\"\")\n        }\n        if (result.size == 19) {\n     \
    \       result.add(\"\")\n        }\n        if (result.size == 20) {\n      \
    \      result.add(\"\")\n        }\n        if (result.size == 21) {\n       \
    \     result.add(\"\")\n        }\n        if (result.size == 22) {\n        \
    \    result.add(\"\")\n        }\n        if (result.size == 23) {\n         \
    \   result.add(\"\")\n        }\n        if (result.size == 24) {\n          \
    \  result.add(\"\")\n        }\n        if (result.size == 25) {\n           \
    \ result.add(\"\")\n        }\n        if (result.size == 26) {\n            result.add(\"\
    \")\n        }\n        if (result.size == 27) {\n            result.add(\"\"\
    )\n        }\n        if (result.size == 28) {\n            result.add(\"\")\n\
    \        }\n        if (result.size == 29) {\n            result.add(\"\")\n \
    \       }\n        if (result.size == 30) {\n            result.add(\"\")\n  \
    \      }\n        if (result.size == 31) {\n            result.add(\"\")\n   \
    \     }\n        if (result.size == 32) {\n            result.add(\"\")\n    \
    \    }\n        if (result.size == 33) {\n            result.add(\"\")\n     \
    \   }\n        if (result.size == 34) {\n            result.add(\"\")\n      \
    \  }\n        if (result.size == 35) {\n            result.add(\"\")\n       \
    \ }\n        if (result.size == 36) {\n            result.add(\"\")\n        }\n\
    \        if (result.size == 37\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdhek5d0_.scala:140:4 ---------------------------\e\
    [0m\e[0m\n\e[31m140 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdhek5d0_.scala:22:25\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        val count = new\
    \ mutable.HashMap[String, Long]()\n        for (word <- list) {\n            val\
    \ count = count.get(word)\n            if (count == null) {\n                count.set(word,\
    \ 1l)\n            } else {\n                count.set(word, count.get + 1)\n\
    \            }\n        }\n        for (word <- list) {\n            val count\
    \ = count.get(word)\n            if (count.get == n) {\n                result.add(word)\n\
    \            }\n        }\n        if (result.isEmpty) {\n            List()\n\
    \        } else {\n            result.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp297ifdas.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp297ifdas.scala:23:24\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val vowels = \"aeiouAEIOU\"\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n   \
    \     val consonantsList = consonants.toList\n        val vowelsList = vowels.toList\n\
    \        val wordsList = s.split(\" \").filter(_.nonEmpty).toList\n        val\
    \ wordsWithConsonants = wordsList.filter(word => word.forall(consonantsList.contains(_)))\n\
    \        val wordsWithVowels = wordsList.filter(word => word.forall(vowelsList.contains(_)))\n\
    \        val wordsWithConsonantsAndVowels = wordsWithConsonants ++ wordsWithVowels\n\
    \        val wordsWithConsonantsAndVowelsAndSpaces = wordsWithConsonantsAndVowels.filter(word\
    \ => word.forall(c => c != \" \"))\n        val wordsWithConsonantsAndVowelsAndSpacesAndNumbers\
    \ = wordsWithConsonantsAndVowelsAndSpaces.filter(word => word.forall(c => c !=\
    \ \".\"))\n        val wordsWithConsonantsAndVowelsAndSpacesAndNumbersAndLetters\
    \ = wordsWithConsonantsAndVowelsAndSpacesAndNumbers.filter(word => word.forall(c\
    \ => c != \" \"))\n        val wordsWithConsonantsAndVowelsAndSpacesAndNumbersAndLettersAndNumbers\
    \ = wordsWithConsonantsAndVowelsAndSpacesAndNumbersAndLetters.filter(word => word.forall(c\
    \ => c != \".\"))\n        val wordsWithConsonantsAndVowelsAndSpacesAndNumbersAndLettersAndNumbersAndLetters\
    \ = wordsWithConsonantsAndVowelsAndSpacesAndNumbersAndLettersAndNumbers.filter(word\
    \ => word.forall(c => c != \" \"))\n        val wordsWithConsonantsAndVowelsAndSpacesAndNumbersAndLettersAndNumbersAndLettersAndNumbers\
    \ = wordsWithConsonantsAndVowelsAndSpacesAndNumbersAndLettersAndNumbersAndLetters.filter(word\
    \ => word.forall(c => c != \".\"))\n        val wordsWithConsonantsAndVowelsAndSpacesAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters\
    \ = wordsWithConsonantsAndVowelsAndSpacesAndNumbersAndLettersAndNumbersAndLettersAndLetters.filter(word\
    \ => word.forall(c => c != \" \"))\n        val wordsWithConsonants\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz7h02p7x.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpz7h02p7x.scala:29:113\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e\
    [33mval\e[0m \e[36mwordsWithConsonantsAndVowelsAndSpaces\e[0m = wordsWithConsonantsAndVowels.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c != \e[31m\" \"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                 ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpz7h02p7x.scala:30:132 ----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mwordsWithConsonantsAndVowelsAndSpacesAndNumbers\e\
    [0m = wordsWithConsonantsAndVowelsAndSpaces.filter(\e[36mword\e[0m => word.forall(\e\
    [36mc\e[0m => c != \e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m                 \
    \                                                                            \
    \                                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Values of types Char and String cannot be compared with == or !=\n\e[31m\e[31m--\
    \ Error: /tmp/tmpz7h02p7x.scala:31:152 ----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mwordsWithConsonantsAndVowelsAndSpacesAndNumbersAndLetters\e\
    [0m = wordsWithConsonantsAndVowelsAndSpacesAndNumbers.filter(\e[36mword\e[0m =>\
    \ word.forall(\e[36mc\e[0m => c != \e[31m\" \"\e[0m))\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \                                                                           ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpz7h02p7x.scala:32:172 ----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mwordsWithConsonantsAndVowelsAndSpacesAndNumbersAndLettersAndNumbers\e\
    [0"
  stdout: ''
  timestamp: 1659805716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.count(c => c != \" \")\n            if (count\
    \ == n) {\n                result += (word + \" \")\n            }\n        }\n\
    \        return result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2bn9ee5e.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp2bn9ee5e.scala:24:40\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \     \e[33mval\e[0m \e[36mcount\e[0m = word.count(\e[36mc\e[0m => c != \e[31m\"\
    \ \"\e[0m)\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659805717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val wordList = list.filter( x => x.contains(\"a\") || x.contains(\"e\"\
    ) || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\"))\n        val\
    \ consonantList = list.filter( x => x.contains(\"b\") || x.contains(\"c\") ||\
    \ x.contains(\"d\") || x.contains(\"f\") || x.contains(\"g\") || x.contains(\"\
    h\") || x.contains(\"j\") || x.contains(\"k\") || x.contains(\"l\") || x.contains(\"\
    m\") || x.contains(\"n\") || x.contains(\"p\") || x.contains(\"q\") || x.contains(\"\
    r\") || x.contains(\"s\") || x.contains(\"t\") || x.contains(\"v\") || x.contains(\"\
    w\") || x.contains(\"x\") || x.contains(\"y\") || x.contains(\"z\"))\n       \
    \ val consonantCount = consonantList.size\n        val consonantList2 = consonantList.filter(\
    \ x => x.contains(\"a\") || x.contains(\"e\") || x.contains(\"i\") || x.contains(\"\
    o\") || x.contains(\"u\"))\n        val consonantCount2 = consonantList2.size\n\
    \        val consonantList3 = consonantList2.filter( x => x.contains(\"b\") ||\
    \ x.contains(\"c\") || x.contains(\"d\") || x.contains(\"f\") || x.contains(\"\
    g\") || x.contains(\"h\") || x.contains(\"j\") || x.contains(\"k\") || x.contains(\"\
    l\") || x.contains(\"m\") || x.contains(\"n\") || x.contains(\"p\") || x.contains(\"\
    q\") || x.contains(\"r\") || x.contains(\"s\") || x.contains(\"t\") || x.contains(\"\
    v\") || x.contains(\"w\") || x.contains(\"x\") || x.contains(\"y\") || x.contains(\"\
    z\"))\n        val consonantCount3 = consonantList3.size\n        val consonantList4\
    \ = consonantList3.filter( x => x.contains(\"b\") || x.contains(\"c\") || x.contains(\"\
    d\") || x.contains(\"f\") || x.contains(\"g\") || x.contains(\"h\") || x.contains(\"\
    j\") || x.contains(\"k\") || x.contains(\"l\") || x.contains(\"m\") || x.contains(\"\
    n\") || x.contains(\"p\") || x.contains(\"q\") || x.contains(\"r\") || x.\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu8vogrtt.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpu8vogrtt.scala:30:5 ---------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").toList\n\
    \        val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\")\n        val consonantCount = consonants.count(_ == s.charAt(0))\n  \
    \      val vowelCount = vowels.count(_ == s.charAt(0))\n        val consonantWords\
    \ = wordList.filter(word => word.count(_ == s.charAt(0)) == n)\n        val vowelWords\
    \ = wordList.filter(word => word.count(_ == s.charAt(0)) == 0)\n        val consonantWordsCount\
    \ = consonantWords.count(word => consonants.contains(word))\n        val vowelWordsCount\
    \ = vowelWords.count(word => vowels.contains(word))\n        val consonantWordsCount2\
    \ = consonantWords.count(word => consonants.contains(word) && consonants.contains(word))\n\
    \        val vowelWordsCount2 = vowelWords.count(word => vowels.contains(word)\
    \ && vowels.contains(word))\n        val consonantWordsCount3 = consonantWords.count(word\
    \ => consonants.contains(word) && consonants.contains(word) && consonants.contains(word))\n\
    \        val vowelWordsCount3 = vowelWords.count(word => vowels.contains(word)\
    \ && vowels.contains(word) && vowels.contains(word))\n        val consonantWordsCount4\
    \ = consonantWords.count(word => consonants.contains(word) && consonants.contains(word)\
    \ && consonants.contains(word) && consonants.contains(word))\n        val vowelWordsCount4\
    \ = vowelWords.count(word => vowels.contains(word) && vowels.contains(word) &&\
    \ vowels.contains(word) && vowels.contains(word))\n        val consonantWordsCount5\
    \ = consonantWords.count(word => consonants.contains(word) && consonants.contains(word)\
    \ && consonants.contains(word) && consonants.contains(word) && consonants.contains(word))\n\
    \        val vowelWordsCount5 = vowelWords.count(word => vowels.contains(word)\
    \ && vowels.contains(word) && vowels.contains(word) && vowels.contains(word) &&\
    \ vowels.contains(word))\n        val consonantWordsCount6 = consonantWords.count(word\
    \ => consonants.contains(word) && consonants.contains(word) && consonant\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4u4jhqzd.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp4u4jhqzd.scala:24:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonants.count(_ == s.charAt(\e\
    [31m0\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and\
    \ Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp4u4jhqzd.scala:25:38\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \ \e[33mval\e[0m \e[36mvowelCount\e[0m = vowels.count(_ == s.charAt(\e[31m0\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4u4jhqzd.scala:38:122\
    \ -----------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantWordsCount6\e[0m = consonantWords.count(\e[36mword\e[0m => consonants.contains(word)\
    \ && consonants.contains(word) && consonant\n\e[31m\e[31m   |\e[0m           \
    \                                                                            \
    \                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                                          Not found: consonant\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4u4jhqzd.scala:39:5 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659805720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c >= 'a' && c <= 'z' || c >=\
    \ 'A' && c <= 'Z')\n            if (count == n) result += word\n        }\n  \
    \      if (result.isEmpty) List()\n        else result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcj8no08h.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.filter(_ => _.length == n).map(_.toUpperCase)\n      \
    \  val list3 = list2.filter(_ => list2.count(_ == _) == n).map(_.toUpperCase)\n\
    \        val list4 = list3.filter(_ => list3.count(_ == _) == n).map(_.toUpperCase)\n\
    \        val list5 = list4.filter(_ => list4.count(_ == _) == n).map(_.toUpperCase)\n\
    \        val list6 = list5.filter(_ => list5.count(_ == _) == n).map(_.toUpperCase)\n\
    \        val list7 = list6.filter(_ => list6.count(_ == _) == n).map(_.toUpperCase)\n\
    \        val list8 = list7.filter(_ => list7.count(_ == _) == n).map(_.toUpperCase)\n\
    \        val list9 = list8.filter(_ => list8.count(_ == _) == n).map(_.toUpperCase)\n\
    \        val list10 = list9.filter(_ => list9.count(_ == _) == n).map(_.toUpperCase)\n\
    \        val list11 = list10.filter(_ => list10.count(_ == _) == n).map(_.toUpperCase)\n\
    \        val list12 = list11.filter(_ => list11.count(_ == _) == n).map(_.toUpperCase)\n\
    \        val list13 = list12.filter(_ => list12.count(_ == _) == n).map(_.toUpperCase)\n\
    \        val list14 = list13.filter(_ => list13.count(_ == _) == n).map(_.toUpperCase)\n\
    \        val list15 = list14.filter(_ => list14.count(_ == _) == n).map(_.toUpperCase)\n\
    \        val list16 = list15.filter(_ => list15.count(_ == _) == n).map(_.toUpperCase)\n\
    \        val list17 = list16.filter(_ => list16.count(_ == _) == n).map(_.toUpperCase)\n\
    \        val list18 = list17.filter(_ => list17.count(_ == _) == n).map(_.toUpperCase)\n\
    \        val list19 = list18.filter(_ => list18.count(_ == _) == n).map(_.toUpperCase)\n\
    \        val list20 = list19.filter(_ => list19.count(_ == _) == n).map(_.toUpperCase)\n\
    \        val list21 = list20.filter(_ => list20.count(_ == _) == n).map(_.toUpperCase)\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpdexhxzpx.scala:42:11 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E081] Type Error: /tmp/tmpdexhxzpx.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m                \
    \                     ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2\
    \ of expanded function:\n\e[31m   |\e[0m   _$2 => _$2.length == n.\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpdexhxzpx.scala:23:50 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlist3\e[0m = list2.filter(_\
    \ => list2.count(_ == _) == n).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m     \
    \                                             ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                              Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmpdexhxzpx.scala:24:50 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlist4\e[0m = list3.filter(_\
    \ => list3.count(_ == _) == n).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m     \
    \                                             ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                              Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmpdexhxzpx.scala:25:50 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mlist5\e[0m = list4.filter(_\
    \ => list4.count(_ == _) == n).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m     \
    \                                             ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                              Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmpdexhxzpx.scala:26:50 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mlist6\e[0m = list5.filter(_\
    \ => list5.c"
  stdout: ''
  timestamp: 1659805722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\", \"y\")\n        val consonantCounts = words.map(word => consonants.count(_\
    \ == word)).toList\n        val vowelCounts = words.map(word => vowels.count(_\
    \ == word)).toList\n        val consonantAndVowelCounts = consonantCounts ++ vowelCounts\n\
    \        val consonantAndVowelCountSum = consonantAndVowelCounts.sum\n       \
    \ val consonantAndVowelCountSum2 = consonantAndVowelCounts.sum\n        val consonantAndVowelCountSum3\
    \ = consonantAndVowelCounts.sum\n        val consonantAndVowelCountSum4 = consonantAndVowelCounts.sum\n\
    \        val consonantAndVowelCountSum5 = consonantAndVowelCounts.sum\n      \
    \  val consonantAndVowelCountSum6 = consonantAndVowelCounts.sum\n        val consonantAndVowelCountSum7\
    \ = consonantAndVowelCounts.sum\n        val consonantAndVowelCountSum8 = consonantAndVowelCounts.sum\n\
    \        val consonantAndVowelCountSum9 = consonantAndVowelCounts.sum\n      \
    \  val consonantAndVowelCountSum10 = consonantAndVowelCounts.sum\n        val\
    \ consonantAndVowelCountSum11 = consonantAndVowelCounts.sum\n        val consonantAndVowelCountSum12\
    \ = consonantAndVowelCounts.sum\n        val consonantAndVowelCountSum13 = consonantAndVowelCounts.sum\n\
    \        val consonantAndVowelCountSum14 = consonantAndVowelCounts.sum\n     \
    \   val consonantAndVowelCountSum15 = consonantAndVowelCounts.sum\n        val\
    \ consonantAndVowelCountSum16 = consonantAndVowelCounts.sum\n        val consonant\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmputvnigko.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmputvnigko.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805718
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.length == n).map(_.toLowerCase).toList\n        words.filter(word\
    \ => word.contains(\"a\") || word.contains(\"e\") || word.contains(\"i\") || word.contains(\"\
    o\") || word.contains(\"u\"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp11rt9di_.scala:25)\n\tat Problem.main(tmp11rt9di_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiouAEIOU\"\n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n        val vowelCount = s.count(vowels)\n        val consonantCount = s.count(consonants)\n\
    \        val vowelCountMinusConsonantCount = vowelCount - consonantCount\n   \
    \     val consonantCountMinusVowelCount = consonantCount - vowelCount\n      \
    \  val vowelCountMinusConsonantCountMinusVowelCount = vowelCountMinusConsonantCount\
    \ - consonantCountMinusVowelCount\n        val vowelCountMinusConsonantCountMinusVowelCountMinusOne\
    \ = vowelCountMinusConsonantCount - consonantCountMinusVowelCount - 1\n      \
    \  val vowelCountMinusConsonantCountMinusVowelCountMinusOneAndOne = vowelCountMinusConsonantCount\
    \ - consonantCountMinusVowelCount - 1 - 1\n        val vowelCountMinusConsonantCountMinusVowelCountMinusOneAndTwo\
    \ = vowelCountMinusConsonantCount - consonantCountMinusVowelCount - 1 - 2\n  \
    \      val vowelCountMinusConsonantCountMinusVowelCountMinusOneAndThree = vowelCountMinusConsonantCount\
    \ - consonantCountMinusVowelCount - 1 - 3\n        val vowelCountMinusConsonantCountMinusVowelCountMinusOneAndFour\
    \ = vowelCountMinusConsonantCount - consonantCountMinusVowelCount - 1 - 4\n  \
    \      val vowelCountMinusConsonantCountMinusVowelCountMinusOneAndFive = vowelCountMinusConsonantCount\
    \ - consonantCountMinusVowelCount - 1 - 5\n        val vowelCountMinusConsonantCountMinusVowelCountMinusOneAndSix\
    \ = vowelCountMinusConsonantCount - consonantCountMinusVowelCount - 1 - 6\n  \
    \      val vowelCountMinusConsonantCountMinusVowelCountMinusOneAndSeven = vowelCountMinusConsonantCount\
    \ - consonantCountMinusVowelCount - 1 - 7\n        val vowelCountMin\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo7spmg6l.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo7spmg6l.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpo7spmg6l.scala:24:33 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = s.count(vowels)\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                              Found:    (vowels : String)\n\e[31m   |\e[0m  \
    \                               Required: Char => Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo7spmg6l.scala:25:37 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = s.count(consonants)\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     Found:    (consonants : String)\n\
    \e[31m   |\e[0m                                     Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo7spmg6l.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659805722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ => _.length == n).filter(_ => _.contains(\"\
    a\"))\n        list2.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpnrwk1duk.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n).filter(_ => _.contains(\e[31m\"a\"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                     ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => _$2.length\
    \ == n.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpnrwk1duk.scala:22:64 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n).filter(_ => _.contains(\e[31m\"a\"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$4 of expanded function:\n\e[31m\
    \   |\e[0m   _$4 => _$4.contains(\e[32m\"a\"\e[0m).\n2 errors found\n"
  stdout: ''
  timestamp: 1659805716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val wordList = words.toSet\n        val result: List[String] = if (wordList.isEmpty)\
    \ Nil else wordList.filter(_ == n).sorted\n        result.map(_.capitalize)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphdhd3vw_.scala:23:82 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mif\e[0m (wordList.isEmpty) Nil \e[33melse\e[0m\
    \ wordList.filter(_ == n).sorted\n\e[31m\e[31m   |\e[0m                      \
    \                                                            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Long cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659805721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val result: List[String] = Nil\n        for(word <- words) {\n       \
    \     val wordList = word.split(\"\\\\W+\")\n            val wordList2 = wordList.filter(x\
    \ => x.length == n)\n            val wordList3 = wordList2.filter(x => x.contains(\"\
    a\"))\n            val wordList4 = wordList3.filter(x => x.contains(\"e\"))\n\
    \            val wordList5 = wordList4.filter(x => x.contains(\"i\"))\n      \
    \      val wordList6 = wordList5.filter(x => x.contains(\"o\"))\n            val\
    \ wordList7 = wordList6.filter(x => x.contains(\"u\"))\n            val wordList8\
    \ = wordList7.filter(x => x.contains(\"A\"))\n            val wordList9 = wordList8.filter(x\
    \ => x.contains(\"E\"))\n            val wordList10 = wordList9.filter(x => x.contains(\"\
    I\"))\n            val wordList11 = wordList10.filter(x => x.contains(\"O\"))\n\
    \            val wordList12 = wordList11.filter(x => x.contains(\"U\"))\n    \
    \        val wordList13 = wordList12.filter(x => x.contains(\"a\"))\n        \
    \    val wordList14 = wordList13.filter(x => x.contains(\"e\"))\n            val\
    \ wordList15 = wordList14.filter(x => x.contains(\"i\"))\n            val wordList16\
    \ = wordList15.filter(x => x.contains(\"o\"))\n            val wordList17 = wordList16.filter(x\
    \ => x.contains(\"u\"))\n            val wordList18 = wordList17.filter(x => x.contains(\"\
    A\"))\n            val wordList19 = wordList18.filter(x => x.contains(\"E\"))\n\
    \            val wordList20 = wordList19.filter(x => x.contains(\"I\"))\n    \
    \        val wordList21 = wordList20.filter(x => x.contains(\"O\"))\n        \
    \    val wordList22 = wordList21.filter(x => x.contains(\"U\"))\n            val\
    \ wordList23 = wordList22.filter(x => x.contains(\"a\"))\n            val wordList24\
    \ = wordList23.filter(x => x.contains(\"e\"))\n            val wordList25 = wordList24.filter(x\
    \ => x.contains(\"i\"))\n            val wordList26 = wordList25.filter(x => x.contains(\"\
    o\"))\n            val wordList27 = wordList26.filter(x => x.contains(\"u\"))\n\
    \            val wordList28 = wordList27.filter(x => x.contains(\"A\"))\n    \
    \        val wordList29 = word\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzc9aujkr.scala:65:0 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzc9aujkr.scala:64:1\
    \ ---------------------\e[0m\e[0m\n\e[31m64 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpzc9aujkr.scala:54:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m54 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659805725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += (word + \" \")\n        })\n        result.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm9xgisnx.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x\
    \ => x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"E\"\
    ))\n        val list5 = list4.filter(x => x.contains(\"I\"))\n        val list6\
    \ = list5.filter(x => x.contains(\"O\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"U\"))\n        val list8 = list7.filter(x => x.contains(\"a\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"e\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"i\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"o\"))\n        val list12 = list11.filter(x => x.contains(\"\
    u\"))\n        val list13 = list12.filter(x => x.contains(\"A\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"E\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"I\"))\n        val list16 = list15.filter(x => x.contains(\"\
    O\"))\n        val list17 = list16.filter(x => x.contains(\"U\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"a\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"e\"))\n        val list20 = list19.filter(x => x.contains(\"\
    i\"))\n        val list21 = list20.filter(x => x.contains(\"o\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"u\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"A\"))\n        val list24 = list23.filter(x => x.contains(\"\
    E\"))\n        val list25 = list24.filter(x => x.contains(\"I\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"O\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"U\"))\n        val list28 = list27.filter(x => x.contains(\"\
    a\"))\n        val list29 = list28.filter(x => x.contains(\"e\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"i\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"o\"))\n        val list32 = list31.filter(x => x.contains(\"\
    u\"))\n        val list33 = list32.filter(x => x.contains(\"A\"))\n        val\
    \ list34 = list33.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjxjf10_5.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjxjf10_5.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").toList\n\
    \        val wordSet = wordList.map(x => x.toLowerCase)\n        val consonantSet\
    \ = Set(\n            \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\",\
    \ \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"\n        )\n        val consonantList = consonantSet.map(x => x.toLowerCase)\n\
    \        val consonantSet2 = Set(\n            \"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"\n        )\n        val consonantList2\
    \ = consonantSet2.map(x => x.toLowerCase)\n        val consonantSet3 = Set(\n\
    \            \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"\n        )\n        val consonantList3 = consonantSet3.map(x => x.toLowerCase)\n\
    \        val consonantSet4 = Set(\n            \"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"\n        )\n        val consonantList4\
    \ = consonantSet4.map(x => x.toLowerCase)\n        val consonantSet5 = Set(\n\
    \            \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"\n        )\n        val consonantList5 = consonantSet5.map(x => x.toLowerCase)\n\
    \        val consonantSet6 = Set(\n            \"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"\n        )\n        val consonantList6\
    \ = consonantSet6.map(x => x.toLowerCase)\n        val consonantSet7 = Set(\n\
    \            \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"\n        )\n        val consonantList7 = consonantSet7.map(x => x.toLowerCase)\n\
    \        val consonantSet8 = Set(\n            \"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp4m3ii3gv.scala:52:67 -----------------------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m            \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"\
    d\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"j\"\e\
    [0m, \e[31m\"k\"\e[0m, \e[31m\"l\"\e[0m, \e[31m\"m\"\e[0m, \e[31m\"n\"\e[0m, \"\
    \n\e[31m\e[31m   |\e[0m                                                      \
    \             ^\e[0m\n\e[31m   |\e[0m                                        \
    \         unclosed string literal\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4m3ii3gv.scala:53:5 ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = new mutable.ListBuffer[String]()\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n   \
    \     val vowels = \"aeiouAEIOU\"\n        val consonantCounts = consonants.toList.map(c\
    \ => s.count(c)).toList\n        val vowelCounts = vowels.toList.map(c => s.count(c)).toList\n\
    \        val consonantIndexes = consonantCounts.zipWithIndex.filter(_._2 == n).map(_._1)\n\
    \        val vowelIndexes = vowelCounts.zipWithIndex.filter(_._2 == n).map(_._1)\n\
    \        val consonantWords = consonantIndexes.map(i => s.substring(i, i + 1))\n\
    \        val vowelWords = vowelIndexes.map(i => s.substring(i, i + 1))\n     \
    \   words += consonantWords.mkString(\" \")\n        words += vowelWords.mkString(\"\
    \ \")\n        words.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbk_k07yq.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbk_k07yq.scala:24:65\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantCounts\e\
    [0m = consonants.toList.map(\e[36mc\e[0m => s.count(c)).toList\n\e[31m\e[31m \
    \  |\e[0m                                                                 ^\e\
    [0m\n\e[31m   |\e[0m                                               Found:    (c\
    \ : Char)\n\e[31m   |\e[0m                                               Required:\
    \ Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbk_k07yq.scala:25:57\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e\
    [0m = vowels.toList.map(\e[36mc\e[0m => s.count(c)).toList\n\e[31m\e[31m   |\e\
    [0m                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                               Found:    (c : Char)\n\e[31m\
    \   |\e[0m                                               Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").toList\n\
    \        val wordSet = wordList.map(_.toUpperCase).toSet\n        val consonantSet\
    \ = Set(\"BCDFGHJKLMNPQRSTVWXYZ\")\n        val consonantList = consonantSet.map(_.toUpperCase).toList\n\
    \        val consonantSetList = consonantSet.map(_.toUpperCase).toList\n     \
    \   val consonantSetList2 = consonantSet.map(_.toUpperCase).toList\n        val\
    \ consonantSetList3 = consonantSet.map(_.toUpperCase).toList\n        val consonantSetList4\
    \ = consonantSet.map(_.toUpperCase).toList\n        val consonantSetList5 = consonantSet.map(_.toUpperCase).toList\n\
    \        val consonantSetList6 = consonantSet.map(_.toUpperCase).toList\n    \
    \    val consonantSetList7 = consonantSet.map(_.toUpperCase).toList\n        val\
    \ consonantSetList8 = consonantSet.map(_.toUpperCase).toList\n        val consonantSetList9\
    \ = consonantSet.map(_.toUpperCase).toList\n        val consonantSetList10 = consonantSet.map(_.toUpperCase).toList\n\
    \        val consonantSetList11 = consonantSet.map(_.toUpperCase).toList\n   \
    \     val consonantSetList12 = consonantSet.map(_.toUpperCase).toList\n      \
    \  val consonantSetList13 = consonantSet.map(_.toUpperCase).toList\n        val\
    \ consonantSetList14 = consonantSet.map(_.toUpperCase).toList\n        val consonantSetList15\
    \ = consonantSet.map(_.toUpperCase).toList\n        val consonantSetList16 = consonantSet.map(_.toUpperCase).toList\n\
    \        val consonantSetList17 = consonantSet.map(_.toUpperCase).toList\n   \
    \     val consonantSetList18 = consonantSet.map(_.toUpperCase).toList\n      \
    \  val consonantSetList19 = consonantSet.map(_.toUpperCase).toList\n        val\
    \ consonantSetList20 = consonantSet.map(_.toUpperCase).toList\n        val consonantSetList21\
    \ = consonantSet.map(_.toUpperCase).toList\n        val consonantSetList22 = consonantSet.map(_.toUpperCase).toList\n\
    \        val consonantSetList23 = consonantSet.map(_.toUpperCase).toList\n   \
    \     val con\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp92om2_tj.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp92om2_tj.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordsWithNConsonants = s.split(\"\
    \ \").filter(word => word.count(_ == 'a') + word.count(_ == 'e') + word.count(_\
    \ == 'i') + word.count(_ == 'o') + word.count(_ == 'u') == n)\n        wordsWithNConsonants.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp84o6ueud.scala:25)\n\tat Problem.main(tmp84o6ueud.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        words.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) {\n                result += (word + \" \")\n            }\n        })\n\
    \        return result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkt61_imn.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val vowels = \"aeiouAEIOU\".toList\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".toList\n\
    \        val consonantCount = consonants.count(c => s.contains(c))\n        val\
    \ vowelCount = vowels.count(c => s.contains(c))\n        val consonantCount =\
    \ consonants.count(c => s.contains(c))\n        val vowelCount = vowels.count(c\
    \ => s.contains(c))\n        val consonantCount = consonants.count(c => s.contains(c))\n\
    \        val vowelCount = vowels.count(c => s.contains(c))\n        val consonantCount\
    \ = consonants.count(c => s.contains(c))\n        val vowelCount = vowels.count(c\
    \ => s.contains(c))\n        val consonantCount = consonants.count(c => s.contains(c))\n\
    \        val vowelCount = vowels.count(c => s.contains(c))\n        val consonantCount\
    \ = consonants.count(c => s.contains(c))\n        val vowelCount = vowels.count(c\
    \ => s.contains(c))\n        val consonantCount = consonants.count(c => s.contains(c))\n\
    \        val vowelCount = vowels.count(c => s.contains(c))\n        val consonantCount\
    \ = consonants.count(c => s.contains(c))\n        val vowelCount = vowels.count(c\
    \ => s.contains(c))\n        val consonantCount = consonants.count(c => s.contains(c))\n\
    \        val vowelCount = vowels.count(c => s.contains(c))\n        val consonantCount\
    \ = consonants.count(c => s.contains(c))\n        val vowelCount = vowels.count(c\
    \ => s.contains(c))\n        val consonantCount = consonants.count(c => s.contains(c))\n\
    \        val vowelCount = vowels.count(c => s.contains(c))\n        val consonantCount\
    \ = consonants.count(c => s.contains(c))\n        val vowelCount = vowels.count(c\
    \ => s.contains(c))\n        val consonantCount = consonants.count(c => s.contains(c))\n\
    \        val vowelCount = vowels.count(c => s.contains(c))\n        val consonantCount\
    \ = consonants.count(c => s.contains(c))\n        val vowelCount = vowels.count(c\
    \ => s.contains(c))\n        val consonantCount = consonants.count(c => s.contains(c))\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpc6jxmy6x.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpc6jxmy6x.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonants.count(\e\
    [36mc\e[0m => s.contains(c))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc6jxmy6x.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowels.count(\e[36mc\e\
    [0m => s.contains(c))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCount is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc6jxmy6x.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonants.count(\e\
    [36mc\e[0m => s.contains(c))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc6jxmy6x.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowels.count(\e[36mc\e\
    [0m => s.contains(c))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    ["
  stdout: ''
  timestamp: 1659805728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        for(i <- 0 until\
    \ list.size) {\n            val word = list(i)\n            val count = word.count(c\
    \ => c.toString.toChar == 'a')\n            if(count == n) {\n               \
    \ result += word\n            }\n        }\n        if(result.isEmpty) {\n   \
    \         List()\n        } else {\n            result.toList\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx1n_r3tk.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx1n_r3tk.scala:25:51\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcount\e[0m = word.count(\e[36mc\e[0m => c.toString.toChar == \e[31m'a'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659805728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").toList\n\
    \        val wordSet = wordList.map(_.toUpperCase).toSet\n        val wordSetList\
    \ = wordSet.map(x => x.toList).toList\n        val wordSetListLength = wordSetList.size\n\
    \        val wordSetListLength = wordSetListLength.toLong\n        val wordSetListLength\
    \ = wordSetListLength.asInstanceOf[Long]\n        val wordSetListLength = wordSetListLength.asInstanceOf[Long]\n\
    \        val wordSetListLength = wordSetListLength.asInstanceOf[Long]\n      \
    \  val wordSetListLength = wordSetListLength.asInstanceOf[Long]\n        val wordSetListLength\
    \ = wordSetListLength.asInstanceOf[Long]\n        val wordSetListLength = wordSetListLength.asInstanceOf[Long]\n\
    \        val wordSetListLength = wordSetListLength.asInstanceOf[Long]\n      \
    \  val wordSetListLength = wordSetListLength.asInstanceOf[Long]\n        val wordSetListLength\
    \ = wordSetListLength.asInstanceOf[Long]\n        val wordSetListLength = wordSetListLength.asInstanceOf[Long]\n\
    \        val wordSetListLength = wordSetListLength.asInstanceOf[Long]\n      \
    \  val wordSetListLength = wordSetListLength.asInstanceOf[Long]\n        val wordSetListLength\
    \ = wordSetListLength.asInstanceOf[Long]\n        val wordSetListLength = wordSetListLength.asInstanceOf[Long]\n\
    \        val wordSetListLength = wordSetListLength.asInstanceOf[Long]\n      \
    \  val wordSetListLength = wordSetListLength.asInstanceOf[Long]\n        val wordSetListLength\
    \ = wordSetListLength.asInstanceOf[Long]\n        val wordSetListLength = wordSetListLength.asInstanceOf[Long]\n\
    \        val wordSetListLength = wordSetListLength.asInstanceOf[Long]\n      \
    \  val wordSetListLength = wordSetListLength.asInstanceOf[Long]\n        val wordSetListLength\
    \ = wordSetListLength.asInstanceOf[Long]\n        val wordSetListLength = wordSetListLength.asInstanceOf[Long]\n\
    \        val wordSetListLength = wordSetListLength.asInstanceOf[Long]\n      \
    \  val wordSetListLength = wordSetListLength.asInstanceOf[Long]\n        val wordSetListLength\
    \ = wordSetListLength.asInstanceOf[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaqznw51o.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mwordSetListLength\e[0m =\
    \ wordSetListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordSetListLength is already defined as \e[33mvalue\e[0m \e\
    [35mwordSetListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpaqznw51o.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mwordSetListLength\e[0m =\
    \ wordSetListLength.asInstanceOf[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mwordSetListLength is already defined as \e[33mvalue\e[0m \e[35mwordSetListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaqznw51o.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mwordSetListLength\e[0m = wordSetListLength.asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordSetListLength is already defined as \e[33mvalue\e[0m \e\
    [35mwordSetListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpaqznw51o.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mwordSetListLength\e[0m =\
    \ wordSetListLength.asInstanceOf[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mwordSetListLength is already defined as \e[33mvalue\e[0m \e[35mwordSetListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error:"
  stdout: ''
  timestamp: 1659805730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c != \" \")\n            if\
    \ (count == n) result += word\n        }\n        if (result.isEmpty) List()\n\
    \        else result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsaan8tjx.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpsaan8tjx.scala:24:40\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \     \e[33mval\e[0m \e[36mcount\e[0m = word.count(\e[36mc\e[0m => c != \e[31m\"\
    \ \"\e[0m)\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659805730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").map(_.toUpperCase)\n\
    \        val result = new mutable.ListBuffer[String]()\n        val count = new\
    \ mutable.HashMap[String, Long]()\n        list.foreach(word => {\n          \
    \  val count = count.get(word)\n            if (count == null) {\n           \
    \     count.put(word, 1l)\n            } else {\n                count.put(word,\
    \ count.get(word) + 1)\n            }\n        })\n        count.foreach {\n \
    \           case (word, count) =>\n                if (count == n) {\n       \
    \             result += word\n                }\n        }\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjlwo_un6.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjlwo_un6.scala:23:24\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            if (word.contains(\"consonant\") && word.count(_ == 'c')\
    \ <= n) result += word\n        }\n        if (result.isEmpty) List()\n      \
    \  else result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdrh6kt0d.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { x\
    \ =>\n            val count = x.count(_ == 'a')\n            if (count == n) result\
    \ += x\n        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vkye3kx.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) {\n                result += word\n            }\n        }\n        if\
    \ (result.isEmpty) {\n            List()\n        } else {\n            result.toList\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiuuc5mbo.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        val result: List[String] = words.filter(word => word.count(_ == 'a')\
    \ == n).map(word => word.split(\"\").filter(_.nonEmpty).mkString(\"\"))\n    \
    \    if (result.isEmpty) List()\n        else result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfkk1i_4c.scala:22:35\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = words.filter(\e[36mword\e[0m => word.count(_\
    \ == \e[31m'a'\e[0m) == n).map(\e[36mword\e[0m => word.split(\e[31m\"\"\e[0m).filter(_.nonEmpty).mkString(\e\
    [31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                   Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result: List[String] = new mutable.ListBuffer[String]()\n        list.foreach\
    \ { word =>\n            val count = word.split(\"[^aeiou]\").length\n       \
    \     if (count == n) result += word\n        }\n        if (result.isEmpty) List()\n\
    \        else result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptl593kic.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptl593kic.scala:25:35 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (count == n) result += word\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m      value += is not a member of List[String] - did you mean result.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase)\n        val consonants: List[String]\
    \ = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val vowels: List[String] = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val consonantCount: Map[String, Long] = words.map(word => word -> consonants.count(_\
    \ == word)).toMap\n        val vowelCount: Map[String, Long] = words.map(word\
    \ => word -> vowels.count(_ == word)).toMap\n        val consonantAndVowelCount:\
    \ Map[String, Long] = consonants.map(consonant => vowels.map(vowel => consonant\
    \ + vowel -> consonantCount(consonant + vowel))).toMap\n        val consonantAndVowelAndCount:\
    \ Map[String, Long] = consonantAndVowelCount.map(consonantAndVowel => consonantAndVowel._1\
    \ -> consonantAndVowel._2 -> vowelCount(consonantAndVowel._1) + vowelCount(consonantAndVowel._2)).toMap\n\
    \        val consonantAndVowelAndCountAndCount: Map[String, Long] = consonantAndVowelAndCount.map(consonantAndVowelAndCount\
    \ => consonantAndVowelAndCount._1 -> consonantAndVowelAndCount._2 -> consonantAndVowelAndCount._3\
    \ -> vowelCount(consonantAndVowelAndCount._1) + vowelCount(consonantAndVowelAndCount._2)).toMap\n\
    \        val consonantAndVowelAndCountAndCountAndCount: Map[String, Long] = consonantAndVowelAndCountAndCount.map(consonantAndVowelAndCountAndCount\
    \ => consonantAndVowelAndCountAndCount._1 -> consonantAndVowelAndCountAndCount._2\
    \ -> consonantAndVowelAndCountAndCount._3 -> consonantAndVowelAndCountAndCount._4\
    \ -> vowelCount(consonantAndVowelAndCountAndCount._1) + vowelCount(consonantAndVowelAndCountAndCount._2)).toMap\n\
    \        val consonantAndVowel\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgvbasd8q.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgvbasd8q.scala:21:34 --------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e[0m[\e[35mString\e[0m] =\
    \ s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase)\n\e[31m\e[31m\
    \   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgvbasd8q.scala:24:48\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e\
    [0m: \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = words.map(\e[36mword\e\
    [0m => word -> consonants.count(_ == word)).toMap\n\e[31m\e[31m   |\e[0m     \
    \                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Map[String, Int]\n\e[31m\
    \   |\e[0m                          Required: collection.mutable.Map[String, Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgvbasd8q.scala:25:44\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e\
    [0m: \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = words.map(\e[36mword\e\
    [0m => word -> vowels.count(_ == word)).toMap\n\e[31m\e[31m   |\e[0m         \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Map[String, Int]\n\e[31m\
    \   |\e[0m                          Required: collection.mutable.Map[String, Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when com"
  stdout: ''
  timestamp: 1659805744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").toList\n\
    \        val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\")\n        val consonantCount = new mutable.HashMap[String, Int]()\n  \
    \      val vowelCount = new mutable.HashMap[String, Int]()\n        val wordCount\
    \ = new mutable.HashMap[String, Int]()\n        wordList.foreach(word => {\n \
    \           val wordArray = word.split(\"\")\n            wordArray.foreach(letter\
    \ => {\n                if (consonants.contains(letter)) {\n                 \
    \   consonantCount.put(word, consonantCount.getOrElse(word, 0) + 1l)\n       \
    \         }\n                if (vowels.contains(letter)) {\n                \
    \    vowelCount.put(word, vowelCount.getOrElse(word, 0) + 1l)\n              \
    \  }\n            })\n        })\n        val consonantWords = consonantCount.filter(_._2\
    \ >= n).map(_._1)\n        val vowelWords = vowelCount.filter(_._2 >= n).map(_._1)\n\
    \        val wordWords = wordCount.filter(_._2 >= n).map(_._1)\n        consonantWords.toList\
    \ ++ vowelWords.toList ++ wordWords.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvkxn6dwk.scala:24:33 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = \e\
    [33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpvkxn6dwk.scala:25:29 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpvkxn6dwk.scala:26:28 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        \e[33mval\e[0m \e[36mwordCount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.isLetter)\n            if\
    \ (count == n) result += word\n        }\n        if (result.isEmpty) List()\n\
    \        else result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1mcahwli.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.length == n).map(_.toLowerCase)\n        words.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfn9qurol.scala:21:34\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.length\
    \ == n).map(_.toLowerCase)\n\e[31m\e[31m   |\e[0m                            \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    \e[1m\e[31mArray\e[0m[String]\n\
    \e[31m   |\e[0m                                  Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonantSet = consonants.toSet\n        val vowelSet = vowels.toSet\n\
    \        val consonantCount = s.count(consonantSet)\n        val vowelCount =\
    \ s.count(vowelSet)\n        val consonantWords = s.split(consonantSet)\n    \
    \    val vowelWords = s.split(vowelSet)\n        val consonantWordsCount = consonantWords.length\n\
    \        val vowelWordsCount = vowelWords.length\n        val consonantWordsIndex\
    \ = 0\n        val vowelWordsIndex = 0\n        val consonantWordsLength = consonantWords.length\n\
    \        val vowelWordsLength = vowelWords.length\n        val consonantWordsLengthMinusOne\
    \ = consonantWordsLength - 1\n        val vowelWordsLengthMinusOne = vowelWordsLength\
    \ - 1\n        val consonantWordsLengthMinusOnePlusOne = consonantWordsLengthMinusOne\
    \ + 1\n        val vowelWordsLengthMinusOnePlusOne = vowelWordsLengthMinusOne\
    \ + 1\n        val consonantWordsLengthMinusOnePlusTwo = consonantWordsLengthMinusOne\
    \ + 2\n        val vowelWordsLengthMinusOnePlusTwo = vowelWordsLengthMinusOne\
    \ + 2\n        val consonantWordsLengthMinusOnePlusThree = consonantWordsLengthMinusOne\
    \ + 3\n        val vowelWordsLengthMinusOnePlusThree = vowelWordsLengthMinusOne\
    \ + 3\n        val consonantWordsLengthMinusOnePlusFour = consonantWordsLengthMinusOne\
    \ + 4\n        val vowelWordsLengthMinusOnePlusFour = vowelWordsLengthMinusOne\
    \ + 4\n        val consonantWordsLengthMinusOnePlusFive = consonantWordsLengthMinusOne\
    \ + 5\n        val vowelWordsLengthMinusOnePlusFive = vowelWordsLengthMinusOne\
    \ + 5\n        val consonantWordsLengthMinusOnePlusSix = consonantWordsLengthMinusOne\
    \ + 6\n        val vowelWordsLengthMinusOnePlusSix = vowelWordsLengthMinusOne\
    \ + 6\n        val consonantWordsLengthMin\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcjfj5zin.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcjfj5zin.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcjfj5zin.scala:28:37 --------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mconsonantWords\e[0m = s.split(consonantSet)\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                    Found:    (consonantSet : Set[Char])\n\
    \e[31m   |\e[0m                                    Required: String\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcjfj5zin.scala:29:33 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelWords\e[0m = s.split(vowelSet)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                 Found:    (vowelSet : Set[Char])\n\e\
    [31m   |\e[0m                                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcjfj5zin.scala:51:5 ---------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659805741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonantCount = consonants.count(_ == ' ')\n        val vowelCount\
    \ = vowels.count(_ == ' ')\n        val consonantIndex = consonants.indexOf(_\
    \ == ' ')\n        val vowelIndex = vowels.indexOf(_ == ' ')\n        val consonants\
    \ = consonants.drop(consonantIndex).dropRight(consonantCount)\n        val vowels\
    \ = vowels.drop(vowelIndex).dropRight(vowelCount)\n        val consonantCount\
    \ = consonants.count(_ == ' ')\n        val vowelCount = vowels.count(_ == ' ')\n\
    \        val consonantIndex = consonants.indexOf(_ == ' ')\n        val vowelIndex\
    \ = vowels.indexOf(_ == ' ')\n        val consonants = consonants.drop(consonantIndex).dropRight(consonantCount)\n\
    \        val vowels = vowels.drop(vowelIndex).dropRight(vowelCount)\n        val\
    \ consonantCount = consonants.count(_ == ' ')\n        val vowelCount = vowels.count(_\
    \ == ' ')\n        val consonantIndex = consonants.indexOf(_ == ' ')\n       \
    \ val vowelIndex = vowels.indexOf(_ == ' ')\n        val consonants = consonants.drop(consonantIndex).dropRight(consonantCount)\n\
    \        val vowels = vowels.drop(vowelIndex).dropRight(vowelCount)\n        val\
    \ consonantCount = consonants.count(_ == ' ')\n        val vowelCount = vowels.count(_\
    \ == ' ')\n        val consonantIndex = consonants.indexOf(_ == ' ')\n       \
    \ val vowelIndex = vowels.indexOf(_ == ' ')\n        val consonants = consonants.drop(consonantIndex).dropRight(consonantCount)\n\
    \        val vowels = vowels.drop(vowelIndex).dropRight(vowelCount)\n        val\
    \ consonantCount = consonants.count(_ == ' ')\n        val vowelCount = vowels.count(_\
    \ == ' ')\n        val consonantIndex = consonants.indexOf(_ == ' ')\n       \
    \ val vowelIndex = vowels.indexOf(_ == ' ')\n        val consonants = consonants.drop(consonantIndex).dropRight(consonantCount)\n\
    \        val vowels = vowels.drop(vowelIndex).\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphyq7chod.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphyq7chod.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mconsonants\e[0m = consonants.drop(consonantIndex).dropRight(consonantCount)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonants is already defined as \e[33mvalue\e[0m \e[35mconsonants\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphyq7chod.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = vowels.drop(vowelIndex).dropRight(vowelCount)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowels is already defined as \e[33mvalue\e[0m \e[35mvowels\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphyq7chod.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonants.count(_\
    \ == \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphyq7chod.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowels.count(_ ==\
    \ \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCount is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote tha"
  stdout: ''
  timestamp: 1659805743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ => _.length == n).map(_.split(\"\")).filter(_.forall(_.isLetter)).toList\n\
    \        list2.map(x => x.mkString(\"\")).filter(x => x.forall(_.isLetter)).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmph5b5s2xt.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.forall(_.isLetter)).toList\n\
    \e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$2 of expanded function:\n\e[31m   |\e[0m   _$2 =>\
    \ _$2.length == n.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph5b5s2xt.scala:22:87\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mlist2\e[0m = list.filter(_ => _.length == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.forall(_.isLetter)).toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 value isLetter is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659805743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").toList\n\
    \        val wordSet = wordList.map(_.toUpperCase).toSet\n        val wordList\
    \ = wordList.filter(word => wordSet.toList.size == n)\n        wordList.map(_.toUpperCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr1dqrq4p.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = wordList.filter(\e\
    [36mword\e[0m => wordSet.toList.size == n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordList is already defined as \e[33mvalue\e[0m \e[35mwordList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659805736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { x\
    \ =>\n            val count = x.split(\"\\\\W\").length\n            if (count\
    \ == n) result += x\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyh5prnu8.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val wordsWithCount = words.map(word => (word, 1))\n        val wordsWithCountSorted\
    \ = wordsWithCount.sortBy(_._2)\n        val wordsWithCountSortedWithCount = wordsWithCountSorted.map(x\
    \ => (x._1, x._2))\n        val wordsWithCountSortedWithCountSorted = wordsWithCountSortedWithCount.sortBy(_._1)\n\
    \        val wordsWithCountSortedWithCountSortedWithCount = wordsWithCountSortedWithCountSorted.map(x\
    \ => (x._1, x._2))\n        val wordsWithCountSortedWithCountSortedWithCountSorted\
    \ = wordsWithCountSortedWithCountSortedWithCount.sortBy(_._1)\n        val wordsWithCountSortedWithCountSortedWithCountSortedWithCount\
    \ = wordsWithCountSortedWithCountSortedWithCountSorted.map(x => (x._1, x._2))\n\
    \        val wordsWithCountSortedWithCountSortedWithCountSortedWithCountSorted\
    \ = wordsWithCountSortedWithCountSortedWithCountSortedWithCount.sortBy(_._1)\n\
    \        val wordsWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCount\
    \ = wordsWithCountSortedWithCountSortedWithCountSortedWithCountSorted.map(x =>\
    \ (x._1, x._2))\n        val wordsWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted\
    \ = wordsWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted.sortBy(_._1)\n\
    \        val wordsWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCount\
    \ = wordsWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted.map(x\
    \ => (x._1, x._2))\n        val wordsWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted\
    \ = wordsWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted.sortBy(_._1)\n\
    \        val wordsWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCount\
    \ = wordsWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted.map(x\
    \ => (x._1, x._2))\n        val wordsWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted\
    \ = wordsWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted.sortBy(_._1)\n\
    \        val wordsWithCountSortedWithCountSortedWithCountSortedWithCountSorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpej7wc8ct.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpej7wc8ct.scala:31:95\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mwordsWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted\e\
    [0m = wordsWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  wordsWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpej7wc8ct.scala:33:110 --------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mwordsWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted\e\
    [0m = wordsWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  wordsWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpej7wc8ct.scala:35:125 --------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mval\e[0m \e[36mwordsWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted\e\
    [0m = wordsWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m          "
  stdout: ''
  timestamp: 1659805744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.isLetter)\n            if\
    \ (count == n) {\n                result += (word + \" \")\n            }\n  \
    \      }\n        if (result.isEmpty) {\n            List()\n        } else {\n\
    \            result.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5tu_a3_b.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805738
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        val consonants =\
    \ \"bcdfghjklmnpqrstvwxyz\"\n        for (word <- list) {\n            if (word.count(_\
    \ == consonants.charAt(0)) == n) {\n                result += word\n         \
    \   }\n        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpslu175nx.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(x => x.contains(\"a\"))\n        val list3 =\
    \ list.filter(x => x.contains(\"e\"))\n        val list4 = list.filter(x => x.contains(\"\
    i\"))\n        val list5 = list.filter(x => x.contains(\"o\"))\n        val list6\
    \ = list.filter(x => x.contains(\"u\"))\n        val list7 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list8 = list.filter(x => x.contains(\"h\"))\n\
    \        val list9 = list.filter(x => x.contains(\"l\"))\n        val list10 =\
    \ list.filter(x => x.contains(\"l\"))\n        val list11 = list.filter(x => x.contains(\"\
    s\"))\n        val list12 = list.filter(x => x.contains(\"e\"))\n        val list13\
    \ = list.filter(x => x.contains(\"c\"))\n        val list14 = list.filter(x =>\
    \ x.contains(\"o\"))\n        val list15 = list.filter(x => x.contains(\"m\"))\n\
    \        val list16 = list.filter(x => x.contains(\"a\"))\n        val list17\
    \ = list.filter(x => x.contains(\"t\"))\n        val list18 = list.filter(x =>\
    \ x.contains(\"h\"))\n        val list19 = list.filter(x => x.contains(\"r\"))\n\
    \        val list20 = list.filter(x => x.contains(\"e\"))\n        val list21\
    \ = list.filter(x => x.contains(\"n\"))\n        val list22 = list.filter(x =>\
    \ x.contains(\"g\"))\n        val list23 = list.filter(x => x.contains(\"a\"))\n\
    \        val list24 = list.filter(x => x.contains(\"r\"))\n        val list25\
    \ = list.filter(x => x.contains(\"y\"))\n        val list26 = list.filter(x =>\
    \ x.contains(\"t\"))\n        val list27 = list.filter(x => x.contains(\"h\"))\n\
    \        val list28 = list.filter(x => x.contains(\"l\"))\n        val list29\
    \ = list.filter(x => x.contains(\"l\"))\n        val list30 = list.filter(x =>\
    \ x.contains(\"s\"))\n        val list31 = list.filter(x => x.contains(\"e\"))\n\
    \        val list32 = list.filter(x => x.contains(\"c\"))\n        val list33\
    \ = list.filter(x => x.contains(\"o\"))\n        val list34 = list.filter(x =>\
    \ x.contains(\"m\"))\n        val list35 = list.filter(x => x.contains(\"a\"))\n\
    \        val list36 = \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgpln3wjy.scala:56:20 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mlist36\e[0m = \n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpgpln3wjy.scala:57:5 ---------------------\e[0m\e[0m\n\e[31m57\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach(x\
    \ => {\n            if (x.contains(\"a\") || x.contains(\"e\") || x.contains(\"\
    i\") || x.contains(\"o\") || x.contains(\"u\") || x.contains(\"y\")) {\n     \
    \           result.add(x)\n            }\n        })\n        if (result.size\
    \ == n) {\n            result.toList\n        } else {\n            List()\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo2sr1vbf.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val result: List[String] = Nil\n        for (word <- words) {\n      \
    \      if (word.contains(\"consonants\") && word.count(_ == 'c') == n) {\n   \
    \             result ::= word\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg3qrzlnh.scala:25:23 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                result ::= word\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value ::= is not a member\
    \ of List[String] - did you mean result.::?\n1 error found\n"
  stdout: ''
  timestamp: 1659805746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val vowels = \"aeiou\"\n     \
    \   val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantSet = consonants.toSet\n\
    \        val vowelSet = vowels.toSet\n        val words: List[String] = s.split(\"\
    \ \").filter(_.length == n).map(word => {\n            val wordList = word.split(\"\
    \").filter(_.isLetter).filter(_.isLetterOrDigit).filter(consonantSet.contains(_))\n\
    \            wordList.filter(vowelSet.contains(_)).mkString(\" \")\n        }).toList\n\
    \        words.filter(word => word.length > 0).mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2_lxzl8a.scala:26:51 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = word.split(\e\
    [31m\"\"\e[0m).filter(_.isLetter).filter(_.isLetterOrDigit).filter(consonantSet.contains(_))\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2_lxzl8a.scala:26:70\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m\
    \ \e[36mwordList\e[0m = word.split(\e[31m\"\"\e[0m).filter(_.isLetter).filter(_.isLetterOrDigit).filter(consonantSet.contains(_))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value\
    \ isLetterOrDigit is not a member of String\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2_lxzl8a.scala:26:116 -------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = word.split(\e[31m\"\"\
    \e[0m).filter(_.isLetter).filter(_.isLetterOrDigit).filter(consonantSet.contains(_))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                                Found:    (_$4 : String)\n\
    \e[31m   |\e[0m                                                Required: Char\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2_lxzl8a.scala:27:46\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            wordList.filter(vowelSet.contains(_)).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \       ^\e[0m\n\e[31m   |\e[0m                                              Found:\
    \    (_$5 : String)\n\e[31m   |\e[0m                                         \
    \     Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007"
  stdout: ''
  timestamp: 1659805752
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val result: List[String] = words.filter(word => word.count(_ == 'a') ==\
    \ n)\n        result.map(word => word.split(\"\").filter(_.isLetter).mkString(\"\
    \"))\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg1cis3o5.scala:22:47\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = words.filter(\e[36mword\e[0m => word.count(_\
    \ == \e[31m'a'\e[0m) == n)\n\e[31m\e[31m   |\e[0m                            \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    \e[1m\e[31mArray\e[0m[String]\n\e\
    [31m   |\e[0m                                   Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg1cis3o5.scala:23:51\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        result.map(\e[36mword\e\
    [0m => word.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e[31m\"\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659805750
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ != \"\")\n        val list3 = list2.filter(_\
    \ => list2.count(_ == n) == n)\n        list3.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3wrxfmuu.scala:23:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlist3\e[0m = list2.filter(_\
    \ => list2.count(_ == n) == n)\n\e[31m\e[31m   |\e[0m                        \
    \                          ^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ String and Long cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659805747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        for(i <- 0 until\
    \ words.length){\n            val word = words(i)\n            val count = word.count(c\
    \ => c.isLetter)\n            if(count == n){\n                result += (word\
    \ :: Nil)\n            }\n        }\n        if(result.isEmpty){\n           \
    \ Nil\n        }else{\n            result.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr6wwx6ww.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonantSet = consonants.toSet\n        val vowelSet = vowels.toSet\n\
    \        val consonantCount = consonants.count(_ == ' ')\n        val vowelCount\
    \ = vowels.count(_ == ' ')\n        val consonantCountInWord = consonants.count(_\
    \ == ' ')\n        val vowelCountInWord = vowels.count(_ == ' ')\n        val\
    \ consonantCountInWords = consonants.count(_ == ' ')\n        val vowelCountInWords\
    \ = vowels.count(_ == ' ')\n        val consonantCountInWordsOrVowels = consonants.count(_\
    \ == ' ') || vowels.count(_ == ' ')\n        val vowelCountInWordsOrVowels = vowels.count(_\
    \ == ' ') || consonants.count(_ == ' ')\n        val consonantCountInWordsOrVowelsOrConsonants\
    \ = consonants.count(_ == ' ') || vowels.count(_ == ' ') || consonants.count(_\
    \ == ' ')\n        val vowelCountInWordsOrVowelsOrConsonants = vowels.count(_\
    \ == ' ') || consonants.count(_ == ' ') || vowels.count(_ == ' ')\n        val\
    \ consonantCountInWordsOrVowelsOrConsonantsOrVowels = consonants.count(_ == '\
    \ ') || vowels.count(_ == ' ') || consonants.count(_ == ' ') || vowels.count(_\
    \ == ' ')\n        val vowelCountInWordsOrVowelsOrConsonantsOrVowels = vowels.count(_\
    \ == ' ') || consonants.count(_ == ' ') || vowels.count(_ == ' ')\n        val\
    \ consonantCountInWordsOrVowelsOrConsonantsOrVowelsOrConsonants = consonants.count(_\
    \ == ' ') || vowels.count(_ == ' ') || consonants.count(_ == ' ') || vowels.count(_\
    \ == ' ')\n        val vowelCountInWordsOrVowelsOrConsonantsOrVowelsOrConsonantsOrVowels\
    \ = vowels.count(_ == ' ') || consonants.count(_ == ' ') || vowels.count(_ ==\
    \ ' ') || consonants.count(_\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpww8_gnci.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpww8_gnci.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mwords\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpww8_gnci.scala:32:71\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantCountInWordsOrVowels\e[0m = consonants.count(_ == \e[31m' '\e[0m)\
    \ || vowels.count(_ == \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                         value || is not a member of Int\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpww8_gnci.scala:33:63 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelCountInWordsOrVowels\e\
    [0m = vowels.count(_ == \e[31m' '\e[0m) || consonants.count(_ == \e[31m' '\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value || is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpww8_gnci.scala:34:83\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantCountInWordsOrVowelsOrConsonants\e[0m = consonants.count(_ == \e\
    [31m' '\e[0m) || vowels.count(_ == \e[31m' '\e[0m) || consonants.count(_ == \e\
    [31m' '\e[0m)\n\e[31m\e[31m   |\e[0m                                         \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                               value || is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpww8_gnci.scala:35:75 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelCount"
  stdout: ''
  timestamp: 1659805754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += word\n        }\n        if (result.isEmpty) List()\n      \
    \  else result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5dvtynn6.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805646
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").toList\n\
    \        val wordSet = wordList.map(_.toUpperCase).toSet\n        val resultList\
    \ = wordList.filter(word => wordSet.toSet.size == n)\n        resultList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ox0z_jv.scala:27)\n\tat Problem.main(tmp7ox0z_jv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.length == n).map(_.split(\"\
    \").filter(_.nonEmpty).map(_.toLowerCase)).toList\n        words.filter(_.size\
    \ == n).map(_.mkString(\"\")).filter(_.nonEmpty).map(_.toLowerCase).toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprvhfkp05.scala:21:162\
    \ -------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m).filter(_.nonEmpty).map(_.toLowerCase)).toList\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    List[\e[1m\e[31mArray\e\
    [0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m]\n\e[31m   |\e[0m                \
    \                  Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(_ == 'a')\n            if (count\
    \ == n) {\n                result += (word + \" \")\n            }\n        }\n\
    \        return result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphklbdeyq.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805750
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ => _.length == n)\n        list2.map(x => x.split(\"\
    \")).filter(x => x.forall(_.isLetter)).map(x => x.mkString(\"\")).filter(x =>\
    \ x.length == n).map(x => x.split(\"\")).filter(x => x.forall(_.isLetter)).map(x\
    \ => x.mkString(\"\")).filter(x => x.length == n).map(x => x.split(\"\")).filter(x\
    \ => x.forall(_.isLetter)).map(x => x.mkString(\"\")).filter(x => x.length ==\
    \ n).map(x => x.split(\"\")).filter(x => x.forall(_.isLetter)).map(x => x.mkString(\"\
    \")).filter(x => x.length == n).map(x => x.split(\"\")).filter(x => x.forall(_.isLetter)).map(x\
    \ => x.mkString(\"\")).filter(x => x.length == n).map(x => x.split(\"\")).filter(x\
    \ => x.forall(_.isLetter)).map(x => x.mkString(\"\")).filter(x => x.length ==\
    \ n).map(x => x.split(\"\")).filter(x => x.forall(_.isLetter)).map(x => x.mkString(\"\
    \")).filter(x => x.length == n).map(x => x.split(\"\")).filter(x => x.forall(_.isLetter)).map(x\
    \ => x.mkString(\"\")).filter(x => x.length == n).map(x => x.split(\"\")).filter(x\
    \ => x.forall(_.isLetter)).map(x => x.mkString(\"\")).filter(x => x.length ==\
    \ n).map(x => x.split(\"\")).filter(x => x.forall(_.isLetter)).map(x => x.mkString(\"\
    \")).filter(x => x.length == n).map(x => x.split(\"\")).filter(x => x.forall(_.isLetter)).map(x\
    \ => x.mkString(\"\")).filter(x => x.length == n).map(x => x.split(\"\")).filter(x\
    \ => x.forall(_.isLetter)).map(x => x.mkString(\"\")).filter(x => x.length ==\
    \ n).map(x => x.split(\"\")).filter(x => x.forall(_.isLetter)).map(x => x.mkString(\"\
    \")).filter(x => x.length == n).map(x => x.split(\"\")).filter(x => x.forall(_.isLetter)).map(x\
    \ => x.mkString(\"\")).filter(x => x.length == n).map(x => x.split(\"\")).filter(x\
    \ => x.forall(_.isLetter)).map(x => x.mkString(\"\")).filter(\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpr4mu130_.scala:23:1614 -------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        list2.map(\e[36mx\e[0m => x.split(\e[31m\"\"\e\
    [0m)).filter(\e[36mx\e[0m => x.forall(_.isLetter)).map(\e[36mx\e[0m => x.mkString(\e\
    [31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.length == n).map(\e[36mx\e[0m => x.split(\e\
    [31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.forall(_.isLetter)).map(\e[36mx\e[0m\
    \ => x.mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.length == n).map(\e\
    [36mx\e[0m => x.split(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.forall(_.isLetter)).map(\e\
    [36mx\e[0m => x.mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.length ==\
    \ n).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.forall(_.isLetter)).map(\e\
    [36mx\e[0m => x.mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.length ==\
    \ n).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.forall(_.isLetter)).map(\e\
    [36mx\e[0m => x.mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.length ==\
    \ n).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.forall(_.isLetter)).map(\e\
    [36mx\e[0m => x.mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.length ==\
    \ n).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.forall(_.isLetter)).map(\e\
    [36mx\e[0m => x.mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.length ==\
    \ n).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.forall(_.isLetter)).map(\e\
    [36mx\e[0m => x.mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.length ==\
    \ n).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.forall(_.isLetter)).map(\e\
    [36mx\e[0m => x.mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.length ==\
    \ n).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.forall(_.isLetter)).map(\e\
    [36mx\e[0m => x.mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.length ==\
    \ n).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.forall(_.isLetter)).map(\e\
    [36mx\e[0m => x.mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.length ==\
    \ n).map(\e[36mx\e[0m => x.split(\e[31m\"\"\e[0m)).filter(\e[36mx\e[0m => x.forall(_.isLetter)).map(\e\
    [36mx\e[0m => x.mkString(\e[31m\"\"\e[0m)).filter(\e[36mx\e"
  stdout: ''
  timestamp: 1659805766
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \")\n\
    \        val wordSet = scala.collection.mutable.Set[String]()\n        wordList.foreach(word\
    \ => {\n            val wordSet = scala.collection.mutable.Set[String]()\n   \
    \         word.split(\"[\\\\p{L}\\\\p{M}]+\").foreach(word => {\n            \
    \    if (word.length == n) {\n                    wordSet.add(word)\n        \
    \        }\n            })\n            if (wordSet.isEmpty) {\n             \
    \   wordSet.add(word)\n            }\n        })\n        wordSet.asInstanceOf[List[String]]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.ClassCastException: class scala.collection.mutable.HashSet cannot\
    \ be cast to class scala.collection.immutable.List (scala.collection.mutable.HashSet\
    \ and scala.collection.immutable.List are in unnamed module of loader java.net.URLClassLoader\
    \ @dc24521)\n\tat Problem$.selectWords(tmprg_l0h0p.scala:34)\n\tat Problem$.main(tmprg_l0h0p.scala:37)\n\
    \tat Problem.main(tmprg_l0h0p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c >= 'a' && c <= 'z' || c >=\
    \ 'A' && c <= 'Z')\n            if (count == n) result += word\n        }\n  \
    \      return result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfnm6rk05.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val result: List[String] = new mutable.ListBuffer[String]()\n       \
    \ val wordSet = words.toSet\n        val consonantSet = Set(\"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelSet = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonantCount = 0\n        val\
    \ vowelCount = 0\n        val consonantWords = words.filter(word => consonantSet.contains(word))\n\
    \        val vowelWords = words.filter(word => vowelSet.contains(word))\n    \
    \    val consonantWordsCount = consonantWords.size\n        val vowelWordsCount\
    \ = vowelWords.size\n        val consonantWordsSet = consonantWords.toSet\n  \
    \      val vowelWordsSet = vowelWords.toSet\n        val consonantWordsSetCount\
    \ = consonantWordsSet.size\n        val vowelWordsSetCount = vowelWordsSet.size\n\
    \        val consonantWordsSetCount = consonantWordsSet.size\n        val vowelWordsSetCount\
    \ = vowelWordsSet.size\n        val consonantWordsSetCount = consonantWordsSet.size\n\
    \        val vowelWordsSetCount = vowelWordsSet.size\n        val consonantWordsSetCount\
    \ = consonantWordsSet.size\n        val vowelWordsSetCount = vowelWordsSet.size\n\
    \        val consonantWordsSetCount = consonantWordsSet.size\n        val vowelWordsSetCount\
    \ = vowelWordsSet.size\n        val consonantWordsSetCount = consonantWordsSet.size\n\
    \        val vowelWordsSetCount = vowelWordsSet.size\n        val consonantWordsSetCount\
    \ = consonantWordsSet.size\n        val vowelWordsSetCount = vowelWordsSet.size\n\
    \        val consonantWordsSetCount = consonantWordsSet.size\n        val vowelWordsSetCount\
    \ = vowelWordsSet.size\n        val consonantWordsSetCount = consonantWordsSet.size\n\
    \        val vowelWordsSetCount = vowelWordsSet.size\n        val consonantWordsSetCount\
    \ = consonantWordsSet.size\n        val vowelWordsSetCount = vowelWordsSet.size\n\
    \        val consonantWordsSetCount = consonantWordsSet.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp__oxzzur.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mconsonantWordsSetCount\e\
    [0m = consonantWordsSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantWordsSetCount is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantWordsSetCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp__oxzzur.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelWordsSetCount\e[0m\
    \ = vowelWordsSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelWordsSetCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelWordsSetCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp__oxzzur.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mconsonantWordsSetCount\e\
    [0m = consonantWordsSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantWordsSetCount is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantWordsSetCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp__oxzzur.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mvowelWordsSetCount\e[0m\
    \ = vowelWordsSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelWordsSetCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelWordsSetCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp__oxzzur.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    "
  stdout: ''
  timestamp: 1659805760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.filter(x => x.contains(\"a\") || x.contains(\"e\") ||\
    \ x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\") || x.contains(\"\
    y\"))\n        val list3 = list2.filter(x => x.contains(\"a\") || x.contains(\"\
    e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\") || x.contains(\"\
    y\"))\n        val list4 = list3.filter(x => x.contains(\"a\") || x.contains(\"\
    e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\") || x.contains(\"\
    y\"))\n        val list5 = list4.filter(x => x.contains(\"a\") || x.contains(\"\
    e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\") || x.contains(\"\
    y\"))\n        val list6 = list5.filter(x => x.contains(\"a\") || x.contains(\"\
    e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\") || x.contains(\"\
    y\"))\n        val list7 = list6.filter(x => x.contains(\"a\") || x.contains(\"\
    e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\") || x.contains(\"\
    y\"))\n        val list8 = list7.filter(x => x.contains(\"a\") || x.contains(\"\
    e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\") || x.contains(\"\
    y\"))\n        val list9 = list8.filter(x => x.contains(\"a\") || x.contains(\"\
    e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\") || x.contains(\"\
    y\"))\n        val list10 = list9.filter(x => x.contains(\"a\") || x.contains(\"\
    e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\") || x.contains(\"\
    y\"))\n        val list11 = list10.filter(x => x.contains(\"a\") || x.contains(\"\
    e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\") || x.contains(\"\
    y\"))\n        val list12 = list11.filter(x => x.contains(\"a\") || x.contains(\"\
    e\") || x.contains(\"i\") || x.contains(\"o\") || x.contains(\"u\") || x.contains(\"\
    y\"))\n        val list13 = list12.filter(x => x.contains(\"a\") || x.contains(\"\
    e\") || x.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6ol3_xsz.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6ol3_xsz.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val wordList = mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            if (word.count(_ == 'a') >= n) {\n                wordList +=\
    \ word\n            }\n        }\n        if (wordList.isEmpty) {\n          \
    \  wordList.mkString\n        } else {\n            wordList.mkString(\" \")\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprq4jpxkf.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659805755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            if (word.count(_ == 'a') >= n && word.count(_ == 'e') >= n\
    \ && word.count(_ == 'i') >= n && word.count(_ == 'o') >= n && word.count(_ ==\
    \ 'u') >= n) {\n                result += (word)\n            }\n        })\n\
    \        return result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpebd6cd7o.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        for (i <- 0 until\
    \ list.size) {\n            val word = list(i)\n            if (word.length ==\
    \ n) {\n                result += (word + \" \")\n            }\n        }\n \
    \       return result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwcblaa6_.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ => _.length == n)\n        val list3 = list2.filter(_\
    \ => _.contains(\"a\"))\n        val list4 = list3.filter(_ => _.contains(\"e\"\
    ))\n        val list5 = list4.filter(_ => _.contains(\"i\"))\n        val list6\
    \ = list5.filter(_ => _.contains(\"o\"))\n        val list7 = list6.filter(_ =>\
    \ _.contains(\"u\"))\n        val list8 = list7.filter(_ => _.contains(\"l\"))\n\
    \        val list9 = list8.filter(_ => _.contains(\"l\"))\n        val list10\
    \ = list9.filter(_ => _.contains(\"a\"))\n        val list11 = list10.filter(_\
    \ => _.contains(\"e\"))\n        val list12 = list11.filter(_ => _.contains(\"\
    i\"))\n        val list13 = list12.filter(_ => _.contains(\"o\"))\n        val\
    \ list14 = list13.filter(_ => _.contains(\"u\"))\n        val list15 = list14.filter(_\
    \ => _.contains(\"l\"))\n        val list16 = list15.filter(_ => _.contains(\"\
    l\"))\n        val list17 = list16.filter(_ => _.contains(\"a\"))\n        val\
    \ list18 = list17.filter(_ => _.contains(\"e\"))\n        val list19 = list18.filter(_\
    \ => _.contains(\"i\"))\n        val list20 = list19.filter(_ => _.contains(\"\
    o\"))\n        val list21 = list20.filter(_ => _.contains(\"u\"))\n        val\
    \ list22 = list21.filter(_ => _.contains(\"l\"))\n        val list23 = list22.filter(_\
    \ => _.contains(\"l\"))\n        val list24 = list23.filter(_ => _.contains(\"\
    a\"))\n        val list25 = list24.filter(_ => _.contains(\"e\"))\n        val\
    \ list26 = list25.filter(_ => _.contains(\"i\"))\n        val list27 = list26.filter(_\
    \ => _.contains(\"o\"))\n        val list28 = list27.filter(_ => _.contains(\"\
    u\"))\n        val list29 = list28.filter(_ => _.contains(\"l\"))\n        val\
    \ list30 = list29.filter(_ => _.contains(\"l\"))\n        val list31 = list30.filter(_\
    \ => _.contains(\"a\"))\n        val list32 = list31.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxhz_emj6.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmpxhz_emj6.scala:22:37 -----------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_ => _.length ==\
    \ n)\n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$2 of expanded function:\n\e[31m   |\e\
    [0m   _$2 => _$2.length == n.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpxhz_emj6.scala:23:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e\
    [0m \e[36mlist3\e[0m = list2.filter(_ => _.contains(\e[31m\"a\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$4 of expanded function:\n\e[31m   |\e[0m   _$4 => _$4.contains(\e\
    [32m\"a\"\e[0m).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpxhz_emj6.scala:24:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e\
    [0m \e[36mlist4\e[0m = list3.filter(_ => _.contains(\e[31m\"e\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$6 of expanded function:\n\e[31m   |\e[0m   _$6 => _$6.contains(\e\
    [32m\"e\"\e[0m).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpxhz_emj6.scala:25:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e\
    [0m \e[36mlist5\e[0m = list4.filter(_ => _.contains(\e[31m\"i\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$8 of expanded function:\n\e[31m   |\e[0m   _$8 => _$8.contains(\e\
    [32m\"i\"\e[0m).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpxhz_emj6.scala:26:38\
    \ --------------------------"
  stdout: ''
  timestamp: 1659805765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val wordCounts = words.map(w => w.split(\"\").map(c => c.toInt).sum).toList\n\
    \        val consonants = words.map(w => w.split(\"\").filter(c => c >= 'a' &&\
    \ c <= 'z').map(c => c.toInt).sum).toList\n        val consonantCounts = consonants.map(c\
    \ => c / wordCounts.sum).toList\n        val consonantCountSum = consonantCounts.sum\n\
    \        val consonantCountSumInWords = consonantCounts.map(c => c / wordCounts.sum).sum\n\
    \        val consonantCountSumInWordsSum = consonantCountSumInWords.sum\n    \
    \    val consonantCountSumInWordsSumInWords = consonantCountSumInWords.map(c =>\
    \ c / wordCounts.sum).sum\n        val consonantCountSumInWordsSumInWordsSum =\
    \ consonantCountSumInWordsSumInWords.sum\n        val consonantCountSumInWordsSumInWordsSumInWords\
    \ = consonantCountSumInWordsSumInWordsSumInWords.sum\n        val consonantCountSumInWordsSumInWordsSumInWordsSum\
    \ = consonantCountSumInWordsSumInWordsSumInWordsSumInWords.sum\n        val consonantCountSumInWordsSumInWordsSumInWordsSumInWordsSum\
    \ = consonantCountSumInWordsSumInWordsSumInWordsSumInWordsSumInWordsSum.sum\n\
    \        val consonantCountSumInWordsSumInWordsSumInWordsSumInWordsSumInWordsSum\
    \ = consonantCountSumInWordsSumInWordsSumInWordsSumInWordsSumInWordsSumInWordsSum.sum\n\
    \        val consonantCountSumInWordsSumInWordsSumInWordsSumInWordsSumInWordsSumInWordsSum\
    \ = consonantCountSumInWordsSumInWordsSumInWordsSumInWordsSumInWordsSumInWordsSumInWordsSumInWordsSum.sum\n\
    \        val consonantCountSumInWordsSumInWordsSumInWordsSumInWordsSumInWordsSumInWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3i02yh05.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp3i02yh05.scala:23:69 --------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \        \e[33mval\e[0m \e[36mconsonants\e[0m = words.map(\e[36mw\e[0m => w.split(\e\
    [31m\"\"\e[0m).filter(\e[36mc\e[0m => c >= \e[31m'a'\e[0m && c <= \e[31m'z'\e\
    [0m).map(\e[36mc\e[0m => c.toInt).sum).toList\n\e[31m\e[31m   |\e[0m         \
    \                                                            ^^^\e[0m\n\e[31m\
    \   |\e[0m                                                  Found:    (\e[31m'a'\e\
    [0m : Char)\n\e[31m   |\e[0m                                                 \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3i02yh05.scala:23:81\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mconsonants\e\
    [0m = words.map(\e[36mw\e[0m => w.split(\e[31m\"\"\e[0m).filter(\e[36mc\e[0m =>\
    \ c >= \e[31m'a'\e[0m && c <= \e[31m'z'\e[0m).map(\e[36mc\e[0m => c.toInt).sum).toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                         ^^^\e[0m\n\e[31m   |\e[0m                          \
    \                        Found:    (\e[31m'z'\e[0m : Char)\n\e[31m   |\e[0m  \
    \                                                Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3i02yh05.scala:27:67 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mconsonantCountSumInWordsSum\e\
    [0m = consonantCountSumInWords.sum\n\e[31m\e[31m   |\e[0m                    \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                    value sum is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp3i02yh05.scala:28:74 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantCo"
  stdout: ''
  timestamp: 1659805768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(n)).map(_.split(\"\
    \")).filter(_.size == n).map(_.mkString(\"\")).filter(_.nonEmpty)\n        if\
    \ (words.length == 0) List()\n        else words\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5dwrtw2u.scala:21:170\
    \ -------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(n)).map(_.split(\e\
    [31m\"\"\e[0m)).filter(_.size == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.nonEmpty)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").map(_.toUpperCase).toList\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.equals(\"\
    MARY\"))\n        val list = list.filterNot(_.equals(\"UNCLE\"))\n        val\
    \ list = list.filterNot(_.equals(\"HELLO\"))\n        val list = list.filterNot(_.equals(\"\
    WORLD\"))\n        val list = list.filterNot(_.equals(\"SIMPLE\"))\n        val\
    \ list = list.filterNot(_.equals(\"WHITE\"))\n        val list = list.filterNot(_.equals(\"\
    SPACE\"))\n        val list = list.filterNot(_.equals(\"HAVE\"))\n        val\
    \ list = list.filterNot(_.equals(\"HAVING\"))\n        val list = list.filterNot(_.equals(\"\
    AND\"))\n        val list = list.filterNot(_.equals(\"OR\"))\n        val list\
    \ = list.filterNot(_.equals(\"IN\"))\n        val list = list.filterNot(_.equals(\"\
    NOT\"))\n        val list = list.filterNot(_.equals(\"TO\"))\n        val list\
    \ = list.filterNot(_.equals(\"INTO\"))\n        val list = list.filterNot(_.equals(\"\
    THIS\"))\n        val list = list.filterNot(_.equals(\"THAT\"))\n        val list\
    \ = list.filterNot(_.equals(\"IT\"))\n        val list = list.filterNot(_.equals(\"\
    ITS\"))\n        val list = list.filterNot(_.equals(\"IT'S\"))\n        val list\
    \ = list.filterNot(_.equals(\"ITS\"))\n        val list = list.filterNot(_.equals(\"\
    THAT'S\"))\n        val list = list.filterNot(_.equals(\"THATS\"))\n        val\
    \ list = list.filterNot(_.equals(\"THAT'S\"))\n        val list = list.filterNot(_.equals(\"\
    THATS\"))\n        val list = list.filterNot(_.equals(\"THAT'S\"))\n        val\
    \ list = list.filterNot(_.equals(\"THATS\"))\n        val list = list.filterNot(_.equals(\"\
    THAT'S\"))\n        val list = list.filterNot(_.equals(\"THATS\"))\n        val\
    \ list = list.filterNot(_.equals(\"THAT'S\"))\n        val list = list.filterNot(_.equals(\"\
    THATS\"))\n        val list = list.filterNot(_.equals(\"THAT'S\"))\n        val\
    \ list = list.filterNot(_.equals(\"THATS\"))\n        val list = list.filterNot(_.equals(\"\
    THAT\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpepwsv4zs.scala:56:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filterNot(_.equals(\"\
    THAT\n\e[31m\e[31m   |\e[0m                                           ^\e[0m\n\
    \e[31m   |\e[0m                                           unclosed string literal\n\
    \e[31m\e[31m-- Error: /tmp/tmpepwsv4zs.scala:58:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpepwsv4zs.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = list.filterNot(_.isEmpty)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpepwsv4zs.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filterNot(_.equals(\e[31m\"\
    MARY\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpepwsv4zs.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filterNot(_.equals(\e[31m\"\
    UNCLE\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpepwsv4"
  stdout: ''
  timestamp: 1659805765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        for (i <- 0 until\
    \ list.size) {\n            if (list(i).length == n) {\n                result\
    \ += (list(i))\n            }\n        }\n        return result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqmtjpmzb.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").filter(_.isLetter).map(_.toLowerCase).toList\n\
    \        val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\")\n        val consonantCount = words.count(w => consonants.contains(w.toLowerCase))\n\
    \        val vowelCount = words.count(w => vowels.contains(w.toLowerCase))\n \
    \       if (consonantCount == n && vowelCount == n) {\n            words.filter(w\
    \ => consonants.contains(w.toLowerCase)).sortBy(w => w.toLowerCase)\n        }\
    \ else {\n            List()\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8sq4jut4.scala:21:42 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = s.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).map(_.toLowerCase).toList\n\e[31m\e[31m   |\e\
    [0m                                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                              value isLetter is not a member of String\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659805767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach { word\
    \ =>\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) {\n                result += (word + \" \")\n            }\n        }\n\
    \        if (result.isEmpty) {\n            List()\n        } else {\n       \
    \     result.toList\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpevz4hz61.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        list.foreach(word\
    \ => {\n            val count = word.count(c => c.isLetter)\n            if (count\
    \ == n) result += word\n        })\n        return result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcwma171e.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = s.split(\" \").map(_.toUpperCase)\n\
    \        val wordSet = wordList.map(_.toSet)\n        val wordSetWithCount = wordSet.map(word\
    \ => (word, wordList.count(word => word.contains(word))))\n        val wordSetWithCountSortedByCount\
    \ = wordSetWithCount.sortBy(_._2)\n        val wordSetWithCountSortedByCountReversed\
    \ = wordSetWithCountSortedByCount.reverse\n        val wordSetWithCountSortedByCountReversedWithCount\
    \ = wordSetWithCountSortedByCountReversed.map(word => (word, word._2))\n     \
    \   val wordSetWithCountSortedByCountReversedWithCountSortedByCount = wordSetWithCountSortedByCountReversedWithCount.sortBy(_._1)\n\
    \        val wordSetWithCountSortedByCountReversedWithCountSortedByCountReversed\
    \ = wordSetWithCountSortedByCountReversedWithCountSortedByCount.reverse\n    \
    \    val wordSetWithCountSortedByCountReversedWithCountSortedByCountReversedWithCount\
    \ = wordSetWithCountSortedByCountReversedWithCountSortedByCountReversed.map(word\
    \ => (word, word._1))\n        val wordSetWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCount\
    \ = wordSetWithCountSortedByCountReversedWithCountSortedByCountReversedWithCount.sortBy(_._2)\n\
    \        val wordSetWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCountReversed\
    \ = wordSetWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCount.reverse\n\
    \        val wordSetWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCountReversedWithCount\
    \ = wordSetWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCount.map(word\
    \ => (word, word._2))\n        val wordSetWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCount\
    \ = wordSetWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCountReversed.sortBy(_._1)\n\
    \        val wordSetWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCountReversed\
    \ = wordSetWithCountSortedByCountReversedWithCountSortedByCountReversedWithCountSortedByCountReversedWithCount.reverse\n\
    \        val wordSetWithCount\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaxja3dhz.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpaxja3dhz.scala:27:133\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e\
    [33mval\e[0m \e[36mwordSetWithCountSortedByCountReversedWithCountSortedByCount\e\
    [0m = wordSetWithCountSortedByCountReversedWithCount.sortBy(_._1)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                  ^\e[0m\n\e\
    [31m   |\e[0mNo implicit Ordering defined for (Set[Char], Int)..\n\e[31m   |\e\
    [0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.Tuple2[\e\
    [35mSet[Char]\e[0m, \e[35mInt\e[0m](\n\e[31m   |\e[0m      scala.math.Ordering.ordered[\e\
    [35mSet[Char]\e[0m](\n\e[31m   |\e[0m        /* missing */summon[scala.math.Ordering.AsComparable[Set[Char]]]\n\
    \e[31m   |\e[0m      )\n\e[31m   |\e[0m    , ???)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Set[Char]].\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaxja3dhz.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val vowels = \"aeiouAEIOU\"\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n   \
    \     val consonantSet = consonants.toSet\n        val vowelSet = vowels.toSet\n\
    \        val vowelCount = vowelSet.count(_ == s)\n        val consonantCount =\
    \ consonantSet.count(_ == s)\n        val consonantCounts = consonantSet.count(_\
    \ == s)\n        val vowelCounts = vowelSet.count(_ == s)\n        val consonantCountPairs\
    \ = consonantSet.count(_ == s) * (consonantSet.count(_ == s) / 2)\n        val\
    \ vowelCountPairs = vowelSet.count(_ == s) * (vowelSet.count(_ == s) / 2)\n  \
    \      val consonantCountPairsPairs = consonantSet.count(_ == s) * (consonantSet.count(_\
    \ == s) / 2) * (consonantSet.count(_ == s) / 2)\n        val vowelCountPairsPairs\
    \ = vowelSet.count(_ == s) * (vowelSet.count(_ == s) / 2) * (vowelSet.count(_\
    \ == s) / 2)\n        val consonantCountPairsPairsPairs = consonantSet.count(_\
    \ == s) * (consonantSet.count(_ == s) / 2) * (consonantSet.count(_ == s) / 2)\
    \ * (consonantSet.count(_ == s) / 2)\n        val vowelCountPairsPairsPairsPairs\
    \ = vowelSet.count(_ == s) * (vowelSet.count(_ == s) / 2) * (vowelSet.count(_\
    \ == s) / 2) * (vowelSet.count(_ == s) / 2)\n        val consonantCountPairsPairsPairsPairs\
    \ = consonantSet.count(_ == s) * (consonantSet.count(_ == s) / 2) * (consonantSet.count(_\
    \ == s) / 2) * (consonantSet.count(_ == s) / 2) * (consonantSet.count(_ == s)\
    \ / 2)\n        val vowelCountPairsPairsPairsPairsPairs = vowelSet.count(_ ==\
    \ s) * (vowelSet.count(_ == s) / 2) * (vowelSet.count(_ == s) / 2) * (vowelSet.count(_\
    \ == s) / 2) * (vowelSet.count(_ == s) / 2)\n        val consonantCountPairsPairsPairsPairsPairs\
    \ = consonantSet.count(_ == s) * (consonantSet.count(_ == s) / 2) * (consonantSet.count(_\
    \ == s) / 2) \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp57hbkjdk.scala:25:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowelSet.count(_\
    \ == s)\n\e[31m\e[31m   |\e[0m                                        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp57hbkjdk.scala:26:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonantSet.count(_\
    \ == s)\n\e[31m\e[31m   |\e[0m                                               \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot be\
    \ compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp57hbkjdk.scala:27:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mconsonantCounts\e[0m = consonantSet.count(_\
    \ == s)\n\e[31m\e[31m   |\e[0m                                               \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp57hbkjdk.scala:28:41\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m       \
    \ \e[33mval\e[0m \e[36mvowelCounts\e[0m = vowelSet.count(_ == s)\n\e[31m\e[31m\
    \   |\e[0m                                         ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp57hbkjdk.scala:29:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mconsonantCountPairs\e[0m\
    \ = consonantSet.count(_ == s) * (consonantSet.count(_ == s) / \e[31m2\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                     ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp57hbkjdk.scala:29:83 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mconsonantCountPairs\e[0m\
    \ = consonantSet.count(_ == s) * (consonantSet.count(_ == s) / \e[31m2\e[0m)\n\
    \e[31m\e[31m   |\e[0m                        "
  stdout: ''
  timestamp: 1659805777
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(x => x.contains(\"a\"))\n        val list3 =\
    \ list.filter(x => x.contains(\"e\"))\n        val list4 = list.filter(x => x.contains(\"\
    i\"))\n        val list5 = list.filter(x => x.contains(\"o\"))\n        val list6\
    \ = list.filter(x => x.contains(\"u\"))\n        val list7 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list8 = list.filter(x => x.contains(\"h\"))\n\
    \        val list9 = list.filter(x => x.contains(\"l\"))\n        val list10 =\
    \ list.filter(x => x.contains(\"l\"))\n        val list11 = list.filter(x => x.contains(\"\
    a\"))\n        val list12 = list.filter(x => x.contains(\"e\"))\n        val list13\
    \ = list.filter(x => x.contains(\"i\"))\n        val list14 = list.filter(x =>\
    \ x.contains(\"o\"))\n        val list15 = list.filter(x => x.contains(\"u\"))\n\
    \        val list16 = list.filter(x => x.contains(\"y\"))\n        val list17\
    \ = list.filter(x => x.contains(\"h\"))\n        val list18 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list19 = list.filter(x => x.contains(\"l\"))\n\
    \        val list20 = list.filter(x => x.contains(\"a\"))\n        val list21\
    \ = list.filter(x => x.contains(\"e\"))\n        val list22 = list.filter(x =>\
    \ x.contains(\"i\"))\n        val list23 = list.filter(x => x.contains(\"o\"))\n\
    \        val list24 = list.filter(x => x.contains(\"u\"))\n        val list25\
    \ = list.filter(x => x.contains(\"y\"))\n        val list26 = list.filter(x =>\
    \ x.contains(\"h\"))\n        val list27 = list.filter(x => x.contains(\"l\"))\n\
    \        val list28 = list.filter(x => x.contains(\"l\"))\n        val list29\
    \ = list.filter(x => x.contains(\"a\"))\n        val list30 = list.filter(x =>\
    \ x.contains(\"e\"))\n        val list31 = list.filter(x => x.contains(\"i\"))\n\
    \        val list32 = list.filter(x => x.contains(\"o\"))\n        val list33\
    \ = list.filter(x => x.contains(\"u\"))\n        val list34 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list35 = list.filter(x => x.contains(\"h\"))\n\
    \        val list36 = \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpneyd25fl.scala:56:20 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mlist36\e[0m = \n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpneyd25fl.scala:57:5 ---------------------\e[0m\e[0m\n\e[31m57\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.filter(_ => _.length == n)\n        val list3 = list2.filter(_\
    \ => _.contains(\"a\"))\n        val list4 = list3.filter(_ => _.contains(\"e\"\
    ))\n        val list5 = list4.filter(_ => _.contains(\"i\"))\n        val list6\
    \ = list5.filter(_ => _.contains(\"o\"))\n        val list7 = list6.filter(_ =>\
    \ _.contains(\"u\"))\n        val list8 = list7.filter(_ => _.contains(\"y\"))\n\
    \        list8.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpnenv841r.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n)\n\e[31m\e[31m   |\e[0m                                   \
    \  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => _$2.length == n.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpnenv841r.scala:23:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e\
    [0m \e[36mlist3\e[0m = list2.filter(_ => _.contains(\e[31m\"a\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$4 of expanded function:\n\e[31m   |\e[0m   _$4 => _$4.contains(\e\
    [32m\"a\"\e[0m).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpnenv841r.scala:24:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e\
    [0m \e[36mlist4\e[0m = list3.filter(_ => _.contains(\e[31m\"e\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$6 of expanded function:\n\e[31m   |\e[0m   _$6 => _$6.contains(\e\
    [32m\"e\"\e[0m).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpnenv841r.scala:25:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e\
    [0m \e[36mlist5\e[0m = list4.filter(_ => _.contains(\e[31m\"i\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$8 of expanded function:\n\e[31m   |\e[0m   _$8 => _$8.contains(\e\
    [32m\"i\"\e[0m).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpnenv841r.scala:26:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e\
    [0m \e[36mlist6\e[0m = list5.filter(_ => _.contains(\e[31m\"o\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m  Missing\
    \ parameter"
  stdout: ''
  timestamp: 1659805768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.nonEmpty).map(_.toUpperCase).filter(_.length == n).map(_.split(\"\
    \").filter(_.nonEmpty).map(_.toUpperCase)).filter(_.length == n).map(_.mkString(\"\
    \"))\n        words.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg_1pssxm.scala:21:34\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toUpperCase).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m).filter(_.nonEmpty).map(_.toUpperCase)).filter(_.length\
    \ == n).map(_.mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m              \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonantSet = consonants.toSet\n        val vowelSet = vowels.toSet\n\
    \        val vowelCount = vowels.count(_ == ' ')\n        val consonantCount =\
    \ consonants.count(_ == ' ')\n        val vowelCount2 = vowels.count(_ == ' ')\n\
    \        val consonantCount2 = consonants.count(_ == ' ')\n        val vowelCount3\
    \ = vowels.count(_ == ' ')\n        val consonantCount3 = consonants.count(_ ==\
    \ ' ')\n        val vowelCount4 = vowels.count(_ == ' ')\n        val consonantCount4\
    \ = consonants.count(_ == ' ')\n        val vowelCount5 = vowels.count(_ == '\
    \ ')\n        val consonantCount5 = consonants.count(_ == ' ')\n        val vowelCount6\
    \ = vowels.count(_ == ' ')\n        val consonantCount6 = consonants.count(_ ==\
    \ ' ')\n        val vowelCount7 = vowels.count(_ == ' ')\n        val consonantCount7\
    \ = consonants.count(_ == ' ')\n        val vowelCount8 = vowels.count(_ == '\
    \ ')\n        val consonantCount8 = consonants.count(_ == ' ')\n        val vowelCount9\
    \ = vowels.count(_ == ' ')\n        val consonantCount9 = consonants.count(_ ==\
    \ ' ')\n        val vowelCount10 = vowels.count(_ == ' ')\n        val consonantCount10\
    \ = consonants.count(_ == ' ')\n        val vowelCount11 = vowels.count(_ == '\
    \ ')\n        val consonantCount11 = consonants.count(_ == ' ')\n        val vowelCount12\
    \ = vowels.count(_ == ' ')\n        val consonantCount12 = consonants.count(_\
    \ == ' ')\n        val vowelCount13 = vowels.count(_ == ' ')\n        val consonantCount13\
    \ = consonants.count(_ == ' ')\n        val vowelCount14 = vowels.count(_ == '\
    \ ')\n        val consonantCount14 = consonants.count(_ == ' ')\n        val vowelCount15\
    \ = vowels.count(_ == ' ')\n        val consonantCount15 = consonants.count(_\
    \ == ' ')\n        val vowelCount16 = vowels.count(_ == ' ')\n        val consonantCount16\
    \ = consonants.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxassv5vo.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpxassv5vo.scala:21:25 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxassv5vo.scala:58:5 ---------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val consonantSet = consonants.toSet\n        val vowelSet = vowels.toSet\n\
    \        val consonantCount = consonants.length\n        val vowelCount = vowels.length\n\
    \        val consonantIndex = s.toCharArray.zipWithIndex.filter(_._1 == consonants).map(_._2).toList\n\
    \        val vowelIndex = s.toCharArray.zipWithIndex.filter(_._1 == vowels).map(_._2).toList\n\
    \        val consonantCount = consonantIndex.length\n        val vowelCount =\
    \ vowelIndex.length\n        if (consonantCount == n && vowelCount == n) {\n \
    \           val consonantIndexList = consonantIndex.sortBy(_ * -1)\n         \
    \   val vowelIndexList = vowelIndex.sortBy(_ * -1)\n            val consonantIndexListLength\
    \ = consonantIndexList.length\n            val vowelIndexListLength = vowelIndexList.length\n\
    \            val consonantIndexListLength = consonantIndexListLength / consonantCount\n\
    \            val vowelIndexListLength = vowelIndexListLength / vowelCount\n  \
    \          val consonantIndexListLength = consonantIndexListLength * consonantCount\n\
    \            val vowelIndexListLength = vowelIndexListLength * vowelCount\n  \
    \          val consonantIndexListLength = consonantIndexListLength * consonantCount\n\
    \            val vowelIndexListLength = vowelIndexListLength * vowelCount\n  \
    \          val consonantIndexListLength = consonantIndexListLength * consonantCount\n\
    \            val vowelIndexListLength = vowelIndexListLength * vowelCount\n  \
    \          val consonantIndexListLength = consonantIndexListLength * consonantCount\n\
    \            val vowelIndexListLength = vowelIndexListLength * vowelCount\n  \
    \          val consonantIndexListLength = consonantIndexListLength * consonantCount\n\
    \            val vowelIndexListLength = vowelIndexListLength * vowelCount\n  \
    \          val consonantIndexListLength = consonantIndexListLength * consonantCount\n\
    \            val vowelIndexListLength = vowelIndexListLength * vowelCount\n  \
    \          val consonantIndexListLength = consonantIndexListLength * consonantCount\n\
    \            val vowelIndexListLength = vowelIndexListLength * vowelCount\n  \
    \          val consonantIndexListLength = consonantIndexListLength\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8n74mzr4.scala:66:0 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8n74mzr4.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantCount\e[0m = consonantIndex.length\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mconsonantCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8n74mzr4.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelCount\e[0m = vowelIndex.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCount is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp8n74mzr4.scala:21:24 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmp8n74mzr4.scala:28:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantIndex\e[0m = s.toCharArray.zipWithIndex.filter(_._1\
    \ == consonants).map(_._2).toList\n\e[31m\e[31m   |\e[0m                     \
    \                                          ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp8n74mzr4.scala:29:59 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelIndex\e[0m "
  stdout: ''
  timestamp: 1659805777
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").map(_.toUpperCase)\n\
    \        val result = new mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            if (word.length == n) {\n                result += (word + \"\
    \ \")\n            }\n        }\n        if (result.isEmpty) {\n            List()\n\
    \        } else {\n            result.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1k69ndlz.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val vowels = \"aeiou\"\n     \
    \   val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantsList = consonants.toList\n\
    \        val vowelsList = vowels.toList\n        val wordsList = s.split(\" \"\
    ).toList\n        val wordsWithConsonants = wordsList.filter(word => word.forall(consonantsList.contains))\n\
    \        val wordsWithVowels = wordsList.filter(word => word.forall(vowelsList.contains))\n\
    \        val wordsWithConsonantsAndVowels = wordsWithConsonants.filter(word =>\
    \ word.forall(consonantsList.contains) && word.forall(vowelsList.contains))\n\
    \        val wordsWithConsonantsAndVowelsAndConsonants = wordsWithConsonantsAndVowels.filter(word\
    \ => word.forall(consonantsList.contains) && word.forall(vowelsList.contains)\
    \ && word.forall(consonantsList.contains))\n        val wordsWithConsonantsAndVowelsAndConsonantsAndVowels\
    \ = wordsWithConsonantsAndVowelsAndConsonants.filter(word => word.forall(consonantsList.contains)\
    \ && word.forall(vowelsList.contains) && word.forall(consonantsList.contains)\
    \ && word.forall(vowelsList.contains))\n        val wordsWithConsonantsAndVowelsAndConsonantsAndVowelsAndConsonants\
    \ = wordsWithConsonantsAndVowelsAndConsonantsAndVowels.filter(word => word.forall(consonantsList.contains)\
    \ && word.forall(vowelsList.contains) && word.forall(consonantsList.contains)\
    \ && word.forall(vowelsList.contains) && word.forall(consonantsList.contains))\n\
    \        val wordsWithConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels\
    \ = wordsWithConsonantsAndVowelsAndConsonantsAndVowelsAndConsonants.filter(word\
    \ => word.forall(consonantsList.contains) && word.forall(vowelsList.contains)\
    \ && word.forall(consonantsList.contains) && word.forall(vowelsList.contains)\
    \ && word.forall(consonantsList.contains) && word.forall(vowelsList.contains))\n\
    \        val wordsWithConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonants\
    \ = words\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe5wwy6x_.scala:33:100 -----------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mwordsWithConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonants\e\
    [0m = words\n\e[31m\e[31m   |\e[0m                                           \
    \                                                         ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                                        Not found: words\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5wwy6x_.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val result = new mutable.ListBuffer[String]()\n        val consonants\
    \ = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        for (word\
    \ <- words) {\n            val letters = word.split(\"\")\n            val wordWithConsonants\
    \ = letters.filter(letter => consonants.contains(letter))\n            val wordWithVowels\
    \ = letters.filter(letter => vowels.contains(letter))\n            if (wordWithConsonants.size\
    \ == n) {\n                result += (word + \" \")\n            } else if (wordWithVowels.size\
    \ == n) {\n                result += (word + \" \")\n            }\n        }\n\
    \        if (result.isEmpty) {\n            List()\n        } else {\n       \
    \     result.toList\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1_hyl0du.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val vowelCount = s.count(vowels)\n        val consonantCount = s.count(consonants)\n\
    \        val vowelCountInString = vowelCount / n\n        val consonantCountInString\
    \ = consonantCount / n\n        val vowelCountInString2 = vowelCount % n\n   \
    \     val consonantCountInString2 = consonantCount % n\n        val vowelCountInString3\
    \ = vowelCount / n\n        val consonantCountInString3 = consonantCount / n\n\
    \        val vowelCountInString4 = vowelCount % n\n        val consonantCountInString4\
    \ = consonantCount % n\n        val vowelCountInString5 = vowelCount / n\n   \
    \     val consonantCountInString5 = consonantCount / n\n        val vowelCountInString6\
    \ = vowelCount % n\n        val consonantCountInString6 = consonantCount % n\n\
    \        val vowelCountInString7 = vowelCount / n\n        val consonantCountInString7\
    \ = consonantCount / n\n        val vowelCountInString8 = vowelCount % n\n   \
    \     val consonantCountInString8 = consonantCount % n\n        val vowelCountInString9\
    \ = vowelCount / n\n        val consonantCountInString9 = consonantCount / n\n\
    \        val vowelCountInString10 = vowelCount % n\n        val consonantCountInString10\
    \ = consonantCount % n\n        val vowelCountInString11 = vowelCount / n\n  \
    \      val consonantCountInString11 = consonantCount / n\n        val vowelCountInString12\
    \ = vowelCount % n\n        val consonantCountInString12 = consonantCount % n\n\
    \        val vowelCountInString13 = vowelCount / n\n        val consonantCountInString13\
    \ = consonantCount / n\n        val vowelCountInString14 = vowelCount % n\n  \
    \      val consonantCountInString14 = consonantCount % n\n        val vowelCountInString15\
    \ = vowelCount / n\n        val consonantCountInString15 = consonantCount / n\n\
    \        val vowelCountInString16 = vowelCount % n\n        val consonantCountInString16\
    \ = consonantCount \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvn05c82_.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvn05c82_.scala:24:33\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e\
    [0m = s.count(vowels)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    (vowels : String)\n\
    \e[31m   |\e[0m                                 Required: Char => Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvn05c82_.scala:25:37\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e\
    [0m = s.count(consonants)\n\e[31m\e[31m   |\e[0m                             \
    \        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Found:    (consonants : String)\n\e[31m   |\e[0m                           \
    \          Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpvn05c82_.scala:58:5 ---------------------\e[0m\e\
    [0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805777
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = list.map(x => x.toUpperCase)\n        val list3 = list2.filter(x\
    \ => x.contains(\"A\"))\n        val list4 = list3.filter(x => x.contains(\"E\"\
    ))\n        val list5 = list4.filter(x => x.contains(\"I\"))\n        val list6\
    \ = list5.filter(x => x.contains(\"O\"))\n        val list7 = list6.filter(x =>\
    \ x.contains(\"U\"))\n        val list8 = list7.filter(x => x.contains(\"a\"))\n\
    \        val list9 = list8.filter(x => x.contains(\"e\"))\n        val list10\
    \ = list9.filter(x => x.contains(\"i\"))\n        val list11 = list10.filter(x\
    \ => x.contains(\"o\"))\n        val list12 = list11.filter(x => x.contains(\"\
    u\"))\n        val list13 = list12.filter(x => x.contains(\"A\"))\n        val\
    \ list14 = list13.filter(x => x.contains(\"E\"))\n        val list15 = list14.filter(x\
    \ => x.contains(\"I\"))\n        val list16 = list15.filter(x => x.contains(\"\
    O\"))\n        val list17 = list16.filter(x => x.contains(\"U\"))\n        val\
    \ list18 = list17.filter(x => x.contains(\"a\"))\n        val list19 = list18.filter(x\
    \ => x.contains(\"e\"))\n        val list20 = list19.filter(x => x.contains(\"\
    i\"))\n        val list21 = list20.filter(x => x.contains(\"o\"))\n        val\
    \ list22 = list21.filter(x => x.contains(\"u\"))\n        val list23 = list22.filter(x\
    \ => x.contains(\"A\"))\n        val list24 = list23.filter(x => x.contains(\"\
    E\"))\n        val list25 = list24.filter(x => x.contains(\"I\"))\n        val\
    \ list26 = list25.filter(x => x.contains(\"O\"))\n        val list27 = list26.filter(x\
    \ => x.contains(\"U\"))\n        val list28 = list27.filter(x => x.contains(\"\
    a\"))\n        val list29 = list28.filter(x => x.contains(\"e\"))\n        val\
    \ list30 = list29.filter(x => x.contains(\"i\"))\n        val list31 = list30.filter(x\
    \ => x.contains(\"o\"))\n        val list32 = list31.filter(x => x.contains(\"\
    u\"))\n        val list33 = list32.filter(x => x.contains(\"A\"))\n        val\
    \ list34 = list33.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjxjf10_5.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjxjf10_5.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c.isLetter)\n            if\
    \ (count == n) {\n                result += (word + \" \")\n            }\n  \
    \      }\n        if (result.isEmpty) {\n            List()\n        } else {\n\
    \            result.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5tu_a3_b.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805738
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val list = new mutable.ListBuffer[String]()\n        for(word <- words){\n\
    \            val count = word.split(\"[^aeiou]\").length\n            if(count\
    \ == n){\n                list += word\n            }\n        }\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp876hkgrq.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach {\
    \ word =>\n            val count = word.count(c => c >= 'a' && c <= 'z' || c >=\
    \ 'A' && c <= 'Z')\n            if (count == n) result += word\n        }\n  \
    \      if (result.isEmpty) List()\n        else result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcj8no08h.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805712
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = list.filter( x => x.toString.toList.count(_ == 'a') <= n\
    \ )\n        result match {\n            case Nil => List()\n            case\
    \ x => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpll7x7ohe.scala:29)\n\tat Problem.main(tmpll7x7ohe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val result: List[String] = new mutable.ListBuffer[String]()\n       \
    \ for(word <- words) {\n            if(word.length == n) {\n                result\
    \ ++= word\n            }\n        }\n        return result.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphjv6fh19.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphjv6fh19.scala:25:23 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                result ++= word\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value ++= is not a member\
    \ of List[String] - did you mean result.++?\n2 errors found\n"
  stdout: ''
  timestamp: 1659805778
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.map(x => x.replaceAll(\"[^a-zA-Z ]\", \"\"))\n     \
    \   val list3 = list2.filter(x => x.length == n)\n        list3.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2jomsv6y.scala:27)\n\tat Problem.main(tmp2jomsv6y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        list.foreach(x\
    \ => {\n            val count = x.count(_ == 'a')\n            if (count == n)\
    \ result += x\n        })\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpre2uvo3z.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter(_.length == n).map(_.toLowerCase)\n        words.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfn9qurol.scala:21:34\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.length\
    \ == n).map(_.toLowerCase)\n\e[31m\e[31m   |\e[0m                            \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    \e[1m\e[31mArray\e[0m[String]\n\
    \e[31m   |\e[0m                                  Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").map(_.toLowerCase).toList\n\
    \        val wordSet = words.toSet\n        val result = new mutable.ListBuffer[String]()\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"\
    u\", \"y\")\n        val consonantCount = words.filter(_.contains(consonants)).length\n\
    \        val vowelCount = words.filter(_.contains(vowels)).length\n        val\
    \ consonantCountAndVowelCount = consonantCount + vowelCount\n        val consonantCountAndVowelCountAndRemainder\
    \ = consonantCountAndVowelCount % 2\n        val consonantCountAndVowelCountAndRemainderAndRemainder\
    \ = consonantCountAndVowelCount % 3\n        val consonantCountAndVowelCountAndRemainderAndRemainderAndRemainder\
    \ = consonantCountAndVowelCount % 4\n        val consonantCountAndVowelCountAndRemainderAndRemainderAndRemainderAndRemainder\
    \ = consonantCountAndVowelCount % 5\n        val consonantCountAndVowelCountAndRemainderAndRemainderAndRemainderAndRemainderAndRemainder\
    \ = consonantCountAndVowelCount % 6\n        val consonantCountAndVowelCountAndRemainderAndRemainderAndRemainderAndRemainderAndRemainderAndRemainder\
    \ = consonantCountAndVowelCount % 7\n        val consonantCountAndVowelCountAndRemainderAndRemainderAndRemainderAndRemainderAndRemainderAndRemainder\
    \ = consonantCountAndVowelCount % 8\n        val consonantCountAndVowelCountAndRemainderAndRemainderAndRemainderAndRemainderAndRemainderAndRemainder\
    \ = consonantCountAndVowelCount % 9\n        val consonantCountAndVowelCountAndRemainderAndRemainderAndRemainderAndRemainderAndRemainderAndRemainder\
    \ = consonantCountAndVowelCount % 10\n        val consonantCountAndVowelCountAndRemainderAndRemainderAndRemainderAndRemainderAndRemainderAndRemainderAndRemainder\
    \ = consonantCountAndVowelCount % 11\n        val con\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpykthzixr.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpykthzixr.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantCountAndVowelCountAndRemainderAndRemainderAndRemainderAndRemainderAndRemainderAndRemainder\e\
    [0m = consonantCountAndVowelCount % \e[31m8\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCountAndVowelCountAndRemainderAndRemainderAndRemainderAndRemainderAndRemainderAndRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  consonantCountAndVowelCountAndRemainderAndRemainderAndRemainderAndRemainderAndRemainderAndRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpykthzixr.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mconsonantCountAndVowelCountAndRemainderAndRemainderAndRemainderAndRemainderAndRemainderAndRemainder\e\
    [0m = consonantCountAndVowelCount % \e[31m9\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCountAndVowelCountAndRemainderAndRemainderAndRemainderAndRemainderAndRemainderAndRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  consonantCountAndVowelCountAndRemainderAndRemainderAndRemainderAndRemainderAndRemainderAndRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpykthzixr.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36"
  stdout: ''
  timestamp: 1659805778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val result = new mutable.ListBuffer[String]()\n        for(word <- words)\
    \ {\n            if(word.contains(\"a\") || word.contains(\"e\") || word.contains(\"\
    i\") || word.contains(\"o\") || word.contains(\"u\")) {\n                result.add(word)\n\
    \            }\n        }\n        if(result.size == 0) {\n            result.add(\"\
    \")\n        }\n        if(result.size == n) {\n            result.foreach(println)\n\
    \        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf4tvsf_p.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val result = new mutable.ListBuffer[String]()\n        val count = new\
    \ mutable.HashMap[String, Long]()\n        for (word <- list) {\n            val\
    \ count = count.get(word)\n            if (count == null) {\n                count.set(word,\
    \ 1l)\n            } else {\n                count.set(word, count.get + 1)\n\
    \            }\n        }\n        for (word <- list) {\n            val count\
    \ = count.get(word)\n            if (count.get == n) {\n                result\
    \ += (word + \" \")\n            }\n        }\n        if (result.isEmpty) {\n\
    \            List()\n        } else {\n            result.toList\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl3i3amiq.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl3i3amiq.scala:23:24\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805777
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \").toList\n\
    \        val result = new mutable.ListBuffer[String]()\n        words.foreach(word\
    \ => {\n            if (word.length == n) result += word\n        })\n       \
    \ if (result.isEmpty) List()\n        else result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsm6ns0sw.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list = list.filter(x => x.forall(x => x.toString.toChar == 'a' ||\
    \ x.toString.toChar == 'e' || x.toString.toChar == 'i' || x.toString.toChar ==\
    \ 'o' || x.toString.toChar == 'u' || x.toString.toChar == 'y'))\n        val list\
    \ = list.filter(x => x.forall(x => x.toString.toChar == 'a' || x.toString.toChar\
    \ == 'e' || x.toString.toChar == 'i' || x.toString.toChar == 'o' || x.toString.toChar\
    \ == 'u' || x.toString.toChar == 'y'))\n        val list = list.filter(x => x.forall(x\
    \ => x.toString.toChar == 'a' || x.toString.toChar == 'e' || x.toString.toChar\
    \ == 'i' || x.toString.toChar == 'o' || x.toString.toChar == 'u' || x.toString.toChar\
    \ == 'y'))\n        val list = list.filter(x => x.forall(x => x.toString.toChar\
    \ == 'a' || x.toString.toChar == 'e' || x.toString.toChar == 'i' || x.toString.toChar\
    \ == 'o' || x.toString.toChar == 'u' || x.toString.toChar == 'y'))\n        val\
    \ list = list.filter(x => x.forall(x => x.toString.toChar == 'a' || x.toString.toChar\
    \ == 'e' || x.toString.toChar == 'i' || x.toString.toChar == 'o' || x.toString.toChar\
    \ == 'u' || x.toString.toChar == 'y'))\n        val list = list.filter(x => x.forall(x\
    \ => x.toString.toChar == 'a' || x.toString.toChar == 'e' || x.toString.toChar\
    \ == 'i' || x.toString.toChar == 'o' || x.toString.toChar == 'u' || x.toString.toChar\
    \ == 'y'))\n        val list = list.filter(x => x.forall(x => x.toString.toChar\
    \ == 'a' || x.toString.toChar == 'e' || x.toString.toChar == 'i' || x.toString.toChar\
    \ == 'o' || x.toString.toChar == 'u' || x.toString.toChar == 'y'))\n        val\
    \ list = list.filter(x => x.forall(x => x.toString.toChar == 'a' || x.toString.toChar\
    \ == 'e' || x.toString.toChar == 'i' || x.toString.toChar == 'o' || x.toString.toChar\
    \ == 'u' || x.toString.toChar == 'y'))\n        val list = list.filter(x => x.forall(x\
    \ => x.toString.to\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo7l_43i5.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo7l_43i5.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.forall(\e[36mx\e[0m => x.toString.toChar\
    \ == \e[31m'a'\e[0m || x.toString.toChar == \e[31m'e'\e[0m || x.toString.toChar\
    \ == \e[31m'i'\e[0m || x.toString.toChar == \e[31m'o'\e[0m || x.toString.toChar\
    \ == \e[31m'u'\e[0m || x.toString.toChar == \e[31m'y'\e[0m))\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpo7l_43i5.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.forall(\e\
    [36mx\e[0m => x.toString.toChar == \e[31m'a'\e[0m || x.toString.toChar == \e[31m'e'\e\
    [0m || x.toString.toChar == \e[31m'i'\e[0m || x.toString.toChar == \e[31m'o'\e\
    [0m || x.toString.toChar == \e[31m'u'\e[0m || x.toString.toChar == \e[31m'y'\e\
    [0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpo7l_43i5.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx"
  stdout: ''
  timestamp: 1659805779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val list2 = list.filter(_ => _.length == n).map(_.toUpperCase)\n    \
    \    list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpyxed_pks.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m                \
    \                     ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2\
    \ of expanded function:\n\e[31m   |\e[0m   _$2 => _$2.length == n.\n1 error found\n"
  stdout: ''
  timestamp: 1659805656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiouAEIOU\"\n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n        val consonantCount = consonants.toSet.size // number of consonants in\
    \ string\n        val vowelCount = vowels.toSet.size // number of vowels in string\n\
    \        val consonantIndex = consonants.indexOf(n) // index of first consonant\
    \ in the string\n        val vowelIndex = vowels.indexOf(n) // index of first\
    \ vowel in the string\n        val consonantCount = consonants.toSet.size // number\
    \ of consonants in string\n        val vowelCount = vowels.toSet.size // number\
    \ of vowels in string\n        val consonantIndex = consonants.indexOf(n) // index\
    \ of first consonant in the string\n        val vowelIndex = vowels.indexOf(n)\
    \ // index of first vowel in the string\n        val consonantCount = consonants.toSet.size\
    \ // number of consonants in string\n        val vowelCount = vowels.toSet.size\
    \ // number of vowels in string\n        val consonantIndex = consonants.indexOf(n)\
    \ // index of first consonant in the string\n        val vowelIndex = vowels.indexOf(n)\
    \ // index of first vowel in the string\n        val consonantCount = consonants.toSet.size\
    \ // number of consonants in string\n        val vowelCount = vowels.toSet.size\
    \ // number of vowels in string\n        val consonantIndex = consonants.indexOf(n)\
    \ // index of first consonant in the string\n        val vowelIndex = vowels.indexOf(n)\
    \ // index of first vowel in the string\n        val consonantCount = consonants.toSet.size\
    \ // number of consonants in string\n        val vowelCount = vowels.toSet.size\
    \ // number of vowels in string\n        val consonantIndex = consonants.indexOf(n)\
    \ // index of first consonant in the string\n        val vowelIndex = vowels.indexOf(n)\
    \ // index of first vowel in the string\n        val consonantCount = consonants.toSet.size\
    \ // number of consonants in string\n        val vowelCount = vowels.toSet.size\
    \ // number of vowels in string\n        val consonantIndex = consonants.indexOf(n)\
    \ // index of first consonant in the string\n        val vowelIndex = vowels.indexOf(n)\
    \ // index of first vowel in the string\n        val consonantCount = consonants.toSet.size\
    \ // number of consonants in string\n        val vowelCount = vowels.to\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgu52m5ev.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonants.toSet.size\
    \ \e[34m// number of consonants in string\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgu52m5ev.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowels.toSet.size\
    \ \e[34m// number of vowels in string\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCount is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgu52m5ev.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mconsonantIndex\e[0m = consonants.indexOf(n)\
    \ \e[34m// index of first consonant in the string\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mconsonantIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mconsonantIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgu52m5ev.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelIndex\e[0m = vowels.indexOf(n) \e[34m// index of first vowel in the\
    \ string\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgu52m5ev.scala:32:12 ---------"
  stdout: ''
  timestamp: 1659805779
