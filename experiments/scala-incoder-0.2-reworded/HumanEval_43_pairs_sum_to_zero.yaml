name: HumanEval_43_pairs_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // pairs_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ true if there are two distinct elements in the list that\n    // sum to zero,\
  \ and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
  \ 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n   \
  \ // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
  \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n    }\n\
  \n}\n"
completions: ["        val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case\
    \ (k, v) => v.reduceLeft(_ + _) == 0 }", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head._2 == 0)", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v)\
    \ => v.reduceLeft(_ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n\
    \        pairs.forall { case (k, v) => v.reduce((x, y) => x + y) == 0L }", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v)\
    \ => v.reduceLeft(_ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n\
    \        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "        val\
    \ pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x/2)\n        pairs.exists(x =>\
    \ x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.forall { case (k, v) => v.reduceLeft((x, y) => x + y) ==\
    \ 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case\
    \ (k, v) => v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n\
    \        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case\
    \ (k, v) => v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(_ % 2)\n \
    \       pairs.forall { case (k, v) => v.reduce(_ + _) == 0 }", "        val pairs\
    \ = l.groupBy(x => x / 2)\n        pairs.forall { case (k, v) => v.reduce(_ +\
    \ _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall\
    \ { case (k, v) => v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.forall { case (k, v) => v.reduce(_ + _) == 0 }", "   \
    \     val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x / 2)\n     \
    \   pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "        val pairs\
    \ = l.groupBy(_ % 2 == 0)\n        pairs.forall { case (true, xs) => xs.forall(x\
    \ => x == 0) }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.exists { case (k, v) => v.reduce(_ + _) == 0 }", "   \
    \     val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) =>\
    \ v.reduceLeft(_ + _) == 0 }", "        val pairs = l.groupBy(x => x / 2)\n  \
    \      pairs.exists(x => x._2.length == 1 && x._2.head._2 == 0)", "        val\
    \ pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 &&\
    \ x._2.head._2 == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.sum == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.forall { case (k, v) => v.reduce(_ + _) == 0 }", "   \
    \     val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.forall { case (k, v) => v.forall(x => x == 0) }", "        val pairs\
    \ = l.groupBy(_ % 2 == 0)\n        pairs.forall { case (true, list) => list.forall(x\
    \ => x == 0) }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.size == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "      \
    \  val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length ==\
    \ 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(_ %\
    \ 2 == 0).mapValues(_.size)\n        pairs.forall { case (k, v) => v == 0 }",
  "        val pairs = l.groupBy(_ % 2 == 0).mapValues(_.length)\n        pairs.forall\
    \ { case (k, v) => v == 0 }", "        val pairs = l.groupBy(x => x % 2)\n   \
    \     pairs.exists(x => x._2.length == 1 && x._2.sum == 0)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "    \
    \    val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) =>\
    \ v.reduce((x, y) => x + y) == 0 }", "        val pairs = l.groupBy(_ % 2 == 0).mapValues(_.size)\n\
    \        pairs.forall { case (k, v) => v == 0 }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head._2 == 0)",
  "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) =>\
    \ v.reduce(_ + _) == 0L }", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "        val pairs =\
    \ l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.forall(x => x\
    \ == 0) }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists {\
    \ case (k, v) => v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(_ % 2)\n\
    \        pairs.exists { case (true, xs) => xs.sum == 0 }", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists { case\
    \ (k, v) => v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(_ % 2 == 0)\n\
    \        pairs.forall { case (k, v) => v.length == 2 && v(0) + v(1) == 0 }", " \
    \       val pairs = l.zipWithIndex.filter(_._2 % 2 == 0)\n        pairs.forall(pair\
    \ => pair._1 + pair._2 == 0)", "        val pairs = l.groupBy(x => x % 2)\n  \
    \      pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduce(_ +\
    \ _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall\
    \ { case (k, v) => v.reduceLeft((x, y) => x + y) == 0L }", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) =>\n           \
    \ val sum = v.sum\n            val zero = k * sum\n            zero != 0\n   \
    \     }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "    \
    \    val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(_ % 2)\n        pairs.forall { case (k,\
    \ v) => v == 0 }", "        val pairs = l.groupBy(_ % 2 == 0).mapValues(_.length)\n\
    \        pairs.forall { case (k, v) => v == 0 }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x / 2)\n     \
    \   pairs.forall { case (k, v) => v == 0 }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists { case (k, v) => v.reduce(_ + _) == 0 }", " \
    \       val pairs = l.groupBy(_ % 2)\n        pairs.exists(pair => pair._2.size\
    \ == 1 && pair._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n  \
    \      pairs.forall { case (k, v) => v.reduceLeft(_ + _) == 0 }", "        val\
    \ pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduce(_\
    \ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall\
    \ { case (k, v) => v.forall(x => x == 0) }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.forall { case (k, v) => v.reduce(_ + _) == 0 }", " \
    \       val pairs = l.groupBy(x => x / 2)\n        pairs.exists(x => x._2.size\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists { case (k, v) => v.reduce(_ + _) == 0 }", "        val pairs\
    \ = l.groupBy(_ % 2 == 0)\n        pairs.forall { case (true, xs) => xs.forall(x\
    \ => x == 0) }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "    \
    \    val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "        val pairs =\
    \ l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduceLeft((x,\
    \ y) => x + y) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.size == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "      \
    \  val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduceLeft(_\
    \ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall\
    \ { case (k, v) => v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.exists { case (k, v) => v.sum == 0 }", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists { case (k, v) => v.sum == 0 }",
  "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.sum == 0)", "        val pairs = l.groupBy(x => x / 2)\n      \
    \  pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case\
    \ (k, v) => v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(_ % 2 == 0).mapValues(_.size)\n\
    \        pairs.forall { case (k, v) => v == 0 }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.exists { case (k, v)\
    \ => v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n   \
    \     pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduce(_ +\
    \ _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.sum == 0)", "   \
    \     val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) =>\
    \ v.forall(x => x == 0) }", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "        val pairs =\
    \ l.groupBy(x => x % 2)\n        pairs.exists { case (k, v) => v.sum == 0 }",
  "        val pairs = l.groupBy(_ % 2)\n        pairs.forall { case (k, v) => v.reduce((x,\
    \ y) => x + y) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x =>\
    \ x / 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "  \
    \      val pairs = l.groupBy(x => x % 2)\n        pairs.exists { case (k, v) =>\
    \ v.reduceLeft(_ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n  \
    \      pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case\
    \ (k, v) => v.reduceLeft((x, y) => x + y) == 0l }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.forall { case (k, v) => v.reduce(_ + _) == 0l }", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v)\
    \ => v.reduce(_ + _) == 0L }", "        val pairs = l.groupBy(x => x / 2)\n  \
    \      pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.sum == 0)", "     \
    \   val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.size ==\
    \ 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.size == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "    \
    \    val pairs = l.zipWithIndex.filter(_._2 != l.length)\n        val pairsWithZero\
    \ = pairs.filter(_._2 == 0)\n        pairsWithZero.length == pairs.length", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.exists { case (k, v)\
    \ => v.forall(x => x == 0) }", "        val pairs = l.groupBy(x => x % 2)\n  \
    \      pairs.exists { case (k, v) => v.reduce(_ + _) == 0 }", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists { case (k, v) => v.reduce(_ +\
    \ _) == 0 }", "        val pairs = l.groupBy(_ % 2)\n        pairs.forall { case\
    \ (k, v) => v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n\
    \        pairs.exists { case (k, v) => v.sum == 0 }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "        val pairs =\
    \ l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduce(_ + _)\
    \ == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall {\
    \ case (k, v) => v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(_ % 2\
    \ == 0)\n        pairs.forall { case (true, xs) => xs.forall(x => x == 0) }",
  "        val pairs = l.groupBy(_ % 2 == 0)\n        pairs.exists(pairs => pairs.count(_._2\
    \ == 0) == 2)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall\
    \ { case (k, v) => v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "    \
    \    val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.size ==\
    \ 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.forall { case (k, v) =>\n            val sum = v.sum\n\
    \            if (sum == 0) true\n            else false\n        }", "       \
    \ val pairs = l.groupBy(x => x / 2)\n        pairs.exists { case (k, v) => v.reduce(_\
    \ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists\
    \ { case (true, xs) => xs.sum == 0 }", "        val pairs = l.groupBy(x => x %\
    \ 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "        val\
    \ pairs = l.groupBy(x => x % 2)\n        pairs.exists { case (k, v) => v.reduceLeft(_\
    \ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall\
    \ { case (k, v) => v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.exists { case (true, xs) => xs.sum == 0 }", "        val\
    \ pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduce(_\
    \ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists\
    \ { case (k, v) => v.reduce(_ + _) == 0L }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.size\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists { case (k, v) => v.sum == 0 }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.size\
    \ == 1 && x._2.head._2 == 0)", "        val pairs = l.groupBy(x => x % 2)\n  \
    \      pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "        val pairs\
    \ = l.zipWithIndex.filter(_._2 != l.length)\n        val pairsWithZero = pairs.filter(_._2\
    \ == 0)\n        pairsWithZero.length == pairs.length", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists { case (true, xs) => xs.sum == 0 }", "        val pairs = l.zipWithIndex.filter(_._2\
    \ != l.size)\n        pairs.forall(pair => pair._1.sum == 0)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.size == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x %\
    \ 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "      \
    \  val pairs = l.groupBy(x => x % 2)\n        pairs.exists { case (k, v) => v.reduce(_\
    \ + _) == 0l }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.forall { case (k, v) => v.reduce(_ + _) == 0L }", "  \
    \      val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) =>\
    \ v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(_ % 2 == 0).mapValues(_.length)\n\
    \        pairs.forall { case (k, v) => v == 0 }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", " \
    \       val pairs = l.groupBy(_ % 2 == 0)\n        pairs.forall { case (true,\
    \ xs) => xs.forall(x => x == 0) }", "        val pairs = l.groupBy(x => x % 2)\n\
    \        pairs.forall { case (k, v) => v.reduceLeft(_ + _) == 0 }", "        val\
    \ pairs = l.groupBy(x => x % 2)\n        pairs.exists { case (k, v) => v.reduce(_\
    \ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.size == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "    \
    \    val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.size ==\
    \ 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists\
    \ { case (k, v) => v.reduceLeft(_ + _) == 0 }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head._1 == 0)", "        val pairs = l.groupBy(x => x % 2)\n  \
    \      pairs.forall { case (k, v) => v.reduce(_ + _) == 0 }", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists { case (k, v) => v.reduceLeft((x,\
    \ y) => x + y) == 0l }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists\
    \ { case (k, v) => v.reduceLeft(_ + _) == 0 }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.size\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.forall { case (k, v) => v.reduce(_ + _) == 0 }", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduceLeft(_\
    \ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall\
    \ { case (k, v) => v.forall(x => x == 0) }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduceLeft(_\
    \ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "  \
    \      val pairs = l.groupBy(x => x / 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.zipWithIndex.filter(_._2 !=\
    \ l.length)\n        pairs.forall(pair => pair._1 + pair._2 == 0)", "        val\
    \ pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduceLeft(_\
    \ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall\
    \ { case (k, v) => v.forall(x => x == 0) }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.exists { case (k, v)\
    \ => v.reduce(_ + _) == 0 }", "        val pairs = l.zipWithIndex.filter(_._2\
    \ % 2 == 0)\n        val pairsWithZero = pairs.filter(_._2 == 0)\n        pairsWithZero.size\
    \ == pairs.size - 1", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.size == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "      \
    \  val pairs = l.zipWithIndex.filter(_._2 % 2 == 0)\n        pairs.forall { case\
    \ (pair, i) => pair._1 + pair._2 == 0 }", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "    \
    \    val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "        val pairs\
    \ = l.groupBy(x => x/2)\n        pairs.exists(x => x._2.length == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(_ % 2)\n        pairs.forall { case (k,\
    \ v) => v.forall(x => x == 0) }"]
stop_tokens:
- "\n    }\n"
