name: HumanEval_129_minPath
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a grid with N rows and N columns (N >= 2) and a positive integer k,\
  \ \n    // each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n    // inclusive appears exactly once on the cells of the grid.\n    //\
  \ You have to find the minimum path of length k in the grid. You can start\n   \
  \ // from any cell, and in each step you can move to any of the neighbor cells,\n\
  \    // in other words, you can go to cells which share an edge with you current\n\
  \    // cell.\n    // Please note that a path of length k means visiting exactly\
  \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
  \    // A path A (of length k) is considered less than a path B (of length k) if\n\
  \    // after making the ordered lists of the values on the cells that A and B go\n\
  \    // through (let's call them lst_A and lst_B), lst_A is lexicographically less\n\
  \    // than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n\
  \    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    //\
  \ lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is unique.\n   \
  \ // Return an ordered list of the values on the cells that the minimum path go\
  \ through.\n    // Examples:    \n    // >>> minPath((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
  \ 8l.toLong, 9l.toLong))), (3l))\n    // (List[Long](1l.toLong, 2l.toLong, 1l.toLong))\n\
  \    // >>> minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
  \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
  \ 2l.toLong))), (1l))\n    // (List[Long](1l.toLong))\n    def minPath(grid : List[List[Long]],\
  \ k : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
  \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
  \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
  \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
  \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
  \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
  \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
  \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
  \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
  \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
  \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
  \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
  \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
  \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
  \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
  \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
  \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
  \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
  \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
  \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
  \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
  \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
  \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
  \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
  \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong))));\n\
  \    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong, 4l.toLong),\
  \ List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong, 8l.toLong,\
  \ 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
  \ 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
  \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
  \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
  \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
  \ 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 3l.toLong),\
  \ List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong, 3l.toLong,\
  \ 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        val n = grid.size\n        val m = grid(0).size\n        val\
    \ result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n \
    \       val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array[Boolean](k)\n\
    \        val visited2 = new Array[Boolean](k)\n        val visited3 = new Array[Boolean](k)\n\
    \        val visited0 = new Array[Boolean](k)\n        val visited1 = new Array",
  "        val grid = grid.toList\n        val n = grid.size\n        val m = grid(0).size\n\
    \        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n        val visited\
    \ = mutable.HashSet[Long]()\n        val queue = mutable.Queue[Long]()\n     \
    \   val lst_A = mutable.ArrayBuffer.empty[Long]\n        val lst_B = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_C = mutable.ArrayBuffer.empty[Long]\n        val lst_D = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_E = mutable.ArrayBuffer.empty[Long]\n        val lst_F = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_G = mutable.ArrayBuffer.empty[Long]\n        val lst_H = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_I = mutable.ArrayBuffer.empty[Long]\n        val lst_J = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_K = mutable.ArrayBuffer.empty[Long]\n        val lst_L = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_M = mutable.ArrayBuffer.empty[Long]\n        val lst_N = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_O = mutable.ArrayBuffer.empty[Long]\n        val lst_P = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Q = mutable.ArrayBuffer.empty[Long]\n        val lst_R = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_S = mutable.ArrayBuffer.empty[Long]\n        val lst_T = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_U = mutable.ArrayBuffer.empty[Long]\n        val lst_V = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_W = mutable.ArrayBuffer.empty[Long]\n        val lst_X = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Y = mutable.ArrayBuffer.empty[Long]\n        val lst_Z = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_A = grid.map(_.toList)\n        val lst_B = grid.map(_.toList)\n\
    \        val lst_C = grid.map(_.toList)\n        val lst_D = grid.map(_.toList)\n\
    \        val lst_E = grid.map(_.toList)\n        val lst_F = grid.map(_.toList)\n\
    \        val lst_G = grid.map(_.toList)\n        ", "        val n = grid.length\n\
    \        val m = grid(0).length\n        val result = new Array[Long](k)\n   \
    \     val visited = new Array[Boolean](k)\n        val stack = new Array[Int](k)\n\
    \        val stackSize = new Array[Int](k)\n        val stackIndex = new Array[Int](k)\n\
    \        val stackIndexSize = new Array[Int](k)\n        val stackIndexIndex =\
    \ new Array[Int](k)\n        val stackIndexIndexSize = new Array[Int](k)\n   \
    \     val stackIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexSize\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexSize = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexSize = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexIndexSize\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexSize = new Array[Int](k)\n        val\
    \ stackIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexSize\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexSize = new Array[Int](k)\n   \
    \     val stackIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n     \
    \   val stackIndexIndexIndexIndexIndexIndexSize = new Array[Int](k)\n        val\
    \ stackIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexSize\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndex =\
    \ new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexSize = new\
    \ Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexSize = new Array[Int](k)\n   \
    \     val stackIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n     \
    \   val stackIndexIndexIndexIndexIndexIndexSize = new Array[Int](k)\n        val\
    \ stackIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexSize",
  "        val n = grid.size\n        val m = grid.head.length\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val visited = new mutable.HashSet[Long]()\n\
    \        val visitedList = new mutable.ListBuffer[Long]()\n        val visitedList2\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList3 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList4 = new mutable.ListBuffer[Long]()\n        val visitedList5\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList6 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList7 = new mutable.ListBuffer[Long]()\n        val visitedList8\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList9 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList10 = new mutable.ListBuffer[Long]()\n        val visitedList11\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList12 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList13 = new mutable.ListBuffer[Long]()\n        val visitedList14\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList15 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList16 = new mutable.ListBuffer[Long]()\n        val visitedList17\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList18 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList19 = new mutable.ListBuffer[Long]()\n        val visitedList20\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList21 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList22 = new mutable.ListBuffer[Long]()\n        val visitedList23\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList24 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList25 = new mutable.ListBuffer[Long]()\n        val visitedList26\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList27 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList28 = new mutable.ListBuffer[Long]()\n        val visitedList29\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList30 = new mut", "  \
    \      val m = grid.length\n        val n = grid(0).length\n        val result\
    \ = new mutable.ListBuffer[Long]\n        var index = 0\n        var current =\
    \ 0\n        var visited = new mutable.HashSet[Long]()\n        var visitedIndex\
    \ = 0\n        var currentIndex = 0\n        var currentValue = 0\n        var\
    \ currentValueIndex = 0\n        var currentValueIndex2 = 0\n        var currentValueIndex3\
    \ = 0\n        var currentValueIndex4 = 0\n        var currentValueIndex5 = 0\n\
    \        var currentValueIndex6 = 0\n        var currentValueIndex7 = 0\n    \
    \    var currentValueIndex8 = 0\n        var currentValueIndex9 = 0\n        var\
    \ currentValueIndex10 = 0\n        var currentValueIndex11 = 0\n        var currentValueIndex12\
    \ = 0\n        var currentValueIndex13 = 0\n        var currentValueIndex14 =\
    \ 0\n        var currentValueIndex15 = 0\n        var currentValueIndex16 = 0\n\
    \        var currentValueIndex17 = 0\n        var currentValueIndex18 = 0\n  \
    \      var currentValueIndex19 = 0\n        var currentValueIndex20 = 0\n    \
    \    var currentValueIndex21 = 0\n        var currentValueIndex22 = 0\n      \
    \  var currentValueIndex23 = 0\n        var currentValueIndex24 = 0\n        var\
    \ currentValueIndex25 = 0\n        var currentValueIndex26 = 0\n        var currentValueIndex27\
    \ = 0\n        var currentValueIndex28 = 0\n        var currentValueIndex29 =\
    \ 0\n        var currentValueIndex30 = 0\n        var currentValueIndex31 = 0\n\
    \        var currentValueIndex32 = 0\n        var currentValueIndex33 = 0\n  \
    \      var currentValueIndex34 = 0\n        var currentValueIndex35 = 0\n    \
    \    var currentValueIndex36 = 0\n        var currentValueIndex37 = 0\n      \
    \  var currentValueIndex38 = 0\n        var currentValueIndex39 = 0\n        var\
    \ currentValueIndex40 = 0\n        var currentValueIndex41 = 0\n        var currentValueIndex42\
    \ = 0\n        var currentValueIndex43 = 0\n        var currentValueIndex44 =\
    \ 0\n        var currentValueIndex45 = 0\n        var currentValueIndex46 = 0\n\
    \        var currentValueIndex47 = 0\n        var currentValueIndex48 = 0\n  \
    \      var currentValueIndex49 = 0\n        var currentValueIndex50 = 0\n    \
    \    var currentValueIndex51 = 0\n        var currentValueIndex52 = 0\n      \
    \  var currentValueIndex53 = 0\n        var currentValueIndex54 = 0\n        var\
    \ currentValueIndex55 = 0\n        var currentValueIndex56 = 0\n        var currentValueIndex57\
    \ = 0\n        var currentValueIndex58 = 0\n        var currentValueIndex59 =\
    \ 0\n        var currentValueIndex60 = 0\n        var currentValueIndex61 = 0\n\
    \        var currentValueIndex62 = 0\n        var currentValueIndex63 = 0\n  \
    \      var currentValueIndex64 = 0\n        var currentValue", "        val m\
    \ = grid.size\n        val n = grid.head.size\n        val m = grid.head.size\n\
    \        val result = new Array[Long](k)\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var k1 = k\n        var k2 = k\n        var k3 = k\n\
    \        var k4 = k\n        var k5 = k\n        var k6 = k\n        var k7 =\
    \ k\n        var k8 = k\n        var k9 = k\n        var k10 = k\n        var\
    \ k11 = k\n        var k12 = k\n        var k13 = k\n        var k14 = k\n   \
    \     var k15 = k\n        var k16 = k\n        var k17 = k\n        var k18 =\
    \ k\n        var k19 = k\n        var k20 = k\n        var k21 = k\n        var\
    \ k22 = k\n        var k23 = k\n        var k24 = k\n        var k25 = k\n   \
    \     var k26 = k\n        var k27 = k\n        var k28 = k\n        var k29 =\
    \ k\n        var k30 = k\n        var k31 = k\n        var k32 = k\n        var\
    \ k33 = k\n        var k34 = k\n        var k35 = k\n        var k36 = k\n   \
    \     var k37 = k\n        var k38 = k\n        var k39 = k\n        var k40 =\
    \ k\n        var k41 = k\n        var k42 = k\n        var k43 = k\n        var\
    \ k44 = k\n        var k45 = k\n        var k46 = k\n        var k47 = k\n   \
    \     var k48 = k\n        var k49 = k\n        var k50 = k\n        var k51 =\
    \ k\n        var k52 = k\n        var k53 = k\n        var k54 = k\n        var\
    \ k55 = k\n        var k56 = k\n        var k57 = k\n        var k58 = k\n   \
    \     var k59 = k\n        var k60 = k\n        var k61 = k\n        var k62 =\
    \ k\n        var k63 = k\n        var k64 = k\n        var k65 = k\n        var\
    \ k66 = k\n        var k67 = k\n        var k68 = k\n        var k69 = k\n   \
    \     var k70 = k\n        var k71 = k\n        var k72 = k\n        var k73 =\
    \ k\n        var k74 = k\n        var k75 = k\n        var k76 = k\n        var\
    \ k77 = k\n        var k78 = k\n        var k79 = k\n        var k80 = k\n   \
    \     var k81 = k", "        val n = grid.size\n        val m = grid.head\n  \
    \      val visited = new mutable.HashSet[Long]()\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val stack = new mutable.Stack[Long]()\n        val stack2 = new mutable.Stack[Long]()\n\
    \        val stack3 = new mutable.Stack[Long]()\n        val stack4 = new mutable.Stack[Long]()\n\
    \        val stack5 = new mutable.Stack[Long]()\n        val stack6 = new mutable.Stack[Long]()\n\
    \        val stack7 = new mutable.Stack[Long]()\n        val stack8 = new mutable.Stack[Long]()\n\
    \        val stack9 = new mutable.Stack[Long]()\n        val stack10 = new mutable.Stack[Long]()\n\
    \        val stack11 = new mutable.Stack[Long]()\n        val stack12 = new mutable.Stack[Long]()\n\
    \        val stack13 = new mutable.Stack[Long]()\n        val stack14 = new mutable.Stack[Long]()\n\
    \        val stack15 = new mutable.Stack[Long]()\n        val stack16 = new mutable.Stack[Long]()\n\
    \        val stack17 = new mutable.Stack[Long]()\n        val stack18 = new mutable.Stack[Long]()\n\
    \        val stack19 = new mutable.Stack[Long]()\n        val stack20 = new mutable.Stack[Long]()\n\
    \        val stack21 = new mutable.Stack[Long]()\n        val stack22 = new mutable.Stack[Long]()\n\
    \        val stack23 = new mutable.Stack[Long]()\n        val stack24 = new mutable.Stack[Long]()\n\
    \        val stack25 = new mutable.Stack[Long]()\n        val stack26 = new mutable.Stack[Long]()\n\
    \        val stack27 = new mutable.Stack[Long]()\n        val stack28 = new mutable.Stack[Long]()\n\
    \        val stack29 = new mutable.Stack[Long]()\n        val stack30 = new mutable.Stack[Long]()\n\
    \        val stack31 = new mutable.Stack[Long]()\n        val stack32 = new mutable.Stack[Long]()\n\
    \        val stack33 = new mutable.Stack[Long]()\n        val stack34 = new mutable.Stack[Long]()\n\
    \        val stack35 = new mutable.Stack[Long]()\n        val stack36 = new mutable.Stack[Long]()\n\
    \        val stack37", "        val m = grid.size\n        val n = grid(0).size\n\
    \        val lst_A = new Array[Long](k)\n        val lst_B = new Array[Long](k)\n\
    \        val lst_C = new Array[Long](k)\n        val lst_D = new Array[Long](k)\n\
    \        val lst_E = new Array[Long](k)\n        val lst_F = new Array[Long](k)\n\
    \        val lst_G = new Array[Long](k)\n        val lst_H = new Array[Long](k)\n\
    \        val lst_I = new Array[Long](k)\n        val lst_J = new Array[Long](k)\n\
    \        val lst_K = new Array[Long](k)\n        val lst_L = new Array[Long](k)\n\
    \        val lst_M = new Array[Long](k)\n        val lst_N = new Array[Long](k)\n\
    \        val lst_O = new Array[Long](k)\n        val lst_P = new Array[Long](k)\n\
    \        val lst_Q = new Array[Long](k)\n        val lst_R = new Array[Long](k)\n\
    \        val lst_S = new Array[Long](k)\n        val lst_T = new Array[Long](k)\n\
    \        val lst_U = new Array[Long](k)\n        val lst_V = new Array[Long](k)\n\
    \        val lst_W = new Array[Long](k)\n        val lst_X = new Array[Long](k)\n\
    \        val lst_Y = new Array[Long](k)\n        val lst_Z = new Array[Long](k)\n\
    \        val lst_AA = new Array[Long](k)\n        val lst_AB = new Array[Long](k)\n\
    \        val lst_AC = new Array[Long](k)\n        val lst_AD = new Array[Long](k)\n\
    \        val lst_AE = new Array[Long](k)\n        val lst_AF = new Array[Long](k)\n\
    \        val lst_AG = new Array[Long](k)\n        val lst_AH = new Array[Long](k)\n\
    \        val lst_AI = new Array[Long](k)\n        val lst_AJ = new Array[Long](k)\n\
    \        val lst_AK = new Array[Long](k)\n        val lst_AL = new Array[Long](k)\n\
    \        val lst_AM = new Array[Long](k)\n        val lst_AN = new Array[Long](k)\n\
    \        val lst_AO = new Array[Long](k)\n        val lst_AP = new ", "      \
    \  val grid = grid.toList\n        val n = grid.size\n        val m = grid(0).size\n\
    \        val grid2 = grid.map(_.toList).map(_.toSet).toSet\n        val grid3\
    \ = grid.map(_.toList).map(_.toSet).toSet\n        val grid4 = grid.map(_.toList).map(_.toSet).toSet\n\
    \        val grid5 = grid.map(_.toList).map(_.toSet).toSet\n        val grid6\
    \ = grid.map(_.toList).map(_.toSet).toSet\n        val grid7 = grid.map(_.toList).map(_.toSet).toSet\n\
    \        val grid8 = grid.map(_.toList).map(_.toSet).toSet\n        val grid9\
    \ = grid.map(_.toList).map(_.toSet).toSet\n        val grid10 = grid.map(_.toList).map(_.toSet).toSet\n\
    \        val grid11 = grid.map(_.toList).map(_.toSet).toSet\n        val grid12\
    \ = grid.map(_.toList).map(_.toSet).toSet\n        val grid13 = grid.map(_.toList).map(_.toSet).toSet\n\
    \        val grid14 = grid.map(_.toList).map(_.toSet).toSet\n        val grid15\
    \ = grid.map(_.toList).map(_.toSet).toSet\n        val grid16 = grid.map(_.toList).map(_.toSet).toSet\n\
    \        val grid17 = grid.map(_.toList).map(_.toSet).toSet\n        val grid18\
    \ = grid.map(_.toList).map(_.toSet).toSet\n        val grid19 = grid.map(_.toList).map(_.toSet).toSet\n\
    \        val grid20 = grid.map(_.toList).map(_.toSet).toSet\n        val grid21\
    \ = grid.map(_.toList).map(_.toSet).toSet\n        val grid22 = grid.map(_.toList).map(_.toSet).toSet\n\
    \        val grid23 = grid.map(_.toList).map(_.toSet).toSet\n        val grid24\
    \ = grid.map(_.toList).map(_.toSet).toSet\n        val grid25 = grid.map(_.toList).map(_.toSet).toSet\n\
    \        val grid26 = grid.map(_.toList).map(_.toSet).toSet\n        val grid27\
    \ = grid.map(_.toList).map(_.toSet).toSet\n        val grid28 = grid.map(_.toList).map(_.toSet).toSet\n\
    \        val grid29 = grid.map(_.toList).map(_.toSet).toSet", "        val m =\
    \ grid.length\n        val n = grid(0).length\n        val grid = mutable.ArrayBuffer(grid.toList)\n\
    \        val visited = mutable.HashSet[Long]()\n        val queue = mutable.Queue[Long]()\n\
    \        val ans = mutable.ArrayBuffer.empty[Long]\n        val visitedList =\
    \ mutable.ArrayBuffer.empty[Long]\n        val queueList = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList2 = mutable.ArrayBuffer.empty[Long]\n        val queueList3\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList4 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList5 = mutable.ArrayBuffer.empty[Long]\n        val queueList6\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList7 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList8 = mutable.ArrayBuffer.empty[Long]\n        val queueList9\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList10 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList11 = mutable.ArrayBuffer.empty[Long]\n        val queueList12\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList13 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList14 = mutable.ArrayBuffer.empty[Long]\n        val queueList15\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList16 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList17 = mutable.ArrayBuffer.empty[Long]\n        val queueList18\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList19 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList20 = mutable.ArrayBuffer.empty[Long]\n        val queueList21\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList22 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList23 = mutable.ArrayBuffer.empty[Long]\n        val queueList24\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList25 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList26 = mutable.ArrayBuffer.empty[Long]\n        val queueList27\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList28 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList29 = mutable.ArrayBuffer.empty[Long]\n        val queueList30\
    \ = mutable.ArrayBuffer.empty[Long]\n", "        val n = grid.size\n        val\
    \ m = grid(0).size\n        val result = new Array[Long](k)\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        var min = 0\n        var minIndex\
    \ = 0\n        var minValue = 0\n        var minPath = 0\n        var isPath =\
    \ 0\n        var isPath2 = 0\n        var isPath3 = 0\n        var isPath4 = 0\n\
    \        var isPath5 = 0\n        var isPath6 = 0\n        var isPath7 = 0\n \
    \       var isPath8 = 0\n        var isPath9 = 0\n        var isPath10 = 0\n \
    \       var isPath11 = 0\n        var isPath12 = 0\n        var isPath13 = 0\n\
    \        var isPath14 = 0\n        var isPath15 = 0\n        var isPath16 = 0\n\
    \        var isPath17 = 0\n        var isPath18 = 0\n        var isPath19 = 0\n\
    \        var isPath20 = 0\n        var isPath21 = 0\n        var isPath22 = 0\n\
    \        var isPath23 = 0\n        var isPath24 = 0\n        var isPath25 = 0\n\
    \        var isPath26 = 0\n        var isPath27 = 0\n        var isPath28 = 0\n\
    \        var isPath29 = 0\n        var isPath30 = 0\n        var isPath31 = 0\n\
    \        var isPath32 = 0\n        var isPath33 = 0\n        var isPath34 = 0\n\
    \        var isPath35 = 0\n        var isPath36 = 0\n        var isPath37 = 0\n\
    \        var isPath38 = 0\n        var isPath39 = 0\n        var isPath40 = 0\n\
    \        var isPath41 = 0\n        var isPath42 = 0\n        var isPath43 = 0\n\
    \        var isPath44 = 0\n        var isPath45 = 0\n        var isPath46 = 0\n\
    \        var isPath47 = 0\n        var isPath48 = 0\n        var isPath49 = 0\n\
    \        var isPath50 = 0\n        var isPath51 = 0\n        var isPath52 = 0\n\
    \        var isPath53 = 0\n        var isPath54 = 0\n        var isPath55 = 0\n\
    \        var isPath56 = 0\n        var isPath57 = 0\n        var isPath58 = 0\n\
    \        var isPath59 = 0\n        var isPath60 = 0\n        var isPath61 = 0\n\
    \        var isPath62 = 0\n        var isPath63 = 0\n        var isPath64 = 0\n\
    \        var isPath65 = 0\n        var isPath66 = 0\n        var isPath67 = 0\n\
    \        var isPath68 = 0\n        var isPath69 = 0\n        var isPath70 = 0\n\
    \        var isPath71 = 0\n        var isPath72 = 0\n        var isPath73 = 0\n\
    \        var isPath74 = 0\n        var isPath75 = 0\n        var isPath76 = 0\n\
    \        var isPath77", "        val m = grid.size\n        val n = grid(0).size\n\
    \        val lst_A = grid.map(_.toList).sortBy(_.toLong).map(_.toLong).toList\n\
    \        val lst_B = grid.map(_.toList).sortBy(_.toLong).reverse.map(_.toLong).toList\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_D\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_E = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_F = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_G = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_H\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_I = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_J = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_K = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_L\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_M = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_N = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_O = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_P\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_Q = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_R = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_S = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_T\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_U = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_", "        val n = grid.length\n        val\
    \ m = grid(0).length\n        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n\
    \        for (i <- 0 until n) {\n            grid += grid0(i)\n        }\n   \
    \     val visited = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited0\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited1 = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited2 = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited3\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited4 = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited5 = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited6\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited7 = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited8 = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited9\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited10 = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited11 = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited12\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited13 = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited14 = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited15\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited16 = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited17 = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited18\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited19 = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited20 = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited21\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited22 = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited23 = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited24\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited25 = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited26 = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited27\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited28 = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited29 = ", "        val grid = grid.toSet\n        val visited\
    \ = new mutable.HashSet[Long]()\n        val visited2 = new mutable.HashSet[Long]()\n\
    \        val visited3 = new mutable.HashSet[Long]()\n        val visited4 = new\
    \ mutable.HashSet[Long]()\n        val visited5 = new mutable.HashSet[Long]()\n\
    \        val visited6 = new mutable.HashSet[Long]()\n        val visited7 = new\
    \ mutable.HashSet[Long]()\n        val visited8 = new mutable.HashSet[Long]()\n\
    \        val visited9 = new mutable.HashSet[Long]()\n        val visited10 = new\
    \ mutable.HashSet[Long]()\n        val visited11 = new mutable.HashSet[Long]()\n\
    \        val visited12 = new mutable.HashSet[Long]()\n        val visited13 =\
    \ new mutable.HashSet[Long]()\n        val visited14 = new mutable.HashSet[Long]()\n\
    \        val visited15 = new mutable.HashSet[Long]()\n        val visited16 =\
    \ new mutable.HashSet[Long]()\n        val visited17 = new mutable.HashSet[Long]()\n\
    \        val visited18 = new mutable.HashSet[Long]()\n        val visited19 =\
    \ new mutable.HashSet[Long]()\n        val visited20 = new mutable.HashSet[Long]()\n\
    \        val visited21 = new mutable.HashSet[Long]()\n        val visited22 =\
    \ new mutable.HashSet[Long]()\n        val visited23 = new mutable.HashSet[Long]()\n\
    \        val visited24 = new mutable.HashSet[Long]()\n        val visited25 =\
    \ new mutable.HashSet[Long]()\n        val visited26 = new mutable.HashSet[Long]()\n\
    \        val visited27 = new mutable.HashSet[Long]()\n        val visited28 =\
    \ new mutable.HashSet[Long]()\n        val visited29 = new mutable.HashSet[Long]()\n\
    \        val visited30 = new mutable.HashSet[Long]()\n        val visited31 =\
    \ new mutable.HashSet[Long]()\n        val visited32 = new mutable.HashSet[Long]()\n\
    \        val visited33 = new mutable.HashSet[Long]()\n        val visited34 =\
    \ new mutable.HashSet[Long]()\n        ", "        val m = grid.length\n     \
    \   val n = grid(0).length\n        val grid = grid.toList\n        val visited\
    \ = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n        val stack\
    \ = mutable.Stack[Long]()\n        val stack2 = mutable.Stack[Long]()\n      \
    \  val stack3 = mutable.Stack[Long]()\n        val stack4 = mutable.Stack[Long]()\n\
    \        val stack5 = mutable.Stack[Long]()\n        val stack6 = mutable.Stack[Long]()\n\
    \        val stack7 = mutable.Stack[Long]()\n        val stack8 = mutable.Stack[Long]()\n\
    \        val stack9 = mutable.Stack[Long]()\n        val stack10 = mutable.Stack[Long]()\n\
    \        val stack11 = mutable.Stack[Long]()\n        val stack12 = mutable.Stack[Long]()\n\
    \        val stack13 = mutable.Stack[Long]()\n        val stack14 = mutable.Stack[Long]()\n\
    \        val stack15 = mutable.Stack[Long]()\n        val stack16 = mutable.Stack[Long]()\n\
    \        val stack17 = mutable.Stack[Long]()\n        val stack18 = mutable.Stack[Long]()\n\
    \        val stack19 = mutable.Stack[Long]()\n        val stack20 = mutable.Stack[Long]()\n\
    \        val stack21 = mutable.Stack[Long]()\n        val stack22 = mutable.Stack[Long]()\n\
    \        val stack23 = mutable.Stack[Long]()\n        val stack24 = mutable.Stack[Long]()\n\
    \        val stack25 = mutable.Stack[Long]()\n        val stack26 = mutable.Stack[Long]()\n\
    \        val stack27 = mutable.Stack[Long]()\n        val stack28 = mutable.Stack[Long]()\n\
    \        val stack29 = mutable.Stack[Long]()\n        val stack30 = mutable.Stack[Long]()\n\
    \        val stack31 = mutable.Stack[Long]()\n        val stack32 = mutable.Stack[Long]()\n\
    \        val stack33 = mutable.Stack[Long]()\n        val stack34 = mutable.Stack[Long]()\n\
    \        val stack35 = mutable.Stack[Long]()\n        val stack36 = mutable.Stack[Long]()\n\
    \        val stack37 = mutable.Stack[Long]()\n", "        val m = grid.size\n\
    \        val n = grid(0).size\n        val m = grid.size\n        val n = grid(0).size\n\
    \        val grid = grid.toList\n        val grid2 = grid.map(_.toList)\n    \
    \    val grid3 = grid2.map(_.toList)\n        val grid4 = grid3.map(_.toList)\n\
    \        val grid5 = grid4.map(_.toList)\n        val grid6 = grid5.map(_.toList)\n\
    \        val grid7 = grid6.map(_.toList)\n        val grid8 = grid7.map(_.toList)\n\
    \        val grid9 = grid8.map(_.toList)\n        val grid10 = grid9.map(_.toList)\n\
    \        val grid11 = grid10.map(_.toList)\n        val grid12 = grid11.map(_.toList)\n\
    \        val grid13 = grid12.map(_.toList)\n        val grid14 = grid13.map(_.toList)\n\
    \        val grid15 = grid14.map(_.toList)\n        val grid16 = grid15.map(_.toList)\n\
    \        val grid17 = grid16.map(_.toList)\n        val grid18 = grid17.map(_.toList)\n\
    \        val grid19 = grid18.map(_.toList)\n        val grid20 = grid19.map(_.toList)\n\
    \        val grid21 = grid20.map(_.toList)\n        val grid22 = grid21.map(_.toList)\n\
    \        val grid23 = grid22.map(_.toList)\n        val grid24 = grid23.map(_.toList)\n\
    \        val grid25 = grid24.map(_.toList)\n        val grid26 = grid25.map(_.toList)\n\
    \        val grid27 = grid26.map(_.toList)\n        val grid28 = grid27.map(_.toList)\n\
    \        val grid29 = grid28.map(_.toList)\n        val grid30 = grid29.map(_.toList)\n\
    \        val grid31 = grid30.map(_.toList)\n        val grid32 = grid31.map(_.toList)\n\
    \        val grid33 = grid32.map(_.toList)\n        val grid34 = grid33.map(_.toList)\n\
    \        val grid35 = grid34.map(_.toList)\n        val grid36 = grid35.map(_.toList)\n\
    \        val grid37 = grid36.map(_.toList)\n        val grid38 = grid37.map(_.toList)\n\
    \        val grid39 = grid38.map(_.toList)\n        val grid40 = grid39.map(_.toList)\n\
    \        val grid41 = grid40.map(_.toList)\n        val grid42 = grid41.map(_.",
  "        val n = grid.length\n        val m = grid(0).length\n        val lst_A\
    \ = grid.map(_.toList).toList\n        val lst_B = grid.map(_.toList).toList\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var lst_A_size\
    \ = lst_A.size\n        var lst_B_size = lst_B.size\n        var lst_A_i = 0\n\
    \        var lst_A_j = 0\n        var lst_B_i = 0\n        var lst_B_j = 0\n \
    \       var lst_A_i_next = 0\n        var lst_A_j_next = 0\n        var lst_B_i_next\
    \ = 0\n        var lst_B_j_next = 0\n        var lst_A_i_next_next = 0\n     \
    \   var lst_A_j_next_next = 0\n        var lst_B_i_next_next = 0\n        var\
    \ lst_B_j_next_next = 0\n        var lst_A_i_next_next_next = 0\n        var lst_A_j_next_next_next\
    \ = 0\n        var lst_B_i_next_next_next = 0\n        var lst_B_j_next_next_next\
    \ = 0\n        var lst_A_i_next_next_next_next = 0\n        var lst_A_j_next_next_next_next\
    \ = 0\n        var lst_B_i_next_next_next_next = 0\n        var lst_B_j_next_next_next_next\
    \ = 0\n        var lst_A_i_next_next_next_next_next = 0\n        var lst_A_j_next_next_next_next_next\
    \ = 0\n        var lst_B_i_next_next_next_next_next = 0\n        var lst_B_j_next_next_next_next_next\
    \ = 0\n        var lst_A_i_next_next_next_next_next_next = 0\n        var lst_A_j_next_next_next_next_next_next\
    \ = 0\n        var lst_B_i_next_next_next_next_next = 0\n        var lst_B_j_next_next_next_next_next\
    \ = 0\n        var lst_A_i_next_next_next_next_next_next = 0\n        var lst_A_j_next_next_next_next_next_next\
    \ = 0\n        var lst_B_i_next_next_next_next_next = 0\n        var lst_B_j_next_next_next_next_next\
    \ = 0\n        var lst_A_i_next_next_next_next_next_next = 0\n        var lst_A_j_next_next_next_next_next_next\
    \ = 0\n        var lst_B_i_next_next_next_next_next_next = 0\n        var lst_B_j_next_next_next_next_next_next\
    \ = 0\n        var lst_A_i_next_next_next_next_next_next_next = 0\n        var\
    \ lst_A_j_next_next_next_next_next_next_next = 0\n        var lst_B_i_next_next_next_next_next_next\
    \ = 0\n        var lst_B_j_next_next_next_next_next_next = 0\n        var lst_A_i_next_next_next_next_next_",
  "        val N = grid.size\n        val m = grid.head\n        val n = grid.last\n\
    \        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_D\
    \ = lst_C.map(x => (x._1, x._2))\n        val lst_E = lst_D.map(x => (x._1, x._2))\n\
    \        val lst_F = lst_E.map(x => (x._1, x._2))\n        val lst_G = lst_F.map(x\
    \ => (x._1, x._2))\n        val lst_H = lst_G.map(x => (x._1, x._2))\n       \
    \ val lst_I = lst_H.map(x => (x._1, x._2))\n        val lst_J = lst_I.map(x =>\
    \ (x._1, x._2))\n        val lst_K = lst_J.map(x => (x._1, x._2))\n        val\
    \ lst_L = lst_K.map(x => (x._1, x._2))\n        val lst_M = lst_L.map(x => (x._1,\
    \ x._2))\n        val lst_N = lst_M.map(x => (x._1, x._2))\n        val lst_O\
    \ = lst_N.map(x => (x._1, x._2))\n        val lst_P = lst_O.map(x => (x._1, x._2))\n\
    \        val lst_Q = lst_P.map(x => (x._1, x._2))\n        val lst_R = lst_Q.map(x\
    \ => (x._1, x._2))\n        val lst_S = lst_R.map(x => (x._1, x._2))\n       \
    \ val lst_T = lst_S.map(x => (x._1, x._2))\n        val lst_U = lst_T.map(x =>\
    \ (x._1, x._2))\n        val lst_V = lst_U.map(x => (x._1, x._2))\n        val\
    \ lst_W = lst_V.map(x => (x._1, x._2))\n        val lst_X = lst_W.map(x => (x._1,\
    \ x._2))\n        val lst_Y = lst_X.map(x => (x._1, x._2))\n        val lst_Z\
    \ = lst_Y.map(x => (x._1, x._2))\n        val lst_A = lst_Z.map(x => (x._1, x._2))\n\
    \        ", "        val N = grid.length\n        val M = grid(0).length\n   \
    \     val grid = grid.toList\n        val grid = grid.sortWith(_.compareTo(_)\
    \ < 0)\n        val grid = grid.sortWith(_.compareTo(_) < 0)\n        val grid\
    \ = grid.sortWith(_.compareTo(_) < 0)\n        val grid = grid.sortWith(_.compareTo(_)\
    \ < 0)\n        val grid = grid.sortWith(_.compareTo(_) < 0)\n        val grid\
    \ = grid.sortWith(_.compareTo(_) < 0)\n        val grid = grid.sortWith(_.compareTo(_)\
    \ < 0)\n        val grid = grid.sortWith(_.compareTo(_) < 0)\n        val grid\
    \ = grid.sortWith(_.compareTo(_) < 0)\n        val grid = grid.sortWith(_.compareTo(_)\
    \ < 0)\n        val grid = grid.sortWith(_.compareTo(_) < 0)\n        val grid\
    \ = grid.sortWith(_.compareTo(_) < 0)\n        val grid = grid.sortWith(_.compareTo(_)\
    \ < 0)\n        val grid = grid.sortWith(_.compareTo(_) < 0)\n        val grid\
    \ = grid.sortWith(_.compareTo(_) < 0)\n        val grid = grid.sortWith(_.compareTo(_)\
    \ < 0)\n        val grid = grid.sortWith(_.compareTo(_) < 0)\n        val grid\
    \ = grid.sortWith(_.compareTo(_) < 0)\n        val grid = grid.sortWith(_.compareTo(_)\
    \ < 0)\n        val grid = grid.sortWith(_.compareTo(_) < 0)\n        val grid\
    \ = grid.sortWith(_.compareTo(_) < 0)\n        val grid = grid.sortWith(_.compareTo(_)\
    \ < 0)\n        val grid = grid.sortWith(_.compareTo(_) < 0)\n        val grid\
    \ = grid.sortWith(_.compareTo(_) < 0)\n        val grid = grid.sortWith(_.compareTo(_)\
    \ < 0)\n        val grid = grid.sortWith(_.compareTo(_) < 0)\n        val grid\
    \ = grid.sortWith(_.compareTo(_) < 0)\n        val grid = grid.sortWith(_.compareTo(_)\
    \ < 0)\n        val grid = grid.sortWith(_.compareTo(_) < 0)\n        val grid\
    \ = grid.sortWith(_.compareTo(_) < 0)\n        val grid = grid.sortWith(_.compareTo(_)\
    \ < 0)\n        val grid = grid.sortWith(_.compareTo(_) < 0)\n        val grid\
    \ = grid.sortWith(_.compareTo(_) < 0)\n        val grid = grid.sortWith(_.compareTo(_)\
    \ < 0)\n        val grid = grid.sortWith(_.compareTo(_) < 0)\n        val ", " \
    \       val n = grid.size\n        val m = grid(0).size\n        val lst_A = grid.map(_.toList).flatten\n\
    \        val lst_B = grid.map(_.toList).flatten.reverse\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_D = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_E = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_F\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_G = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_H = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_I = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_J\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_K = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_L = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_M = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_N\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_O = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_P = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_Q = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_R\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_S = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_T = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_U = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_V\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val l", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val grid = grid.toList\n        val grid\
    \ = grid.sortWith((x, y) => x._1 < y._1)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)\n\
    \        val grid = grid.map(_.reverse)\n        val grid = grid.map(_.reverse)",
  "        val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        var min = 0\n        var max = 0\n        var\
    \ i = 1\n        var j = 1\n        var k = 1\n        var count = 0\n       \
    \ var flag = 0\n        var temp = 0\n        var temp1 = 0\n        var temp2\
    \ = 0\n        var temp3 = 0\n        var temp4 = 0\n        var temp5 = 0\n \
    \       var temp6 = 0\n        var temp7 = 0\n        var temp8 = 0\n        var\
    \ temp9 = 0\n        var temp10 = 0\n        var temp11 = 0\n        var temp12\
    \ = 0\n        var temp13 = 0\n        var temp14 = 0\n        var temp15 = 0\n\
    \        var temp16 = 0\n        var temp17 = 0\n        var temp18 = 0\n    \
    \    var temp19 = 0\n        var temp20 = 0\n        var temp21 = 0\n        var\
    \ temp22 = 0\n        var temp23 = 0\n        var temp24 = 0\n        var temp25\
    \ = 0\n        var temp26 = 0\n        var temp27 = 0\n        var temp28 = 0\n\
    \        var temp29 = 0\n        var temp30 = 0\n        var temp31 = 0\n    \
    \    var temp32 = 0\n        var temp33 = 0\n        var temp34 = 0\n        var\
    \ temp35 = 0\n        var temp36 = 0\n        var temp37 = 0\n        var temp38\
    \ = 0\n        var temp39 = 0\n        var temp40 = 0\n        var temp41 = 0\n\
    \        var temp42 = 0\n        var temp43 = 0\n        var temp44 = 0\n    \
    \    var temp45 = 0\n        var temp46 = 0\n        var temp47 = 0\n        var\
    \ temp48 = 0\n        var temp49 = 0\n        var temp50 = 0\n        var temp51\
    \ = 0\n        var temp52 = 0\n        var temp53 = 0\n        var temp54 = 0\n\
    \        var temp55 = 0\n        var temp56 = 0\n        var temp57 = 0\n    \
    \    var temp58 = 0\n        var temp59 = 0\n        var temp60 = 0\n        var\
    \ temp61 = 0\n        var temp62 = 0\n        var temp63 = 0\n        var temp64\
    \ = 0\n        var temp65 = 0\n        var temp66 = 0\n        var temp67 = 0\n\
    \        var temp68 = 0\n        var temp69 = 0\n        var temp70 = 0\n    \
    \    var temp71 = 0\n        var temp72 = 0\n        var temp73 = 0\n        var\
    \ temp74 = 0\n        var temp75 = 0\n        var temp76 = 0\n        var temp77\
    \ = 0\n        var temp78 = 0\n        var temp79 = 0\n        var temp80 = 0\n\
    \        var temp81 = 0\n        var temp82 = 0\n        var temp83 = 0\n    \
    \    var temp84 = 0\n        var temp85 = 0\n        var temp86 = 0\n        var\
    \ temp87 = 0\n        var temp88 = 0\n        var temp89 = 0\n        var temp90\
    \ = 0\n        var temp91 = 0\n        var temp92", "        val grid = grid.toList\n\
    \        val n = grid.size\n        val m = grid(0).size\n        val visited\
    \ = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n        val lst_A\
    \ = List[Long]()\n        val lst_B = List[Long]()\n        val lst_C = List[Long]()\n\
    \        val lst_D = List[Long]()\n        val lst_E = List[Long]()\n        val\
    \ lst_F = List[Long]()\n        val lst_G = List[Long]()\n        val lst_H =\
    \ List[Long]()\n        val lst_I = List[Long]()\n        val lst_J = List[Long]()\n\
    \        val lst_K = List[Long]()\n        val lst_L = List[Long]()\n        val\
    \ lst_M = List[Long]()\n        val lst_N = List[Long]()\n        val lst_O =\
    \ List[Long]()\n        val lst_P = List[Long]()\n        val lst_Q = List[Long]()\n\
    \        val lst_R = List[Long]()\n        val lst_S = List[Long]()\n        val\
    \ lst_T = List[Long]()\n        val lst_U = List[Long]()\n        val lst_V =\
    \ List[Long]()\n        val lst_W = List[Long]()\n        val lst_X = List[Long]()\n\
    \        val lst_Y = List[Long]()\n        val lst_Z = List[Long]()\n        val\
    \ lst_A = List[Long]()\n        val lst_B = List[Long]()\n        val lst_C =\
    \ List[Long]()\n        val lst_D = List[Long]()\n        val lst_E = List[Long]()\n\
    \        val lst_F = List[Long]()\n        val lst_G = List[Long]()\n        val\
    \ lst_H = List[Long]()\n        val lst_I = List[Long]()\n        val lst_J =\
    \ List[Long]()\n        val lst_K = List[Long]()\n        val lst_L = List[Long]()\n\
    \        val lst_M = List[Long]()\n        val lst_N = List[Long]()\n        val\
    \ lst_O = List[Long]()\n        val lst_P = List[Long]()\n        val lst_Q =\
    \ List[Long]()\n        val lst_R = List[Long]()\n        val lst_S = List[Long]()\n\
    \        val ", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val grid = mutable.ArrayBuffer(grid.toSeq)\n        val visited = mutable.HashSet[Long]()\n\
    \        val ans = mutable.ArrayBuffer.empty[Long]\n        val visitedList =\
    \ mutable.ArrayBuffer.empty[Long]\n        val visitedList2 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList3 = mutable.ArrayBuffer.empty[Long]\n        val visitedList4\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList5 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList6 = mutable.ArrayBuffer.empty[Long]\n        val visitedList7\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList8 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList9 = mutable.ArrayBuffer.empty[Long]\n        val visitedList10\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList11 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList12 = mutable.ArrayBuffer.empty[Long]\n        val visitedList13\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList14 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList15 = mutable.ArrayBuffer.empty[Long]\n        val visitedList16\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList17 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList18 = mutable.ArrayBuffer.empty[Long]\n        val visitedList19\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList20 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList21 = mutable.ArrayBuffer.empty[Long]\n        val visitedList22\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList23 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList24 = mutable.ArrayBuffer.empty[Long]\n        val visitedList25\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList26 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList27 = mutable.ArrayBuffer.empty[Long]\n        val visitedList28\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedList29 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList30 = mutable.Array", "        val n = grid.size\n    \
    \    val m = grid.head\n        val lst_A = grid.map(_.toList)\n        val lst_B\
    \ = grid.map(_.toList)\n        val lst_C = lst_A.map(_.toList)\n        val lst_D\
    \ = lst_A.map(_.toList)\n        val lst_E = lst_A.map(_.toList)\n        val\
    \ lst_F = lst_A.map(_.toList)\n        val lst_G = lst_A.map(_.toList)\n     \
    \   val lst_H = lst_A.map(_.toList)\n        val lst_I = lst_A.map(_.toList)\n\
    \        val lst_J = lst_A.map(_.toList)\n        val lst_K = lst_A.map(_.toList)\n\
    \        val lst_L = lst_A.map(_.toList)\n        val lst_M = lst_A.map(_.toList)\n\
    \        val lst_N = lst_A.map(_.toList)\n        val lst_O = lst_A.map(_.toList)\n\
    \        val lst_P = lst_A.map(_.toList)\n        val lst_Q = lst_A.map(_.toList)\n\
    \        val lst_R = lst_A.map(_.toList)\n        val lst_S = lst_A.map(_.toList)\n\
    \        val lst_T = lst_A.map(_.toList)\n        val lst_U = lst_A.map(_.toList)\n\
    \        val lst_V = lst_A.map(_.toList)\n        val lst_W = lst_A.map(_.toList)\n\
    \        val lst_X = lst_A.map(_.toList)\n        val lst_Y = lst_A.map(_.toList)\n\
    \        val lst_Z = lst_A.map(_.toList)\n        val lst_A = lst_A.map(_.toList)\n\
    \        val lst_B = lst_A.map(_.toList)\n        val lst_C = lst_A.map(_.toList)\n\
    \        val lst_D = lst_A.map(_.toList)\n        val lst_E = lst_A.map(_.toList)\n\
    \        val lst_F = lst_A.map(_.toList)\n        val lst_G = lst_A.map(_.toList)\n\
    \        val lst_H = lst_A.map(_.toList)\n        val lst_I = lst_A.map(_.toList)\n\
    \        val lst_J = lst_A.map(_.toList)\n        val lst_K = lst_A.map(_.toList)\n\
    \        val lst_L = lst_A.map(", "        val m = grid.size\n        val n =\
    \ grid.head.size\n        val lst_A = grid.map(_.toList).flatten\n        val\
    \ lst_B = grid.map(_.toList).flatten.reverse\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => if (x._1 < x._2) x._1 else x._2).distinct\n        val lst_D = lst_C.map(x\
    \ => if (x == k) k else x).distinct\n        val lst_E = lst_D.map(x => if (x\
    \ == k) k else x).distinct\n        val lst_F = lst_E.map(x => if (x == k) k else\
    \ x).distinct\n        val lst_G = lst_F.map(x => if (x == k) k else x).distinct\n\
    \        val lst_H = lst_G.map(x => if (x == k) k else x).distinct\n        val\
    \ lst_I = lst_H.map(x => if (x == k) k else x).distinct\n        val lst_J = lst_I.map(x\
    \ => if (x == k) k else x).distinct\n        val lst_K = lst_J.map(x => if (x\
    \ == k) k else x).distinct\n        val lst_L = lst_K.map(x => if (x == k) k else\
    \ x).distinct\n        val lst_M = lst_L.map(x => if (x == k) k else x).distinct\n\
    \        val lst_N = lst_M.map(x => if (x == k) k else x).distinct\n        val\
    \ lst_O = lst_N.map(x => if (x == k) k else x).distinct\n        val lst_P = lst_O.map(x\
    \ => if (x == k) k else x).distinct\n        val lst_Q = lst_P.map(x => if (x\
    \ == k) k else x).distinct\n        val lst_R = lst_Q.map(x => if (x == k) k else\
    \ x).distinct\n        val lst_S = lst_R.map(x => if (x == k) k else x).distinct\n\
    \        val lst_T = lst_S.map(x => if (x == k) k else x).distinct\n        val\
    \ lst_U = lst_T.map(x => if (x == k) k else x).distinct\n        val lst_V = lst_U.map(x\
    \ => if (x == k) k else x).distinct\n        val lst_W = lst_V.map(x => if (x\
    \ == k) k else x).distinct\n        val lst_X = lst_W.map(x => if (x == k) k else\
    \ x).distinct\n        val lst_Y = lst_X.map(", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val result = new Array[Long](k)\n   \
    \     val visited = new Array[Boolean](k)\n        val lst_A = new Array[Long](k)\n\
    \        val lst_B = new Array[Long](k)\n        val lst_C = new Array[Long](k)\n\
    \        val lst_D = new Array[Long](k)\n        val lst_E = new Array[Long](k)\n\
    \        val lst_F = new Array[Long](k)\n        val lst_G = new Array[Long](k)\n\
    \        val lst_H = new Array[Long](k)\n        val lst_I = new Array[Long](k)\n\
    \        val lst_J = new Array[Long](k)\n        val lst_K = new Array[Long](k)\n\
    \        val lst_L = new Array[Long](k)\n        val lst_M = new Array[Long](k)\n\
    \        val lst_N = new Array[Long](k)\n        val lst_O = new Array[Long](k)\n\
    \        val lst_P = new Array[Long](k)\n        val lst_Q = new Array[Long](k)\n\
    \        val lst_R = new Array[Long](k)\n        val lst_S = new Array[Long](k)\n\
    \        val lst_T = new Array[Long](k)\n        val lst_U = new Array[Long](k)\n\
    \        val lst_V = new Array[Long](k)\n        val lst_W = new Array[Long](k)\n\
    \        val lst_X = new Array[Long](k)\n        val lst_Y = new Array[Long](k)\n\
    \        val lst_Z = new Array[Long](k)\n        val lst_AA = new Array[Long](k)\n\
    \        val lst_AB = new Array[Long](k)\n        val lst_AC = new Array[Long](k)\n\
    \        val lst_AD = new Array[Long](k)\n        val lst_AE = new Array[Long](k)\n\
    \        val lst_AF = new Array[Long](k)\n        val lst_AG = new Array[Long](k)\n\
    \        val lst_AH = new Array[Long](k)\n        val lst_AI = new Array[Long](k)\n\
    \        val lst_AJ = new Array[Long](k)\n        val lst_AK = new Array[Long](k)\n\
    \        val lst_AL = new Array[Long](k)\n        val lst_AM = new Array[Long](k)\n\
    \        val lst_AN = new Array[Long](", "        val N = grid.length\n      \
    \  val M = grid(0).length\n        val grid = grid.toList\n        val visited\
    \ = mutable.HashSet[Long]()\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedList = mutable.ArrayBuffer.empty[Long]\n        val visitedListIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n        val visitedListIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n        val visitedListIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n        val visitedListIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n        val visitedListIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n        val visitedListIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n        val visitedListIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n        val visitedListIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n        val visitedListIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n        val visitedListIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val visitedListIndex = mutable.ArrayBuffer.empty[Int]\n        val visite",
  "        val n = grid.size\n        val m = grid(0).size\n        val lst_A = grid.map(_.toList).flatten\n\
    \        val lst_B = grid.map(_.toList).flatten.reverse\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_D = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_E = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_F\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_G = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_H = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_I = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_J\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_K = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_L = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_M = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_N\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_O = lst_A.zip(lst_B).map(x\
    \ => x._2 < x._1)\n        val lst_P = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_Q = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_R\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_S = lst_A.zip(lst_B).map(x\
    \ => x._2 < x._1)\n        val lst_T = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_U = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_V\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val l", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val grid = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val visited = mutable.HashSet.empty[Long]\n        val queue = mutable.Queue.empty[Long]\n\
    \        val lst_A = mutable.ArrayBuffer.empty[Long]\n        val lst_B = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_C = mutable.ArrayBuffer.empty[Long]\n        val lst_D = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_E = mutable.ArrayBuffer.empty[Long]\n        val lst_F = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_G = mutable.ArrayBuffer.empty[Long]\n        val lst_H = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_I = mutable.ArrayBuffer.empty[Long]\n        val lst_J = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_K = mutable.ArrayBuffer.empty[Long]\n        val lst_L = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_M = mutable.ArrayBuffer.empty[Long]\n        val lst_N = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_O = mutable.ArrayBuffer.empty[Long]\n        val lst_P = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Q = mutable.ArrayBuffer.empty[Long]\n        val lst_R = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_S = mutable.ArrayBuffer.empty[Long]\n        val lst_T = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_U = mutable.ArrayBuffer.empty[Long]\n        val lst_V = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_W = mutable.ArrayBuffer.empty[Long]\n        val lst_X = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Y = mutable.ArrayBuffer.empty[Long]\n        val lst_Z = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_A = mutable.ArrayBuffer.empty[Long]\n        val lst_B = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_C = mutable.ArrayBuffer.empty[Long]\n        val lst_D = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_E = mutable.ArrayBuffer.empty[Long]\n        val lst_F = mutable.ArrayBuffer.empty[Long]\n\
    \        val l", "        val m = grid.size\n        val n = grid.head.size\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val visited = new\
    \ mutable.HashSet[Long]()\n        val visitedCount = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCountMap = new mutable.HashMap[Long, Int]()\n   \
    \     val visitedCountMap2 = new mutable.HashMap[Long, Int]()\n        val visitedCountMap3\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCountMap4 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCountMap5 = new mutable.HashMap[Long, Int]()\n  \
    \      val visitedCountMap6 = new mutable.HashMap[Long, Int]()\n        val visitedCountMap7\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCountMap8 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCountMap9 = new mutable.HashMap[Long, Int]()\n  \
    \      val visitedCountMap10 = new mutable.HashMap[Long, Int]()\n        val visitedCountMap11\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCountMap12 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCountMap13 = new mutable.HashMap[Long, Int]()\n \
    \       val visitedCountMap14 = new mutable.HashMap[Long, Int]()\n        val\
    \ visitedCountMap15 = new mutable.HashMap[Long, Int]()\n        val visitedCountMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCountMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCountMap18 = new mutable.HashMap[Long, Int]()\n \
    \       val visitedCountMap19 = new mutable.HashMap[Long, Int]()\n        val\
    \ visitedCountMap20 = new mutable.HashMap[Long, Int]()\n        val visitedCountMap21\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCountMap22 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCountMap23 = new mutable.HashMap[Long, Int]()\n \
    \       val visitedCountMap24 = new mutable.HashMap[Long, Int]()\n        val\
    \ visitedCountMap25 = new mutable.HashMap[Long, Int]()\n        val visitedCountMap",
  "        val m = grid.length\n        val n = grid(0).length\n        val grid =\
    \ grid.toList\n        val visited = new mutable.HashSet[Long]\n        val ans\
    \ = List[Long]()\n        val lst_A = List[Long]()\n        val lst_B = List[Long]()\n\
    \        val lst_C = List[Long]()\n        val lst_D = List[Long]()\n        val\
    \ lst_E = List[Long]()\n        val lst_F = List[Long]()\n        val lst_G =\
    \ List[Long]()\n        val lst_H = List[Long]()\n        val lst_I = List[Long]()\n\
    \        val lst_J = List[Long]()\n        val lst_K = List[Long]()\n        val\
    \ lst_L = List[Long]()\n        val lst_M = List[Long]()\n        val lst_N =\
    \ List[Long]()\n        val lst_O = List[Long]()\n        val lst_P = List[Long]()\n\
    \        val lst_Q = List[Long]()\n        val lst_R = List[Long]()\n        val\
    \ lst_S = List[Long]()\n        val lst_T = List[Long]()\n        val lst_U =\
    \ List[Long]()\n        val lst_V = List[Long]()\n        val lst_W = List[Long]()\n\
    \        val lst_X = List[Long]()\n        val lst_Y = List[Long]()\n        val\
    \ lst_Z = List[Long]()\n        val lst_A = List[Long]()\n        val lst_B =\
    \ List[Long]()\n        val lst_C = List[Long]()\n        val lst_D = List[Long]()\n\
    \        val lst_E = List[Long]()\n        val lst_F = List[Long]()\n        val\
    \ lst_G = List[Long]()\n        val lst_H = List[Long]()\n        val lst_I =\
    \ List[Long]()\n        val lst_J = List[Long]()\n        val lst_K = List[Long]()\n\
    \        val lst_L = List[Long]()\n        val lst_M = List[Long]()\n        val\
    \ lst_N = List[Long]()\n        val lst_O = List[Long]()\n        val lst_P =\
    \ List[Long]()\n        val lst_Q = List[Long]()\n        val lst_R = List[Long]()\n\
    \        val lst_S = List[Long]()\n        val l", "        val n = grid.length\n\
    \        val m = grid(0).length\n        val result = new Array[Long](k)\n   \
    \     val visited = new Array[Boolean](k)\n        val stack = new Array[Long](k)\n\
    \        val stackIndex = 0\n        val stackSize = 0\n        val stackMax =\
    \ k - 1\n        val stackMaxIndex = k - 1\n        val stackMin = k\n       \
    \ val stackMinIndex = k\n        val stackMaxValue = grid[stackMaxIndex].toLong\n\
    \        val stackMinValue = grid[stackMinIndex].toLong\n        val stackMaxIndex2\
    \ = stackMaxIndex - 1\n        val stackMinIndex2 = stackMinIndex - 1\n      \
    \  val stackMaxValue2 = grid[stackMaxIndex2].toLong\n        val stackMinValue2\
    \ = grid[stackMinIndex2].toLong\n        val stackMaxIndex3 = stackMaxIndex -\
    \ 2\n        val stackMinIndex3 = stackMinIndex - 2\n        val stackMaxValue3\
    \ = grid[stackMaxIndex3].toLong\n        val stackMinValue3 = grid[stackMinIndex3].toLong\n\
    \        val stackMaxIndex4 = stackMaxIndex - 3\n        val stackMinIndex4 =\
    \ stackMinIndex - 3\n        val stackMaxValue4 = grid[stackMaxIndex4].toLong\n\
    \        val stackMinValue4 = grid[stackMinIndex4].toLong\n        val stackMaxIndex5\
    \ = stackMaxIndex - 4\n        val stackMinIndex5 = stackMinIndex - 4\n      \
    \  val stackMaxValue5 = grid[stackMaxIndex5].toLong\n        val stackMinValue5\
    \ = grid[stackMinIndex5].toLong\n        val stackMaxIndex6 = stackMaxIndex -\
    \ 5\n        val stackMinIndex6 = stackMinIndex - 5\n        val stackMaxValue6\
    \ = grid[stackMaxIndex6].toLong\n        val stackMinValue6 = grid[stackMinIndex6].toLong\n\
    \        val stackMaxIndex7 = stackMaxIndex - 6\n        val stackMinIndex7 =\
    \ stackMinIndex - 6\n        val stackMaxValue7 = grid[stackMaxIndex7].toLong\n\
    \        val stackMinValue7 = grid[stackMinIndex7].toLong\n        val stackMaxIndex8\
    \ = stackMaxIndex - 7\n        val stackMinIndex8 = stackMinIndex - 7\n      \
    \  val stackMaxValue8 = grid[stackMaxIndex8].toLong\n        val stackMinValue8\
    \ = grid[stackMinIndex8].toLong\n        val stackMaxIndex9 = stackMaxIndex - ",
  "        val m = grid.length\n        val n = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        val\
    \ visited_ind = new Array[Int](k)\n        val visited_ind_ind = new Array[Int](k)\n\
    \        val visited_ind_ind_ind = new Array[Int](k)\n        val visited_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind = new Array[Int](k)\n\
    \        val visited_ind_ind_ind_ind_ind_ind = new Array[Int](k)\n        val\
    \ visited_ind_ind_ind_ind_ind_ind_ind = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[", "        val n = grid.size\n        val m = grid(0).size\n  \
    \      val visited = new mutable.HashSet[Long]()\n        val path = new mutable.ListBuffer[Long]()\n\
    \        val visitedPath = new mutable.HashSet[Long]()\n        val visitedPath2\
    \ = new mutable.HashSet[Long]()\n        val visitedPath3 = new mutable.HashSet[Long]()\n\
    \        val visitedPath4 = new mutable.HashSet[Long]()\n        val visitedPath5\
    \ = new mutable.HashSet[Long]()\n        val visitedPath6 = new mutable.HashSet[Long]()\n\
    \        val visitedPath7 = new mutable.HashSet[Long]()\n        val visitedPath8\
    \ = new mutable.HashSet[Long]()\n        val visitedPath9 = new mutable.HashSet[Long]()\n\
    \        val visitedPath10 = new mutable.HashSet[Long]()\n        val visitedPath11\
    \ = new mutable.HashSet[Long]()\n        val visitedPath12 = new mutable.HashSet[Long]()\n\
    \        val visitedPath13 = new mutable.HashSet[Long]()\n        val visitedPath14\
    \ = new mutable.HashSet[Long]()\n        val visitedPath15 = new mutable.HashSet[Long]()\n\
    \        val visitedPath16 = new mutable.HashSet[Long]()\n        val visitedPath17\
    \ = new mutable.HashSet[Long]()\n        val visitedPath18 = new mutable.HashSet[Long]()\n\
    \        val visitedPath19 = new mutable.HashSet[Long]()\n        val visitedPath20\
    \ = new mutable.HashSet[Long]()\n        val visitedPath21 = new mutable.HashSet[Long]()\n\
    \        val visitedPath22 = new mutable.HashSet[Long]()\n        val visitedPath23\
    \ = new mutable.HashSet[Long]()\n        val visitedPath24 = new mutable.HashSet[Long]()\n\
    \        val visitedPath25 = new mutable.HashSet[Long]()\n        val visitedPath26\
    \ = new mutable.HashSet[Long]()\n        val visitedPath27 = new mutable.HashSet[Long]()\n\
    \        val visitedPath28 = new mutable.HashSet[Long]()\n        val visitedPath29\
    \ = new mutable.HashSet[Long]()\n        val visitedPath30 = new mut", "     \
    \   val n = grid.length\n        val m = grid(0).length\n        val result =\
    \ new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        var\
    \ minPath = 0\n        var minPathIndex = 0\n        var minPathValue = grid(0).head\n\
    \        var currentCell = 0\n        var currentCellIndex = 0\n        var currentCellValue\
    \ = grid(0).head\n        var currentCellValueIndex = 0\n        var currentCellValueIndex2\
    \ = 0\n        var currentCellValueIndex3 = 0\n        var currentCellValueIndex4\
    \ = 0\n        var currentCellValueIndex5 = 0\n        var currentCellValueIndex6\
    \ = 0\n        var currentCellValueIndex7 = 0\n        var currentCellValueIndex8\
    \ = 0\n        var currentCellValueIndex9 = 0\n        var currentCellValueIndex10\
    \ = 0\n        var currentCellValueIndex11 = 0\n        var currentCellValueIndex12\
    \ = 0\n        var currentCellValueIndex13 = 0\n        var currentCellValueIndex14\
    \ = 0\n        var currentCellValueIndex15 = 0\n        var currentCellValueIndex16\
    \ = 0\n        var currentCellValueIndex17 = 0\n        var currentCellValueIndex18\
    \ = 0\n        var currentCellValueIndex19 = 0\n        var currentCellValueIndex20\
    \ = 0\n        var currentCellValueIndex21 = 0\n        var currentCellValueIndex22\
    \ = 0\n        var currentCellValueIndex23 = 0\n        var currentCellValueIndex24\
    \ = 0\n        var currentCellValueIndex25 = 0\n        var currentCellValueIndex26\
    \ = 0\n        var currentCellValueIndex27 = 0\n        var currentCellValueIndex28\
    \ = 0\n        var currentCellValueIndex29 = 0\n        var currentCellValueIndex30\
    \ = 0\n        var currentCellValueIndex31 = 0\n        var currentCellValueIndex32\
    \ = 0\n        var currentCellValueIndex33 = 0\n        var currentCellValueIndex34\
    \ = 0\n        var currentCellValueIndex35 = 0\n        var currentCellValueIndex36\
    \ = 0\n        var currentCellValueIndex37 = 0\n        var currentCellValueIndex38\
    \ = 0\n        var currentCellValueIndex39 = 0\n        var currentCellValueIndex40\
    \ = 0\n        var currentCellValueIndex41 = 0\n        var currentCellValueIndex42\
    \ = 0\n        var currentCellValueIndex43 = 0\n        var currentCellValueIndex44\
    \ = 0\n        var currentCellValueIndex45 = 0\n        var currentCellValueIndex46\
    \ = 0\n        var currentCellValueIndex47 = 0\n        var currentCellValueIndex48\
    \ = 0\n        var currentCellValueIndex49 = 0\n        var currentCellValueIndex50\
    \ = 0\n        var currentCellValueIndex51 = 0\n        var currentCellValueIndex52\
    \ = 0\n        var currentCellValueIndex53 = 0\n        var currentCellValueIndex54\
    \ = 0\n        var currentCellValueIndex55 = 0\n        var ", "        val m\
    \ = grid.length\n        val n = grid(0).length\n        val result = new mutable.ListBuffer[Long]\n\
    \        val visited = new mutable.HashSet[Long]\n        val visitedList = new\
    \ mutable.ListBuffer[Long]\n        val visitedList2 = new mutable.ListBuffer[Long]\n\
    \        val visitedList3 = new mutable.ListBuffer[Long]\n        val visitedList4\
    \ = new mutable.ListBuffer[Long]\n        val visitedList5 = new mutable.ListBuffer[Long]\n\
    \        val visitedList6 = new mutable.ListBuffer[Long]\n        val visitedList7\
    \ = new mutable.ListBuffer[Long]\n        val visitedList8 = new mutable.ListBuffer[Long]\n\
    \        val visitedList9 = new mutable.ListBuffer[Long]\n        val visitedList10\
    \ = new mutable.ListBuffer[Long]\n        val visitedList11 = new mutable.ListBuffer[Long]\n\
    \        val visitedList12 = new mutable.ListBuffer[Long]\n        val visitedList13\
    \ = new mutable.ListBuffer[Long]\n        val visitedList14 = new mutable.ListBuffer[Long]\n\
    \        val visitedList15 = new mutable.ListBuffer[Long]\n        val visitedList16\
    \ = new mutable.ListBuffer[Long]\n        val visitedList17 = new mutable.ListBuffer[Long]\n\
    \        val visitedList18 = new mutable.ListBuffer[Long]\n        val visitedList19\
    \ = new mutable.ListBuffer[Long]\n        val visitedList20 = new mutable.ListBuffer[Long]\n\
    \        val visitedList21 = new mutable.ListBuffer[Long]\n        val visitedList22\
    \ = new mutable.ListBuffer[Long]\n        val visitedList23 = new mutable.ListBuffer[Long]\n\
    \        val visitedList24 = new mutable.ListBuffer[Long]\n        val visitedList25\
    \ = new mutable.ListBuffer[Long]\n        val visitedList26 = new mutable.ListBuffer[Long]\n\
    \        val visitedList27 = new mutable.ListBuffer[Long]\n        val visitedList28\
    \ = new mutable.ListBuffer[Long]\n        val visitedList29 = new mutable.ListBuffer[Long]\n\
    \        val visitedList30 = new mutable.ListBuffer[Long]\n        val visitedList31\
    \ = new mutable.ListBuffer[Long]\n        val visitedList32 = new mut", "    \
    \    val N = grid.length\n        val m = grid.head\n        val n = grid.last\n\
    \        val m = m.toLong\n        val n = n.toLong\n        val grid = grid.tail\n\
    \        val grid2 = grid.tail.tail\n        val grid3 = grid.tail.tail.tail\n\
    \        val grid4 = grid.tail.tail.tail.tail\n        val grid5 = grid.tail.tail.tail.tail.tail\n\
    \        val grid6 = grid.tail.tail.tail.tail.tail.tail\n        val grid7 = grid.tail.tail.tail.tail.tail.tail.tail\n\
    \        val grid8 = grid.tail.tail.tail.tail.tail.tail.tail.tail.tail\n     \
    \   val grid9 = grid.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val grid10 = grid.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val grid11 = grid.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val grid12 = grid.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val grid13 = grid.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail",
  "        val N = grid.size\n        val m = grid.head\n        val n = grid.last\n\
    \        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zipWithIndex.map(x => (x._2, x._1))\n        val lst_D\
    \ = lst_B.zipWithIndex.map(x => (x._2, x._1))\n        val lst_E = lst_C.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val lst_F = lst_D.zipWithIndex.map(x => (x._2, x._1))\n\
    \        val lst_G = lst_E.zipWithIndex.map(x => (x._2, x._1))\n        val lst_H\
    \ = lst_F.zipWithIndex.map(x => (x._2, x._1))\n        val lst_I = lst_G.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val lst_J = lst_H.zipWithIndex.map(x => (x._2, x._1))\n\
    \        val lst_K = lst_I.zipWithIndex.map(x => (x._2, x._1))\n        val lst_L\
    \ = lst_J.zipWithIndex.map(x => (x._2, x._1))\n        val lst_M = lst_K.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val lst_N = lst_L.zipWithIndex.map(x => (x._2, x._1))\n\
    \        val lst_O = lst_M.zipWithIndex.map(x => (x._2, x._1))\n        val lst_P\
    \ = lst_O.zipWithIndex.map(x => (x._2, x._1))\n        val lst_Q = lst_P.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val lst_R = lst_Q.zipWithIndex.map(x => (x._2, x._1))\n\
    \        val lst_S = lst_R.zipWithIndex.map(x => (x._2, x._1))\n        val lst_T\
    \ = lst_S.zipWithIndex.map(x => (x._2, x._1))\n        val lst_U = lst_T.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val lst_V = lst_U.zipWithIndex.map(x => (x._2, x._1))\n\
    \        val lst_W = lst_V.zipWithIndex.map(x => (x._2, ", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val visited = new mutable.HashSet[Long]()\n        val visitedList =\
    \ new mutable.ListBuffer[Long]()\n        val visitedList2 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList3 = new mutable.ListBuffer[Long]()\n        val visitedList4\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList5 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList6 = new mutable.ListBuffer[Long]()\n        val visitedList7\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList8 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList9 = new mutable.ListBuffer[Long]()\n        val visitedList10\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList11 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList12 = new mutable.ListBuffer[Long]()\n        val visitedList13\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList14 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList15 = new mutable.ListBuffer[Long]()\n        val visitedList16\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList17 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList18 = new mutable.ListBuffer[Long]()\n        val visitedList19\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList20 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList21 = new mutable.ListBuffer[Long]()\n        val visitedList22\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList23 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList24 = new mutable.ListBuffer[Long]()\n        val visitedList25\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList26 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList27 = new mutable.ListBuffer[Long]()\n        val visitedList28\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList29 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList30 = new mut", "        val m = grid.size\n        val\
    \ n = grid(0).size\n        val lst_A = new Array[Long](k)\n        val lst_B\
    \ = new Array[Long](k)\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        var minPath : List[Long] = Nil\n        while (i < m && j < n) {\n\
    \            if (grid(i).contains(grid(j))) {\n                lst_A(k) = grid(i).head\n\
    \                lst_B(k) = grid(j).head\n                k = k + 1\n        \
    \        i = i + 1\n                j = j + 1\n            } else if (grid(i).contains(grid(j)))\
    \ {\n                lst_A(k) = grid(i).head\n                lst_B(k) = grid(j).head\n\
    \                k = k + 1\n                i = i + 1\n            } else {\n\
    \                lst_A(k) = grid(j).head\n                lst_B(k) = grid(i).head\n\
    \                k = k + 1\n                j = j + 1\n            }\n       \
    \ }\n        if (k == k) {\n            minPath = lst_A\n        }\n        if\
    \ (k > k) {\n            minPath = lst_B\n        }\n        minPath", "     \
    \   val m = grid.length\n        val n = grid(0).length\n        val grid = mutable.ArrayBuffer(grid.map(_.toList))\n\
    \        val visited = mutable.ArrayBuffer(grid.map(_.toList))\n        val visitedCount\
    \ = mutable.ArrayBuffer(grid.map(_.toList))\n        val visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n\
    \        val visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n        val\
    \ visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n        val visitedCount\
    \ = mutable.ArrayBuffer(grid.map(_.toList))\n        val visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n\
    \        val visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n        val\
    \ visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n        val visitedCount\
    \ = mutable.ArrayBuffer(grid.map(_.toList))\n        val visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n\
    \        val visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n        val\
    \ visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n        val visitedCount\
    \ = mutable.ArrayBuffer(grid.map(_.toList))\n        val visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n\
    \        val visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n        val\
    \ visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n        val visitedCount\
    \ = mutable.ArrayBuffer(grid.map(_.toList))\n        val visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n\
    \        val visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n        val\
    \ visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n        val visitedCount\
    \ = mutable.ArrayBuffer(grid.map(_.toList))\n        val visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n\
    \        val visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n        val\
    \ visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n        val visitedCount\
    \ = mutable.ArrayBuffer(grid.map(_.toList))\n        val visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n\
    \        val visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n        val\
    \ visitedCount = mutable.ArrayBuffer(grid.map(_.toList))\n        val visitedCount\
    \ = mutable.ArrayBuffer(grid.map(_.toList))\n        val visitedCount = mut",
  "        val n = grid.length\n        val m = grid(0).length\n        val grid =\
    \ grid.toList\n        val visited = new mutable.HashSet[Long]\n        val ans\
    \ = List[Long]()\n        val visitedList = new mutable.ArrayList[Long]\n    \
    \    val visitedList2 = new mutable.ArrayList[Long]\n        val visitedList3\
    \ = new mutable.ArrayList[Long]\n        val visitedList4 = new mutable.ArrayList[Long]\n\
    \        val visitedList5 = new mutable.ArrayList[Long]\n        val visitedList6\
    \ = new mutable.ArrayList[Long]\n        val visitedList7 = new mutable.ArrayList[Long]\n\
    \        val visitedList8 = new mutable.ArrayList[Long]\n        val visitedList9\
    \ = new mutable.ArrayList[Long]\n        val visitedList10 = new mutable.ArrayList[Long]\n\
    \        val visitedList11 = new mutable.ArrayList[Long]\n        val visitedList12\
    \ = new mutable.ArrayList[Long]\n        val visitedList13 = new mutable.ArrayList[Long]\n\
    \        val visitedList14 = new mutable.ArrayList[Long]\n        val visitedList15\
    \ = new mutable.ArrayList[Long]\n        val visitedList16 = new mutable.ArrayList[Long]\n\
    \        val visitedList17 = new mutable.ArrayList[Long]\n        val visitedList18\
    \ = new mutable.ArrayList[Long]\n        val visitedList19 = new mutable.ArrayList[Long]\n\
    \        val visitedList20 = new mutable.ArrayList[Long]\n        val visitedList21\
    \ = new mutable.ArrayList[Long]\n        val visitedList22 = new mutable.ArrayList[Long]\n\
    \        val visitedList23 = new mutable.ArrayList[Long]\n        val visitedList24\
    \ = new mutable.ArrayList[Long]\n        val visitedList25 = new mutable.ArrayList[Long]\n\
    \        val visitedList26 = new mutable.ArrayList[Long]\n        val visitedList27\
    \ = new mutable.ArrayList[Long]\n        val visitedList28 = new mutable.ArrayList[Long]\n\
    \        val visitedList29 = new mutable.ArrayList[Long]\n        val visitedList30\
    \ = new mutable.ArrayList[Long]\n        val visitedList31 = new mutable.ArrayList[Long]\n\
    \        val visitedList32 = new mutable.ArrayList[Long]\n        val visitedList33\
    \ = new mutable.ArrayList[Long]\n        val visitedList34 = new ", "        val\
    \ grid = grid.toList\n        val n = grid.size\n        val m = grid.head.length\n\
    \        val visited = new mutable.HashSet[Long]\n        val ans = ListBuffer.empty[Long]\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedQueue = mutable.Queue[Long]()\n\
    \        val queueSize = mutable.Queue[Long]()\n        val queueSizeSize = mutable.Queue[Long]()\n\
    \        val queueSizeSize2 = mutable.Queue[Long]()\n        val queueSizeSize3\
    \ = mutable.Queue[Long]()\n        val queueSizeSize4 = mutable.Queue[Long]()\n\
    \        val queueSizeSize5 = mutable.Queue[Long]()\n        val queueSizeSize6\
    \ = mutable.Queue[Long]()\n        val queueSizeSize7 = mutable.Queue[Long]()\n\
    \        val queueSizeSize8 = mutable.Queue[Long]()\n        val queueSizeSize9\
    \ = mutable.Queue[Long]()\n        val queueSizeSize10 = mutable.Queue[Long]()\n\
    \        val queueSizeSize11 = mutable.Queue[Long]()\n        val queueSizeSize12\
    \ = mutable.Queue[Long]()\n        val queueSizeSize13 = mutable.Queue[Long]()\n\
    \        val queueSizeSize14 = mutable.Queue[Long]()\n        val queueSizeSize15\
    \ = mutable.Queue[Long]()\n        val queueSizeSize16 = mutable.Queue[Long]()\n\
    \        val queueSizeSize17 = mutable.Queue[Long]()\n        val queueSizeSize18\
    \ = mutable.Queue[Long]()\n        val queueSizeSize19 = mutable.Queue[Long]()\n\
    \        val queueSizeSize20 = mutable.Queue[Long]()\n        val queueSizeSize21\
    \ = mutable.Queue[Long]()\n        val queueSizeSize22 = mutable.Queue[Long]()\n\
    \        val queueSizeSize23 = mutable.Queue[Long]()\n        val queueSizeSize24\
    \ = mutable.Queue[Long]()\n        val queueSizeSize25 = mutable.Queue[Long]()\n\
    \        val queueSizeSize26 = mutable.Queue[Long]()\n        val queueSizeSize27\
    \ = mutable.Queue[Long]()\n        val queueSizeSize28 = mutable.Queue[Long]()\n\
    \        val queueSizeSize29 = mutable.Queue[Long]()\n        val queueSizeSize30\
    \ = mutable.", "        val grid = grid.toList\n        val N = grid.size\n  \
    \      val visited = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n\
    \        val lst_A = grid.map(_.toList).map(_.toLong)\n        val lst_B = grid.map(_.toList).map(_.toLong).reverse\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_D\
    \ = lst_C.zip(lst_A).map(x => x._1 < x._2)\n        val lst_E = lst_D.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_F = lst_E.zip(lst_A).map(x => x._1 < x._2)\n\
    \        val lst_G = lst_F.zip(lst_B).map(x => x._1 < x._2)\n        val lst_H\
    \ = lst_G.zip(lst_A).map(x => x._1 < x._2)\n        val lst_I = lst_H.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_J = lst_I.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_K = lst_J.zip(lst_A).map(x => x._1 < x._2)\n        val lst_L\
    \ = lst_K.zip(lst_B).map(x => x._1 < x._2)\n        val lst_M = lst_L.zip(lst_A).map(x\
    \ => x._1 < x._2)\n        val lst_N = lst_M.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_O = lst_N.zip(lst_A).map(x => x._1 < x._2)\n        val lst_P\
    \ = lst_O.zip(lst_B).map(x => x._1 < x._2)\n        val lst_Q = lst_P.zip(lst_A).map(x\
    \ => x._1 < x._2)\n        val lst_R = lst_Q.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_S = lst_R.zip(lst_A).map(x => x._1 < x._2)\n        val lst_T\
    \ = lst_S.zip(lst_B).map(x => x._1 < x._2)\n        val lst_U = lst_T.zip(lst_A).map(x\
    \ => x.", "        val m = grid.length\n        val n = grid(0).length\n     \
    \   val grid = mutable.ArrayBuffer(grid)\n        val visited = mutable.ArrayBuffer(0)\n\
    \        val visitedList = mutable.ArrayBuffer(0)\n        val visitedListSize\
    \ = mutable.ArrayBuffer(0)\n        val visitedListSize = mutable.ArrayBuffer(0)\n\
    \        val visitedListSize = mutable.ArrayBuffer(0)\n        val visitedListSize\
    \ = mutable.ArrayBuffer(0)\n        val visitedListSize = mutable.ArrayBuffer(0)\n\
    \        val visitedListSize = mutable.ArrayBuffer(0)\n        val visitedListSize\
    \ = mutable.ArrayBuffer(0)\n        val visitedListSize = mutable.ArrayBuffer(0)\n\
    \        val visitedListSize = mutable.ArrayBuffer(0)\n        val visitedListSize\
    \ = mutable.ArrayBuffer(0)\n        val visitedListSize = mutable.ArrayBuffer(0)\n\
    \        val visitedListSize = mutable.ArrayBuffer(0)\n        val visitedListSize\
    \ = mutable.ArrayBuffer(0)\n        val visitedListSize = mutable.ArrayBuffer(0)\n\
    \        val visitedListSize = mutable.ArrayBuffer(0)\n        val visitedListSize\
    \ = mutable.ArrayBuffer(0)\n        val visitedListSize = mutable.ArrayBuffer(0)\n\
    \        val visitedListSize = mutable.ArrayBuffer(0)\n        val visitedListSize\
    \ = mutable.ArrayBuffer(0)\n        val visitedListSize = mutable.ArrayBuffer(0)\n\
    \        val visitedListSize = mutable.ArrayBuffer(0)\n        val visitedListSize\
    \ = mutable.ArrayBuffer(0)\n        val visitedListSize = mutable.ArrayBuffer(0)\n\
    \        val visitedListSize = mutable.ArrayBuffer(0)\n        val visitedListSize\
    \ = mutable.ArrayBuffer(0)\n        val visitedListSize = mutable.ArrayBuffer(0)\n\
    \        val visitedListSize = mutable.ArrayBuffer(0)\n        val visitedListSize\
    \ = mutable.ArrayBuffer(0)\n        val visitedListSize = mutable.ArrayBuffer(0)\n\
    \        val visitedListSize = mutable.ArrayBuffer(0)\n        val visitedListSize\
    \ = mutable.ArrayBuffer(0)\n        val visitedListSize = mutable.ArrayBuffer(0)\n\
    \        val visitedListSize = mutable.ArrayBuffer(0)\n        val visitedListSize\
    \ = mutable.ArrayBuffer(0)\n        val visitedListSize = mutable.ArrayBuffer(0)\n\
    \        val visitedListSize = mutable.ArrayBuffer(0)\n        val visitedListSize\
    \ = mutable.ArrayBuffer(0)\n        val visitedListSize = mutable.ArrayBuffer(0)\n\
    \        val visitedListSize = mutable.ArrayBuffer(0)\n", "        val n = grid.length\n\
    \        val m = grid(0).length\n        val result = new Array[Long](k)\n   \
    \     var min = 0\n        var index = 0\n        var minIndex = 0\n        var\
    \ minValue = 0\n        var minValueIndex = 0\n        var minValueIndex2 = 0\n\
    \        var minValueIndex3 = 0\n        var minValueIndex4 = 0\n        var minValueIndex5\
    \ = 0\n        var minValueIndex6 = 0\n        var minValueIndex7 = 0\n      \
    \  var minValueIndex8 = 0\n        var minValueIndex9 = 0\n        var minValueIndex10\
    \ = 0\n        var minValueIndex11 = 0\n        var minValueIndex12 = 0\n    \
    \    var minValueIndex13 = 0\n        var minValueIndex14 = 0\n        var minValueIndex15\
    \ = 0\n        var minValueIndex16 = 0\n        var minValueIndex17 = 0\n    \
    \    var minValueIndex18 = 0\n        var minValueIndex19 = 0\n        var minValueIndex20\
    \ = 0\n        var minValueIndex21 = 0\n        var minValueIndex22 = 0\n    \
    \    var minValueIndex23 = 0\n        var minValueIndex24 = 0\n        var minValueIndex25\
    \ = 0\n        var minValueIndex26 = 0\n        var minValueIndex27 = 0\n    \
    \    var minValueIndex28 = 0\n        var minValueIndex29 = 0\n        var minValueIndex30\
    \ = 0\n        var minValueIndex31 = 0\n        var minValueIndex32 = 0\n    \
    \    var minValueIndex33 = 0\n        var minValueIndex34 = 0\n        var minValueIndex35\
    \ = 0\n        var minValueIndex36 = 0\n        var minValueIndex37 = 0\n    \
    \    var minValueIndex38 = 0\n        var minValueIndex39 = 0\n        var minValueIndex40\
    \ = 0\n        var minValueIndex41 = 0\n        var minValueIndex42 = 0\n    \
    \    var minValueIndex43 = 0\n        var minValueIndex44 = 0\n        var minValueIndex45\
    \ = 0\n        var minValueIndex46 = 0\n        var minValueIndex47 = 0\n    \
    \    var minValueIndex48 = 0\n        var minValueIndex49 = 0\n        var minValueIndex50\
    \ = 0\n        var minValueIndex51 = 0\n        var minValueIndex52 = 0\n    \
    \    var minValueIndex53 = 0\n        var minValueIndex54 = 0\n        var minValueIndex55\
    \ = 0\n        var minValueIndex56 = 0\n        var minValueIndex57 = 0\n    \
    \    var minValueIndex58 = 0\n        var minValueIndex59 = 0\n        var minValueIndex60\
    \ = 0\n        var minValueIndex61 = 0\n        var minValueIndex62 = 0\n    \
    \    var minValueIndex63 = 0\n        var minValueIndex64 = 0\n        var minValueIndex65\
    \ = 0\n        var minValueIndex66 = 0\n        var minValueIndex67 = 0\n    \
    \    var minValue", "        val grid = grid.toList\n        val n = grid.size\n\
    \        val m = grid(0).size\n        val lst_A = grid.map(x => x.toList).flatten\n\
    \        val lst_B = grid.map(x => x.toList).flatten.reverse\n        val lst_C\
    \ = lst_A.zip(lst_B).map(x => (x._1, x._2)).toList\n        val lst_D = lst_A.zip(lst_B).map(x\
    \ => (x._2, x._1)).toList\n        val lst_E = lst_A.zip(lst_B).map(x => (x._1,\
    \ x._2)).toList.reverse\n        val lst_F = lst_A.zip(lst_B).map(x => (x._2,\
    \ x._1)).toList.reverse\n        val lst_G = lst_A.zip(lst_B).map(x => (x._1,\
    \ x._2)).toList.reverse\n        val lst_H = lst_A.zip(lst_B).map(x => (x._2,\
    \ x._1)).toList.reverse.reverse\n        val lst_I = lst_A.zip(lst_B).map(x =>\
    \ (x._2, x._1)).toList.reverse.reverse\n        val lst_J = lst_A.zip(lst_B).map(x\
    \ => (x._2, x._1)).toList.reverse.reverse\n        val lst_K = lst_A.zip(lst_B).map(x\
    \ => (x._2, x._1)).toList.reverse.reverse.reverse\n        val lst_L = lst_A.zip(lst_B).map(x\
    \ => (x._2, x._1)).toList.reverse.reverse.reverse.reverse\n        val lst_M =\
    \ lst_A.zip(lst_B).map(x => (x._2, x._1)).toList.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse",
  "        val n = grid.size\n        val m = grid(0).size\n        val visited =\
    \ new Array[Boolean](m)\n        val ans = new Array[Long](k)\n        val lst_A\
    \ = new Array[Long](k)\n        val lst_B = new Array[Long](k)\n        for (i\
    \ <- 0 until k) {\n            lst_A(i) = i\n            lst_B(i) = i\n      \
    \  }\n        val stack = new Array[Long](k)\n        for (i <- 0 until k) {\n\
    \            stack(i) = i\n        }\n        val stackSize = 0\n        val visitedSize\
    \ = 0\n        val ans_size = k\n        val stackSize_ = 0\n        val visitedSize_\
    \ = 0\n        val ans_size_ = k\n        val stackSize_ = 0\n        val visitedSize_\
    \ = 0\n        val ans_size_ = k\n        val stackSize_ = 0\n        val visitedSize_\
    \ = 0\n        val ans_size_ = k\n        val stackSize_ = 0\n        val visitedSize_\
    \ = 0\n        val ans_size_ = k\n        val stackSize_ = 0\n        val visitedSize_\
    \ = 0\n        val ans_size_ = k\n        val stackSize_ = 0\n        val visitedSize_\
    \ = 0\n        val ans_size_ = k\n        val stackSize_ = 0\n        val visitedSize_\
    \ = 0\n        val ans_size_ = k\n        val stackSize_ = 0\n        val visitedSize_\
    \ = 0\n        val ans_size_ = k\n        val stackSize_ = 0\n        val visitedSize_\
    \ = 0\n        val ans_size_ = k\n        val stackSize_ = 0\n        val visitedSize_\
    \ = 0\n        val ans_size_ = k\n        val stackSize_ = 0\n        val visitedSize_\
    \ = 0\n        val ans_size_ = k\n        val stackSize_ = 0\n        val visitedSize_\
    \ = 0\n        val ans_size_ = k\n        val stackSize_ = 0\n        val visitedSize_\
    \ = 0\n        val ans_size_ = k\n        val stackSize_ = 0\n        val visitedSize_\
    \ = 0\n        val ans_size_ = k\n        val stackSize_ = 0\n        val visitedSize_\
    \ = 0\n        val ans_size_ = k\n        val stackSize_ = 0\n        val visitedSize_\
    \ = 0\n        val ans_size_ = k\n        val stackSize_ = 0\n        val visitedSize_\
    \ = 0\n        ", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val path = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val visitedAll = new Array[Boolean](k)\n        val visitedAllSet = new\
    \ HashSet[Boolean]()\n        val visitedAllSet2 = new HashSet[Boolean]()\n  \
    \      val visitedAllSet3 = new HashSet[Boolean]()\n        val visitedAllSet4\
    \ = new HashSet[Boolean]()\n        val visitedAllSet5 = new HashSet[Boolean]()\n\
    \        val visitedAllSet6 = new HashSet[Boolean]()\n        val visitedAllSet7\
    \ = new HashSet[Boolean]()\n        val visitedAllSet8 = new HashSet[Boolean]()\n\
    \        val visitedAllSet9 = new HashSet[Boolean]()\n        val visitedAllSet10\
    \ = new HashSet[Boolean]()\n        val visitedAllSet11 = new HashSet[Boolean]()\n\
    \        val visitedAllSet12 = new HashSet[Boolean]()\n        val visitedAllSet13\
    \ = new HashSet[Boolean]()\n        val visitedAllSet14 = new HashSet[Boolean]()\n\
    \        val visitedAllSet15 = new HashSet[Boolean]()\n        val visitedAllSet16\
    \ = new HashSet[Boolean]()\n        val visitedAllSet17 = new HashSet[Boolean]()\n\
    \        val visitedAllSet18 = new HashSet[Boolean]()\n        val visitedAllSet19\
    \ = new HashSet[Boolean]()\n        val visitedAllSet20 = new HashSet[Boolean]()\n\
    \        val visitedAllSet21 = new HashSet[Boolean]()\n        val visitedAllSet22\
    \ = new HashSet[Boolean]()\n        val visitedAllSet23 = new HashSet[Boolean]()\n\
    \        val visitedAllSet24 = new HashSet[Boolean]()\n        val visitedAllSet25\
    \ = new HashSet[Boolean]()\n        val visitedAllSet26 = new HashSet[Boolean]()\n\
    \        val visitedAllSet27 = new HashSet[Boolean]()\n        val visitedAllSet28\
    \ = new HashSet[Boolean]()\n        val visitedAllSet29 = new HashSet[Boolean]()\n\
    \        val visitedAllSet30 = new HashSet[Boolean]()\n        val visitedAllSet31\
    \ = new HashSet[Boolean]()\n", "        val N = grid.length\n        val M = grid(0).length\n\
    \        val grid = grid.toList\n        val visited = new mutable.HashSet[Long]()\n\
    \        val ans = List[Long]()\n        val queue = scala.collection.mutable.Queue[Long]()\n\
    \        val visitedQueue = scala.collection.mutable.Queue[Long]()\n        val\
    \ visitedQueue2 = scala.collection.mutable.Queue[Long]()\n        val visitedQueue3\
    \ = scala.collection.mutable.Queue[Long]()\n        val visitedQueue4 = scala.collection.mutable.Queue[Long]()\n\
    \        val visitedQueue5 = scala.collection.mutable.Queue[Long]()\n        val\
    \ visitedQueue6 = scala.collection.mutable.Queue[Long]()\n        val visitedQueue7\
    \ = scala.collection.mutable.Queue[Long]()\n        val visitedQueue8 = scala.collection.mutable.Queue[Long]()\n\
    \        val visitedQueue9 = scala.collection.mutable.Queue[Long]()\n        val\
    \ visitedQueue10 = scala.collection.mutable.Queue[Long]()\n        val visitedQueue11\
    \ = scala.collection.mutable.Queue[Long]()\n        val visitedQueue12 = scala.collection.mutable.Queue[Long]()\n\
    \        val visitedQueue13 = scala.collection.mutable.Queue[Long]()\n       \
    \ val visitedQueue14 = scala.collection.mutable.Queue[Long]()\n        val visitedQueue15\
    \ = scala.collection.mutable.Queue[Long]()\n        val visitedQueue16 = scala.collection.mutable.Queue[Long]()\n\
    \        val visitedQueue17 = scala.collection.mutable.Queue[Long]()\n       \
    \ val visitedQueue18 = scala.collection.mutable.Queue[Long]()\n        val visitedQueue19\
    \ = scala.collection.mutable.Queue[Long]()\n        val visitedQueue20 = scala.collection.mutable.Queue[Long]()\n\
    \        val visitedQueue21 = scala.collection.mutable.Queue[Long]()\n       \
    \ val visitedQueue22 = scala.collection.mutable.Queue[Long]()\n        val visitedQueue23\
    \ = scala.collection.mutable.Queue[Long]()\n        val visitedQueue24 = scala.collection.mutable.Queue[Long]()\n\
    \        val visitedQueue25 = scala.collection.mutable.Queue[Long]()\n       \
    \ val visitedQueue26 = scala.collection.mutable.Queue[Long]()", "        val m\
    \ = grid.length\n        val n = grid(0).length\n        val lst_A = grid.map(_.toList)\n\
    \        val lst_B = grid.map(_.toList)\n        val lst_C = lst_A.map(_.toList)\n\
    \        val lst_D = lst_A.map(_.toList)\n        val lst_E = lst_A.map(_.toList)\n\
    \        val lst_F = lst_A.map(_.toList)\n        val lst_G = lst_A.map(_.toList)\n\
    \        val lst_H = lst_A.map(_.toList)\n        val lst_I = lst_A.map(_.toList)\n\
    \        val lst_J = lst_A.map(_.toList)\n        val lst_K = lst_A.map(_.toList)\n\
    \        val lst_L = lst_A.map(_.toList)\n        val lst_M = lst_A.map(_.toList)\n\
    \        val lst_N = lst_A.map(_.toList)\n        val lst_O = lst_A.map(_.toList)\n\
    \        val lst_P = lst_A.map(_.toList)\n        val lst_Q = lst_A.map(_.toList)\n\
    \        val lst_R = lst_A.map(_.toList)\n        val lst_S = lst_A.map(_.toList)\n\
    \        val lst_T = lst_A.map(_.toList)\n        val lst_U = lst_A.map(_.toList)\n\
    \        val lst_V = lst_A.map(_.toList)\n        val lst_W = lst_A.map(_.toList)\n\
    \        val lst_X = lst_A.map(_.toList)\n        val lst_Y = lst_A.map(_.toList)\n\
    \        val lst_Z = lst_A.map(_.toList)\n        val lst_A = lst_A.map(_.toList)\n\
    \        val lst_B = lst_A.map(_.toList)\n        val lst_C = lst_A.map(_.toList)\n\
    \        val lst_D = lst_A.map(_.toList)\n        val lst_E = lst_A.map(_.toList)\n\
    \        val lst_F = lst_A.map(_.toList)\n        val lst_G = lst_A.map(_.toList)\n\
    \        val lst_H = lst_A.map(_.toList)\n        val lst_I = lst_A.map(_.toList)\n\
    \        val lst_J = lst_A.map(_.toList)\n        val lst_K = lst_A.map(_.toList)\n\
    \        val lst_L = lst_A.", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val stack = new Array[Int](k)\n        val stackIndex = new Array[Int](k)\n\
    \        val stackIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndex =\
    \ new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndex",
  "        val n = grid.size\n        val m = grid(0).size\n        val lst_A = grid.map(_.toList)\n\
    \        val lst_B = grid.map(_.toList)\n        val lst_C = grid.map(_.toList)\n\
    \        val lst_D = grid.map(_.toList)\n        val lst_E = grid.map(_.toList)\n\
    \        val lst_F = grid.map(_.toList)\n        val lst_G = grid.map(_.toList)\n\
    \        val lst_H = grid.map(_.toList)\n        val lst_I = grid.map(_.toList)\n\
    \        val lst_J = grid.map(_.toList)\n        val lst_K = grid.map(_.toList)\n\
    \        val lst_L = grid.map(_.toList)\n        val lst_M = grid.map(_.toList)\n\
    \        val lst_N = grid.map(_.toList)\n        val lst_O = grid.map(_.toList)\n\
    \        val lst_P = grid.map(_.toList)\n        val lst_Q = grid.map(_.toList)\n\
    \        val lst_R = grid.map(_.toList)\n        val lst_S = grid.map(_.toList)\n\
    \        val lst_T = grid.map(_.toList)\n        val lst_U = grid.map(_.toList)\n\
    \        val lst_V = grid.map(_.toList)\n        val lst_W = grid.map(_.toList)\n\
    \        val lst_X = grid.map(_.toList)\n        val lst_Y = grid.map(_.toList)\n\
    \        val lst_Z = grid.map(_.toList)\n        val lst_A = grid.map(_.toList)\n\
    \        val lst_B = grid.map(_.toList)\n        val lst_C = grid.map(_.toList)\n\
    \        val lst_D = grid.map(_.toList)\n        val lst_E = grid.map(_.toList)\n\
    \        val lst_F = grid.map(_.toList)\n        val lst_G = grid.map(_.toList)\n\
    \        val lst_H = grid.map(_.toList)\n        val lst_I = grid.map(_.toList)\n\
    \        val lst_J = grid.map(_.toList)\n        val lst_K = grid.map(_.toList)\n\
    \        val lst_L = grid.map(_.toList)\n        val lst_M = grid.map(_.toList)\n\
    \        val lst_N = grid.map(_.toList)\n        val lst_O = grid.map(_.toList)\n\
    \        val lst_P = grid.map(_.toList)\n        val lst_Q = grid.map(_.toList)\n\
    \        val lst_R = grid.map(_.to", "        val N = grid.length\n        val\
    \ m = grid.head\n        val n = grid.last\n        val m = m.toLong\n       \
    \ val n = n.toLong\n        val grid = grid.tail\n        val grid = grid.tail\n\
    \        val grid = grid.tail\n        val grid = grid.tail\n        val grid\
    \ = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n  \
    \      val grid = grid.tail\n        val grid = grid.tail\n        val grid =\
    \ grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n    \
    \    val grid = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n\
    \        val grid = grid.tail\n        val grid = grid.tail\n        val grid\
    \ = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n  \
    \      val grid = grid.tail\n        val grid = grid.tail\n        val grid =\
    \ grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n    \
    \    val grid = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n\
    \        val grid = grid.tail\n        val grid = grid.tail\n        val grid\
    \ = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n  \
    \      val grid = grid.tail\n        val grid = grid.tail\n        val grid =\
    \ grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n    \
    \    val grid = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n\
    \        val grid = grid.tail\n        val grid = grid.tail\n        val grid\
    \ = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n  \
    \      val grid = grid.tail\n        val grid = grid.tail\n        val grid =\
    \ grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n    \
    \    val grid = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n\
    \        val grid = grid.tail\n        val grid = grid.tail\n        val grid\
    \ = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n  \
    \      val grid = grid.tail\n        val grid = grid.tail\n        val grid =\
    \ grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n    \
    \    val grid = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n\
    \        val grid = grid.tail\n        val grid = grid.tail\n        val grid\
    \ = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n  \
    \      val grid = grid.tail\n        val grid = grid.tail\n        val grid =\
    \ grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n    \
    \    val grid = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n",
  "        val n = grid.length\n        val m = grid(0).length\n        val grid =\
    \ mutable.ArrayBuffer.empty[List[Long]]\n        var minPath : List[Long] = Nil\n\
    \        var i : Int = 0\n        var j : Int = 0\n        var k : Int = k\n \
    \       while (i < n && j < m) {\n            val cell = grid(i)(j)\n        \
    \    if (cell == k) {\n                val lst = grid.toList\n               \
    \ val lst1 = lst.sortWith((x, y) => x < y)\n                val lst2 = lst1.sortWith((x,\
    \ y) => y < x)\n                val lst3 = lst2.sortWith((x, y) => x < y)\n  \
    \              val lst4 = lst3.sortWith((x, y) => y < x)\n                val\
    \ lst5 = lst4.sortWith((x, y) => x < y)\n                val lst6 = lst5.sortWith((x,\
    \ y) => y < x)\n                val lst7 = lst6.sortWith((x, y) => x < y)\n  \
    \              val lst8 = lst7.sortWith((x, y) => y < x)\n                val\
    \ lst9 = lst8.sortWith((x, y) => x < y)\n                val lst10 = lst9.sortWith((x,\
    \ y) => y < x)\n                val lst11 = lst10.sortWith((x, y) => x < y)\n\
    \                val lst12 = lst11.sortWith((x, y) => y < x)\n               \
    \ val lst13 = lst12.sortWith((x, y) => x < y)\n                val lst14 = lst13.sortWith((x,\
    \ y) => y < x)\n                val lst15 = lst14.sortWith((x, y) => x < y)\n\
    \                val lst16 = lst15.sortWith((x, y) => y < x)\n               \
    \ val lst17 = lst16.sortWith((x, y) => x < y)\n                val lst18 = lst17.sortWith((x,\
    \ y) => y < x)\n                val lst19 = lst18.sortWith((x, y) => x < y)\n\
    \                val lst20 = lst19.sortWith((x, y) => y < x)\n               \
    \ val lst21 = lst20.sortWith((x, y) => x < y)\n                val lst22 = lst21.sortWith((x,\
    \ y) => y < x)\n                val lst23 = lst22.sortWith((x, y) => x < y)\n\
    \                val lst24 = lst23.sortWith((x, y) => y < x)\n               \
    \ val lst25 = lst24.sortWith((x, y) => x < y)\n                val lst26 = lst25.sortWith((x,\
    \ y) => y < x)\n                val lst27 = lst26.sortWith((x, y) => x < y)\n\
    \                val lst28 = lst27.sortWith((x, y) => y < x)\n               \
    \ val lst29 = lst28.sortWith((x, y) => x < y)\n                val lst30 = lst",
  "        val m = grid.length\n        val n = grid(0).length\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val visited = new mutable.HashSet[Long]()\n\
    \        val visitedMap = new mutable.HashMap[Long, Boolean]()\n        val visitedMap2\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap3 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap4 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap5 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap6\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap7 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap8 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap9 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap10\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap11 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap12 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap13 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap14 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap15\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap16 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap17 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap18 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap19 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap20\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap21 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap22 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap23 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap24 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap25\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap26 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap27 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap28 = new mutable.HashMap[Long, ", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val grid = grid.toList\n        val grid\
    \ = grid.sortBy(x => x.toLong)\n        val grid = grid.map(x => x.toLong)\n \
    \       val grid = grid.distinct\n        val grid = grid.map(x => x.toLong)\n\
    \        val grid = grid.map(x => x.toLong)\n        val grid = grid.map(x =>\
    \ x.toLong)\n        val grid = grid.map(x => x.toLong)\n        val grid = grid.map(x\
    \ => x.toLong)\n        val grid = grid.map(x => x.toLong)\n        val grid =\
    \ grid.map(x => x.toLong)\n        val grid = grid.map(x => x.toLong)\n      \
    \  val grid = grid.map(x => x.toLong)\n        val grid = grid.map(x => x.toLong)\n\
    \        val grid = grid.map(x => x.toLong)\n        val grid = grid.map(x =>\
    \ x.toLong)\n        val grid = grid.map(x => x.toLong)\n        val grid = grid.map(x\
    \ => x.toLong)\n        val grid = grid.map(x => x.toLong)\n        val grid =\
    \ grid.map(x => x.toLong)\n        val grid = grid.map(x => x.toLong)\n      \
    \  val grid = grid.map(x => x.toLong)\n        val grid = grid.map(x => x.toLong)\n\
    \        val grid = grid.map(x => x.toLong)\n        val grid = grid.map(x =>\
    \ x.toLong)\n        val grid = grid.map(x => x.toLong)\n        val grid = grid.map(x\
    \ => x.toLong)\n        val grid = grid.map(x => x.toLong)\n        val grid =\
    \ grid.map(x => x.toLong)\n        val grid = grid.map(x => x.toLong)\n      \
    \  val grid = grid.map(x => x.toLong)\n        val grid = grid.map(x => x.toLong)\n\
    \        val grid = grid.map(x => x.toLong)\n        val grid = grid.map(x =>\
    \ x.toLong)\n        val grid = grid.map(x => x.toLong)\n        val grid = grid.map(x\
    \ => x.toLong)\n        val grid = grid.map(x => x.toLong)\n        val grid =\
    \ grid.map(x => x.toLong)\n        val grid = grid.map(x => x.toLong)\n      \
    \  val grid = grid.map(x => x.toLong)\n        val grid = grid.map(x => x.toLong)\n\
    \        val grid = grid.map(x => x.toLong)\n        val grid = grid.map(", " \
    \       val m = grid.length\n        val n = grid(0).length\n        val grid2\
    \ = grid.map(_.map(x => if (x == k) x else 0l))\n        val grid3 = grid2.map(_.map(x\
    \ => if (x == k) x else 0l))\n        val grid4 = grid3.map(_.map(x => if (x ==\
    \ k) x else 0l))\n        val grid5 = grid4.map(_.map(x => if (x == k) x else\
    \ 0l))\n        val grid6 = grid5.map(_.map(x => if (x == k) x else 0l))\n   \
    \     val grid7 = grid6.map(_.map(x => if (x == k) x else 0l))\n        val grid8\
    \ = grid7.map(_.map(x => if (x == k) x else 0l))\n        val grid9 = grid8.map(_.map(x\
    \ => if (x == k) x else 0l))\n        val grid10 = grid9.map(_.map(x => if (x\
    \ == k) x else 0l))\n        val grid11 = grid10.map(_.map(x => if (x == k) x\
    \ else 0l))\n        val grid12 = grid11.map(_.map(x => if (x == k) x else 0l))\n\
    \        val grid13 = grid12.map(_.map(x => if (x == k) x else 0l))\n        val\
    \ grid14 = grid13.map(_.map(x => if (x == k) x else 0l))\n        val grid15 =\
    \ grid14.map(_.map(x => if (x == k) x else 0l))\n        val grid16 = grid15.map(_.map(x\
    \ => if (x == k) x else 0l))\n        val grid17 = grid16.map(_.map(x => if (x\
    \ == k) x else 0l))\n        val grid18 = grid17.map(_.map(x => if (x == k) x\
    \ else 0l))\n        val grid19 = grid18.map(_.map(x => if (x == k) x else 0l))\n\
    \        val grid20 = grid19.map(_.map(x => if (x == k) x else 0l))\n        val\
    \ grid21 = grid20.map(_.map(x => if (x == k) x else 0l))\n        val grid22 =\
    \ grid21.map(_.map(x => if (x == k) x else 0l))\n        val grid23 = grid22.map(_.map(x\
    \ => if (x == k) x else 0l))\n        val grid24 = grid23.map(_.map(x => if (x\
    \ == k) x else 0l))\n        val grid25 = ", "        val n = grid.length\n  \
    \      val m = grid(0).length\n        val path = new Array[Long](k)\n       \
    \ val visited = new Array[Boolean](k)\n        val stack = new Array[Long](n)\n\
    \        val stackIndex = new Array[Int](k)\n        val stackIndexIndex = new\
    \ Array[Int](k)\n        val stackIndexIndexIndex = new Array[Int](k)\n      \
    \  val stackIndexIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n  \
    \      val stackIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = new\
    \ Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex",
  "        val n = grid.size\n        val m = grid.head\n        val lst_A = grid.map(_.toList)\n\
    \        val lst_B = grid.map(_.toList)\n        val lst_C = lst_A.map(_.toList)\n\
    \        val lst_D = lst_B.map(_.toList)\n        val lst_E = lst_C.map(_.toList)\n\
    \        val lst_F = lst_D.map(_.toList)\n        val lst_G = lst_E.map(_.toList)\n\
    \        val lst_H = lst_F.map(_.toList)\n        val lst_I = lst_G.map(_.toList)\n\
    \        val lst_J = lst_H.map(_.toList)\n        val lst_K = lst_I.map(_.toList)\n\
    \        val lst_L = lst_J.map(_.toList)\n        val lst_M = lst_K.map(_.toList)\n\
    \        val lst_N = lst_L.map(_.toList)\n        val lst_O = lst_M.map(_.toList)\n\
    \        val lst_P = lst_O.map(_.toList)\n        val lst_Q = lst_P.map(_.toList)\n\
    \        val lst_R = lst_Q.map(_.toList)\n        val lst_S = lst_R.map(_.toList)\n\
    \        val lst_T = lst_S.map(_.toList)\n        val lst_U = lst_T.map(_.toList)\n\
    \        val lst_V = lst_U.map(_.toList)\n        val lst_W = lst_V.map(_.toList)\n\
    \        val lst_X = lst_W.map(_.toList)\n        val lst_Y = lst_X.map(_.toList)\n\
    \        val lst_Z = lst_Y.map(_.toList)\n        val lst_A = lst_Z.map(_.toList)\n\
    \        val lst_B = lst_A.map(_.toList)\n        val lst_C = lst_B.map(_.toList)\n\
    \        val lst_D = lst_C.map(_.toList)\n        val lst_E = lst_D.map(_.toList)\n\
    \        val lst_F = lst_E.map(_.toList)\n        val lst_G = lst_F.map(_.toList)\n\
    \        val lst_H = lst_G.map(_.toList)\n        val lst_I = lst_H.map(_.toList)\n\
    \        val lst_J = lst_I.map(_.toList)\n        val lst_K = lst_J.map(_.toList)\n\
    \        val lst_", "        val m = grid.size\n        val n = grid(0).size\n\
    \        val visited = new mutable.HashSet[Long]()\n        val result = new mutable.ArrayBuffer[Long]()\n\
    \        val stack = new mutable.Stack[Long]()\n        val stackSize = 0\n  \
    \      val stackMax = k\n        val stackMaxIndex = k\n        val stackMaxValue\
    \ = grid(0).head\n        val stackMaxIndexValue = grid(0).head\n        val stackMaxIndexValueIndex\
    \ = grid(0).head\n        val stackMaxIndexValueIndexValue = grid(0).head\n  \
    \      val stackMaxIndexValueIndexValueIndex = grid(0).head\n        val stackMaxIndexValueIndexValueIndexValue\
    \ = grid(0).head\n        val stackMaxIndexValueIndexValueIndexValueIndex = grid(0).head\n\
    \        val stackMaxIndexValueIndexValueIndexValueIndexValue = grid(0).head\n\
    \        val stackMaxIndexValueIndexValueIndexValueIndexValueIndex = grid(0).head\n\
    \        val stackMaxIndexValueIndexValueIndexValueIndexValueIndexValue = grid(0).head\n\
    \        val stackMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndex =\
    \ grid(0).head\n        val stackMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = grid(0).head\n        val stackMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = grid(0).head\n        val stackMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = grid(0).head\n        val stackMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = grid(0).head\n        val stackMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = grid(0).head\n        val stackMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = grid(0).head\n        val stackMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = grid(0).head\n        val stackMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = grid(0).head\n        val stackMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = grid(0).head\n        val stackMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = grid(0).head\n        val stackMaxIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = grid(0).head\n        val stackMaxIndexValueIndexValueIndexValueIndexValue",
  "        val m = grid.size\n        val n = grid(0).size\n        val visited =\
    \ new mutable.HashSet[Long]()\n        val result = new mutable.ArrayBuffer[Long]()\n\
    \        val lst_A = grid.map(_.toList).toList\n        val lst_B = grid.map(_.toList.reverse).toList\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => (x._1, x._2)).toList\n        val\
    \ lst_D = lst_C.map(x => (x._1, x._2)).toMap\n        val lst_E = lst_C.map(x\
    \ => (x._1, x._2)).toMap\n        val lst_F = lst_C.map(x => (x._1, x._2)).toMap\n\
    \        val lst_G = lst_C.map(x => (x._1, x._2)).toMap\n        val lst_H = lst_C.map(x\
    \ => (x._1, x._2)).toMap\n        val lst_I = lst_C.map(x => (x._1, x._2)).toMap\n\
    \        val lst_J = lst_C.map(x => (x._1, x._2)).toMap\n        val lst_K = lst_C.map(x\
    \ => (x._1, x._2)).toMap\n        val lst_L = lst_C.map(x => (x._1, x._2)).toMap\n\
    \        val lst_M = lst_C.map(x => (x._1, x._2)).toMap\n        val lst_N = lst_C.map(x\
    \ => (x._1, x._2)).toMap\n        val lst_O = lst_C.map(x => (x._1, x._2)).toMap\n\
    \        val lst_P = lst_C.map(x => (x._1, x._2)).toMap\n        val lst_Q = lst_C.map(x\
    \ => (x._1, x._2)).toMap\n        val lst_R = lst_C.map(x => (x._1, x._2)).toMap\n\
    \        val lst_S = lst_C.map(x => (x._1, x._2)).toMap\n        val lst_T = lst_C.map(x\
    \ => (x._1, x._2)).toMap\n        val lst_U = lst_C.map(x => (x._1, x._2)).toMap\n\
    \        val lst_V = lst_C.map(x => (x._1, x._2)).toMap\n        val lst_W = lst_C.map(x\
    \ => (x._1, x._2)).toMap\n        val lst_X = lst_C.map(x => (x.", "        val\
    \ m = grid.length\n        val n = grid(0).length\n        val path = new Array[Long](k)\n\
    \        val visited = new Array[Boolean](k)\n        val lst_A = new Array[Long](k)\n\
    \        val lst_B = new Array[Long](k)\n        val lst_C = new Array[Long](k)\n\
    \        val lst_D = new Array[Long](k)\n        val lst_E = new Array[Long](k)\n\
    \        val lst_F = new Array[Long](k)\n        val lst_G = new Array[Long](k)\n\
    \        val lst_H = new Array[Long](k)\n        val lst_I = new Array[Long](k)\n\
    \        val lst_J = new Array[Long](k)\n        val lst_K = new Array[Long](k)\n\
    \        val lst_L = new Array[Long](k)\n        val lst_M = new Array[Long](k)\n\
    \        val lst_N = new Array[Long](k)\n        val lst_O = new Array[Long](k)\n\
    \        val lst_P = new Array[Long](k)\n        val lst_Q = new Array[Long](k)\n\
    \        val lst_R = new Array[Long](k)\n        val lst_S = new Array[Long](k)\n\
    \        val lst_T = new Array[Long](k)\n        val lst_U = new Array[Long](k)\n\
    \        val lst_V = new Array[Long](k)\n        val lst_W = new Array[Long](k)\n\
    \        val lst_X = new Array[Long](k)\n        val lst_Y = new Array[Long](k)\n\
    \        val lst_Z = new Array[Long](k)\n        val lst_AA = new Array[Long](k)\n\
    \        val lst_AB = new Array[Long](k)\n        val lst_AC = new Array[Long](k)\n\
    \        val lst_AD = new Array[Long](k)\n        val lst_AE = new Array[Long](k)\n\
    \        val lst_AF = new Array[Long](k)\n        val lst_AG = new Array[Long](k)\n\
    \        val lst_AH = new Array[Long](k)\n        val lst_AI = new Array[Long](k)\n\
    \        val lst_AJ = new Array[Long](k)\n        val lst_AK = new Array[Long](k)\n\
    \        val lst_AL = new Array[Long](k)\n        val lst_AM = new Array[Long](k)\n\
    \        val lst_AN = new Array[Long](", "        val n = grid.size\n        val\
    \ m = grid(0).size\n        val visited = new mutable.HashSet[Long]()\n      \
    \  val path = new mutable.ArrayList[Long]()\n        val lst_A = new mutable.ArrayList[Long]()\n\
    \        val lst_B = new mutable.ArrayList[Long]()\n        val lst_C = new mutable.ArrayList[Long]()\n\
    \        val lst_D = new mutable.ArrayList[Long]()\n        val lst_E = new mutable.ArrayList[Long]()\n\
    \        val lst_F = new mutable.ArrayList[Long]()\n        val lst_G = new mutable.ArrayList[Long]()\n\
    \        val lst_H = new mutable.ArrayList[Long]()\n        val lst_I = new mutable.ArrayList[Long]()\n\
    \        val lst_J = new mutable.ArrayList[Long]()\n        val lst_K = new mutable.ArrayList[Long]()\n\
    \        val lst_L = new mutable.ArrayList[Long]()\n        val lst_M = new mutable.ArrayList[Long]()\n\
    \        val lst_N = new mutable.ArrayList[Long]()\n        val lst_O = new mutable.ArrayList[Long]()\n\
    \        val lst_P = new mutable.ArrayList[Long]()\n        val lst_Q = new mutable.ArrayList[Long]()\n\
    \        val lst_R = new mutable.ArrayList[Long]()\n        val lst_S = new mutable.ArrayList[Long]()\n\
    \        val lst_T = new mutable.ArrayList[Long]()\n        val lst_U = new mutable.ArrayList[Long]()\n\
    \        val lst_V = new mutable.ArrayList[Long]()\n        val lst_W = new mutable.ArrayList[Long]()\n\
    \        val lst_X = new mutable.ArrayList[Long]()\n        val lst_Y = new mutable.ArrayList[Long]()\n\
    \        val lst_Z = new mutable.ArrayList[Long]()\n        val lst_AA = new mutable.ArrayList[Long]()\n\
    \        val lst_AB = new mutable.ArrayList[Long]()\n        val lst_AC = new\
    \ mutable.ArrayList[Long]()\n        val lst_AD = new mutable.ArrayList[Long]()\n\
    \        val lst_AE = new mutable.ArrayList[Long]()\n        val lst_AF = new\
    \ mutable.ArrayList[Long]()\n        val lst_AG = new mutable.ArrayList[Long]()\n\
    \        val lst_AH = new mutable.ArrayList[Long", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val lst_G = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_H = mutable.ArrayBuffer.empty[Long]\n        val lst_I = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_J = mutable.ArrayBuffer.empty[Long]\n        val lst_K = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_L = mutable.ArrayBuffer.empty[Long]\n        val lst_M = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_N = mutable.ArrayBuffer.empty[Long]\n        val lst_O = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_P = mutable.ArrayBuffer.empty[Long]\n        val lst_Q = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_R = mutable.ArrayBuffer.empty[Long]\n        val lst_S = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_T = mutable.ArrayBuffer.empty[Long]\n        val lst_U = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_V = mutable.ArrayBuffer.empty[Long]\n        val lst_W = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_X = mutable.ArrayBuffer.empty[Long]\n        val lst_Y = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Z = mutable.ArrayBuffer.empty[Long]\n        val lst_A = grid.map(_.toList).flatten\n\
    \        val lst_B = grid.map(_.toList).flatten.map(_.toLong)\n        val lst_C\
    \ = grid.map(_.toList).flatten.map(_.toLong)\n        val lst_D = grid.map(_.toList).flatten.map(_.toLong)\n\
    \        val lst_E = grid.map(_.toList).flatten.map(_.toLong)\n        val lst_F\
    \ = grid.map(_.toList).flatten.map(_.toLong)\n        val lst_G = grid.map(_.toList).flatten.map(_.to",
  "        val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val visited = new mutable.HashSet[Long]()\n\
    \        val visitedAll = new mutable.HashSet[Long]()\n        val visitedAll2\
    \ = new mutable.HashSet[Long]()\n        val visitedAll3 = new mutable.HashSet[Long]()\n\
    \        val visitedAll4 = new mutable.HashSet[Long]()\n        val visitedAll5\
    \ = new mutable.HashSet[Long]()\n        val visitedAll6 = new mutable.HashSet[Long]()\n\
    \        val visitedAll7 = new mutable.HashSet[Long]()\n        val visitedAll8\
    \ = new mutable.HashSet[Long]()\n        val visitedAll9 = new mutable.HashSet[Long]()\n\
    \        val visitedAll10 = new mutable.HashSet[Long]()\n        val visitedAll11\
    \ = new mutable.HashSet[Long]()\n        val visitedAll12 = new mutable.HashSet[Long]()\n\
    \        val visitedAll13 = new mutable.HashSet[Long]()\n        val visitedAll14\
    \ = new mutable.HashSet[Long]()\n        val visitedAll15 = new mutable.HashSet[Long]()\n\
    \        val visitedAll16 = new mutable.HashSet[Long]()\n        val visitedAll17\
    \ = new mutable.HashSet[Long]()\n        val visitedAll18 = new mutable.HashSet[Long]()\n\
    \        val visitedAll19 = new mutable.HashSet[Long]()\n        val visitedAll20\
    \ = new mutable.HashSet[Long]()\n        val visitedAll21 = new mutable.HashSet[Long]()\n\
    \        val visitedAll22 = new mutable.HashSet[Long]()\n        val visitedAll23\
    \ = new mutable.HashSet[Long]()\n        val visitedAll24 = new mutable.HashSet[Long]()\n\
    \        val visitedAll25 = new mutable.HashSet[Long]()\n        val visitedAll26\
    \ = new mutable.HashSet[Long]()\n        val visitedAll27 = new mutable.HashSet[Long]()\n\
    \        val visitedAll28 = new mutable.HashSet[Long]()\n        val visitedAll29\
    \ = new mutable.HashSet[Long]()\n        val visitedAll30 = new mut", "      \
    \  val m = grid.size\n        val n = grid.head.size\n        val lst_A = grid.map(_.toList).toList\n\
    \        val lst_B = grid.map(_.toList).toList\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var ans = List[Long]()\n        while (i <\
    \ m && j < n) {\n            if (lst_A(i) < lst_B(j)) {\n                ans =\
    \ ans :+ lst_A(i)\n                i += 1\n            } else {\n            \
    \    ans = ans :+ lst_B(j)\n                j += 1\n            }\n          \
    \  k += 1\n        }\n        if (k == k) {\n            ans\n        } else {\n\
    \            minPath(grid, k)\n        }", "        val grid = grid.toSet\n  \
    \      val visited = new mutable.HashSet[Long]()\n        val path = new mutable.HashSet[Long]()\n\
    \        val lst = new mutable.ArrayList[Long]()\n        val lst2 = new mutable.ArrayList[Long]()\n\
    \        val lst3 = new mutable.ArrayList[Long]()\n        val lst4 = new mutable.ArrayList[Long]()\n\
    \        val lst5 = new mutable.ArrayList[Long]()\n        val lst6 = new mutable.ArrayList[Long]()\n\
    \        val lst7 = new mutable.ArrayList[Long]()\n        val lst8 = new mutable.ArrayList[Long]()\n\
    \        val lst9 = new mutable.ArrayList[Long]()\n        val lst10 = new mutable.ArrayList[Long]()\n\
    \        val lst11 = new mutable.ArrayList[Long]()\n        val lst12 = new mutable.ArrayList[Long]()\n\
    \        val lst13 = new mutable.ArrayList[Long]()\n        val lst14 = new mutable.ArrayList[Long]()\n\
    \        val lst15 = new mutable.ArrayList[Long]()\n        val lst16 = new mutable.ArrayList[Long]()\n\
    \        val lst17 = new mutable.ArrayList[Long]()\n        val lst18 = new mutable.ArrayList[Long]()\n\
    \        val lst19 = new mutable.ArrayList[Long]()\n        val lst20 = new mutable.ArrayList[Long]()\n\
    \        val lst21 = new mutable.ArrayList[Long]()\n        val lst22 = new mutable.ArrayList[Long]()\n\
    \        val lst23 = new mutable.ArrayList[Long]()\n        val lst24 = new mutable.ArrayList[Long]()\n\
    \        val lst25 = new mutable.ArrayList[Long]()\n        val lst26 = new mutable.ArrayList[Long]()\n\
    \        val lst27 = new mutable.ArrayList[Long]()\n        val lst28 = new mutable.ArrayList[Long]()\n\
    \        val lst29 = new mutable.ArrayList[Long]()\n        val lst30 = new mutable.ArrayList[Long]()\n\
    \        val lst31 = new mutable.ArrayList[Long]()\n        val lst32 = new mutable.ArrayList[Long]()\n\
    \        val lst33 = new mutable.ArrayList[Long]()\n        val lst34 = new mutable.ArrayList[Long]()\n\
    \        val lst35 = new mutable.ArrayList[Long]()\n        val lst36 = new mutable.ArrayList[Long]()\n\
    \        val lst37 = new mutable.ArrayList[", "        val n = grid.length\n \
    \       val m = grid(0).length\n        val grid = grid.toList\n        val grid\
    \ = grid.sortWith((x, y) => x.toLong < y.toLong)\n        val grid = grid.map(x\
    \ => x.toLong)\n        val grid = grid.distinct\n        val grid = grid.toList\n\
    \        val grid = grid.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ grid = grid.map(x => x.toLong)\n        val grid = grid.distinct\n        val\
    \ grid = grid.toList\n        val grid = grid.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val grid = grid.map(x => x.toLong)\n        val grid = grid.distinct\n\
    \        val grid = grid.toList\n        val grid = grid.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val grid = grid.map(x => x.toLong)\n        val grid =\
    \ grid.distinct\n        val grid = grid.toList\n        val grid = grid.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val grid = grid.map(x => x.toLong)\n   \
    \     val grid = grid.distinct\n        val grid = grid.toList\n        val grid\
    \ = grid.sortWith((x, y) => x.toLong < y.toLong)\n        val grid = grid.map(x\
    \ => x.toLong)\n        val grid = grid.distinct\n        val grid = grid.toList\n\
    \        val grid = grid.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ grid = grid.map(x => x.toLong)\n        val grid = grid.distinct\n        val\
    \ grid = grid.toList\n        val grid = grid.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val grid = grid.map(x => x.toLong)\n        val grid = grid.distinct\n\
    \        val grid = grid.toList\n        val grid = grid.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val grid = grid.map(x => x.toLong)\n        val grid =\
    \ grid.distinct\n        val grid = grid.toList\n        val grid = grid.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val grid = grid.map(x => x.toLong)\n   \
    \     val grid = grid.distinct\n        val grid = grid.toList\n        val grid\
    \ = grid.sortWith((x, y) => x.toLong < y.toLong)\n        val grid = grid.map(x\
    \ => x.toLong)\n        val grid = grid.distinct\n        val grid = grid.toList\n\
    \        val grid = grid.sortWith((x, y) => x.toLong < y.toLong)\n        ", " \
    \       val n = grid.length\n        val m = grid(0).length\n        val lst_A\
    \ = grid.map(_.toList).toList\n        val lst_B = grid.map(_.toList).toList\n\
    \        val lst_C = lst_A.map(_.toList).distinct\n        val lst_D = lst_B.map(_.toList).distinct\n\
    \        val lst_E = lst_C.map(_.toList).distinct\n        val lst_F = lst_D.map(_.toList).distinct\n\
    \        val lst_G = lst_E.map(_.toList).distinct\n        val lst_H = lst_F.map(_.toList).distinct\n\
    \        val lst_I = lst_G.map(_.toList).distinct\n        val lst_J = lst_H.map(_.toList).distinct\n\
    \        val lst_K = lst_I.map(_.toList).distinct\n        val lst_L = lst_J.map(_.toList).distinct\n\
    \        val lst_M = lst_K.map(_.toList).distinct\n        val lst_N = lst_L.map(_.toList).distinct\n\
    \        val lst_O = lst_M.map(_.toList).distinct\n        val lst_P = lst_O.map(_.toList).distinct\n\
    \        val lst_Q = lst_P.map(_.toList).distinct\n        val lst_R = lst_Q.map(_.toList).distinct\n\
    \        val lst_S = lst_R.map(_.toList).distinct\n        val lst_T = lst_S.map(_.toList).distinct\n\
    \        val lst_U = lst_T.map(_.toList).distinct\n        val lst_V = lst_U.map(_.toList).distinct\n\
    \        val lst_W = lst_V.map(_.toList).distinct\n        val lst_X = lst_W.map(_.toList).distinct\n\
    \        val lst_Y = lst_X.map(_.toList).distinct\n        val lst_Z = lst_Y.map(_.toList).distinct\n\
    \        val lst_A = lst_Z.map(_.toList).distinct\n        val lst_B = lst_A.map(_.toList).distinct\n\
    \        val lst_C = lst_B.map(_.toList).distinct\n        val lst_D = lst_C.map(_.toList).distinct\n\
    \        val lst_E = lst_D.map(_.toList).distinct\n        val lst_F = lst_E.map(_.toList).distinct\n\
    \        val lst_G = lst_F.", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val grid = mutable.ArrayBuffer.empty[List[Long]]\n        for (i <- 1\
    \ to n) {\n            grid += grid((i - 1).toInt)\n        }\n        val visited\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedAll = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedAll2 = mutable.ArrayBuffer.empty[Boolean]\n        val visitedAll3\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedAll4 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedAll5 = mutable.ArrayBuffer.empty[Boolean]\n        val visitedAll6\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedAll7 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedAll8 = mutable.ArrayBuffer.empty[Boolean]\n        val visitedAll9\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedAll10 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedAll11 = mutable.ArrayBuffer.empty[Boolean]\n        val visitedAll12\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedAll13 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedAll14 = mutable.ArrayBuffer.empty[Boolean]\n        val visitedAll15\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedAll16 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedAll17 = mutable.ArrayBuffer.empty[Boolean]\n        val visitedAll18\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedAll19 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedAll20 = mutable.ArrayBuffer.empty[Boolean]\n        val visitedAll21\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedAll22 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedAll23 = mutable.ArrayBuffer.empty[Boolean]\n        val visitedAll24\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedAll25 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedAll26 = mutable.ArrayBuffer.empty[Boolean]\n        val visitedAll27\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedAll28 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visitedAll29 = mutable.ArrayBuffer.empty[Boolean]\n        val ",
  "        val N = grid.size\n        val m = grid.head\n        val n = grid.last\n\
    \        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_D\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_E = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_F = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_G = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_H\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_I = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_J = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_K = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_L\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_M = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_N = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_O = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_P\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_Q = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_R = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_S = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_T\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_U = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_V = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        ", "        val N = grid.length\n        val m = grid.head\n        val\
    \ n = grid.last\n        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_D\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_E = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_F = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_G = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_H\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_I = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_J = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_K = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_L\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_M = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_N = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_O = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_P\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_Q = lst_A.zip(lst_B).map(x\
    \ => x._2 < x._1)\n        val lst_R = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_S = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_T\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_U = lst_A.zip(lst_B).map(x\
    \ => x._2 < x._1)\n        val lst_V = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        ", "        val n = grid.size\n        val m = grid(0).size\n       \
    \ val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val stack = new Array[Long](k)\n        val stackPointer = 0\n      \
    \  val stackPointer2 = 1\n        val stackPointer3 = 2\n        val stackPointer4\
    \ = 3\n        val stackPointer5 = 4\n        val stackPointer6 = 5\n        val\
    \ stackPointer7 = 6\n        val stackPointer8 = 7\n        val stackPointer9\
    \ = 8\n        val stackPointer10 = 9\n        val stackPointer11 = 10\n     \
    \   val stackPointer12 = 11\n        val stackPointer13 = 12\n        val stackPointer14\
    \ = 13\n        val stackPointer15 = 14\n        val stackPointer16 = 15\n   \
    \     val stackPointer17 = 16\n        val stackPointer18 = 17\n        val stackPointer19\
    \ = 18\n        val stackPointer20 = 19\n        val stackPointer21 = 20\n   \
    \     val stackPointer22 = 21\n        val stackPointer23 = 22\n        val stackPointer24\
    \ = 23\n        val stackPointer25 = 24\n        val stackPointer26 = 25\n   \
    \     val stackPointer27 = 26\n        val stackPointer28 = 27\n        val stackPointer29\
    \ = 28\n        val stackPointer30 = 29\n        val stackPointer31 = 30\n   \
    \     val stackPointer32 = 31\n        val stackPointer33 = 32\n        val stackPointer34\
    \ = 33\n        val stackPointer35 = 34\n        val stackPointer36 = 35\n   \
    \     val stackPointer37 = 36\n        val stackPointer38 = 37\n        val stackPointer39\
    \ = 38\n        val stackPointer40 = 39\n        val stackPointer41 = 40\n   \
    \     val stackPointer42 = 41\n        val stackPointer43 = 42\n        val stackPointer44\
    \ = 43\n        val stackPointer45 = 44\n        val stackPointer46 = 45\n   \
    \     val stackPointer47 = 46\n        val stackPointer48 = 47\n        val stackPointer49\
    \ = 48\n        val stackPointer50 = 49\n        val stackPointer51 = 50\n   \
    \     val stackPointer52 = 51\n        val stackPointer53 = 52\n        val stackPointer54\
    \ = 53\n        val stackPointer55 = 54\n        val stackPointer56 = 55\n   \
    \     val stackPointer57 = 56\n        val stackPointer58 = 57\n        val stackPointer59\
    \ = 58\n        val stackPointer60 = 59\n        val stackPointer61 = 60\n", " \
    \       val n = grid.length\n        val m = grid(0).length\n        val grid\
    \ = mutable.ArrayBuffer.empty[List[Long]](m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                grid.append(grid(i).filterNot(x\
    \ => x == grid(j)))\n            }\n        }\n        val visited = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val ans = mutable.ArrayBuffer.empty[Long]\n        val visitedCount =\
    \ mutable.ArrayBuffer.empty[Int](m)\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount = mutable.ArrayBuffer.empty[Int](m)\n        val visited\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount = mutable.ArrayBuffer.empty[Int](m)\n        val visited\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount = mutable.ArrayBuffer.empty[Int](m)\n        val visited\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount = mutable.ArrayBuffer.empty[Int](m)\n        val visited\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount = mutable.ArrayBuffer.empty[Int](m)\n        val visited\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount = mutable.ArrayBuffer.empty[Int](m)\n        val visited\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount = mutable.ArrayBuffer.empty[Int](m)\n        val visited\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount = mutable.ArrayBuffer.empty[Int](m)\n        val visited\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount = mutable.ArrayBuffer.empty[Int](m)\n        val visited\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount = mutable.ArrayBuffer.empty[Int](m)\n", "        val\
    \ m = grid.size\n        val n = grid(0).size\n        val grid = grid.toList\n\
    \        val grid2 = grid.map(_.toList)\n        val grid3 = grid2.map(_.toList)\n\
    \        val grid4 = grid3.map(_.toList)\n        val grid5 = grid4.map(_.toList)\n\
    \        val grid6 = grid5.map(_.toList)\n        val grid7 = grid6.map(_.toList)\n\
    \        val grid8 = grid7.map(_.toList)\n        val grid9 = grid8.map(_.toList)\n\
    \        val grid10 = grid9.map(_.toList)\n        val grid11 = grid10.map(_.toList)\n\
    \        val grid12 = grid11.map(_.toList)\n        val grid13 = grid12.map(_.toList)\n\
    \        val grid14 = grid13.map(_.toList)\n        val grid15 = grid14.map(_.toList)\n\
    \        val grid16 = grid15.map(_.toList)\n        val grid17 = grid16.map(_.toList)\n\
    \        val grid18 = grid17.map(_.toList)\n        val grid19 = grid18.map(_.toList)\n\
    \        val grid20 = grid19.map(_.toList)\n        val grid21 = grid20.map(_.toList)\n\
    \        val grid22 = grid21.map(_.toList)\n        val grid23 = grid22.map(_.toList)\n\
    \        val grid24 = grid23.map(_.toList)\n        val grid25 = grid24.map(_.toList)\n\
    \        val grid26 = grid25.map(_.toList)\n        val grid27 = grid26.map(_.toList)\n\
    \        val grid28 = grid27.map(_.toList)\n        val grid29 = grid28.map(_.toList)\n\
    \        val grid30 = grid29.map(_.toList)\n        val grid31 = grid30.map(_.toList)\n\
    \        val grid32 = grid31.map(_.toList)\n        val grid33 = grid32.map(_.toList)\n\
    \        val grid34 = grid33.map(_.toList)\n        val grid35 = grid34.map(_.toList)\n\
    \        val grid36 = grid35.map(_.toList)\n        val grid37 = grid36.map(_.toList)\n\
    \        val grid38 = grid37.map(_.toList)\n        val grid39 = grid38.map(_.toList)\n\
    \        val grid40 = grid39.map(_.toList)\n        val grid41 = grid40.map(_.toList)\n\
    \        val grid42 = grid41.map(_.toList)\n        val grid43 = grid42.map(_.",
  "        val m = grid.length\n        val n = grid(0).length\n        val result\
    \ = new mutable.ArrayBuffer[Long]()\n        val visited = new mutable.HashSet[Long]()\n\
    \        val visitedEdge = new mutable.HashSet[Long]()\n        val visitedEdge2\
    \ = new mutable.HashSet[Long]()\n        val visitedEdge3 = new mutable.HashSet[Long]()\n\
    \        val visitedEdge4 = new mutable.HashSet[Long]()\n        val visitedEdge5\
    \ = new mutable.HashSet[Long]()\n        val visitedEdge6 = new mutable.HashSet[Long]()\n\
    \        val visitedEdge7 = new mutable.HashSet[Long]()\n        val visitedEdge8\
    \ = new mutable.HashSet[Long]()\n        val visitedEdge9 = new mutable.HashSet[Long]()\n\
    \        val visitedEdge10 = new mutable.HashSet[Long]()\n        val visitedEdge11\
    \ = new mutable.HashSet[Long]()\n        val visitedEdge12 = new mutable.HashSet[Long]()\n\
    \        val visitedEdge13 = new mutable.HashSet[Long]()\n        val visitedEdge14\
    \ = new mutable.HashSet[Long]()\n        val visitedEdge15 = new mutable.HashSet[Long]()\n\
    \        val visitedEdge16 = new mutable.HashSet[Long]()\n        val visitedEdge17\
    \ = new mutable.HashSet[Long]()\n        val visitedEdge18 = new mutable.HashSet[Long]()\n\
    \        val visitedEdge19 = new mutable.HashSet[Long]()\n        val visitedEdge20\
    \ = new mutable.HashSet[Long]()\n        val visitedEdge21 = new mutable.HashSet[Long]()\n\
    \        val visitedEdge22 = new mutable.HashSet[Long]()\n        val visitedEdge23\
    \ = new mutable.HashSet[Long]()\n        val visitedEdge24 = new mutable.HashSet[Long]()\n\
    \        val visitedEdge25 = new mutable.HashSet[Long]()\n        val visitedEdge26\
    \ = new mutable.HashSet[Long]()\n        val visitedEdge27 = new mutable.HashSet[Long]()\n\
    \        val visitedEdge28 = new mutable.HashSet[Long]()\n        val visitedEdge29\
    \ = new mutable.HashSet[Long]()\n        val visitedEdge30 = new mutable.", " \
    \       val n = grid.length\n        val m = grid(0).length\n        val lst_A\
    \ = grid.map(_.toList).sortBy(_.reverse).map(_.toList).map(_.toLong).toList\n\
    \        val lst_B = grid.map(_.toList).sortBy(_.toList).map(_.toLong).toList\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_D\
    \ = lst_C.filter(x => x._1 < x._2)\n        val lst_E = lst_D.map(x => (x._1,\
    \ x._2))\n        val lst_F = lst_E.filter(x => x._1 < x._2)\n        val lst_G\
    \ = lst_F.map(x => (x._1, x._2))\n        val lst_H = lst_G.filter(x => x._1 <\
    \ x._2)\n        val lst_I = lst_H.map(x => (x._1, x._2))\n        val lst_J =\
    \ lst_I.filter(x => x._1 < x._2)\n        val lst_K = lst_J.map(x => (x._1, x._2))\n\
    \        val lst_L = lst_K.filter(x => x._1 < x._2)\n        val lst_M = lst_L.map(x\
    \ => (x._1, x._2))\n        val lst_N = lst_M.filter(x => x._1 < x._2)\n     \
    \   val lst_O = lst_N.map(x => (x._1, x._2))\n        val lst_P = lst_O.filter(x\
    \ => x._1 < x._2)\n        val lst_Q = lst_P.map(x => (x._1, x._2))\n        val\
    \ lst_R = lst_Q.filter(x => x._1 < x._2)\n        val lst_S = lst_R.map(x => (x._1,\
    \ x._2))\n        val lst_T = lst_S.filter(x => x._1 < x._2)\n        val lst_U\
    \ = lst_T.map(x => (x._1, x._2))\n        val lst_V = lst_U.filter(x => x._1 <\
    \ x._2)\n        val lst_W = lst_V.map(x => (x._1, x._2))\n        val lst_X =\
    \ lst_W.filter(x => x._1 < x._2)\n        val lst_Y = lst_X.map(x => (x._1, x._2))\n\
    \        val lst_Z = lst_Y.filter(x => x._1 < x.", "        val N = grid.length\n\
    \        val m = grid.head\n        val n = grid.last\n        val m = m.toLong\n\
    \        val n = n.toLong\n        val m = m + 1\n        val n = n + k\n    \
    \    val m = m - 1\n        val n = n - 1\n        val m = m + 1\n        val\
    \ n = n - 1\n        val m = m + 1\n        val n = n - 1\n        val m = m +\
    \ 1\n        val n = n - 1\n        val m = m + 1\n        val n = n - 1\n   \
    \     val m = m + 1\n        val n = n - 1\n        val m = m + 1\n        val\
    \ n = n - 1\n        val m = m + 1\n        val n = n - 1\n        val m = m +\
    \ 1\n        val n = n - 1\n        val m = m + 1\n        val n = n - 1\n   \
    \     val m = m + 1\n        val n = n - 1\n        val m = m + 1\n        val\
    \ n = n - 1\n        val m = m + 1\n        val n = n - 1\n        val m = m +\
    \ 1\n        val n = n - 1\n        val m = m + 1\n        val n = n - 1\n   \
    \     val m = m + 1\n        val n = n - 1\n        val m = m + 1\n        val\
    \ n = n - 1\n        val m = m + 1\n        val n = n - 1\n        val m = m +\
    \ 1\n        val n = n - 1\n        val m = m + 1\n        val n = n - 1\n   \
    \     val m = m + 1\n        val n = n - 1\n        val m = m + 1\n        val\
    \ n = n - 1\n        val m = m + 1\n        val n = n - 1\n        val m = m +\
    \ 1\n        val n = n - 1\n        val m = m + 1\n        val n = n - 1\n   \
    \     val m = m + 1\n        val n = n - 1\n        val m = m + 1\n        val\
    \ n = n - 1\n        val m = m + 1\n        val n = n - 1\n        val m = m +\
    \ 1\n        val n = n - 1\n        val m = m + 1\n        val n = n - 1\n   \
    \     val m = m + 1\n        val n = n - 1\n        val m = m + 1\n        val\
    \ n = n - 1\n        val m = m + 1\n        val n = n - 1\n        val m = m +\
    \ 1\n        val n = n - 1\n        val m = m + 1\n        val n = n - 1\n   \
    \     val m = m + 1\n        val n = n - 1\n        val m = m + 1\n        val\
    \ n = n - 1\n        val m = m + 1\n        val n = n - 1\n        val m = m +\
    \ 1\n        val n = n - 1\n", "        val n = grid.size\n        val m = grid(0).size\n\
    \        val visited = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n\
    \        val queue = mutable.PriorityQueue[Long]()\n        val lst_A = grid.map(_.toList)\n\
    \        val lst_B = grid.reverse.map(_.toList)\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_D = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_E = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_F\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_G = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_H = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_I = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_J\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_K = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_L = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_M = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_N\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_O = lst_A.zip(lst_B).map(x\
    \ => x._2 < x._1)\n        val lst_P = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_Q = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_R\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_S = lst_A.zip(lst_B).map(x\
    \ => x._2 < x._1)\n        val lst_T = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_U = lst_A.zip(lst_B).map(x => x._", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val result = new Array[Long](k)\n   \
    \     var minPath = 0\n        var minPathIndex = 0\n        var minPathValue\
    \ = grid(0).head\n        var minPathValueIndex = 0\n        var minPathValueIndex2\
    \ = 0\n        var minPathValueIndex3 = 0\n        var minPathValueIndex4 = 0\n\
    \        var minPathValueIndex5 = 0\n        var minPathValueIndex6 = 0\n    \
    \    var minPathValueIndex7 = 0\n        var minPathValueIndex8 = 0\n        var\
    \ minPathValueIndex9 = 0\n        var minPathValueIndex10 = 0\n        var minPathValueIndex11\
    \ = 0\n        var minPathValueIndex12 = 0\n        var minPathValueIndex13 =\
    \ 0\n        var minPathValueIndex14 = 0\n        var minPathValueIndex15 = 0\n\
    \        var minPathValueIndex16 = 0\n        var minPathValueIndex17 = 0\n  \
    \      var minPathValueIndex18 = 0\n        var minPathValueIndex19 = 0\n    \
    \    var minPathValueIndex20 = 0\n        var minPathValueIndex21 = 0\n      \
    \  var minPathValueIndex22 = 0\n        var minPathValueIndex23 = 0\n        var\
    \ minPathValueIndex24 = 0\n        var minPathValueIndex25 = 0\n        var minPathValueIndex26\
    \ = 0\n        var minPathValueIndex27 = 0\n        var minPathValueIndex28 =\
    \ 0\n        var minPathValueIndex29 = 0\n        var minPathValueIndex30 = 0\n\
    \        var minPathValueIndex31 = 0\n        var minPathValueIndex32 = 0\n  \
    \      var minPathValueIndex33 = 0\n        var minPathValueIndex34 = 0\n    \
    \    var minPathValueIndex35 = 0\n        var minPathValueIndex36 = 0\n      \
    \  var minPathValueIndex37 = 0\n        var minPathValueIndex38 = 0\n        var\
    \ minPathValueIndex39 = 0\n        var minPathValueIndex40 = 0\n        var minPathValueIndex41\
    \ = 0\n        var minPathValueIndex42 = 0\n        var minPathValueIndex43 =\
    \ 0\n        var minPathValueIndex44 = 0\n        var minPathValueIndex45 = 0\n\
    \        var minPathValueIndex46 = 0\n        var minPathValueIndex47 = 0\n  \
    \      var minPathValueIndex48 = 0\n        var minPathValueIndex49 = 0\n    \
    \    var minPathValueIndex50 = 0\n        var minPathValueIndex51 = 0\n      \
    \  var minPathValueIndex52 = 0\n        var minPathValueIndex53 = 0\n        var\
    \ minPathValueIndex54 = 0\n        var minPathValueIndex55 = 0\n        var minPathValueIndex56\
    \ = 0\n        var minPathValueIndex57 = 0\n        var minPathValueIndex58 =\
    \ 0\n        var minPathValueIndex59 = 0", "        val grid = grid.toList\n \
    \       val n = grid.size\n        val m = grid(0).size\n        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted).map(_.distinct).map(_.toArray).toList\n\
    \        val grid = grid.map(_.toList).map(_.sorted", "        val grid = grid.toList\n\
    \        val n = grid.size\n        val m = grid.head.length\n        val visited\
    \ = new mutable.HashSet[Long]()\n        val path = new mutable.ListBuffer[Long]()\n\
    \        val visitedPath = new mutable.HashSet[Long]()\n        val visitedPath2\
    \ = new mutable.HashSet[Long]()\n        val visitedPath3 = new mutable.HashSet[Long]()\n\
    \        val visitedPath4 = new mutable.HashSet[Long]()\n        val visitedPath5\
    \ = new mutable.HashSet[Long]()\n        val visitedPath6 = new mutable.HashSet[Long]()\n\
    \        val visitedPath7 = new mutable.HashSet[Long]()\n        val visitedPath8\
    \ = new mutable.HashSet[Long]()\n        val visitedPath9 = new mutable.HashSet[Long]()\n\
    \        val visitedPath10 = new mutable.HashSet[Long]()\n        val visitedPath11\
    \ = new mutable.HashSet[Long]()\n        val visitedPath12 = new mutable.HashSet[Long]()\n\
    \        val visitedPath13 = new mutable.HashSet[Long]()\n        val visitedPath14\
    \ = new mutable.HashSet[Long]()\n        val visitedPath15 = new mutable.HashSet[Long]()\n\
    \        val visitedPath16 = new mutable.HashSet[Long]()\n        val visitedPath17\
    \ = new mutable.HashSet[Long]()\n        val visitedPath18 = new mutable.HashSet[Long]()\n\
    \        val visitedPath19 = new mutable.HashSet[Long]()\n        val visitedPath20\
    \ = new mutable.HashSet[Long]()\n        val visitedPath21 = new mutable.HashSet[Long]()\n\
    \        val visitedPath22 = new mutable.HashSet[Long]()\n        val visitedPath23\
    \ = new mutable.HashSet[Long]()\n        val visitedPath24 = new mutable.HashSet[Long]()\n\
    \        val visitedPath25 = new mutable.HashSet[Long]()\n        val visitedPath26\
    \ = new mutable.HashSet[Long]()\n        val visitedPath27 = new mutable.HashSet[Long]()\n\
    \        val visitedPath28 = new mutable.HashSet[Long]()\n        val visitedPath29\
    \ = new mutable.HashSet[Long]()\n        ", "        val N = grid.length\n   \
    \     val m = grid.head\n        val n = grid.last\n        val lst_A = grid.map(_.toList)\n\
    \        val lst_B = grid.reverse.map(_.toList)\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_D = lst_A.zip(lst_B).map(x => (x._2, x._1))\n\
    \        val lst_E = lst_A.zip(lst_B).map(x => (x._1, x._1))\n        val lst_F\
    \ = lst_A.zip(lst_B).map(x => (x._2, x._2))\n        val lst_G = lst_A.zip(lst_B).map(x\
    \ => (x._2, x._1))\n        val lst_H = lst_A.zip(lst_B).map(x => (x._1, x._2))\n\
    \        val lst_I = lst_A.zip(lst_B).map(x => (x._2, x._1))\n        val lst_J\
    \ = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_K = lst_A.zip(lst_B).map(x\
    \ => (x._2, x._1))\n        val lst_L = lst_A.zip(lst_B).map(x => (x._1, x._2))\n\
    \        val lst_M = lst_A.zip(lst_B).map(x => (x._2, x._1))\n        val lst_N\
    \ = lst_A.zip(lst_B).map(x => (x._2, x._1))\n        val lst_O = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_P = lst_A.zip(lst_B).map(x => (x._2, x._1))\n\
    \        val lst_Q = lst_A.zip(lst_B).map(x => (x._2, x._1))\n        val lst_R\
    \ = lst_A.zip(lst_B).map(x => (x._2, x._1))\n        val lst_S = lst_A.zip(lst_B).map(x\
    \ => (x._2, x._1))\n        val lst_T = lst_A.zip(lst_B).map(x => (x._2, x._1))\n\
    \        val lst_U = lst_A.zip(lst_B).map(x => (x._2, x._1))\n        val lst_V\
    \ = lst_A.zip(lst_B).map(x => (x._2, x._1))\n        ", "        val n = grid.length\n\
    \        val m = grid(0).length\n        val lst_A = grid.map(_.toList).toList\n\
    \        val lst_B = grid.map(_.toList).toList\n        val lst_C = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => x._1 compare x._2)\n        val lst_D = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => x._1 compare x._2)\n        val lst_E = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => x._1 compare x._2)\n        val lst_F = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => x._1 compare x._2)\n        val lst_G = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => x._1 compare x._2)\n        val lst_H = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => x._1 compare x._2)\n        val lst_I = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => x._1 compare x._2)\n        val lst_J = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => x._1 compare x._2)\n        val lst_K = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => x._1 compare x._2)\n        val lst_L = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => x._1 compare x._2)\n        val lst_M = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => x._1 compare x._2)\n        val lst_N = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => x._1 compare x._2)\n        val lst_O = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => x._1 compare x._2)\n        val lst_P = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => x._1 compare x._2)\n        val lst_Q = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => x._1 compare x._2)\n        val lst_R = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => x._1 compare x._2)\n        val ", "        val m = grid.length\n       \
    \ val n = grid(0).length\n        val grid = grid.toList\n        val visited\
    \ = new mutable.HashSet[Long]\n        val result = new mutable.ListBuffer[Long]\n\
    \        val visitedCount = new mutable.HashMap[Long, Int]\n        val visitedCount2\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCount3 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCount4 = new mutable.HashMap[Long, Int]\n        val\
    \ visitedCount5 = new mutable.HashMap[Long, Int]\n        val visitedCount6 =\
    \ new mutable.HashMap[Long, Int]\n        val visitedCount7 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCount8 = new mutable.HashMap[Long, Int]\n        val\
    \ visitedCount9 = new mutable.HashMap[Long, Int]\n        val visitedCount10 =\
    \ new mutable.HashMap[Long, Int]\n        val visitedCount11 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCount12 = new mutable.HashMap[Long, Int]\n        val\
    \ visitedCount13 = new mutable.HashMap[Long, Int]\n        val visitedCount14\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCount15 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCount16 = new mutable.HashMap[Long, Int]\n        val\
    \ visitedCount17 = new mutable.HashMap[Long, Int]\n        val visitedCount18\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCount19 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCount20 = new mutable.HashMap[Long, Int]\n        val\
    \ visitedCount21 = new mutable.HashMap[Long, Int]\n        val visitedCount22\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCount23 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCount24 = new mutable.HashMap[Long, Int]\n        val\
    \ visitedCount25 = new mutable.HashMap[Long, Int]\n        val visitedCount26\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCount27 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCount28 = new mutable.HashMap[Long, Int]\n        val\
    \ visitedCount29 = new mutable.HashMap[Long, Int]\n        val visite", "    \
    \    val n = grid.length\n        val m = grid(0).length\n        val lst_A =\
    \ grid.map(_.toList).flatten\n        val lst_B = grid.map(_.toList).flatten.reverse\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_D\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_E = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_F = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_G = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_H\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_I = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_J = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_K = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_L\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_M = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_N = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_O = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_P\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_Q = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_R = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_S = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_T\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_U = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_V = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val l", "        val N = grid.length\n        val m = grid.head\n   \
    \     val n = grid.last\n        val lst_A = grid.map(_.toList)\n        val lst_B\
    \ = grid.reverse.map(_.toList)\n        val lst_C = lst_A.zip(lst_B).map(x =>\
    \ (x._1, x._2))\n        val lst_D = lst_A.zip(lst_B).map(x => (x._1, x._2)).reverse\n\
    \        val lst_E = lst_A.zip(lst_B).map(x => (x._1, x._2)).zipWithIndex.filter(x\
    \ => x._2 < k).map(x => (x._2, x._1))\n        val lst_F = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2)).zipWithIndex.filter(x => x._2 < k).map(x => (x._2, x._1)).reverse\n\
    \        val lst_G = lst_A.zip(lst_B).map(x => (x._1, x._2)).zipWithIndex.filter(x\
    \ => x._2 < k).map(x => (x._2, x._1)).zipWithIndex.filter(x => x._2 < k).map(x\
    \ => (x._2, x._1)).reverse\n        val lst_H = lst_A.zip(lst_B).map(x => (x._1,\
    \ x._2)).zipWithIndex.filter(x => x._2 < k).map(x => (x._2, x._1)).zipWithIndex.filter(x\
    \ => x._2 < k).map(x => (x._2, x._1)).zipWithIndex.filter(x => x._2 < k).map(x\
    \ => (x._2, x._1)).reverse\n        val lst_I = lst_A.zip(lst_B).map(x => (x._1,\
    \ x._2)).zipWithIndex.filter(x => x._2 < k).map(x => (x._2, x._1)).zipWithIndex.filter(x\
    \ => x._2 < k).map(x => (x._2, x._1)).zipWithIndex.filter(x => x._2 < k).map(x\
    \ => (x._2, x._1)).zipWithIndex.filter(x => x._2 < k).map(x => (x._2, x._1)).reverse\n\
    \        val lst_J = lst_A.zip(lst_B).map(x => (x._1, x._2)).zipWithIndex.filter(x\
    \ => x._2 < k).map(x => (x._2, x._1)).zipWithIndex.filter(x => x._2 < k).map(x ",
  "        val grid = grid.toList\n        val n = grid.size\n        val m = grid.head.length\n\
    \        val visited = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n\
    \        val lst_A = grid.map(_.toList).sortBy(_.toLong)\n        val lst_B =\
    \ grid.map(_.toList).sortBy(_.toLong.reverse)\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_D = lst_C.map(x => (x._1, x._2))\n       \
    \ val lst_E = lst_D.map(x => (x._1, x._2))\n        val lst_F = lst_E.map(x =>\
    \ (x._1, x._2))\n        val lst_G = lst_F.map(x => (x._1, x._2))\n        val\
    \ lst_H = lst_G.map(x => (x._1, x._2))\n        val lst_I = lst_H.map(x => (x._1,\
    \ x._2))\n        val lst_J = lst_I.map(x => (x._1, x._2))\n        val lst_K\
    \ = lst_J.map(x => (x._1, x._2))\n        val lst_L = lst_K.map(x => (x._1, x._2))\n\
    \        val lst_M = lst_L.map(x => (x._1, x._2))\n        val lst_N = lst_M.map(x\
    \ => (x._1, x._2))\n        val lst_O = lst_N.map(x => (x._1, x._2))\n       \
    \ val lst_P = lst_O.map(x => (x._1, x._2))\n        val lst_Q = lst_P.map(x =>\
    \ (x._1, x._2))\n        val lst_R = lst_Q.map(x => (x._1, x._2))\n        val\
    \ lst_S = lst_R.map(x => (x._1, x._2))\n        val lst_T = lst_S.map(x => (x._1,\
    \ x._2))\n        val lst_U = lst_T.map(x => (x._1, x._2))\n        val lst_V\
    \ = lst_U.map(x => (x._1, x._2))\n        val lst_W = lst_V.map(x => (x._1, x._2))\n\
    \        val lst_X = lst_W.map(x => (x._1, x._2))\n        val lst_Y = lst_X.map(x\
    \ => (x._1, x._2))\n        ", "        val n = grid.size\n        val m = grid(0).size\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val visited = new\
    \ mutable.HashSet[Long]()\n        val visitedSet = new mutable.HashSet[Long]()\n\
    \        val visitedSet2 = new mutable.HashSet[Long]()\n        val visitedSet3\
    \ = new mutable.HashSet[Long]()\n        val visitedSet4 = new mutable.HashSet[Long]()\n\
    \        val visitedSet5 = new mutable.HashSet[Long]()\n        val visitedSet6\
    \ = new mutable.HashSet[Long]()\n        val visitedSet7 = new mutable.HashSet[Long]()\n\
    \        val visitedSet8 = new mutable.HashSet[Long]()\n        val visitedSet9\
    \ = new mutable.HashSet[Long]()\n        val visitedSet10 = new mutable.HashSet[Long]()\n\
    \        val visitedSet11 = new mutable.HashSet[Long]()\n        val visitedSet12\
    \ = new mutable.HashSet[Long]()\n        val visitedSet13 = new mutable.HashSet[Long]()\n\
    \        val visitedSet14 = new mutable.HashSet[Long]()\n        val visitedSet15\
    \ = new mutable.HashSet[Long]()\n        val visitedSet16 = new mutable.HashSet[Long]()\n\
    \        val visitedSet17 = new mutable.HashSet[Long]()\n        val visitedSet18\
    \ = new mutable.HashSet[Long]()\n        val visitedSet19 = new mutable.HashSet[Long]()\n\
    \        val visitedSet20 = new mutable.HashSet[Long]()\n        val visitedSet21\
    \ = new mutable.HashSet[Long]()\n        val visitedSet22 = new mutable.HashSet[Long]()\n\
    \        val visitedSet23 = new mutable.HashSet[Long]()\n        val visitedSet24\
    \ = new mutable.HashSet[Long]()\n        val visitedSet25 = new mutable.HashSet[Long]()\n\
    \        val visitedSet26 = new mutable.HashSet[Long]()\n        val visitedSet27\
    \ = new mutable.HashSet[Long]()\n        val visitedSet28 = new mutable.HashSet[Long]()\n\
    \        val visitedSet29 = new mutable.HashSet[Long]()\n        val visitedSet30\
    \ = new mut", "        val m = grid.size\n        val n = grid(0).size\n     \
    \   val grid = mutable.ArrayBuffer.empty[List[Long]]\n        val visited = mutable.HashSet[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val lst_G = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_H = mutable.ArrayBuffer.empty[Long]\n        val lst_I = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_J = mutable.ArrayBuffer.empty[Long]\n        val lst_K = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_L = mutable.ArrayBuffer.empty[Long]\n        val lst_M = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_N = mutable.ArrayBuffer.empty[Long]\n        val lst_O = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_P = mutable.ArrayBuffer.empty[Long]\n        val lst_Q = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_R = mutable.ArrayBuffer.empty[Long]\n        val lst_S = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_T = mutable.ArrayBuffer.empty[Long]\n        val lst_U = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_V = mutable.ArrayBuffer.empty[Long]\n        val lst_W = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_X = mutable.ArrayBuffer.empty[Long]\n        val lst_Y = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Z = mutable.ArrayBuffer.empty[Long]\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val l", "      \
    \  val n = grid.size\n        val m = grid.head\n        val lst_A = grid.map(_.toList)\n\
    \        val lst_B = grid.map(_.toList)\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var ans = List[Long]()\n        while(i < n && j <\
    \ n) {\n            val a = lst_A(i)\n            val b = lst_B(j)\n         \
    \   if(a.toLong < b.toLong) {\n                ans = ans :+ a.toLong\n       \
    \         i = i + 1\n            } else if(a.toLong > b.toLong) {\n          \
    \      ans = ans :+ b.toLong\n                j = j + 1\n            } else {\n\
    \                k = k + 1\n            }\n        }\n        if(k == k) {\n \
    \           ans = ans :+ m.toLong\n        }\n        ans", "        val n = grid.size\n\
    \        val m = grid(0).size\n        val visited = new mutable.HashSet[Long]()\n\
    \        val ans = List[Long]()\n        val stack = mutable.Stack[Long]()\n \
    \       val stack2 = mutable.Stack[Long]()\n        val stack3 = mutable.Stack[Long]()\n\
    \        val stack4 = mutable.Stack[Long]()\n        val stack5 = mutable.Stack[Long]()\n\
    \        val stack6 = mutable.Stack[Long]()\n        val stack7 = mutable.Stack[Long]()\n\
    \        val stack8 = mutable.Stack[Long]()\n        val stack9 = mutable.Stack[Long]()\n\
    \        val stack10 = mutable.Stack[Long]()\n        val stack11 = mutable.Stack[Long]()\n\
    \        val stack12 = mutable.Stack[Long]()\n        val stack13 = mutable.Stack[Long]()\n\
    \        val stack14 = mutable.Stack[Long]()\n        val stack15 = mutable.Stack[Long]()\n\
    \        val stack16 = mutable.Stack[Long]()\n        val stack17 = mutable.Stack[Long]()\n\
    \        val stack18 = mutable.Stack[Long]()\n        val stack19 = mutable.Stack[Long]()\n\
    \        val stack20 = mutable.Stack[Long]()\n        val stack21 = mutable.Stack[Long]()\n\
    \        val stack22 = mutable.Stack[Long]()\n        val stack23 = mutable.Stack[Long]()\n\
    \        val stack24 = mutable.Stack[Long]()\n        val stack25 = mutable.Stack[Long]()\n\
    \        val stack26 = mutable.Stack[Long]()\n        val stack27 = mutable.Stack[Long]()\n\
    \        val stack28 = mutable.Stack[Long]()\n        val stack29 = mutable.Stack[Long]()\n\
    \        val stack30 = mutable.Stack[Long]()\n        val stack31 = mutable.Stack[Long]()\n\
    \        val stack32 = mutable.Stack[Long]()\n        val stack33 = mutable.Stack[Long]()\n\
    \        val stack34 = mutable.Stack[Long]()\n        val stack35 = mutable.Stack[Long]()\n\
    \        val stack36 = mutable.Stack[Long]()\n        val stack37 = mutable.Stack[Long]()\n\
    \        val stack38 = mutable.", "        val n = grid.size\n        val m =\
    \ grid.head._2.size\n        val result = new Array[Long](k)\n        val visited\
    \ = new Array[Boolean](k)\n        val queue = new Array[Int](k)\n        val\
    \ index = new Array[Int](k)\n        val queueLen = new Array[Int](k)\n      \
    \  val indexLen = new Array[Int](k)\n        val visitedLen = new Array[Boolean](k)\n\
    \        val queueLenLen = new Array[Int](k)\n        val indexLenLen = new Array[Int](k)\n\
    \        val visitedLenLen = new Array[Boolean](k)\n        val queueLenLenLen\
    \ = new Array[Int](k)\n        val indexLenLenLen = new Array[Int](k)\n      \
    \  val visitedLenLenLen = new Array[Boolean](k)\n        val queueLenLenLenLen\
    \ = new Array[Int](k)\n        val indexLenLenLenLen = new Array[Int](k)\n   \
    \     val visitedLenLenLenLen = new Array[Boolean](k)\n        val queueLenLenLenLenLen\
    \ = new Array[Int](k)\n        val indexLenLenLenLenLen = new Array[Int](k)\n\
    \        val visitedLenLenLenLenLen = new Array[Boolean](k)\n        val queueLenLenLenLenLenLen\
    \ = new Array[Int](k)\n        val indexLenLenLenLenLenLen = new Array[Int](k)\n\
    \        val visitedLenLenLenLenLenLen = new Array[Boolean](k)\n        val queueLenLenLenLenLenLenLen\
    \ = new Array[Int](k)\n        val indexLenLenLenLenLenLenLen = new Array[Int](k)\n\
    \        val visitedLenLenLenLenLenLenLen = new Array[Boolean](k)\n        val\
    \ queueLenLenLenLenLenLenLenLen = new Array[Int](k)\n        val indexLenLenLenLenLenLenLenLen\
    \ = new Array[Int](k)\n        val visitedLenLenLenLenLenLenLenLen = new Array[Boolean](k)\n\
    \        val queueLenLenLenLenLenLenLenLenLen = new Array[Int](k)\n        val\
    \ indexLenLenLenLenLenLenLenLenLen = new Array[Int](k)\n        val visitedLenLenLenLenLenLenLenLenLen\
    \ = new Array[Boolean](k)\n        val queueLenLenLenLenLenLenLenLenLenLen = new\
    \ Array[Int](k)\n        val indexLenLenLenLenLenLenLenLenLenLen = new Array[Int](k)\n\
    \        val ", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val grid = mutable.ArrayBuffer.empty[List[Long]]\n        val visited\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visitedSet = mutable.HashSet[Boolean]()\n\
    \        val visitedSetSet = mutable.HashSet[Boolean]()\n        val visitedSetSet2\
    \ = mutable.HashSet[Boolean]()\n        val visitedSetSet3 = mutable.HashSet[Boolean]()\n\
    \        val visitedSetSet4 = mutable.HashSet[Boolean]()\n        val visitedSetSet5\
    \ = mutable.HashSet[Boolean]()\n        val visitedSetSet6 = mutable.HashSet[Boolean]()\n\
    \        val visitedSetSet7 = mutable.HashSet[Boolean]()\n        val visitedSetSet8\
    \ = mutable.HashSet[Boolean]()\n        val visitedSetSet9 = mutable.HashSet[Boolean]()\n\
    \        val visitedSetSet10 = mutable.HashSet[Boolean]()\n        val visitedSetSet11\
    \ = mutable.HashSet[Boolean]()\n        val visitedSetSet12 = mutable.HashSet[Boolean]()\n\
    \        val visitedSetSet13 = mutable.HashSet[Boolean]()\n        val visitedSetSet14\
    \ = mutable.HashSet[Boolean]()\n        val visitedSetSet15 = mutable.HashSet[Boolean]()\n\
    \        val visitedSetSet16 = mutable.HashSet[Boolean]()\n        val visitedSetSet17\
    \ = mutable.HashSet[Boolean]()\n        val visitedSetSet18 = mutable.HashSet[Boolean]()\n\
    \        val visitedSetSet19 = mutable.HashSet[Boolean]()\n        val visitedSetSet20\
    \ = mutable.HashSet[Boolean]()\n        val visitedSetSet21 = mutable.HashSet[Boolean]()\n\
    \        val visitedSetSet22 = mutable.HashSet[Boolean]()\n        val visitedSetSet23\
    \ = mutable.HashSet[Boolean]()\n        val visitedSetSet24 = mutable.HashSet[Boolean]()\n\
    \        val visitedSetSet25 = mutable.HashSet[Boolean]()\n        val visitedSetSet26\
    \ = mutable.HashSet[Boolean]()\n        val visitedSetSet27 = mutable.HashSet[Boolean]()\n\
    \        val visitedSetSet28 = mutable.Hash", "        val n = grid.length\n \
    \       val m = grid(0).length\n        val result = new Array[Long](k)\n    \
    \    var min = 0\n        var index = 0\n        var current = 0\n        var\
    \ currentMin = 0\n        var currentIndex = 0\n        var currentMinIndex =\
    \ 0\n        var currentMinIndex2 = 0\n        var currentMinIndex3 = 0\n    \
    \    var currentMinIndex4 = 0\n        var currentMinIndex5 = 0\n        var currentMinIndex6\
    \ = 0\n        var currentMinIndex7 = 0\n        var currentMinIndex8 = 0\n  \
    \      var currentMinIndex9 = 0\n        var currentMinIndex10 = 0\n        var\
    \ currentMinIndex11 = 0\n        var currentMinIndex12 = 0\n        var currentMinIndex13\
    \ = 0\n        var currentMinIndex14 = 0\n        var currentMinIndex15 = 0\n\
    \        var currentMinIndex16 = 0\n        var currentMinIndex17 = 0\n      \
    \  var currentMinIndex18 = 0\n        var currentMinIndex19 = 0\n        var currentMinIndex20\
    \ = 0\n        var currentMinIndex21 = 0\n        var currentMinIndex22 = 0\n\
    \        var currentMinIndex23 = 0\n        var currentMinIndex24 = 0\n      \
    \  var currentMinIndex25 = 0\n        var currentMinIndex26 = 0\n        var currentMinIndex27\
    \ = 0\n        var currentMinIndex28 = 0\n        var currentMinIndex29 = 0\n\
    \        var currentMinIndex30 = 0\n        var currentMinIndex31 = 0\n      \
    \  var currentMinIndex32 = 0\n        var currentMinIndex33 = 0\n        var currentMinIndex34\
    \ = 0\n        var currentMinIndex35 = 0\n        var currentMinIndex36 = 0\n\
    \        var currentMinIndex37 = 0\n        var currentMinIndex38 = 0\n      \
    \  var currentMinIndex39 = 0\n        var currentMinIndex40 = 0\n        var currentMinIndex41\
    \ = 0\n        var currentMinIndex42 = 0\n        var currentMinIndex43 = 0\n\
    \        var currentMinIndex44 = 0\n        var currentMinIndex45 = 0\n      \
    \  var currentMinIndex46 = 0\n        var currentMinIndex47 = 0\n        var currentMinIndex48\
    \ = 0\n        var currentMinIndex49 = 0\n        var currentMinIndex50 = 0\n\
    \        var currentMinIndex51 = 0\n        var currentMinIndex52 = 0\n      \
    \  var currentMinIndex53 = 0\n        var currentMinIndex54 = 0\n        var currentMinIndex55\
    \ = 0\n        var currentMinIndex56 = 0\n        var currentMinIndex57 = 0\n\
    \        var currentMinIndex58 = 0\n        var currentMinIndex59 = 0\n      \
    \  var currentMinIndex60 = 0\n        var currentMinIndex61 = 0\n        var currentMinIndex62\
    \ = 0\n        var currentMinIndex63 = 0\n        var currentMinIndex64 = 0\n\
    \        var currentMinIndex65 = 0\n        var currentMinIndex66 = 0\n      \
    \  var currentMinIndex67 = 0", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val stack = new Array[Int](k)\n        val stackSize = 0\n        val\
    \ stackIndex = 0\n        val stackMax = k - 1\n        val stackMin = 0\n   \
    \     val stackIndexMin = 0\n        val stackIndexMax = k - 1\n        val stackMaxIndex\
    \ = k - 1\n        val stackMinIndex = k - 1\n        val stackMaxIndexMin = k\
    \ - 1\n        val stackMinIndexMax = k - 1\n        val stackMaxIndexMinIndex\
    \ = k - 1\n        val stackMaxIndexMax = k - 1\n        val stackMinIndexMaxIndex\
    \ = k - 1\n        val stackMaxIndexMinIndexMax = k - 1\n        val stackMinIndexMaxIndexMin\
    \ = k - 1\n        val stackMaxIndexMinIndexMaxIndex = k - 1\n        val stackMaxIndexMinIndexMaxIndexMin\
    \ = k - 1\n        val stackMinIndexMaxIndexMinIndexMax = k - 1\n        val stackMinIndexMaxIndexMinIndexMaxIndex\
    \ = k - 1\n        val stackMaxIndexMinIndexMaxIndexMinIndexMax = k - 1\n    \
    \    val stackMinIndexMaxIndexMinIndexMaxIndexMin = k - 1\n        val stackMinIndexMaxIndexMinIndexMaxIndexMinIndex\
    \ = k - 1\n        val stackMaxIndexMinIndexMaxIndexMinIndexMaxIndexMin = k -\
    \ 1\n        val stackMinIndexMaxIndexMinIndexMaxIndexMinIndexMax = k - 1\n  \
    \      val stackMinIndexMaxIndexMinIndexMaxIndexMinIndexMaxIndex = k - 1\n   \
    \     val stackMaxIndexMinIndexMaxIndexMinIndexMaxIndexMinIndexMax = k - 1\n \
    \       val stackMinIndexMaxIndexMinIndexMaxIndexMinIndexMaxIndexMin = k - 1\n\
    \        val stackMinIndexMaxIndexMinIndexMaxIndexMinIndexMaxIndexMinIndex = k\
    \ - 1\n        val stackMaxIndexMinIndexMaxIndexMinIndexMaxIndexMinIndexMaxIndexMin\
    \ = k - 1\n        val stackMinIndexMaxIndexMinIndexMaxIndexMinIndexMaxIndexMinIndexMax\
    \ = k - 1\n        val stackMinIndexMaxIndexMinIndexMaxIndexMinIndexMaxIndexMinIndexMaxIndex\
    \ = k - 1\n        val stackMaxIndexMinIndexMaxIndexMinIndexMaxIndexMinIndexMaxIndexMin\
    \ = k - 1\n        val stackMinIndexMaxIndexMinIndexMaxIndexMinIndexMaxIndexMinIndexMaxIndexMin\
    \ = k - 1\n        val stackMinIndexMaxIndexMin", "        val m = grid.size\n\
    \        val n = grid(0).size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val visited = new mutable.HashSet[Long]()\n        val visitedList =\
    \ new mutable.ListBuffer[Long]()\n        val visitedList2 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList3 = new mutable.ListBuffer[Long]()\n        val visitedList4\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList5 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList6 = new mutable.ListBuffer[Long]()\n        val visitedList7\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList8 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList9 = new mutable.ListBuffer[Long]()\n        val visitedList10\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList11 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList12 = new mutable.ListBuffer[Long]()\n        val visitedList13\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList14 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList15 = new mutable.ListBuffer[Long]()\n        val visitedList16\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList17 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList18 = new mutable.ListBuffer[Long]()\n        val visitedList19\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList20 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList21 = new mutable.ListBuffer[Long]()\n        val visitedList22\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList23 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList24 = new mutable.ListBuffer[Long]()\n        val visitedList25\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList26 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList27 = new mutable.ListBuffer[Long]()\n        val visitedList28\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList29 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList30 = new mut", "        val N = grid.length\n        val\
    \ m = grid.head\n        val n = grid.last\n        val lst_A = grid.map(_.toList)\n\
    \        val lst_B = grid.reverse.map(_.toList)\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_D = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_E = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_F\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_G = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_H = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_I = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_J\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_K = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_L = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_M = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_N\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_O = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_P = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_Q = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_R\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_S = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_T = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_U = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_V\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        ", "        val n = grid.length\n\
    \        val m = grid(0).length\n        val lst_A = grid.map(_.toList).toList\n\
    \        val lst_B = grid.map(_.toList).toList\n        val lst_C = lst_A.map(_.toList).sortBy(_.compareTo(_))\n\
    \        val lst_D = lst_B.map(_.toList).sortBy(_.compareTo(_))\n        val lst_E\
    \ = lst_C.map(_.toList).sortBy(_.compareTo(_))\n        val lst_F = lst_D.map(_.toList).sortBy(_.compareTo(_))\n\
    \        val lst_G = lst_E.map(_.toList).sortBy(_.compareTo(_))\n        val lst_H\
    \ = lst_F.map(_.toList).sortBy(_.compareTo(_))\n        val lst_I = lst_G.map(_.toList).sortBy(_.compareTo(_))\n\
    \        val lst_J = lst_H.map(_.toList).sortBy(_.compareTo(_))\n        val lst_K\
    \ = lst_I.map(_.toList).sortBy(_.compareTo(_))\n        val lst_L = lst_J.map(_.toList).sortBy(_.compareTo(_))\n\
    \        val lst_M = lst_K.map(_.toList).sortBy(_.compareTo(_))\n        val lst_N\
    \ = lst_L.map(_.toList).sortBy(_.compareTo(_))\n        val lst_O = lst_M.map(_.toList).sortBy(_.compareTo(_))\n\
    \        val lst_P = lst_O.map(_.toList).sortBy(_.compareTo(_))\n        val lst_Q\
    \ = lst_P.map(_.toList).sortBy(_.compareTo(_))\n        val lst_R = lst_Q.map(_.toList).sortBy(_.compareTo(_))\n\
    \        val lst_S = lst_R.map(_.toList).sortBy(_.compareTo(_))\n        val lst_T\
    \ = lst_S.map(_.toList).sortBy(_.compareTo(_))\n        val lst_U = lst_T.map(_.toList).sortBy(_.compareTo(_))\n\
    \        val lst_V = lst_U.map(_.toList).sortBy(_.compareTo(_))\n        val lst_W\
    \ = lst_V.map(_.toList).sortBy(_.compareTo(_))\n        val lst_X = lst_W.map(_.toList).sortBy(_.compareTo(_))",
  "        val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        val\
    \ queue = new Array[Int](n)\n        val visitedMap = new mutable.HashMap[Int,\
    \ Boolean]()\n        val queueMap = new mutable.HashMap[Int, Int]()\n       \
    \ val queueMap2 = new mutable.HashMap[Int, Int]()\n        val queueMap3 = new\
    \ mutable.HashMap[Int, Int]()\n        val queueMap4 = new mutable.HashMap[Int,\
    \ Int]()\n        val queueMap5 = new mutable.HashMap[Int, Int]()\n        val\
    \ queueMap6 = new mutable.HashMap[Int, Int]()\n        val queueMap7 = new mutable.HashMap[Int,\
    \ Int]()\n        val queueMap8 = new mutable.HashMap[Int, Int]()\n        val\
    \ queueMap9 = new mutable.HashMap[Int, Int]()\n        val queueMap10 = new mutable.HashMap[Int,\
    \ Int]()\n        val queueMap11 = new mutable.HashMap[Int, Int]()\n        val\
    \ queueMap12 = new mutable.HashMap[Int, Int]()\n        val queueMap13 = new mutable.HashMap[Int,\
    \ Int]()\n        val queueMap14 = new mutable.HashMap[Int, Int]()\n        val\
    \ queueMap15 = new mutable.HashMap[Int, Int]()\n        val queueMap16 = new mutable.HashMap[Int,\
    \ Int]()\n        val queueMap17 = new mutable.HashMap[Int, Int]()\n        val\
    \ queueMap18 = new mutable.HashMap[Int, Int]()\n        val queueMap19 = new mutable.HashMap[Int,\
    \ Int]()\n        val queueMap20 = new mutable.HashMap[Int, Int]()\n        val\
    \ queueMap21 = new mutable.HashMap[Int, Int]()\n        val queueMap22 = new mutable.HashMap[Int,\
    \ Int]()\n        val queueMap23 = new mutable.HashMap[Int, Int]()\n        val\
    \ queueMap24 = new mutable.HashMap[Int, Int]()\n        val queueMap25 = new mutable.HashMap[Int,\
    \ Int]()\n        val queueMap26 = new mutable.HashMap[Int, Int]()\n        val\
    \ queueMap27 = new mutable.HashMap[Int, Int]()\n        val queueMap28 = new mutable.HashMap[Int,\
    \ Int]()\n        val queueMap", "        val N = grid.length\n        val m =\
    \ grid.head\n        val n = grid.last\n        val lst_A = grid.map(_.toList)\n\
    \        val lst_B = grid.reverse.map(_.toList)\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_D = lst_C.map(x => (x._1, x._2))\n       \
    \ val lst_E = lst_D.map(x => (x._1, x._2))\n        val lst_F = lst_E.map(x =>\
    \ (x._1, x._2))\n        val lst_G = lst_F.map(x => (x._1, x._2))\n        val\
    \ lst_H = lst_G.map(x => (x._1, x._2))\n        val lst_I = lst_H.map(x => (x._1,\
    \ x._2))\n        val lst_J = lst_I.map(x => (x._1, x._2))\n        val lst_K\
    \ = lst_J.map(x => (x._1, x._2))\n        val lst_L = lst_K.map(x => (x._1, x._2))\n\
    \        val lst_M = lst_L.map(x => (x._1, x._2))\n        val lst_N = lst_M.map(x\
    \ => (x._1, x._2))\n        val lst_O = lst_N.map(x => (x._1, x._2))\n       \
    \ val lst_P = lst_O.map(x => (x._1, x._2))\n        val lst_Q = lst_P.map(x =>\
    \ (x._1, x._2))\n        val lst_R = lst_Q.map(x => (x._1, x._2))\n        val\
    \ lst_S = lst_R.map(x => (x._1, x._2))\n        val lst_T = lst_S.map(x => (x._1,\
    \ x._2))\n        val lst_U = lst_T.map(x => (x._1, x._2))\n        val lst_V\
    \ = lst_U.map(x => (x._1, x._2))\n        val lst_W = lst_V.map(x => (x._1, x._2))\n\
    \        val lst_X = lst_W.map(x => (x._1, x._2))\n        val lst_Y = lst_X.map(x\
    \ => (x._1, x._2))\n        val lst_Z = lst_Y.map(x => (x._1, x._2))\n       \
    \ val lst_A = lst_Z.map(x => (x._1, x._2))\n        ", "        val n = grid.length\n\
    \        val m = grid(0).length\n        val result = new Array[Long](k)\n   \
    \     val visited = new Array[Boolean](k)\n        val visited0 = new Array[Boolean](k)\n\
    \        val visited1 = new Array[Boolean](k)\n        val visited2 = new Array[Boolean](k)\n\
    \        val visited3 = new Array[Boolean](k)\n        val visited4 = new Array[Boolean](k)\n\
    \        val visited5 = new Array[Boolean](k)\n        val visited6 = new Array[Boolean](k)\n\
    \        val visited7 = new Array[Boolean](k)\n        val visited8 = new Array[Boolean](k)\n\
    \        val visited9 = new Array[Boolean](k)\n        val visited10 = new Array[Boolean](k)\n\
    \        val visited11 = new Array[Boolean](k)\n        val visited12 = new Array[Boolean](k)\n\
    \        val visited13 = new Array[Boolean](k)\n        val visited14 = new Array[Boolean](k)\n\
    \        val visited15 = new Array[Boolean](k)\n        val visited16 = new Array[Boolean](k)\n\
    \        val visited17 = new Array[Boolean](k)\n        val visited18 = new Array[Boolean](k)\n\
    \        val visited19 = new Array[Boolean](k)\n        val visited20 = new Array[Boolean](k)\n\
    \        val visited21 = new Array[Boolean](k)\n        val visited22 = new Array[Boolean](k)\n\
    \        val visited23 = new Array[Boolean](k)\n        val visited24 = new Array[Boolean](k)\n\
    \        val visited25 = new Array[Boolean](k)\n        val visited26 = new Array[Boolean](k)\n\
    \        val visited27 = new Array[Boolean](k)\n        val visited28 = new Array[Boolean](k)\n\
    \        val visited29 = new Array[Boolean](k)\n        val visited30 = new Array[Boolean](k)\n\
    \        val visited31 = new Array[Boolean](k)\n        val visited32 = new Array[Boolean](k)\n\
    \        val visited33 = new Array[Boolean](k)\n        val visited34 = new Array[Boolean](k)\n\
    \        val visited35 = new Array[Boolean](k)\n        val visited36 = new Array[Boolean](k)\n\
    \        val visited37 = new Array[Boolean](k)\n        val visited38 = new Array[Boolean](k)\n\
    \        val visited39 = new Array[Boolean](k)\n        val visited", "      \
    \  val N = grid.length\n        val m = grid.head\n        val n = grid.last\n\
    \        val grid = grid.tail\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n        val\
    \ grid = grid.dropRight(1)\n        val grid = grid.dropRight(1)\n", "       \
    \ val grid = grid.toList\n        val n = grid.size\n        val m = grid(0).size\n\
    \        val visited = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n\
    \        val lst_A = List[Long]()\n        val lst_B = List[Long]()\n        val\
    \ lst_C = List[Long]()\n        val lst_D = List[Long]()\n        val lst_E =\
    \ List[Long]()\n        val lst_F = List[Long]()\n        val lst_G = List[Long]()\n\
    \        val lst_H = List[Long]()\n        val lst_I = List[Long]()\n        val\
    \ lst_J = List[Long]()\n        val lst_K = List[Long]()\n        val lst_L =\
    \ List[Long]()\n        val lst_M = List[Long]()\n        val lst_N = List[Long]()\n\
    \        val lst_O = List[Long]()\n        val lst_P = List[Long]()\n        val\
    \ lst_Q = List[Long]()\n        val lst_R = List[Long]()\n        val lst_S =\
    \ List[Long]()\n        val lst_T = List[Long]()\n        val lst_U = List[Long]()\n\
    \        val lst_V = List[Long]()\n        val lst_W = List[Long]()\n        val\
    \ lst_X = List[Long]()\n        val lst_Y = List[Long]()\n        val lst_Z =\
    \ List[Long]()\n        val lst_A = List[Long]()\n        val lst_B = List[Long]()\n\
    \        val lst_C = List[Long]()\n        val lst_D = List[Long]()\n        val\
    \ lst_E = List[Long]()\n        val lst_F = List[Long]()\n        val lst_G =\
    \ List[Long]()\n        val lst_H = List[Long]()\n        val lst_I = List[Long]()\n\
    \        val lst_J = List[Long]()\n        val lst_K = List[Long]()\n        val\
    \ lst_L = List[Long]()\n        val lst_M = List[Long]()\n        val lst_N =\
    \ List[Long]()\n        val lst_O = List[Long]()\n        val lst_P = List[Long]()\n\
    \        val lst_Q = List[Long]()\n        val lst_R = List[Long]()\n        val\
    \ lst_S = List[Long]()\n        val ", "        val n = grid.length\n        val\
    \ m = grid(0).length\n        val result = new Array[Long](k)\n        var i =\
    \ 0\n        var j = 0\n        var k = 0\n        var min = 0\n        var minIndex\
    \ = 0\n        var minValue = 0\n        var minPath = 0\n        var isFound\
    \ = false\n        var isMinPathFound = false\n        var isMinPathValid = false\n\
    \        var isMinPathValidIndex = 0\n        var isMinPathValidValue = 0\n  \
    \      var isMinPathValidPath = 0\n        var isMinPathValidPathIndex = 0\n \
    \       var isMinPathValidPathValue = 0\n        var isMinPathValidPathPath =\
    \ 0\n        var isMinPathValidPathPathIndex = 0\n        var isMinPathValidPathPathValue\
    \ = 0\n        var isMinPathValidPathPathPath = 0\n        var isMinPathValidPathPathIndex\
    \ = 0\n        var isMinPathValidPathPathValue = 0\n        var isMinPathValidPathPathPath\
    \ = 0\n        var isMinPathValidPathPathIndex = 0\n        var isMinPathValidPathPathValue\
    \ = 0\n        var isMinPathValidPathPathPath = 0\n        var isMinPathValidPathPathIndex\
    \ = 0\n        var isMinPathValidPathPathValue = 0\n        var isMinPathValidPathPathPath\
    \ = 0\n        var isMinPathValidPathPathIndex = 0\n        var isMinPathValidPathPathValue\
    \ = 0\n        var isMinPathValidPathPathPath = 0\n        var isMinPathValidPathPathIndex\
    \ = 0\n        var isMinPathValidPathPathValue = 0\n        var isMinPathValidPathPathPath\
    \ = 0\n        var isMinPathValidPathPathIndex = 0\n        var isMinPathValidPathPathValue\
    \ = 0\n        var isMinPathValidPathPathPath = 0\n        var isMinPathValidPathPathIndex\
    \ = 0\n        var isMinPathValidPathPathValue = 0\n        var isMinPathValidPathPathPath\
    \ = 0\n        var isMinPathValidPathPathIndex = 0\n        var isMinPathValidPathPathValue\
    \ = 0\n        var isMinPathValidPathPathPath = 0\n        var isMinPathValidPathPathIndex\
    \ = 0\n        var isMinPathValidPathPathValue = 0\n        var isMinPathValidPathPathPath\
    \ = 0\n        var isMinPathValidPathPathIndex = 0\n        var isMinPathValidPathPathValue\
    \ = 0\n        var isMinPathValidPathPathPath = 0\n        var isMinPathValidPathPathIndex\
    \ = 0\n        var isMinPathValidPathPathValue = 0\n        var isMinPathValidPathPathPath\
    \ = 0\n        var isMinPathValidPathPathIndex = 0\n        var isMinPathValidPathPathValue\
    \ = 0\n        var isMinPathValidPathPathPath = 0", "        val m = grid.size\n\
    \        val n = grid(0).size\n        val visited = new mutable.HashSet[Long]()\n\
    \        val result = new mutable.ArrayBuffer[Long]()\n        val visitedSet\
    \ = new mutable.HashSet[Long]()\n        val visitedSet2 = new mutable.HashSet[Long]()\n\
    \        val visitedSet3 = new mutable.HashSet[Long]()\n        val visitedSet4\
    \ = new mutable.HashSet[Long]()\n        val visitedSet5 = new mutable.HashSet[Long]()\n\
    \        val visitedSet6 = new mutable.HashSet[Long]()\n        val visitedSet7\
    \ = new mutable.HashSet[Long]()\n        val visitedSet8 = new mutable.HashSet[Long]()\n\
    \        val visitedSet9 = new mutable.HashSet[Long]()\n        val visitedSet10\
    \ = new mutable.HashSet[Long]()\n        val visitedSet11 = new mutable.HashSet[Long]()\n\
    \        val visitedSet12 = new mutable.HashSet[Long]()\n        val visitedSet13\
    \ = new mutable.HashSet[Long]()\n        val visitedSet14 = new mutable.HashSet[Long]()\n\
    \        val visitedSet15 = new mutable.HashSet[Long]()\n        val visitedSet16\
    \ = new mutable.HashSet[Long]()\n        val visitedSet17 = new mutable.HashSet[Long]()\n\
    \        val visitedSet18 = new mutable.HashSet[Long]()\n        val visitedSet19\
    \ = new mutable.HashSet[Long]()\n        val visitedSet20 = new mutable.HashSet[Long]()\n\
    \        val visitedSet21 = new mutable.HashSet[Long]()\n        val visitedSet22\
    \ = new mutable.HashSet[Long]()\n        val visitedSet23 = new mutable.HashSet[Long]()\n\
    \        val visitedSet24 = new mutable.HashSet[Long]()\n        val visitedSet25\
    \ = new mutable.HashSet[Long]()\n        val visitedSet26 = new mutable.HashSet[Long]()\n\
    \        val visitedSet27 = new mutable.HashSet[Long]()\n        val visitedSet28\
    \ = new mutable.HashSet[Long]()\n        val visitedSet29 = new mutable.HashSet[Long]()\n\
    \        val visitedSet30 = new mutable.", "        val n = grid.length\n    \
    \    val m = grid(0).length\n        val result = new Array[Long](k)\n       \
    \ var minPath = 0\n        var minPathIndex = 0\n        var currentPath = 0\n\
    \        var currentPathIndex = 0\n        var currentPathValue = 0\n        var\
    \ currentPathValueIndex = 0\n        var currentPathValueIndex2 = 0\n        var\
    \ currentPathValueIndex3 = 0\n        var currentPathValueIndex4 = 0\n       \
    \ var currentPathValueIndex5 = 0\n        var currentPathValueIndex6 = 0\n   \
    \     var currentPathValueIndex7 = 0\n        var currentPathValueIndex8 = 0\n\
    \        var currentPathValueIndex9 = 0\n        var currentPathValueIndex10 =\
    \ 0\n        var currentPathValueIndex11 = 0\n        var currentPathValueIndex12\
    \ = 0\n        var currentPathValueIndex13 = 0\n        var currentPathValueIndex14\
    \ = 0\n        var currentPathValueIndex15 = 0\n        var currentPathValueIndex16\
    \ = 0\n        var currentPathValueIndex17 = 0\n        var currentPathValueIndex18\
    \ = 0\n        var currentPathValueIndex19 = 0\n        var currentPathValueIndex20\
    \ = 0\n        var currentPathValueIndex21 = 0\n        var currentPathValueIndex22\
    \ = 0\n        var currentPathValueIndex23 = 0\n        var currentPathValueIndex24\
    \ = 0\n        var currentPathValueIndex25 = 0\n        var currentPathValueIndex26\
    \ = 0\n        var currentPathValueIndex27 = 0\n        var currentPathValueIndex28\
    \ = 0\n        var currentPathValueIndex29 = 0\n        var currentPathValueIndex30\
    \ = 0\n        var currentPathValueIndex31 = 0\n        var currentPathValueIndex32\
    \ = 0\n        var currentPathValueIndex33 = 0\n        var currentPathValueIndex34\
    \ = 0\n        var currentPathValueIndex35 = 0\n        var currentPathValueIndex36\
    \ = 0\n        var currentPathValueIndex37 = 0\n        var currentPathValueIndex38\
    \ = 0\n        var currentPathValueIndex39 = 0\n        var currentPathValueIndex40\
    \ = 0\n        var currentPathValueIndex41 = 0\n        var currentPathValueIndex42\
    \ = 0\n        var currentPathValueIndex43 = 0\n        var currentPathValueIndex44\
    \ = 0\n        var currentPathValueIndex45 = 0\n        var currentPathValueIndex46\
    \ = 0\n        var currentPathValueIndex47 = 0\n        var currentPathValueIndex48\
    \ = 0\n        var currentPathValueIndex49 = 0\n        var currentPathValueIndex50\
    \ = 0\n        var currentPathValueIndex51 = 0\n        var currentPathValueIndex52\
    \ = 0\n        var currentPathValueIndex53 = 0\n        var currentPathValueIndex54\
    \ = 0\n        var currentPathValueIndex55 = 0\n        var currentPathValueIndex56\
    \ = 0\n        var currentPathValueIndex57 = 0\n        var currentPathValueIndex58",
  "        val grid = grid.toList\n        val n = grid.size\n        val m = grid(0).size\n\
    \        val lst_A = grid.map(_.toList).map(_.toLong).toList\n        val lst_B\
    \ = grid.map(_.toList).map(_.toLong).reverse.toList\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_D = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x\
    \ => x._1)\n        val lst_E = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x =>\
    \ x._2).reverse\n        val lst_F = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x\
    \ => x._2).reverse.map(x => x._1)\n        val lst_G = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2).map(x => x._2).reverse.map(x => x._2).reverse\n        val lst_H\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x => x._2).reverse.map(x => x._2).reverse.map(x\
    \ => x._1)\n        val lst_I = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x =>\
    \ x._2).reverse.map(x => x._2).reverse.map(x => x._2).reverse\n        val lst_J\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x => x._2).reverse.map(x => x._2).reverse.map(x\
    \ => x._2).reverse.map(x => x._1)\n        val lst_K = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2).map(x => x._2).reverse.map(x => x._2).reverse.map(x => x._2).reverse.map(x\
    \ => x._2).reverse\n        val lst_L = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x\
    \ => x._2).reverse.map(x => x._2).reverse.map(x => x._2).reverse.map(x => x._2).reverse.map(x\
    \ => x._1)\n        val lst_M = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x =>\
    \ x._2).reverse.map(x => x.", "        val n = grid.length\n        val m = grid(0).length\n\
    \        val visited = new mutable.HashSet[Long]()\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_A = grid.map(_.toList).map(_.sorted).map(_.head)\n        val\
    \ lst_B = grid.map(_.toList).map(_.sorted).map(_.last)\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_D = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_E = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_F\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_G = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_H = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_I = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_J\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_K = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_L = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_M = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_N\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_O = lst_A.zip(lst_B).map(x\
    \ => x._2 < x._1)\n        val lst_P = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_Q = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_R\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_S = lst_A.zip(lst_B).map(x\
    \ => x._2 < x._1)\n        val lst_T = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_U = lst_A.zip(lst_", "        val m = grid.length\n        val\
    \ n = grid(0).length\n        val result = new Array[Long](k)\n        val visited\
    \ = new Array[Boolean](k)\n        val stack = new Array[Long](k)\n        val\
    \ stackSize = 0\n        val stackIndex = 0\n        val stackMax = k - 1\n  \
    \      val stackMin = 0\n        val stackMaxIndex = 0\n        val stackMinIndex\
    \ = 0\n        val stackMaxIndex = 0\n        val stackMinIndex = 0\n        val\
    \ stackMaxIndex = 0\n        val stackMinIndex = 0\n        val stackMaxIndex\
    \ = 0\n        val stackMinIndex = 0\n        val stackMaxIndex = 0\n        val\
    \ stackMinIndex = 0\n        val stackMaxIndex = 0\n        val stackMinIndex\
    \ = 0\n        val stackMaxIndex = 0\n        val stackMinIndex = 0\n        val\
    \ stackMaxIndex = 0\n        val stackMinIndex = 0\n        val stackMaxIndex\
    \ = 0\n        val stackMinIndex = 0\n        val stackMaxIndex = 0\n        val\
    \ stackMinIndex = 0\n        val stackMaxIndex = 0\n        val stackMinIndex\
    \ = 0\n        val stackMaxIndex = 0\n        val stackMinIndex = 0\n        val\
    \ stackMaxIndex = 0\n        val stackMinIndex = 0\n        val stackMaxIndex\
    \ = 0\n        val stackMinIndex = 0\n        val stackMaxIndex = 0\n        val\
    \ stackMinIndex = 0\n        val stackMaxIndex = 0\n        val stackMinIndex\
    \ = 0\n        val stackMaxIndex = 0\n        val stackMinIndex = 0\n        val\
    \ stackMaxIndex = 0\n        val stackMinIndex = 0\n        val stackMaxIndex\
    \ = 0\n        val stackMinIndex = 0\n        val stackMaxIndex = 0\n        val\
    \ stackMinIndex = 0\n        val stackMaxIndex = 0\n        val stackMinIndex\
    \ = 0\n        val stackMaxIndex = 0\n        val stackMinIndex = 0\n        val\
    \ stackMaxIndex = 0\n        val stackMinIndex = 0\n        val stackMaxIndex\
    \ = 0\n        val stackMinIndex = 0\n        val stackMaxIndex = 0\n        val\
    \ stackMinIndex = 0\n        val stackMaxIndex = 0\n        val stackMinIndex\
    \ = 0\n        val stackMaxIndex = 0\n        val stackMinIndex = 0\n        val\
    \ stackMaxIndex = 0\n        val stackMinIndex = 0\n        val stackMaxIndex\
    \ = 0\n        val stackMinIndex = 0\n        val stackMaxIndex = 0\n        val\
    \ stackMinIndex = 0\n        val stackMaxIndex = 0\n        val stackMinIndex\
    \ = 0\n        val stackMaxIndex = 0\n        ", "        val grid = grid.toList\n\
    \        val N = grid.size\n        val visited = new mutable.HashSet[Long]\n\
    \        val visitedList = new mutable.ListBuffer[Long]\n        val visitedList2\
    \ = new mutable.ListBuffer[Long]\n        val visitedList3 = new mutable.ListBuffer[Long]\n\
    \        val visitedList4 = new mutable.ListBuffer[Long]\n        val visitedList5\
    \ = new mutable.ListBuffer[Long]\n        val visitedList6 = new mutable.ListBuffer[Long]\n\
    \        val visitedList7 = new mutable.ListBuffer[Long]\n        val visitedList8\
    \ = new mutable.ListBuffer[Long]\n        val visitedList9 = new mutable.ListBuffer[Long]\n\
    \        val visitedList10 = new mutable.ListBuffer[Long]\n        val visitedList11\
    \ = new mutable.ListBuffer[Long]\n        val visitedList12 = new mutable.ListBuffer[Long]\n\
    \        val visitedList13 = new mutable.ListBuffer[Long]\n        val visitedList14\
    \ = new mutable.ListBuffer[Long]\n        val visitedList15 = new mutable.ListBuffer[Long]\n\
    \        val visitedList16 = new mutable.ListBuffer[Long]\n        val visitedList17\
    \ = new mutable.ListBuffer[Long]\n        val visitedList18 = new mutable.ListBuffer[Long]\n\
    \        val visitedList19 = new mutable.ListBuffer[Long]\n        val visitedList20\
    \ = new mutable.ListBuffer[Long]\n        val visitedList21 = new mutable.ListBuffer[Long]\n\
    \        val visitedList22 = new mutable.ListBuffer[Long]\n        val visitedList23\
    \ = new mutable.ListBuffer[Long]\n        val visitedList24 = new mutable.ListBuffer[Long]\n\
    \        val visitedList25 = new mutable.ListBuffer[Long]\n        val visitedList26\
    \ = new mutable.ListBuffer[Long]\n        val visitedList27 = new mutable.ListBuffer[Long]\n\
    \        val visitedList28 = new mutable.ListBuffer[Long]\n        val visitedList29\
    \ = new mutable.ListBuffer[Long]\n        val visitedList30 = new mutable.ListBuffer[Long]\n\
    \        val visitedList31 = new mutable.ListBuffer[Long]\n        val visitedList32\
    \ = new mutable.ListBuffer[Long]\n        val visitedList", "        val m = grid.size\n\
    \        val n = grid(0).size\n        val lst_A = grid.map(_.toList).toList\n\
    \        val lst_B = grid.map(_.toList).toList\n        val lst_C = lst_A.map(_.toList).sortBy(_.toLong)\n\
    \        val lst_D = lst_B.map(_.toList).sortBy(_.toLong)\n        val lst_E =\
    \ lst_C.map(_.toList).sortBy(_.toLong)\n        val lst_F = lst_D.map(_.toList).sortBy(_.toLong)\n\
    \        val lst_G = lst_E.map(_.toList).sortBy(_.toLong)\n        val lst_H =\
    \ lst_F.map(_.toList).sortBy(_.toLong)\n        val lst_I = lst_G.map(_.toList).sortBy(_.toLong)\n\
    \        val lst_J = lst_H.map(_.toList).sortBy(_.toLong)\n        val lst_K =\
    \ lst_I.map(_.toList).sortBy(_.toLong)\n        val lst_L = lst_J.map(_.toList).sortBy(_.toLong)\n\
    \        val lst_M = lst_K.map(_.toList).sortBy(_.toLong)\n        val lst_N =\
    \ lst_M.map(_.toList).sortBy(_.toLong)\n        val lst_O = lst_N.map(_.toList).sortBy(_.toLong)\n\
    \        val lst_P = lst_O.map(_.toList).sortBy(_.toLong)\n        val lst_Q =\
    \ lst_P.map(_.toList).sortBy(_.toLong)\n        val lst_R = lst_Q.map(_.toList).sortBy(_.toLong)\n\
    \        val lst_S = lst_R.map(_.toList).sortBy(_.toLong)\n        val lst_T =\
    \ lst_S.map(_.toList).sortBy(_.toLong)\n        val lst_U = lst_T.map(_.toList).sortBy(_.toLong)\n\
    \        val lst_V = lst_U.map(_.toList).sortBy(_.toLong)\n        val lst_W =\
    \ lst_V.map(_.toList).sortBy(_.toLong)\n        val lst_X = lst_W.map(_.toList).sortBy(_.toLong)\n\
    \        val lst_Y = lst_X.map(_.toList).sortBy(_.toLong)\n        ", "      \
    \  val N = grid.size\n        val m = N * N\n        val lst_A = grid.map(_.toList).flatten\n\
    \        val lst_B = grid.map(_.toList).flatten.reverse\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_D = lst_C.map(x => (x._1, x._2))\n       \
    \ val lst_E = lst_D.map(x => (x._1, x._2))\n        val lst_F = lst_E.map(x =>\
    \ (x._1, x._2))\n        val lst_G = lst_F.map(x => (x._1, x._2))\n        val\
    \ lst_H = lst_G.map(x => (x._1, x._2))\n        val lst_I = lst_H.map(x => (x._1,\
    \ x._2))\n        val lst_J = lst_I.map(x => (x._1, x._2))\n        val lst_K\
    \ = lst_J.map(x => (x._1, x._2))\n        val lst_L = lst_K.map(x => (x._1, x._2))\n\
    \        val lst_M = lst_L.map(x => (x._1, x._2))\n        val lst_N = lst_M.map(x\
    \ => (x._1, x._2))\n        val lst_O = lst_N.map(x => (x._1, x._2))\n       \
    \ val lst_P = lst_O.map(x => (x._1, x._2))\n        val lst_Q = lst_P.map(x =>\
    \ (x._1, x._2))\n        val lst_R = lst_Q.map(x => (x._1, x._2))\n        val\
    \ lst_S = lst_R.map(x => (x._1, x._2))\n        val lst_T = lst_S.map(x => (x._1,\
    \ x._2))\n        val lst_U = lst_T.map(x => (x._1, x._2))\n        val lst_V\
    \ = lst_U.map(x => (x._1, x._2))\n        val lst_W = lst_V.map(x => (x._1, x._2))\n\
    \        val lst_X = lst_W.map(x => (x._1, x._2))\n        val lst_Y = lst_X.map(x\
    \ => (x._1, x._2))\n        val lst_Z = lst_Y.map(x => (x._1, x._2))\n       \
    \ val lst_A = lst_Z.map(x => (x._1, x._2))\n        val l", "        val n = grid.size\n\
    \        val m = grid(0).size\n        val visited = new Array[Boolean](m * n)\n\
    \        val path = new Array[Long](m * n)\n        val lst = new Array[Long](m\
    \ * n)\n        val lst2 = new Array[Long](m * n)\n        val lst3 = new Array[Long](m\
    \ * n)\n        val lst4 = new Array[Long](m * n)\n        val lst5 = new Array[Long](m\
    \ * n)\n        val lst6 = new Array[Long](m * n)\n        val lst7 = new Array[Long](m\
    \ * n)\n        val lst8 = new Array[Long](m * n)\n        val lst9 = new Array[Long](m\
    \ * n)\n        val lst10 = new Array[Long](m * n)\n        val lst11 = new Array[Long](m\
    \ * n)\n        val lst12 = new Array[Long](m * n)\n        val lst13 = new Array[Long](m\
    \ * n)\n        val lst14 = new Array[Long](m * n)\n        val lst15 = new Array[Long](m\
    \ * n)\n        val lst16 = new Array[Long](m * n)\n        val lst17 = new Array[Long](m\
    \ * n)\n        val lst18 = new Array[Long](m * n)\n        val lst19 = new Array[Long](m\
    \ * n)\n        val lst20 = new Array[Long](m * n)\n        val lst21 = new Array[Long](m\
    \ * n)\n        val lst22 = new Array[Long](m * n)\n        val lst23 = new Array[Long](m\
    \ * n)\n        val lst24 = new Array[Long](m * n)\n        val lst25 = new Array[Long](m\
    \ * n)\n        val lst26 = new Array[Long](m * n)\n        val lst27 = new Array[Long](m\
    \ * n)\n        val lst28 = new Array[Long](m * n)\n        val lst29 = new Array[Long](m\
    \ * n)\n        val lst30 = new Array[Long](m * n)\n        val lst31 = new Array[Long](m\
    \ * n)\n        val lst32 = new Array[Long](m * n)\n        val lst33 = new Array[Long](m\
    \ * n)\n        val lst34 = new Array[Long](m * n)\n        val lst35 = new Array[Long](m\
    \ * n)\n        val lst36 = new Array[Long](m * n)\n        val lst37 = new ",
  "        val n = grid.size\n        val m = grid(0).size\n        val lst_A = grid.map(x\
    \ => x.map(y => y)).toList\n        val lst_B = grid.map(x => x.map(y => y)).toList\n\
    \        val lst_C = lst_A.map(x => x.toList)\n        val lst_D = lst_B.map(x\
    \ => x.toList)\n        val lst_E = lst_C.map(x => x.toList)\n        val lst_F\
    \ = lst_D.map(x => x.toList)\n        val lst_G = lst_E.map(x => x.toList)\n \
    \       val lst_H = lst_F.map(x => x.toList)\n        val lst_I = lst_G.map(x\
    \ => x.toList)\n        val lst_J = lst_H.map(x => x.toList)\n        val lst_K\
    \ = lst_I.map(x => x.toList)\n        val lst_L = lst_J.map(x => x.toList)\n \
    \       val lst_M = lst_K.map(x => x.toList)\n        val lst_N = lst_L.map(x\
    \ => x.toList)\n        val lst_O = lst_M.map(x => x.toList)\n        val lst_P\
    \ = lst_O.map(x => x.toList)\n        val lst_Q = lst_P.map(x => x.toList)\n \
    \       val lst_R = lst_Q.map(x => x.toList)\n        val lst_S = lst_R.map(x\
    \ => x.toList)\n        val lst_T = lst_S.map(x => x.toList)\n        val lst_U\
    \ = lst_T.map(x => x.toList)\n        val lst_V = lst_U.map(x => x.toList)\n \
    \       val lst_W = lst_V.map(x => x.toList)\n        val lst_X = lst_W.map(x\
    \ => x.toList)\n        val lst_Y = lst_X.map(x => x.toList)\n        val lst_Z\
    \ = lst_Y.map(x => x.toList)\n        val lst_A = lst_Z.map(x => x.toList)\n \
    \       val lst_B = lst_A.map(x => x.toList)\n        val lst_C = lst_B.map(x\
    \ => x.toList)\n        val lst_D = lst_C.map(x => x.toList)\n        val lst_E\
    \ = lst_D.map(x => x.toList)\n        val lst_F = lst_E.map(x => x.toList)\n",
  "        val m = grid.length\n        val n = grid(0).length\n        val grid =\
    \ mutable.ArrayBuffer.empty[List[Long]]\n        val visited = mutable.HashSet.empty[Long]\n\
    \        val paths = mutable.HashSet.empty[List[Long]]\n        val pathLength\
    \ = mutable.HashSet.empty[Long]\n        val pathLengths = mutable.HashSet.empty[Long]\n\
    \        val pathLengthsCount = mutable.HashSet.empty[Long]\n        val pathLengthsCounts\
    \ = mutable.HashSet.empty[Long]\n        val pathLengthsCountMax = mutable.HashSet.empty[Long]\n\
    \        val pathLengthsCountMaxs = mutable.HashSet.empty[Long]\n        val pathLengthsCountMaxMax\
    \ = mutable.HashSet.empty[Long]\n        val pathLengthsCountMaxMaxs = mutable.HashSet.empty[Long]\n\
    \        val pathLengthsCountMaxMaxMax = mutable.HashSet.empty[Long]\n       \
    \ val pathLengthsCountMaxMaxMaxs = mutable.HashSet.empty[Long]\n        val pathLengthsCountMaxMaxMaxMax\
    \ = mutable.HashSet.empty[Long]\n        val pathLengthsCountMaxMaxMaxMaxs = mutable.HashSet.empty[Long]\n\
    \        val pathLengthsCountMaxMaxMaxMaxMax = mutable.HashSet.empty[Long]\n \
    \       val pathLengthsCountMaxMaxMaxMaxMaxs = mutable.HashSet.empty[Long]\n \
    \       val pathLengthsCountMaxMaxMaxMaxMaxMax = mutable.HashSet.empty[Long]\n\
    \        val pathLengthsCountMaxMaxMaxMaxMaxMaxs = mutable.HashSet.empty[Long]\n\
    \        val pathLengthsCountMaxMaxMaxMaxMaxMaxMax = mutable.HashSet.empty[Long]\n\
    \        val pathLengthsCountMaxMaxMaxMaxMaxMaxMaxs = mutable.HashSet.empty[Long]\n\
    \        val pathLengthsCountMaxMaxMaxMaxMaxMaxMaxMax = mutable.HashSet.empty[Long]\n\
    \        val pathLengthsCountMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.HashSet.empty[Long]\n\
    \        val pathLengthsCountMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.HashSet.empty[Long]\n\
    \        val pathLengthsCountMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.HashSet.empty[Long]\n\
    \        val pathLengthsCountMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.HashSet.empty[Long",
  "        val N = grid.length\n        val m = grid.head\n        val n = grid.last\n\
    \        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_D\
    \ = lst_C.map(x => (x._1, x._2))\n        val lst_E = lst_D.map(x => (x._1, x._2))\n\
    \        val lst_F = lst_E.map(x => (x._1, x._2))\n        val lst_G = lst_F.map(x\
    \ => (x._1, x._2))\n        val lst_H = lst_G.map(x => (x._1, x._2))\n       \
    \ val lst_I = lst_H.map(x => (x._1, x._2))\n        val lst_J = lst_I.map(x =>\
    \ (x._1, x._2))\n        val lst_K = lst_J.map(x => (x._1, x._2))\n        val\
    \ lst_L = lst_K.map(x => (x._1, x._2))\n        val lst_M = lst_L.map(x => (x._1,\
    \ x._2))\n        val lst_N = lst_M.map(x => (x._1, x._2))\n        val lst_O\
    \ = lst_N.map(x => (x._1, x._2))\n        val lst_P = lst_O.map(x => (x._1, x._2))\n\
    \        val lst_Q = lst_P.map(x => (x._1, x._2))\n        val lst_R = lst_Q.map(x\
    \ => (x._1, x._2))\n        val lst_S = lst_R.map(x => (x._1, x._2))\n       \
    \ val lst_T = lst_S.map(x => (x._1, x._2))\n        val lst_U = lst_T.map(x =>\
    \ (x._1, x._2))\n        val lst_V = lst_U.map(x => (x._1, x._2))\n        val\
    \ lst_W = lst_V.map(x => (x._1, x._2))\n        val lst_X = lst_W.map(x => (x._1,\
    \ x._2))\n        val lst_Y = lst_X.map(x => (x._1, x._2))\n        val lst_Z\
    \ = lst_Y.map(x => (x._1, x._2))\n        val lst_A = lst_Z.map(x => (x._1, x._2))\n\
    \        ", "        val n = grid.size\n        val m = grid(0).size\n       \
    \ val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val queue = new Array[Int](k)\n        val visited_ind = new Array[Int](k)\n\
    \        val queue_ind = new Array[Int](k)\n        val queue_size = new Array[Int](k)\n\
    \        val queue_size_ind = new Array[Int](k)\n        val queue_size_val =\
    \ new Array[Int](k)\n        val queue_size_val_ind = new Array[Int](k)\n    \
    \    val queue_size_val_val = new Array[Int](k)\n        val queue_size_val_val_ind\
    \ = new Array[Int](k)\n        val queue_size_val_val_val = new Array[Int](k)\n\
    \        val queue_size_val_val_val_ind = new Array[Int](k)\n        val queue_size_val_val_val_val\
    \ = new Array[Int](k)\n        val queue_size_val_val_val_val_ind = new Array[Int](k)\n\
    \        val queue_size_val_val_val_val_val = new Array[Int](k)\n        val queue_size_val_val_val_val_val_ind\
    \ = new Array[Int](k)\n        val queue_size_val_val_val_val_val_val = new Array[Int](k)\n\
    \        val queue_size_val_val_val_val_val_val_ind = new Array[Int](k)\n    \
    \    val queue_size_val_val_val_val_val_val_val = new Array[Int](k)\n        val\
    \ queue_size_val_val_val_val_val_val_val_ind = new Array[Int](k)\n        val\
    \ queue_size_val_val_val_val_val_val_val_val = new Array[Int](k)\n        val\
    \ queue_size_val_val_val_val_val_val_val_val_ind = new Array[Int](k)\n       \
    \ val queue_size_val_val_val_val_val_val_val_val_val = new Array[Int](k)\n   \
    \     val queue_size_val_val_val_val_val_val_val_val_val_ind = new Array[Int](k)\n\
    \        val queue_size_val_val_val_val_val_val_val_val_val_val = new Array[Int](k)\n\
    \        val queue_size_val_val_val_val_val_val_val_val_val_ind = new Array[Int](k)\n\
    \        val queue_size_val_val_val_val_val_val_val_val_val_val = new Array[Int](k)\n\
    \        val queue_size_val_val_val_val_val_val_val_val_val_ind = new Array[Int](k)\n\
    \        val queue_size_val_val_val_val_val_val_val_val_val_val_val = new Array[Int](k)\n\
    \        val queue_size_val_", "        val n = grid.size\n        val m = grid(0).size\n\
    \        val visited = new mutable.HashSet[Long]()\n        val path = new mutable.ListBuffer[Long]()\n\
    \        val visitedPath = new mutable.HashSet[Long]()\n        val visitedPath2\
    \ = new mutable.HashSet[Long]()\n        val visitedPath3 = new mutable.HashSet[Long]()\n\
    \        val visitedPath4 = new mutable.HashSet[Long]()\n        val visitedPath5\
    \ = new mutable.HashSet[Long]()\n        val visitedPath6 = new mutable.HashSet[Long]()\n\
    \        val visitedPath7 = new mutable.HashSet[Long]()\n        val visitedPath8\
    \ = new mutable.HashSet[Long]()\n        val visitedPath9 = new mutable.HashSet[Long]()\n\
    \        val visitedPath10 = new mutable.HashSet[Long]()\n        val visitedPath11\
    \ = new mutable.HashSet[Long]()\n        val visitedPath12 = new mutable.HashSet[Long]()\n\
    \        val visitedPath13 = new mutable.HashSet[Long]()\n        val visitedPath14\
    \ = new mutable.HashSet[Long]()\n        val visitedPath15 = new mutable.HashSet[Long]()\n\
    \        val visitedPath16 = new mutable.HashSet[Long]()\n        val visitedPath17\
    \ = new mutable.HashSet[Long]()\n        val visitedPath18 = new mutable.HashSet[Long]()\n\
    \        val visitedPath19 = new mutable.HashSet[Long]()\n        val visitedPath20\
    \ = new mutable.HashSet[Long]()\n        val visitedPath21 = new mutable.HashSet[Long]()\n\
    \        val visitedPath22 = new mutable.HashSet[Long]()\n        val visitedPath23\
    \ = new mutable.HashSet[Long]()\n        val visitedPath24 = new mutable.HashSet[Long]()\n\
    \        val visitedPath25 = new mutable.HashSet[Long]()\n        val visitedPath26\
    \ = new mutable.HashSet[Long]()\n        val visitedPath27 = new mutable.HashSet[Long]()\n\
    \        val visitedPath28 = new mutable.HashSet[Long]()\n        val visitedPath29\
    \ = new mutable.HashSet[Long]()\n        val visitedPath30 = new mut", "     \
    \   val n = grid.size\n        val m = grid(0).size\n        val grid = grid.toList\n\
    \        val visited = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedMap = mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap2 = mutable.HashMap[Long, Boolean]()\n   \
    \     val visitedMap3 = mutable.HashMap[Long, Boolean]()\n        val visitedMap4\
    \ = mutable.HashMap[Long, Boolean]()\n        val visitedMap5 = mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap6 = mutable.HashMap[Long, Boolean]()\n   \
    \     val visitedMap7 = mutable.HashMap[Long, Boolean]()\n        val visitedMap8\
    \ = mutable.HashMap[Long, Boolean]()\n        val visitedMap9 = mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap10 = mutable.HashMap[Long, Boolean]()\n  \
    \      val visitedMap11 = mutable.HashMap[Long, Boolean]()\n        val visitedMap12\
    \ = mutable.HashMap[Long, Boolean]()\n        val visitedMap13 = mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap14 = mutable.HashMap[Long, Boolean]()\n  \
    \      val visitedMap15 = mutable.HashMap[Long, Boolean]()\n        val visitedMap16\
    \ = mutable.HashMap[Long, Boolean]()\n        val visitedMap17 = mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap18 = mutable.HashMap[Long, Boolean]()\n  \
    \      val visitedMap19 = mutable.HashMap[Long, Boolean]()\n        val visitedMap20\
    \ = mutable.HashMap[Long, Boolean]()\n        val visitedMap21 = mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap22 = mutable.HashMap[Long, Boolean]()\n  \
    \      val visitedMap23 = mutable.HashMap[Long, Boolean]()\n        val visitedMap24\
    \ = mutable.HashMap[Long, Boolean]()\n        val visitedMap25 = mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap26 = mutable.HashMap[Long, Boolean]()\n  \
    \      val visitedMap27 = mutable.HashMap[Long, Boolean]()\n        val visitedMap28\
    \ = mutable.HashMap[Long", "        val m = grid.size\n        val n = grid(0).size\n\
    \        val grid = grid.map(_.toList)\n        val visited = new mutable.HashSet[Long]()\n\
    \        val ans = List[Long]()\n        val visitedList = new mutable.HashSet[Long]()\n\
    \        val visitedList2 = new mutable.HashSet[Long]()\n        val visitedList3\
    \ = new mutable.HashSet[Long]()\n        val visitedList4 = new mutable.HashSet[Long]()\n\
    \        val visitedList5 = new mutable.HashSet[Long]()\n        val visitedList6\
    \ = new mutable.HashSet[Long]()\n        val visitedList7 = new mutable.HashSet[Long]()\n\
    \        val visitedList8 = new mutable.HashSet[Long]()\n        val visitedList9\
    \ = new mutable.HashSet[Long]()\n        val visitedList10 = new mutable.HashSet[Long]()\n\
    \        val visitedList11 = new mutable.HashSet[Long]()\n        val visitedList12\
    \ = new mutable.HashSet[Long]()\n        val visitedList13 = new mutable.HashSet[Long]()\n\
    \        val visitedList14 = new mutable.HashSet[Long]()\n        val visitedList15\
    \ = new mutable.HashSet[Long]()\n        val visitedList16 = new mutable.HashSet[Long]()\n\
    \        val visitedList17 = new mutable.HashSet[Long]()\n        val visitedList18\
    \ = new mutable.HashSet[Long]()\n        val visitedList19 = new mutable.HashSet[Long]()\n\
    \        val visitedList20 = new mutable.HashSet[Long]()\n        val visitedList21\
    \ = new mutable.HashSet[Long]()\n        val visitedList22 = new mutable.HashSet[Long]()\n\
    \        val visitedList23 = new mutable.HashSet[Long]()\n        val visitedList24\
    \ = new mutable.HashSet[Long]()\n        val visitedList25 = new mutable.HashSet[Long]()\n\
    \        val visitedList26 = new mutable.HashSet[Long]()\n        val visitedList27\
    \ = new mutable.HashSet[Long]()\n        val visitedList28 = new mutable.HashSet[Long]()\n\
    \        val visitedList29 = new mutable.HashSet[Long]()\n        val visite",
  "        val m = grid.length\n        val n = grid(0).length\n        val visited\
    \ = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n        val queue\
    \ = mutable.Queue[Long]()\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to m) {\n            val row = grid(i)\n            val rowLength\
    \ = row.length\n            val rowMax = rowLength - 1\n            for (j <-\
    \ 1 to n) {\n                val col = grid(j)\n                val colLength\
    \ = col.length\n                val colMax = colLength - 1\n                val\
    \ value = row(j) + col(j) + k\n                if (value <= rowMax * colMax) {\n\
    \                    if (visited.contains(value)) {\n                        queue.enqueue(value)\n\
    \                    } else {\n                        visited.add(value)\n  \
    \                      visitedList += value\n                    }\n         \
    \       }\n            }\n        }\n        visitedList.sortWith((x, y) => x\
    \ < y)\n        visitedList.foreach(x => ans += x)\n        ans", "        val\
    \ m = grid.length\n        val n = grid(0).length\n        val result = new Array[Long](k)\n\
    \        val visited = new Array[Boolean](k)\n        val stack = new Array[Long](k)\n\
    \        val stackIndex = new Array[Int](k)\n        val stackIndexIndex = new\
    \ Array[Int](k)\n        val stackIndexIndexIndex = new Array[Int](k)\n      \
    \  val stackIndexIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n  \
    \      val stackIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = new\
    \ Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new ", "        val m = grid.length\n        val n = grid(0).length\n    \
    \    val result = new mutable.ListBuffer[Long]()\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var k1 = k\n        var k2 = k\n        var\
    \ k3 = k\n        var k4 = k\n        var k5 = k\n        var k6 = k\n       \
    \ var k7 = k\n        var k8 = k\n        var k9 = k\n        var k10 = k\n  \
    \      var k11 = k\n        var k12 = k\n        var k13 = k\n        var k14\
    \ = k\n        var k15 = k\n        var k16 = k\n        var k17 = k\n       \
    \ var k18 = k\n        var k19 = k\n        var k20 = k\n        var k21 = k\n\
    \        var k22 = k\n        var k23 = k\n        var k24 = k\n        var k25\
    \ = k\n        var k26 = k\n        var k27 = k\n        var k28 = k\n       \
    \ var k29 = k\n        var k30 = k\n        var k31 = k\n        var k32 = k\n\
    \        var k33 = k\n        var k34 = k\n        var k35 = k\n        var k36\
    \ = k\n        var k37 = k\n        var k38 = k\n        var k39 = k\n       \
    \ var k40 = k\n        var k41 = k\n        var k42 = k\n        var k43 = k\n\
    \        var k44 = k\n        var k45 = k\n        var k46 = k\n        var k47\
    \ = k\n        var k48 = k\n        var k49 = k\n        var k50 = k\n       \
    \ var k51 = k\n        var k52 = k\n        var k53 = k\n        var k54 = k\n\
    \        var k55 = k\n        var k56 = k\n        var k57 = k\n        var k58\
    \ = k\n        var k59 = k\n        var k60 = k\n        var k61 = k\n       \
    \ var k62 = k\n        var k63 = k\n        var k64 = k\n        var k65 = k\n\
    \        var k66 = k\n        var k67 = k\n        var k68 = k\n        var k69\
    \ = k\n        var k70 = k\n        var k71 = k\n        var k72 = k\n       \
    \ var k73 = k\n        var k74 = k\n        var k75 = k\n        var k76 = k\n\
    \        var k77 = k\n        var k78 = k\n        var k79 = k\n        var k80\
    \ = k\n        var k81 = k\n        var k82 = ", "        val n = grid.size\n\
    \        val m = grid.head.length\n        val lst_A = grid.map(_.toList).toList\n\
    \        val lst_B = grid.reverse.map(_.toList).toList\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_D = lst_A.zip(lst_B).map(x => x._1 < x._2).distinct\n\
    \        val lst_E = lst_A.zip(lst_B).map(x => x._1 < x._2).distinct\n       \
    \ val lst_F = lst_A.zip(lst_B).map(x => x._1 < x._2).distinct\n        val lst_G\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2).distinct\n        val lst_H = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2).distinct\n        val lst_I = lst_A.zip(lst_B).map(x => x._1\
    \ < x._2).distinct\n        val lst_J = lst_A.zip(lst_B).map(x => x._1 < x._2).distinct\n\
    \        val lst_K = lst_A.zip(lst_B).map(x => x._1 < x._2).distinct\n       \
    \ val lst_L = lst_A.zip(lst_B).map(x => x._1 < x._2).distinct\n        val lst_M\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2).distinct\n        val lst_N = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2).distinct\n        val lst_O = lst_A.zip(lst_B).map(x => x._1\
    \ < x._2).distinct\n        val lst_P = lst_A.zip(lst_B).map(x => x._1 < x._2).distinct\n\
    \        val lst_Q = lst_A.zip(lst_B).map(x => x._1 < x._2).distinct\n       \
    \ val lst_R = lst_A.zip(lst_B).map(x => x._1 < x._2).distinct\n        val lst_S\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2).distinct\n        val lst_T = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2).distinct\n        val lst_U = lst_A.zip(lst_B).map(x => x._1\
    \ < x._2).distinct\n        val lst_V = lst_", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val result = new Array[Long](k)\n   \
    \     val visited = new Array[Boolean](k)\n        val visitedIndex = new Array[Int](k)\n\
    \        val visitedIndexIndex = new Array[Int](k)\n        val visitedIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val visitedIndexIndexIndexIndexIndex = new Array[Int](k)\n        val\
    \ visitedIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex",
  "        val N = grid.size\n        val m = grid.head\n        val n = grid.last\n\
    \        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_D\
    \ = lst_A.zip(lst_C).map(x => (x._1, x._2))\n        val lst_E = lst_A.zip(lst_D).map(x\
    \ => (x._1, x._2))\n        val lst_F = lst_A.zip(lst_E).map(x => (x._1, x._2))\n\
    \        val lst_G = lst_A.zip(lst_F).map(x => (x._1, x._2))\n        val lst_H\
    \ = lst_A.zip(lst_G).map(x => (x._1, x._2))\n        val lst_I = lst_A.zip(lst_H).map(x\
    \ => (x._1, x._2))\n        val lst_J = lst_A.zip(lst_I).map(x => (x._1, x._2))\n\
    \        val lst_K = lst_A.zip(lst_J).map(x => (x._1, x._2))\n        val lst_L\
    \ = lst_A.zip(lst_K).map(x => (x._1, x._2))\n        val lst_M = lst_A.zip(lst_L).map(x\
    \ => (x._1, x._2))\n        val lst_N = lst_A.zip(lst_M).map(x => (x._1, x._2))\n\
    \        val lst_O = lst_A.zip(lst_N).map(x => (x._1, x._2))\n        val lst_P\
    \ = lst_A.zip(lst_O).map(x => (x._1, x._2))\n        val lst_Q = lst_A.zip(lst_P).map(x\
    \ => (x._1, x._2))\n        val lst_R = lst_A.zip(lst_Q).map(x => (x._1, x._2))\n\
    \        val lst_S = lst_A.zip(lst_R).map(x => (x._1, x._2))\n        val lst_T\
    \ = lst_A.zip(lst_S).map(x => (x._1, x._2))\n        val lst_U = lst_A.zip(lst_T).map(x\
    \ => (x._1, x._2))\n        val lst_V = lst_A.zip(lst_U).map(x => (x._1, x._2))\n\
    \        ", "        val m = grid.size\n        val n = grid(0).size\n       \
    \ val lst_A = grid.map(_.toList).flatten\n        val lst_B = grid.map(_.toList).flatten.reverse\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => if (x._1 < x._2) x else x.reverse).flatten\n\
    \        val lst_D = lst_C.zip(lst_A).map(x => if (x._1 < x._2) x else x.reverse).flatten\n\
    \        val lst_E = lst_D.zip(lst_B).map(x => if (x._1 < x._2) x else x.reverse).flatten\n\
    \        val lst_F = lst_E.zip(lst_A).map(x => if (x._1 < x._2) x else x.reverse).flatten\n\
    \        val lst_G = lst_F.zip(lst_B).map(x => if (x._1 < x._2) x else x.reverse).flatten\n\
    \        val lst_H = lst_G.zip(lst_A).map(x => if (x._1 < x._2) x else x.reverse).flatten\n\
    \        val lst_I = lst_H.zip(lst_B).map(x => if (x._1 < x._2) x else x.reverse).flatten\n\
    \        val lst_J = lst_I.zip(lst_B).map(x => if (x._1 < x._2) x else x.reverse).flatten\n\
    \        val lst_K = lst_J.zip(lst_A).map(x => if (x._1 < x._2) x else x.reverse).flatten\n\
    \        val lst_L = lst_K.zip(lst_B).map(x => if (x._1 < x._2) x else x.reverse).flatten\n\
    \        val lst_M = lst_L.zip(lst_A).map(x => if (x._1 < x._2) x else x.reverse).flatten\n\
    \        val lst_N = lst_M.zip(lst_B).map(x => if (x._1 < x._2) x else x.reverse).flatten\n\
    \        val lst_O = lst_N.zip(lst_A).map(x => if (x._1 < x._2) x else x.reverse).flatten\n\
    \        val lst_P = lst_O.zip(lst_B).map(x => if (x._1 < x._2) x else x.reverse).flatten\n\
    \        val lst_Q = lst_P.zip(lst_A).map(x => if (x._1 < x._2) x else x.reverse).flatten\n\
    \        val lst_R = lst_Q.zip(lst_B).", "        val n = grid.size\n        val\
    \ m = grid.head\n        val lst_A = grid.map(_.toList)\n        val lst_B = grid.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1 compare x._2)\n        val\
    \ lst_D = lst_A.zip(lst_B).map(x => x._1 compare x._2 compare x._1)\n        val\
    \ lst_E = lst_A.zip(lst_B).map(x => x._1 compare x._2 compare x._1 compare x._2)\n\
    \        val lst_F = lst_A.zip(lst_B).map(x => x._1 compare x._2 compare x._1\
    \ compare x._2 compare x._1)\n        val lst_G = lst_A.zip(lst_B).map(x => x._1\
    \ compare x._2 compare x._1 compare x._2 compare x._1 compare x._2)\n        val\
    \ lst_H = lst_A.zip(lst_B).map(x => x._1 compare x._2 compare x._1 compare x._2\
    \ compare x._1 compare x._2 compare x._1)\n        val lst_I = lst_A.zip(lst_B).map(x\
    \ => x._1 compare x._2 compare x._1 compare x._2 compare x._1 compare x._2 compare\
    \ x._1 compare x._2)\n        val lst_J = lst_A.zip(lst_B).map(x => x._1 compare\
    \ x._2 compare x._1 compare x._2 compare x._1 compare x._2 compare x._1 compare\
    \ x._2 compare x._1)\n        val lst_K = lst_A.zip(lst_B).map(x => x._1 compare\
    \ x._2 compare x._1 compare x._2 compare x._1 compare x._2 compare x._1 compare\
    \ x._2 compare x._1 compare x._2)\n        val lst_L = lst_A.zip(lst_B).map(x\
    \ => x._1 compare x._2 compare x._1 compare x._2 compare x._1 compare x._2 compare\
    \ x._1 compare x._2 compare x._1 compare x._2 compare x._1)\n        val lst_M\
    \ = lst_A.zip(lst_B).map(x => x._1 compare x._2 compare x._1 compare x._2 compare\
    \ x._1 compare x._2 compare x._1 compare x._2 compare x._1 compare x._", "   \
    \     val N = grid.length\n        val m = grid.head\n        val n = grid.last\n\
    \        val grid = grid.tail\n        val grid2 = grid.map(_.toList)\n      \
    \  val grid3 = grid2.map(_.toList)\n        val grid4 = grid3.map(_.toList)\n\
    \        val grid5 = grid4.map(_.toList)\n        val grid6 = grid5.map(_.toList)\n\
    \        val grid7 = grid6.map(_.toList)\n        val grid8 = grid7.map(_.toList)\n\
    \        val grid9 = grid8.map(_.toList)\n        val grid10 = grid9.map(_.toList)\n\
    \        val grid11 = grid10.map(_.toList)\n        val grid12 = grid11.map(_.toList)\n\
    \        val grid13 = grid12.map(_.toList)\n        val grid14 = grid13.map(_.toList)\n\
    \        val grid15 = grid14.map(_.toList)\n        val grid16 = grid15.map(_.toList)\n\
    \        val grid17 = grid16.map(_.toList)\n        val grid18 = grid17.map(_.toList)\n\
    \        val grid19 = grid18.map(_.toList)\n        val grid20 = grid19.map(_.toList)\n\
    \        val grid21 = grid20.map(_.toList)\n        val grid22 = grid21.map(_.toList)\n\
    \        val grid23 = grid22.map(_.toList)\n        val grid24 = grid23.map(_.toList)\n\
    \        val grid25 = grid24.map(_.toList)\n        val grid26 = grid25.map(_.toList)\n\
    \        val grid27 = grid26.map(_.toList)\n        val grid28 = grid27.map(_.toList)\n\
    \        val grid29 = grid28.map(_.toList)\n        val grid30 = grid29.map(_.toList)\n\
    \        val grid31 = grid30.map(_.toList)\n        val grid32 = grid31.map(_.toList)\n\
    \        val grid33 = grid32.map(_.toList)\n        val grid34 = grid33.map(_.toList)\n\
    \        val grid35 = grid34.map(_.toList)\n        val grid36 = grid35.map(_.toList)\n\
    \        val grid37 = grid36.map(_.toList)\n        val grid38 = grid37.map(_.toList)\n\
    \        val grid39 = grid38.map(_.toList)\n        val grid40 = grid39.map(_.toList)\n\
    \        val grid41 = grid40.map(_.toList)\n        val grid42 = grid41.map(_.toList)\n\
    \        val grid43 = grid", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val stack = new Array[Int](k)\n        val stackSize = new Array[Int](k)\n\
    \        val stackIndex = new Array[Int](k)\n        val stackTop = new Array[Int](k)\n\
    \        val stackBottom = new Array[Int](k)\n        val stackBottomIndex = new\
    \ Array[Int](k)\n        val stackBottomIndex2 = new Array[Int](k)\n        val\
    \ stackBottomIndex3 = new Array[Int](k)\n        val stackBottomIndex4 = new Array[Int](k)\n\
    \        val stackBottomIndex5 = new Array[Int](k)\n        val stackBottomIndex6\
    \ = new Array[Int](k)\n        val stackBottomIndex7 = new Array[Int](k)\n   \
    \     val stackBottomIndex8 = new Array[Int](k)\n        val stackBottomIndex9\
    \ = new Array[Int](k)\n        val stackBottomIndex10 = new Array[Int](k)\n  \
    \      val stackBottomIndex11 = new Array[Int](k)\n        val stackBottomIndex12\
    \ = new Array[Int](k)\n        val stackBottomIndex13 = new Array[Int](k)\n  \
    \      val stackBottomIndex14 = new Array[Int](k)\n        val stackBottomIndex15\
    \ = new Array[Int](k)\n        val stackBottomIndex16 = new Array[Int](k)\n  \
    \      val stackBottomIndex17 = new Array[Int](k)\n        val stackBottomIndex18\
    \ = new Array[Int](k)\n        val stackBottomIndex19 = new Array[Int](k)\n  \
    \      val stackBottomIndex20 = new Array[Int](k)\n        val stackBottomIndex21\
    \ = new Array[Int](k)\n        val stackBottomIndex22 = new Array[Int](k)\n  \
    \      val stackBottomIndex23 = new Array[Int](k)\n        val stackBottomIndex24\
    \ = new Array[Int](k)\n        val stackBottomIndex25 = new Array[Int](k)\n  \
    \      val stackBottomIndex26 = new Array[Int](k)\n        val stackBottomIndex27\
    \ = new Array[Int](k)\n        val stackBottomIndex28 = new Array[Int](k)\n  \
    \      val stackBottomIndex29 = new Array[Int](k)\n        val stackBottomIndex30\
    \ = new Array[Int](k)\n        val stackBottomIndex31 = new Array[Int](k)\n  \
    \      val stackBottomIndex32 = new Array[Int](k)\n        val stackBottomIndex33\
    \ = new ", "        val N = grid.size\n        val visited = new mutable.HashSet[Long]()\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val visitedList\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList2 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList3 = new mutable.ListBuffer[Long]()\n        val visitedList4\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList5 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList6 = new mutable.ListBuffer[Long]()\n        val visitedList7\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList8 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList9 = new mutable.ListBuffer[Long]()\n        val visitedList10\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList11 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList12 = new mutable.ListBuffer[Long]()\n        val visitedList13\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList14 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList15 = new mutable.ListBuffer[Long]()\n        val visitedList16\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList17 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList18 = new mutable.ListBuffer[Long]()\n        val visitedList19\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList20 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList21 = new mutable.ListBuffer[Long]()\n        val visitedList22\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList23 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList24 = new mutable.ListBuffer[Long]()\n        val visitedList25\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList26 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList27 = new mutable.ListBuffer[Long]()\n        val visitedList28\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList29 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList30 = new mutable.ListBuffer[Long]()", "        val m =\
    \ grid.length\n        val n = grid(0).length\n        val grid = grid.toList\n\
    \        val visited = new mutable.HashSet[Long]\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val queue = mutable.Queue[Long]()\n        val index = mutable.ArrayBuffer.empty[Int]\n\
    \        val index2 = mutable.ArrayBuffer.empty[Int]\n        val index3 = mutable.ArrayBuffer.empty[Int]\n\
    \        val index4 = mutable.ArrayBuffer.empty[Int]\n        val index5 = mutable.ArrayBuffer.empty[Int]\n\
    \        val index6 = mutable.ArrayBuffer.empty[Int]\n        val index7 = mutable.ArrayBuffer.empty[Int]\n\
    \        val index8 = mutable.ArrayBuffer.empty[Int]\n        val index9 = mutable.ArrayBuffer.empty[Int]\n\
    \        val index10 = mutable.ArrayBuffer.empty[Int]\n        val index11 = mutable.ArrayBuffer.empty[Int]\n\
    \        val index12 = mutable.ArrayBuffer.empty[Int]\n        val index13 = mutable.ArrayBuffer.empty[Int]\n\
    \        val index14 = mutable.ArrayBuffer.empty[Int]\n        val index15 = mutable.ArrayBuffer.empty[Int]\n\
    \        val index16 = mutable.ArrayBuffer.empty[Int]\n        val index17 = mutable.ArrayBuffer.empty[Int]\n\
    \        val index18 = mutable.ArrayBuffer.empty[Int]\n        val index19 = mutable.ArrayBuffer.empty[Int]\n\
    \        val index20 = mutable.ArrayBuffer.empty[Int]\n        val index21 = mutable.ArrayBuffer.empty[Int]\n\
    \        val index22 = mutable.ArrayBuffer.empty[Int]\n        val index23 = mutable.ArrayBuffer.empty[Int]\n\
    \        val index24 = mutable.ArrayBuffer.empty[Int]\n        val index25 = mutable.ArrayBuffer.empty[Int]\n\
    \        val index26 = mutable.ArrayBuffer.empty[Int]\n        val index27 = mutable.ArrayBuffer.empty[Int]\n\
    \        val index28 = mutable.ArrayBuffer.empty[Int]\n        val index29 = mutable.ArrayBuffer.empty[Int]\n\
    \        val index30 = mutable.ArrayBuffer.empty[Int]\n        val index31 = mutable.ArrayBuffer.empty[Int]\n\
    \        val index32 = mutable.ArrayBuffer.empty[Int]\n        val index33 = mutable.ArrayBuffer.empty[Int]\n\
    \        val index34 = mut", "        val N = grid.length\n        val m = grid.head\n\
    \        val n = grid.last\n        val lst_A = grid.map(_.toList)\n        val\
    \ lst_B = grid.reverse.map(_.toList)\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_D = lst_C.filter(x => x._1 < x._2)\n     \
    \   val lst_E = lst_D.filter(x => x._1 == x._2)\n        val lst_F = lst_E.filter(x\
    \ => x._1 < x._2)\n        val lst_G = lst_F.filter(x => x._1 == x._2)\n     \
    \   val lst_H = lst_G.filter(x => x._1 < x._2)\n        val lst_I = lst_H.filter(x\
    \ => x._1 == x._2)\n        val lst_J = lst_I.filter(x => x._1 < x._2)\n     \
    \   val lst_K = lst_J.filter(x => x._1 == x._2)\n        val lst_L = lst_K.filter(x\
    \ => x._1 < x._2)\n        val lst_M = lst_L.filter(x => x._1 == x._2)\n     \
    \   val lst_N = lst_M.filter(x => x._1 < x._2)\n        val lst_O = lst_N.filter(x\
    \ => x._1 == x._2)\n        val lst_P = lst_O.filter(x => x._1 < x._2)\n     \
    \   val lst_Q = lst_P.filter(x => x._1 == x._2)\n        val lst_R = lst_Q.filter(x\
    \ => x._1 < x._2)\n        val lst_S = lst_R.filter(x => x._1 == x._2)\n     \
    \   val lst_T = lst_S.filter(x => x._1 < x._2)\n        val lst_U = lst_T.filter(x\
    \ => x._1 == x._2)\n        val lst_V = lst_U.filter(x => x._1 < x._2)\n     \
    \   val lst_W = lst_V.filter(x => x._1 == x._2)\n        val lst_X = lst_W.filter(x\
    \ => x._1 < x._2)\n        val lst_Y = lst_X.filter(x => x._1 == x._2)\n     \
    \   val lst_Z = lst_Y.filter(x => x._1 < x._2)\n        val lst_A = lst_Z.filter(x\
    \ => x._1 == x._2)\n        ", "        val N = grid.length\n        val M = grid(0).length\n\
    \        val grid = grid.toList\n        val visited = new mutable.HashSet[Long]()\n\
    \        val ans = List[Long]()\n        val lst_A = List[Long]()\n        val\
    \ lst_B = List[Long]()\n        val lst_C = List[Long]()\n        val lst_D =\
    \ List[Long]()\n        val lst_E = List[Long]()\n        val lst_F = List[Long]()\n\
    \        val lst_G = List[Long]()\n        val lst_H = List[Long]()\n        val\
    \ lst_I = List[Long]()\n        val lst_J = List[Long]()\n        val lst_K =\
    \ List[Long]()\n        val lst_L = List[Long]()\n        val lst_M = List[Long]()\n\
    \        val lst_N = List[Long]()\n        val lst_O = List[Long]()\n        val\
    \ lst_P = List[Long]()\n        val lst_Q = List[Long]()\n        val lst_R =\
    \ List[Long]()\n        val lst_S = List[Long]()\n        val lst_T = List[Long]()\n\
    \        val lst_U = List[Long]()\n        val lst_V = List[Long]()\n        val\
    \ lst_W = List[Long]()\n        val lst_X = List[Long]()\n        val lst_Y =\
    \ List[Long]()\n        val lst_Z = List[Long]()\n        val lst_A = List[Long]()\n\
    \        val lst_B = List[Long]()\n        val lst_C = List[Long]()\n        val\
    \ lst_D = List[Long]()\n        val lst_E = List[Long]()\n        val lst_F =\
    \ List[Long]()\n        val lst_G = List[Long]()\n        val lst_H = List[Long]()\n\
    \        val lst_I = List[Long]()\n        val lst_J = List[Long]()\n        val\
    \ lst_K = List[Long]()\n        val lst_L = List[Long]()\n        val lst_M =\
    \ List[Long]()\n        val lst_N = List[Long]()\n        val lst_O = List[Long]()\n\
    \        val lst_P = List[Long]()\n        val lst_Q = List[Long]()\n        val\
    \ lst_R = List[Long]()\n        val lst_S = List[Long]()\n        val ", "   \
    \     val grid = grid.toList\n        val N = grid.size\n        val visited =\
    \ new mutable.HashSet[Long]\n        val ans = new mutable.ListBuffer[Long]\n\
    \        val visitedAns = new mutable.HashSet[Long]\n        val visitedAnsSet\
    \ = new mutable.HashSet[Long]\n        val visitedAnsSet2 = new mutable.HashSet[Long]\n\
    \        val visitedAnsSet3 = new mutable.HashSet[Long]\n        val visitedAnsSet4\
    \ = new mutable.HashSet[Long]\n        val visitedAnsSet5 = new mutable.HashSet[Long]\n\
    \        val visitedAnsSet6 = new mutable.HashSet[Long]\n        val visitedAnsSet7\
    \ = new mutable.HashSet[Long]\n        val visitedAnsSet8 = new mutable.HashSet[Long]\n\
    \        val visitedAnsSet9 = new mutable.HashSet[Long]\n        val visitedAnsSet10\
    \ = new mutable.HashSet[Long]\n        val visitedAnsSet11 = new mutable.HashSet[Long]\n\
    \        val visitedAnsSet12 = new mutable.HashSet[Long]\n        val visitedAnsSet13\
    \ = new mutable.HashSet[Long]\n        val visitedAnsSet14 = new mutable.HashSet[Long]\n\
    \        val visitedAnsSet15 = new mutable.HashSet[Long]\n        val visitedAnsSet16\
    \ = new mutable.HashSet[Long]\n        val visitedAnsSet17 = new mutable.HashSet[Long]\n\
    \        val visitedAnsSet18 = new mutable.HashSet[Long]\n        val visitedAnsSet19\
    \ = new mutable.HashSet[Long]\n        val visitedAnsSet20 = new mutable.HashSet[Long]\n\
    \        val visitedAnsSet21 = new mutable.HashSet[Long]\n        val visitedAnsSet22\
    \ = new mutable.HashSet[Long]\n        val visitedAnsSet23 = new mutable.HashSet[Long]\n\
    \        val visitedAnsSet24 = new mutable.HashSet[Long]\n        val visitedAnsSet25\
    \ = new mutable.HashSet[Long]\n        val visitedAnsSet26 = new mutable.HashSet[Long]\n\
    \        val visitedAnsSet27 = new mutable.HashSet[Long]\n        ", "       \
    \ val m = grid.length\n        val n = grid(0).length\n        val result = new\
    \ mutable.ListBuffer[Long]()\n        var i = k\n        while(i <= m * n) {\n\
    \            val j = (i - k) % n\n            val lst_A = grid(i).map(x => x.toLong).toList\n\
    \            val lst_B = grid(j).map(x => x.toLong).toList\n            val lst_C\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n            val lst_D = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n            val lst_E = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \            val lst_F = lst_A.zip(lst_B).map(x => x._1 < x._2)\n            val\
    \ lst_G = lst_A.zip(lst_B).map(x => x._1 < x._2)\n            val lst_H = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n            val lst_I = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \            val lst_J = lst_A.zip(lst_B).map(x => x._1 < x._2)\n            val\
    \ lst_K = lst_A.zip(lst_B).map(x => x._1 < x._2)\n            val lst_L = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n            val lst_M = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \            val lst_N = lst_A.zip(lst_B).map(x => x._1 < x._2)\n            val\
    \ lst_O = lst_A.zip(lst_B).map(x => x._1 < x._2)\n            val lst_P = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n            val lst_Q = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \            val lst_R = lst_A.zip(lst_B).map(x => x._1 < x._2)\n            val\
    \ lst_S = lst_A.zip(lst_B).map(x => x._1 < x._2)\n            val lst_T = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n            val lst_U = lst_A.zip(l", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val grid = grid.toList\n        val visited\
    \ = new mutable.HashSet[Long]\n        val ans = List[Long]()\n        val visitedList\
    \ = List[Long]()\n        val visitedList2 = List[Long]()\n        val visitedList3\
    \ = List[Long]()\n        val visitedList4 = List[Long]()\n        val visitedList5\
    \ = List[Long]()\n        val visitedList6 = List[Long]()\n        val visitedList7\
    \ = List[Long]()\n        val visitedList8 = List[Long]()\n        val visitedList9\
    \ = List[Long]()\n        val visitedList10 = List[Long]()\n        val visitedList11\
    \ = List[Long]()\n        val visitedList12 = List[Long]()\n        val visitedList13\
    \ = List[Long]()\n        val visitedList14 = List[Long]()\n        val visitedList15\
    \ = List[Long]()\n        val visitedList16 = List[Long]()\n        val visitedList17\
    \ = List[Long]()\n        val visitedList18 = List[Long]()\n        val visitedList19\
    \ = List[Long]()\n        val visitedList20 = List[Long]()\n        val visitedList21\
    \ = List[Long]()\n        val visitedList22 = List[Long]()\n        val visitedList23\
    \ = List[Long]()\n        val visitedList24 = List[Long]()\n        val visitedList25\
    \ = List[Long]()\n        val visitedList26 = List[Long]()\n        val visitedList27\
    \ = List[Long]()\n        val visitedList28 = List[Long]()\n        val visitedList29\
    \ = List[Long]()\n        val visitedList30 = List[Long]()\n        val visitedList31\
    \ = List[Long]()\n        val visitedList32 = List[Long]()\n        val visitedList33\
    \ = List[Long]()\n        val visitedList34 = List[Long]()\n        val visitedList35\
    \ = List[Long]()\n        val visitedList36 = List[Long]()\n        val visitedList37\
    \ = List[Long]()\n        val visitedList38 = List[Long]()\n        val visitedList39\
    \ = List[Long]()\n        val visitedList40 = List[Long]()\n        val visite",
  "        val m = grid.length\n        val n = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        var min = 0\n        var index = 0\n        var\
    \ current = 0\n        var currentIndex = 0\n        var currentMin = 0\n    \
    \    var currentMinIndex = 0\n        var currentMinValue = 0\n        var currentMinValueIndex\
    \ = 0\n        var currentMinValueIndex2 = 0\n        var currentMinValueIndex3\
    \ = 0\n        var currentMinValueIndex4 = 0\n        var currentMinValueIndex5\
    \ = 0\n        var currentMinValueIndex6 = 0\n        var currentMinValueIndex7\
    \ = 0\n        var currentMinValueIndex8 = 0\n        var currentMinValueIndex9\
    \ = 0\n        var currentMinValueIndex10 = 0\n        var currentMinValueIndex11\
    \ = 0\n        var currentMinValueIndex12 = 0\n        var currentMinValueIndex13\
    \ = 0\n        var currentMinValueIndex14 = 0\n        var currentMinValueIndex15\
    \ = 0\n        var currentMinValueIndex16 = 0\n        var currentMinValueIndex17\
    \ = 0\n        var currentMinValueIndex18 = 0\n        var currentMinValueIndex19\
    \ = 0\n        var currentMinValueIndex20 = 0\n        var currentMinValueIndex21\
    \ = 0\n        var currentMinValueIndex22 = 0\n        var currentMinValueIndex23\
    \ = 0\n        var currentMinValueIndex24 = 0\n        var currentMinValueIndex25\
    \ = 0\n        var currentMinValueIndex26 = 0\n        var currentMinValueIndex27\
    \ = 0\n        var currentMinValueIndex28 = 0\n        var currentMinValueIndex29\
    \ = 0\n        var currentMinValueIndex30 = 0\n        var currentMinValueIndex31\
    \ = 0\n        var currentMinValueIndex32 = 0\n        var currentMinValueIndex33\
    \ = 0\n        var currentMinValueIndex34 = 0\n        var currentMinValueIndex35\
    \ = 0\n        var currentMinValueIndex36 = 0\n        var currentMinValueIndex37\
    \ = 0\n        var currentMinValueIndex38 = 0\n        var currentMinValueIndex39\
    \ = 0\n        var currentMinValueIndex40 = 0\n        var currentMinValueIndex41\
    \ = 0\n        var currentMinValueIndex42 = 0\n        var currentMinValueIndex43\
    \ = 0\n        var currentMinValueIndex44 = 0\n        var currentMinValueIndex45\
    \ = 0\n        var currentMinValueIndex46 = 0\n        var currentMinValueIndex47\
    \ = 0\n        var currentMinValueIndex48 = 0\n        var currentMinValueIndex49\
    \ = 0\n        var currentMinValueIndex50 = 0\n        var currentMinValueIndex51\
    \ = 0\n        var currentMinValueIndex52 = 0\n        var currentMinValueIndex53\
    \ = 0\n        var currentMinValueIndex54 = 0\n        var currentMinValueIndex55\
    \ = 0\n        var currentMinValueIndex56 = 0\n        var currentMinValueIndex57\
    \ = 0\n", "        val grid = grid.toList\n        val n = grid.size\n       \
    \ val m = grid(0).size\n        val visited = new mutable.HashSet[Long]()\n  \
    \      val ans = List[Long]()\n        val lst_A = List[Long]()\n        val lst_B\
    \ = List[Long]()\n        val lst_C = List[Long]()\n        val lst_D = List[Long]()\n\
    \        val lst_E = List[Long]()\n        val lst_F = List[Long]()\n        val\
    \ lst_G = List[Long]()\n        val lst_H = List[Long]()\n        val lst_I =\
    \ List[Long]()\n        val lst_J = List[Long]()\n        val lst_K = List[Long]()\n\
    \        val lst_L = List[Long]()\n        val lst_M = List[Long]()\n        val\
    \ lst_N = List[Long]()\n        val lst_O = List[Long]()\n        val lst_P =\
    \ List[Long]()\n        val lst_Q = List[Long]()\n        val lst_R = List[Long]()\n\
    \        val lst_S = List[Long]()\n        val lst_T = List[Long]()\n        val\
    \ lst_U = List[Long]()\n        val lst_V = List[Long]()\n        val lst_W =\
    \ List[Long]()\n        val lst_X = List[Long]()\n        val lst_Y = List[Long]()\n\
    \        val lst_Z = List[Long]()\n        val lst_A = List[Long]()\n        val\
    \ lst_B = List[Long]()\n        val lst_C = List[Long]()\n        val lst_D =\
    \ List[Long]()\n        val lst_E = List[Long]()\n        val lst_F = List[Long]()\n\
    \        val lst_G = List[Long]()\n        val lst_H = List[Long]()\n        val\
    \ lst_I = List[Long]()\n        val lst_J = List[Long]()\n        val lst_K =\
    \ List[Long]()\n        val lst_L = List[Long]()\n        val lst_M = List[Long]()\n\
    \        val lst_N = List[Long]()\n        val lst_O = List[Long]()\n        val\
    \ lst_P = List[Long]()\n        val lst_Q = List[Long]()\n        val lst_R =\
    \ List[Long]()\n        val lst_S = List[Long]()\n        val ", "        val\
    \ n = grid.length\n        val m = grid(0).length\n        val grid = grid.toList\n\
    \        val visited = new mutable.HashSet[Long]\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedAns = mutable.ArrayBuffer.empty[Long]\n        val visitedAnsSet\
    \ = mutable.HashSet.empty[Long]\n        val visitedAnsSetSet = mutable.HashSet.empty[Long]\n\
    \        val visitedAnsSetSetSet = mutable.HashSet.empty[Long]\n        val visitedAnsSetSetSetSet\
    \ = mutable.HashSet.empty[Long]\n        val visitedAnsSetSetSetSet = mutable.HashSet.empty[Long]\n\
    \        val visitedAnsSetSetSetSetSet = mutable.HashSet.empty[Long]\n       \
    \ val visitedAnsSetSetSetSetSet = mutable.HashSet.empty[Long]\n        val visitedAnsSetSetSetSetSet\
    \ = mutable.HashSet.empty[Long]\n        val visitedAnsSetSetSetSetSetSet = mutable.HashSet.empty[Long]\n\
    \        val visitedAnsSetSetSetSetSetSet = mutable.HashSet.empty[Long]\n    \
    \    val visitedAnsSetSetSetSetSetSet = mutable.HashSet.empty[Long]\n        val\
    \ visitedAnsSetSetSetSetSetSet = mutable.HashSet.empty[Long]\n        val visitedAnsSetSetSetSetSetSetSet\
    \ = mutable.HashSet.empty[Long]\n        val visitedAnsSetSetSetSetSetSetSet =\
    \ mutable.HashSet.empty[Long]\n        val visitedAnsSetSetSetSetSetSetSet = mutable.HashSet.empty[Long]\n\
    \        val visitedAnsSetSetSetSetSetSetSet = mutable.HashSet.empty[Long]\n \
    \       val visitedAnsSetSetSetSetSetSetSet = mutable.HashSet.empty[Long]\n  \
    \      val visitedAnsSetSetSetSetSetSetSet = mutable.HashSet.empty[Long]\n   \
    \     val visitedAnsSetSetSetSetSetSetSet = mutable.HashSet.empty[Long]\n    \
    \    val visitedAnsSetSetSetSetSetSetSetSet = mutable.HashSet.empty[Long]\n  \
    \      val visitedAnsSetSetSetSetSetSetSetSet = mutable.HashSet.empty[", "   \
    \     val N = grid.length\n        val m = grid.head\n        val n = grid.last\n\
    \        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_D\
    \ = lst_C.map(x => (x._1, x._2))\n        val lst_E = lst_D.map(x => (x._1, x._2))\n\
    \        val lst_F = lst_E.map(x => (x._1, x._2))\n        val lst_G = lst_F.map(x\
    \ => (x._1, x._2))\n        val lst_H = lst_G.map(x => (x._1, x._2))\n       \
    \ val lst_I = lst_H.map(x => (x._1, x._2))\n        val lst_J = lst_I.map(x =>\
    \ (x._1, x._2))\n        val lst_K = lst_J.map(x => (x._1, x._2))\n        val\
    \ lst_L = lst_K.map(x => (x._1, x._2))\n        val lst_M = lst_L.map(x => (x._1,\
    \ x._2))\n        val lst_N = lst_M.map(x => (x._1, x._2))\n        val lst_O\
    \ = lst_N.map(x => (x._1, x._2))\n        val lst_P = lst_O.map(x => (x._1, x._2))\n\
    \        val lst_Q = lst_P.map(x => (x._1, x._2))\n        val lst_R = lst_Q.map(x\
    \ => (x._1, x._2))\n        val lst_S = lst_R.map(x => (x._1, x._2))\n       \
    \ val lst_T = lst_S.map(x => (x._1, x._2))\n        val lst_U = lst_T.map(x =>\
    \ (x._1, x._2))\n        val lst_V = lst_U.map(x => (x._1, x._2))\n        val\
    \ lst_W = lst_V.map(x => (x._1, x._2))\n        val lst_X = lst_W.map(x => (x._1,\
    \ x._2))\n        val lst_Y = lst_X.map(x => (x._1, x._2))\n        val lst_Z\
    \ = lst_Y.map(x => (x._1, x._2))\n        val lst_A = lst_Z.map(x => (x._1, x._2))\n\
    \        ", "        val grid = grid.toList\n        val N = grid.size\n     \
    \   val lst_A = grid.map(_.toList).flatten\n        val lst_B = grid.map(_.toList).flatten.reverse\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_D\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_E = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_F = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_G = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_H\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_I = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_J = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_K = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_L\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_M = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_N = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_O = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_P\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_Q = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_R = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_S = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_T\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_U = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_V = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val l", "        val grid = grid.toList\n        val N = grid.size\n\
    \        val lst_A = grid.map(_.toList)\n        val lst_B = grid.map(_.toList)\n\
    \        val lst_C = lst_A.map(_.toList)\n        val lst_D = lst_A.map(_.toList)\n\
    \        val lst_E = lst_A.map(_.toList)\n        val lst_F = lst_A.map(_.toList)\n\
    \        val lst_G = lst_A.map(_.toList)\n        val lst_H = lst_A.map(_.toList)\n\
    \        val lst_I = lst_A.map(_.toList)\n        val lst_J = lst_A.map(_.toList)\n\
    \        val lst_K = lst_A.map(_.toList)\n        val lst_L = lst_A.map(_.toList)\n\
    \        val lst_M = lst_A.map(_.toList)\n        val lst_N = lst_A.map(_.toList)\n\
    \        val lst_O = lst_A.map(_.toList)\n        val lst_P = lst_A.map(_.toList)\n\
    \        val lst_Q = lst_A.map(_.toList)\n        val lst_R = lst_A.map(_.toList)\n\
    \        val lst_S = lst_A.map(_.toList)\n        val lst_T = lst_A.map(_.toList)\n\
    \        val lst_U = lst_A.map(_.toList)\n        val lst_V = lst_A.map(_.toList)\n\
    \        val lst_W = lst_A.map(_.toList)\n        val lst_X = lst_A.map(_.toList)\n\
    \        val lst_Y = lst_A.map(_.toList)\n        val lst_Z = lst_A.map(_.toList)\n\
    \        val lst_A = lst_A.map(_.toList)\n        val lst_B = lst_A.map(_.toList)\n\
    \        val lst_C = lst_A.map(_.toList)\n        val lst_D = lst_A.map(_.toList)\n\
    \        val lst_E = lst_A.map(_.toList)\n        val lst_F = lst_A.map(_.toList)\n\
    \        val lst_G = lst_A.map(_.toList)\n        val lst_H = lst_A.map(_.toList)\n\
    \        val lst_I = lst_A.map(_.toList)\n        val lst_J = lst_A.map(_.toList)\n\
    \        val lst_K = lst_A.map(_.toList)\n        val lst_L = lst_A.", "     \
    \   val grid = grid.toList\n        val n = grid.size\n        val m = grid(0).size\n\
    \        val visited = new mutable.HashSet[Long]()\n        val ans = new mutable.ListBuffer[Long]()\n\
    \        val visitedMap = new mutable.HashMap[Long, Long]()\n        val visitedMap2\
    \ = new mutable.HashMap[Long, Long]()\n        val visitedMap3 = new mutable.HashMap[Long,\
    \ Long]()\n        val visitedMap4 = new mutable.HashMap[Long, Long]()\n     \
    \   val visitedMap5 = new mutable.HashMap[Long, Long]()\n        val visitedMap6\
    \ = new mutable.HashMap[Long, Long]()\n        val visitedMap7 = new mutable.HashMap[Long,\
    \ Long]()\n        val visitedMap8 = new mutable.HashMap[Long, Long]()\n     \
    \   val visitedMap9 = new mutable.HashMap[Long, Long]()\n        val visitedMap10\
    \ = new mutable.HashMap[Long, Long]()\n        val visitedMap11 = new mutable.HashMap[Long,\
    \ Long]()\n        val visitedMap12 = new mutable.HashMap[Long, Long]()\n    \
    \    val visitedMap13 = new mutable.HashMap[Long, Long]()\n        val visitedMap14\
    \ = new mutable.HashMap[Long, Long]()\n        val visitedMap15 = new mutable.HashMap[Long,\
    \ Long]()\n        val visitedMap16 = new mutable.HashMap[Long, Long]()\n    \
    \    val visitedMap17 = new mutable.HashMap[Long, Long]()\n        val visitedMap18\
    \ = new mutable.HashMap[Long, Long]()\n        val visitedMap19 = new mutable.HashMap[Long,\
    \ Long]()\n        val visitedMap20 = new mutable.HashMap[Long, Long]()\n    \
    \    val visitedMap21 = new mutable.HashMap[Long, Long]()\n        val visitedMap22\
    \ = new mutable.HashMap[Long, Long]()\n        val visitedMap23 = new mutable.HashMap[Long,\
    \ Long]()\n        val visitedMap24 = new mutable.HashMap[Long, Long]()\n    \
    \    val visitedMap25 = new mutable.HashMap[Long, Long]()\n        val visitedMap26\
    \ = new mutable.HashMap[Long, Long]()\n        val visitedMap27 = new mutable.HashMap[Long,\
    \ Long]()\n        val visitedMap28", "        val m = grid.length\n        val\
    \ n = grid(0).length\n        val visited = new mutable.HashSet[Long]()\n    \
    \    val ans = new mutable.ArrayList[Long]()\n        val stack = new mutable.Stack[Long]()\n\
    \        val stackSize = new mutable.HashMap[Long, Int]()\n        val stackSizeSize\
    \ = new mutable.HashMap[Long, Int]()\n        val stackSizeSize2 = new mutable.HashMap[Long,\
    \ Int]()\n        val stackSizeSize3 = new mutable.HashMap[Long, Int]()\n    \
    \    val stackSizeSize4 = new mutable.HashMap[Long, Int]()\n        val stackSizeSize5\
    \ = new mutable.HashMap[Long, Int]()\n        val stackSizeSize6 = new mutable.HashMap[Long,\
    \ Int]()\n        val stackSizeSize7 = new mutable.HashMap[Long, Int]()\n    \
    \    val stackSizeSize8 = new mutable.HashMap[Long, Int]()\n        val stackSizeSize9\
    \ = new mutable.HashMap[Long, Int]()\n        val stackSizeSize10 = new mutable.HashMap[Long,\
    \ Int]()\n        val stackSizeSize11 = new mutable.HashMap[Long, Int]()\n   \
    \     val stackSizeSize12 = new mutable.HashMap[Long, Int]()\n        val stackSizeSize13\
    \ = new mutable.HashMap[Long, Int]()\n        val stackSizeSize14 = new mutable.HashMap[Long,\
    \ Int]()\n        val stackSizeSize15 = new mutable.HashMap[Long, Int]()\n   \
    \     val stackSizeSize16 = new mutable.HashMap[Long, Int]()\n        val stackSizeSize17\
    \ = new mutable.HashMap[Long, Int]()\n        val stackSizeSize18 = new mutable.HashMap[Long,\
    \ Int]()\n        val stackSizeSize19 = new mutable.HashMap[Long, Int]()\n   \
    \     val stackSizeSize20 = new mutable.HashMap[Long, Int]()\n        val stackSizeSize21\
    \ = new mutable.HashMap[Long, Int]()\n        val stackSizeSize22 = new mutable.HashMap[Long,\
    \ Int]()\n        val stackSizeSize23 = new mutable.HashMap[Long, Int]()\n   \
    \     val stackSizeSize24 = new mutable.HashMap[Long, Int]()\n        val stackSizeSize25\
    \ = new mutable.HashMap[Long, Int]()\n        val stackSizeSize26 = new mutable.HashMap[Long,\
    \ Int]()\n        val stackSize", "        val m = grid.length\n        val n\
    \ = grid(0).length\n        val result = new Array[Long](k)\n        val visited\
    \ = new Array[Boolean](k)\n        val stack = new Array[Long](k)\n        val\
    \ stack2 = new Array[Long](k)\n        val stack3 = new Array[Long](k)\n     \
    \   val stack4 = new Array[Long](k)\n        val stack5 = new Array[Long](k)\n\
    \        val stack6 = new Array[Long](k)\n        val stack7 = new Array[Long](k)\n\
    \        val stack8 = new Array[Long](k)\n        val stack9 = new Array[Long](k)\n\
    \        val stack10 = new Array[Long](k)\n        val stack11 = new Array[Long](k)\n\
    \        val stack12 = new Array[Long](k)\n        val stack13 = new Array[Long](k)\n\
    \        val stack14 = new Array[Long](k)\n        val stack15 = new Array[Long](k)\n\
    \        val stack16 = new Array[Long](k)\n        val stack17 = new Array[Long](k)\n\
    \        val stack18 = new Array[Long](k)\n        val stack19 = new Array[Long](k)\n\
    \        val stack20 = new Array[Long](k)\n        val stack21 = new Array[Long](k)\n\
    \        val stack22 = new Array[Long](k)\n        val stack23 = new Array[Long](k)\n\
    \        val stack24 = new Array[Long](k)\n        val stack25 = new Array[Long](k)\n\
    \        val stack26 = new Array[Long](k)\n        val stack27 = new Array[Long](k)\n\
    \        val stack28 = new Array[Long](k)\n        val stack29 = new Array[Long](k)\n\
    \        val stack30 = new Array[Long](k)\n        val stack31 = new Array[Long](k)\n\
    \        val stack32 = new Array[Long](k)\n        val stack33 = new Array[Long](k)\n\
    \        val stack34 = new Array[Long](k)\n        val stack35 = new Array[Long](k)\n\
    \        val stack36 = new Array[Long](k)\n        val stack37 = new Array[Long](k)\n\
    \        val stack38 = new Array[Long](k)\n        val stack39 = new Array[Long](k)\n\
    \        val stack40 = new Array[Long](k)\n        val stack41 = new Array[Long](k)\n\
    \        val stack42 = new Array[Long](k)\n        val stack43 = new Array[Long](k)\n\
    \        ", "        val n = grid.size\n        val m = grid(0).size\n       \
    \ val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n        val visited = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean](m)\n        val visited_\
    \ = ", "        val m = grid.length\n        val n = grid(0).length\n        val\
    \ result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n \
    \       val stack = new Array[Int](k)\n        val stackIndex = new Array[Int](k)\n\
    \        val stackIndex2 = new Array[Int](k)\n        val stackIndex3 = new Array[Int](k)\n\
    \        val stackIndex4 = new Array[Int](k)\n        val stackIndex5 = new Array[Int](k)\n\
    \        val stackIndex6 = new Array[Int](k)\n        val stackIndex7 = new Array[Int](k)\n\
    \        val stackIndex8 = new Array[Int](k)\n        val stackIndex9 = new Array[Int](k)\n\
    \        val stackIndex10 = new Array[Int](k)\n        val stackIndex11 = new\
    \ Array[Int](k)\n        val stackIndex12 = new Array[Int](k)\n        val stackIndex13\
    \ = new Array[Int](k)\n        val stackIndex14 = new Array[Int](k)\n        val\
    \ stackIndex15 = new Array[Int](k)\n        val stackIndex16 = new Array[Int](k)\n\
    \        val stackIndex17 = new Array[Int](k)\n        val stackIndex18 = new\
    \ Array[Int](k)\n        val stackIndex19 = new Array[Int](k)\n        val stackIndex20\
    \ = new Array[Int](k)\n        val stackIndex21 = new Array[Int](k)\n        val\
    \ stackIndex22 = new Array[Int](k)\n        val stackIndex23 = new Array[Int](k)\n\
    \        val stackIndex24 = new Array[Int](k)\n        val stackIndex25 = new\
    \ Array[Int](k)\n        val stackIndex26 = new Array[Int](k)\n        val stackIndex27\
    \ = new Array[Int](k)\n        val stackIndex28 = new Array[Int](k)\n        val\
    \ stackIndex29 = new Array[Int](k)\n        val stackIndex30 = new Array[Int](k)\n\
    \        val stackIndex31 = new Array[Int](k)\n        val stackIndex32 = new\
    \ Array[Int](k)\n        val stackIndex33 = new Array[Int](k)\n        val stackIndex34\
    \ = new Array[Int](k)\n        val stackIndex35 = new Array[Int](k)\n        val\
    \ stackIndex36 = new Array[Int](k)\n        val stackIndex37 = new Array[Int](k)\n\
    \        val stackIndex38 = new Array[Int](k)\n        val stackIndex39 = new\
    \ Array[Int](k)", "        val m = grid.size\n        val n = grid.head.size\n\
    \        val lst_A = grid.map(_.toList).flatten\n        val lst_B = grid.map(_.toList).flatten.reverse\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => if (x._1 < x._2) x else x.reverse)\n\
    \        val lst_D = lst_A.zip(lst_B).map(x => if (x._1 < x._2) x else x.reverse).reverse\n\
    \        val lst_E = lst_A.zip(lst_B).map(x => if (x._1 < x._2) x else x.reverse).reverse.reverse\n\
    \        val lst_F = lst_A.zip(lst_B).map(x => if (x._1 < x._2) x else x.reverse).reverse.reverse.reverse\n\
    \        val lst_G = lst_A.zip(lst_B).map(x => if (x._1 < x._2) x else x.reverse).reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse",
  "        val m = grid.length\n        val n = grid(0).length\n        val grid =\
    \ grid.toList\n        val visited = new mutable.HashSet[Long]()\n        val\
    \ ans = List[Long]()\n        val stack = new mutable.Stack[Long]()\n        val\
    \ visitedStack = new mutable.HashSet[Long]()\n        val stackSize = stack.size\n\
    \        val visitedStackSize = visitedStack.size\n        val stackIndex = stackSize\
    \ - 1\n        val visitedStackIndex = visitedStackSize - 1\n        val stackMax\
    \ = stackSize * stackSize - k\n        val visitedStackMax = visitedStackSize\
    \ * visitedStackSize - k\n        val stackMin = stackSize * stackSize - k\n \
    \       val visitedStackMin = visitedStackSize * visitedStackSize - k\n      \
    \  val stackSum = stackSize * stackSize\n        val visitedStackSum = visitedStackSize\
    \ * visitedStackSize\n        val stackSum2 = stackSize * stackSize * stackSize\
    \ * stackSize\n        val visitedStackSum2 = visitedStackSize * visitedStackSize\
    \ * visitedStackSize * visitedStackSize\n        val stackSum3 = stackSize * stackSize\
    \ * stackSize * stackSize * stackSize * stackSize\n        val visitedStackSum3\
    \ = visitedStackSize * visitedStackSize * visitedStackSize * visitedStackSize\
    \ * visitedStackSize * visitedStackSize\n        val stackSum4 = stackSize * stackSize\
    \ * stackSize * stackSize * stackSize * stackSize * stackSize * stackSize\n  \
    \      val visitedStackSum4 = visitedStackSize * visitedStackSize * visitedStackSize\
    \ * visitedStackSize * visitedStackSize * visitedStackSize * visitedStackSize\
    \ * visitedStackSize\n        val stackSum5 = stackSize * stackSize * stackSize\
    \ * stackSize * stackSize * stackSize * stackSize * stackSize * stackSize * stackSize\
    \ * stackSize\n        val visitedStackSum5 = visitedStackSize * visitedStackSize\
    \ * visitedStackSize * visitedStackSize * visitedStackSize * visitedStackSize\
    \ * visitedStackSize * visitedStackSize * visitedStackSize * visitedStackSize\n\
    \        val stackSum6 = stackSize * stackSize * stackSize * stackSize * stackSize\
    \ * stackSize * stackSize * stackSize * stackSize * stackSize * stackSize ", " \
    \       val m = grid.size\n        val n = grid(0).size\n        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n\
    \        for (i <- 0 until m) {\n            val row = grid(i)\n            val\
    \ col = grid(0).zipWithIndex.filter(_._1 == i).map(_._2).head\n            row\
    \ += col\n            grid += row\n        }\n        val visited = mutable.ArrayBuffer.empty[Boolean](m)\n\
    \        val visitedIndex = mutable.ArrayBuffer.empty[Int](m)\n        val visitedIndex\
    \ = mutable.ArrayBuffer.empty[Int](m)\n        val visitedIndex = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val visitedIndex = mutable.ArrayBuffer.empty[Int](m)\n        val visitedIndex\
    \ = mutable.ArrayBuffer.empty[Int](m)\n        val visitedIndex = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val visitedIndex = mutable.ArrayBuffer.empty[Int](m)\n        val visitedIndex\
    \ = mutable.ArrayBuffer.empty[Int](m)\n        val visitedIndex = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val visitedIndex = mutable.ArrayBuffer.empty[Int](m)\n        val visitedIndex\
    \ = mutable.ArrayBuffer.empty[Int](m)\n        val visitedIndex = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val visitedIndex = mutable.ArrayBuffer.empty[Int](m)\n        val visitedIndex\
    \ = mutable.ArrayBuffer.empty[Int](m)\n        val visitedIndex = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val visitedIndex = mutable.ArrayBuffer.empty[Int](m)\n        val visitedIndex\
    \ = mutable.ArrayBuffer.empty[Int](m)\n        val visitedIndex = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val visitedIndex = mutable.ArrayBuffer.empty[Int](m)\n        val visitedIndex\
    \ = mutable.ArrayBuffer.empty[Int](m)\n        val visitedIndex = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val visitedIndex = mutable.ArrayBuffer.empty[Int](m)\n        val visitedIndex\
    \ = mutable.ArrayBuffer.empty[Int](m)\n        val visitedIndex = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val visitedIndex = mutable.ArrayBuffer.empty[Int](m)\n        val visitedIndex\
    \ = mutable.ArrayBuffer.empty[Int](m)\n        val visitedIndex = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val visitedIndex = mutable.ArrayBuffer.empty[Int](m)\n        val visited",
  "        val m = grid.length\n        val n = grid(0).length\n        val grid =\
    \ grid.toList\n        val visited = new mutable.HashSet[Long]\n        val visitedList\
    \ = new mutable.ListBuffer[Long]\n        val visitedList2 = new mutable.ListBuffer[Long]\n\
    \        val visitedList3 = new mutable.ListBuffer[Long]\n        val visitedList4\
    \ = new mutable.ListBuffer[Long]\n        val visitedList5 = new mutable.ListBuffer[Long]\n\
    \        val visitedList6 = new mutable.ListBuffer[Long]\n        val visitedList7\
    \ = new mutable.ListBuffer[Long]\n        val visitedList8 = new mutable.ListBuffer[Long]\n\
    \        val visitedList9 = new mutable.ListBuffer[Long]\n        val visitedList10\
    \ = new mutable.ListBuffer[Long]\n        val visitedList11 = new mutable.ListBuffer[Long]\n\
    \        val visitedList12 = new mutable.ListBuffer[Long]\n        val visitedList13\
    \ = new mutable.ListBuffer[Long]\n        val visitedList14 = new mutable.ListBuffer[Long]\n\
    \        val visitedList15 = new mutable.ListBuffer[Long]\n        val visitedList16\
    \ = new mutable.ListBuffer[Long]\n        val visitedList17 = new mutable.ListBuffer[Long]\n\
    \        val visitedList18 = new mutable.ListBuffer[Long]\n        val visitedList19\
    \ = new mutable.ListBuffer[Long]\n        val visitedList20 = new mutable.ListBuffer[Long]\n\
    \        val visitedList21 = new mutable.ListBuffer[Long]\n        val visitedList22\
    \ = new mutable.ListBuffer[Long]\n        val visitedList23 = new mutable.ListBuffer[Long]\n\
    \        val visitedList24 = new mutable.ListBuffer[Long]\n        val visitedList25\
    \ = new mutable.ListBuffer[Long]\n        val visitedList26 = new mutable.ListBuffer[Long]\n\
    \        val visitedList27 = new mutable.ListBuffer[Long]\n        val visitedList28\
    \ = new mutable.ListBuffer[Long]\n        val visitedList29 = new mutable.ListBuffer[Long]\n\
    \        val visitedList30 = new mutable.ListBuffer[Long]\n        val visitedList31\
    \ = new mutable.ListBuffer[Long]\n        val visitedList32 = new mutable.ListBuffer[Long",
  "        val m = grid.size\n        val n = grid(0).size\n        val visited =\
    \ new mutable.HashSet[Long]()\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val visitedMap = new mutable.HashMap[Long, Boolean]()\n        val visitedMap2\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap3 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap4 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap5 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap6\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap7 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap8 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap9 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap10\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap11 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap12 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap13 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap14 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap15\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap16 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap17 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap18 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap19 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap20\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap21 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap22 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap23 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap24 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap25\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap26 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap27 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap28 = new mutable.HashMap[Long, ", "        val n = grid.length\n\
    \        val m = grid(0).length\n        val result = new Array[Long](k)\n   \
    \     val visited = new Array[Boolean](k)\n        val stack = new Array[Int](k)\n\
    \        val lst_A = new Array[Long](k)\n        val lst_B = new Array[Long](k)\n\
    \        for (i <- 0 until k) {\n            visited(i) = false\n            stack(i)\
    \ = 0\n            lst_A(i) = grid(0).head\n            lst_B(i) = grid(0).head\n\
    \        }\n        val stack_size = stack.length\n        val visited_size =\
    \ visited.length\n        val result_size = result.length\n        val stack_size_limit\
    \ = stack_size\n        val visited_size_limit = visited_size\n        val result_size_limit\
    \ = result_size\n        var i = 0\n        while (i < k) {\n            while\
    \ (!visited(stack(i))) {\n                val j = stack(i) + 1\n             \
    \   if (j < stack_size_limit) {\n                    visited(j) = true\n     \
    \               stack(i) = j\n                    lst_A(i) = lst_A(j) + grid((j\
    \ + 1) until n).head\n                    lst_B(i) = lst_B(j) + grid((j + 1) until\
    \ n).head\n                }\n                else {\n                    stack(i)\
    \ = stack_size_limit\n                    visited(stack_size_limit) = true\n \
    \                   lst_A(i) = lst_A(stack_size_limit) + grid((stack_size_limit\
    \ + 1) until n).head\n                    lst_B(i) = lst_B(stack_size_limit) +\
    \ grid((stack_size_limit + 1) until n).head\n                }\n            }\n\
    \            val j = stack(i) + 1\n            if (j < visited_size_limit) {\n\
    \                result(i) = lst_A(j)\n                i += 1\n            }\n\
    \            else {\n                result(i) = lst_B(j)\n                i +=\
    \ 1\n            }\n        }\n        result", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n\
    \        val visited = mutable.ArrayBuffer.empty[Boolean](m)\n        val paths\
    \ = mutable.ArrayBuffer.empty[List[Long]](m)\n        val pathIndex = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val pathLength = mutable.ArrayBuffer.empty[Int](m)\n        val pathValue\
    \ = mutable.ArrayBuffer.empty[Long](m)\n        val pathValueIndex = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val pathValueLength = mutable.ArrayBuffer.empty[Int](m)\n        val\
    \ pathValueIndex = mutable.ArrayBuffer.empty[Int](m)\n        val pathValueLength\
    \ = mutable.ArrayBuffer.empty[Int](m)\n        val pathValueIndex = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val pathValueLength = mutable.ArrayBuffer.empty[Int](m)\n        val\
    \ pathValueIndex = mutable.ArrayBuffer.empty[Int](m)\n        val pathValueLength\
    \ = mutable.ArrayBuffer.empty[Int](m)\n        val pathValueIndex = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val pathValueLength = mutable.ArrayBuffer.empty[Int](m)\n        val\
    \ pathValueIndex = mutable.ArrayBuffer.empty[Int](m)\n        val pathValueLength\
    \ = mutable.ArrayBuffer.empty[Int](m)\n        val pathValueIndex = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val pathValueLength = mutable.ArrayBuffer.empty[Int](m)\n        val\
    \ pathValueIndex = mutable.ArrayBuffer.empty[Int](m)\n        val pathValueLength\
    \ = mutable.ArrayBuffer.empty[Int](m)\n        val pathValueIndex = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val pathValueLength = mutable.ArrayBuffer.empty[Int](m)\n        val\
    \ pathValueIndex = mutable.ArrayBuffer.empty[Int](m)\n        val pathValueLength\
    \ = mutable.ArrayBuffer.empty[Int](m)\n        val pathValueIndex = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val pathValueLength = mutable.ArrayBuffer.empty[Int](m)\n        val\
    \ pathValueIndex = mutable.ArrayBuffer.empty[Int](m)\n        val pathValueLength\
    \ = mutable.ArrayBuffer.empty[Int](m)\n        val pathValueIndex = mutable.ArrayBuffer.empty[Int](m)\n\
    \        val pathValueLength = mutable.ArrayBuffer.empty[Int](m)\n        val\
    \ pathValueIndex = mutable.ArrayBuffer.empty[Int](m)\n        val pathValueLength\
    \ = mutable.", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val visited = new mutable.HashSet[Long]()\n        val result = new mutable.ArrayList[Long]()\n\
    \        val stack = new mutable.Stack[Long]()\n        val stackSize = new mutable.ArrayList[Long]()\n\
    \        val stackSizeSize = new mutable.ArrayList[Long]()\n        val stackSizeSizeSize\
    \ = new mutable.ArrayList[Long]()\n        val stackSizeSizeSizeSize = new mutable.ArrayList[Long]()\n\
    \        val stackSizeSizeSizeSizeSize = new mutable.ArrayList[Long]()\n     \
    \   val stackSizeSizeSizeSizeSizeSize = new mutable.ArrayList[Long]()\n      \
    \  val stackSizeSizeSizeSizeSizeSizeSize = new mutable.ArrayList[Long]()\n   \
    \     val stackSizeSizeSizeSizeSizeSizeSize = new mutable.ArrayList[Long]()\n\
    \        val stackSizeSizeSizeSizeSizeSizeSizeSize = new mutable.ArrayList[Long]()\n\
    \        val stackSizeSizeSizeSizeSizeSizeSizeSizeSize = new mutable.ArrayList[Long]()\n\
    \        val stackSizeSizeSizeSizeSizeSizeSizeSizeSize = new mutable.ArrayList[Long]()\n\
    \        val stackSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = new mutable.ArrayList[Long]()\n\
    \        val stackSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = new mutable.ArrayList[Long]()\n\
    \        val stackSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = new mutable.ArrayList[Long]()\n\
    \        val stackSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = new mutable.ArrayList[Long]()\n\
    \        val stackSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = new mutable.ArrayList[Long]()\n\
    \        val stackSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = new mutable.ArrayList[Long]()\n\
    \        val stackSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = new mutable.ArrayList[Long]()\n\
    \        val stackSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = new mutable.ArrayList[Long]()\n\
    \        val stackSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = new mutable.ArrayList[Long]()\n\
    \        val stackSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = new mutable.ArrayList[Long]()\n\
    \        val stackSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = new\
    \ mutable.ArrayList[Long]()\n        val stackSizeSizeSizeSize", "        val\
    \ grid = grid.toList\n        val N = grid.size\n        val m = grid.head\n \
    \       val n = grid.last\n        val lst_A = grid.map(_.toList)\n        val\
    \ lst_B = grid.reverse.map(_.toList)\n        val lst_C = lst_A.map(_.toList)\n\
    \        val lst_D = lst_B.map(_.toList)\n        val lst_E = lst_C.map(_.toList)\n\
    \        val lst_F = lst_D.map(_.toList)\n        val lst_G = lst_E.map(_.toList)\n\
    \        val lst_H = lst_F.map(_.toList)\n        val lst_I = lst_G.map(_.toList)\n\
    \        val lst_J = lst_H.map(_.toList)\n        val lst_K = lst_I.map(_.toList)\n\
    \        val lst_L = lst_J.map(_.toList)\n        val lst_M = lst_K.map(_.toList)\n\
    \        val lst_N = lst_M.map(_.toList)\n        val lst_O = lst_N.map(_.toList)\n\
    \        val lst_P = lst_O.map(_.toList)\n        val lst_Q = lst_P.map(_.toList)\n\
    \        val lst_R = lst_Q.map(_.toList)\n        val lst_S = lst_R.map(_.toList)\n\
    \        val lst_T = lst_S.map(_.toList)\n        val lst_U = lst_T.map(_.toList)\n\
    \        val lst_V = lst_U.map(_.toList)\n        val lst_W = lst_V.map(_.toList)\n\
    \        val lst_X = lst_W.map(_.toList)\n        val lst_Y = lst_X.map(_.toList)\n\
    \        val lst_Z = lst_Y.map(_.toList)\n        val lst_A = lst_Z.map(_.toList)\n\
    \        val lst_B = lst_A.map(_.toList)\n        val lst_C = lst_B.map(_.toList)\n\
    \        val lst_D = lst_C.map(_.toList)\n        val lst_E = lst_D.map(_.toList)\n\
    \        val lst_F = lst_E.map(_.toList)\n        val lst_G = lst_F.map(_.toList)\n\
    \        val lst_H = lst_G.map(_.toList)\n        val lst_I = lst_H.map(_.toList)\n\
    \        val lst_J = lst_I.map(_.toList)\n        val lst_", "        val n =\
    \ grid.length\n        val m = grid(0).length\n        val result = new Array[Long](k)\n\
    \        val visited = new Array[Boolean](k)\n        val stack = new Array[Int](k)\n\
    \        val stackSize = new Array[Int](k)\n        val stackIndex = new Array[Int](k)\n\
    \        val stackIndexSize = new Array[Int](k)\n        val stackIndexIndex =\
    \ new Array[Int](k)\n        val stackIndexIndexSize = new Array[Int](k)\n   \
    \     val stackIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexSize\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexSize = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexSize = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexIndexSize\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexSize = new Array[Int](k)\n        val\
    \ stackIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexSize\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexSize = new Array[Int](k)\n   \
    \     val stackIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n     \
    \   val stackIndexIndexIndexIndexIndexIndexSize = new Array[Int](k)\n        val\
    \ stackIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexSize\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndex =\
    \ new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexSize = new\
    \ Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexSize = new Array[Int](k)\n   \
    \     val stackIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n     \
    \   val stackIndexIndexIndexIndexIndexIndexSize = new Array[Int](k)\n        val\
    \ stackIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexSize",
  "        val m = grid.size\n        val n = grid.head.size\n        val visited\
    \ = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n        val queue\
    \ = mutable.Queue[Long]()\n        val visitedMap = mutable.HashMap[Long, Boolean]()\n\
    \        val queueMap = mutable.HashMap[Long, Boolean]()\n        val queueMap2\
    \ = mutable.HashMap[Long, Boolean]()\n        val queueMap3 = mutable.HashMap[Long,\
    \ Boolean]()\n        val queueMap4 = mutable.HashMap[Long, Boolean]()\n     \
    \   val queueMap5 = mutable.HashMap[Long, Boolean]()\n        val queueMap6 =\
    \ mutable.HashMap[Long, Boolean]()\n        val queueMap7 = mutable.HashMap[Long,\
    \ Boolean]()\n        val queueMap8 = mutable.HashMap[Long, Boolean]()\n     \
    \   val queueMap9 = mutable.HashMap[Long, Boolean]()\n        val queueMap10 =\
    \ mutable.HashMap[Long, Boolean]()\n        val queueMap11 = mutable.HashMap[Long,\
    \ Boolean]()\n        val queueMap12 = mutable.HashMap[Long, Boolean]()\n    \
    \    val queueMap13 = mutable.HashMap[Long, Boolean]()\n        val queueMap14\
    \ = mutable.HashMap[Long, Boolean]()\n        val queueMap15 = mutable.HashMap[Long,\
    \ Boolean]()\n        val queueMap16 = mutable.HashMap[Long, Boolean]()\n    \
    \    val queueMap17 = mutable.HashMap[Long, Boolean]()\n        val queueMap18\
    \ = mutable.HashMap[Long, Boolean]()\n        val queueMap19 = mutable.HashMap[Long,\
    \ Boolean]()\n        val queueMap20 = mutable.HashMap[Long, Boolean]()\n    \
    \    val queueMap21 = mutable.HashMap[Long, Boolean]()\n        val queueMap22\
    \ = mutable.HashMap[Long, Boolean]()\n        val queueMap23 = mutable.HashMap[Long,\
    \ Boolean]()\n        val queueMap24 = mutable.HashMap[Long, Boolean]()\n    \
    \    val queueMap25 = mutable.HashMap[Long, Boolean]()\n        val queueMap26\
    \ = mutable.HashMap[Long, Boolean]()\n        val queueMap27 = mutable.HashMap[Long,\
    \ Boolean]()\n        val queueMap28 = mutable.HashMap[Long, Boolean]()\n    \
    \    val queueMap29 = mutable.HashMap[Long, Boolean]()", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val visited = new mutable.HashSet[Long]()\n\
    \        val ans = new mutable.ArrayList[Long]()\n        val lst_A = new mutable.ArrayList[Long]()\n\
    \        val lst_B = new mutable.ArrayList[Long]()\n        val lst_C = new mutable.ArrayList[Long]()\n\
    \        val lst_D = new mutable.ArrayList[Long]()\n        val lst_E = new mutable.ArrayList[Long]()\n\
    \        val lst_F = new mutable.ArrayList[Long]()\n        val lst_G = new mutable.ArrayList[Long]()\n\
    \        val lst_H = new mutable.ArrayList[Long]()\n        val lst_I = new mutable.ArrayList[Long]()\n\
    \        val lst_J = new mutable.ArrayList[Long]()\n        val lst_K = new mutable.ArrayList[Long]()\n\
    \        val lst_L = new mutable.ArrayList[Long]()\n        val lst_M = new mutable.ArrayList[Long]()\n\
    \        val lst_N = new mutable.ArrayList[Long]()\n        val lst_O = new mutable.ArrayList[Long]()\n\
    \        val lst_P = new mutable.ArrayList[Long]()\n        val lst_Q = new mutable.ArrayList[Long]()\n\
    \        val lst_R = new mutable.ArrayList[Long]()\n        val lst_S = new mutable.ArrayList[Long]()\n\
    \        val lst_T = new mutable.ArrayList[Long]()\n        val lst_U = new mutable.ArrayList[Long]()\n\
    \        val lst_V = new mutable.ArrayList[Long]()\n        val lst_W = new mutable.ArrayList[Long]()\n\
    \        val lst_X = new mutable.ArrayList[Long]()\n        val lst_Y = new mutable.ArrayList[Long]()\n\
    \        val lst_Z = new mutable.ArrayList[Long]()\n        val lst_AA = new mutable.ArrayList[Long]()\n\
    \        val lst_AB = new mutable.ArrayList[Long]()\n        val lst_AC = new\
    \ mutable.ArrayList[Long]()\n        val lst_AD = new mutable.ArrayList[Long]()\n\
    \        val lst_AE = new mutable.ArrayList[Long]()\n        val lst_AF = new\
    \ mutable.ArrayList[Long]()\n        val lst_AG = new mutable.ArrayList[Long]()\n\
    \        val lst_AH = new mutable.ArrayList[Long", "        val n = grid.size\n\
    \        val m = grid(0).size\n        val lst_A = new Array[Long](k)\n      \
    \  val lst_B = new Array[Long](k)\n        val lst_C = new Array[Long](k)\n  \
    \      val lst_D = new Array[Long](k)\n        val lst_E = new Array[Long](k)\n\
    \        val lst_F = new Array[Long](k)\n        val lst_G = new Array[Long](k)\n\
    \        val lst_H = new Array[Long](k)\n        val lst_I = new Array[Long](k)\n\
    \        val lst_J = new Array[Long](k)\n        val lst_K = new Array[Long](k)\n\
    \        val lst_L = new Array[Long](k)\n        val lst_M = new Array[Long](k)\n\
    \        val lst_N = new Array[Long](k)\n        val lst_O = new Array[Long](k)\n\
    \        val lst_P = new Array[Long](k)\n        val lst_Q = new Array[Long](k)\n\
    \        val lst_R = new Array[Long](k)\n        val lst_S = new Array[Long](k)\n\
    \        val lst_T = new Array[Long](k)\n        val lst_U = new Array[Long](k)\n\
    \        val lst_V = new Array[Long](k)\n        val lst_W = new Array[Long](k)\n\
    \        val lst_X = new Array[Long](k)\n        val lst_Y = new Array[Long](k)\n\
    \        val lst_Z = new Array[Long](k)\n        val lst_AA = new Array[Long](k)\n\
    \        val lst_AB = new Array[Long](k)\n        val lst_AC = new Array[Long](k)\n\
    \        val lst_AD = new Array[Long](k)\n        val lst_AE = new Array[Long](k)\n\
    \        val lst_AF = new Array[Long](k)\n        val lst_AG = new Array[Long](k)\n\
    \        val lst_AH = new Array[Long](k)\n        val lst_AI = new Array[Long](k)\n\
    \        val lst_AJ = new Array[Long](k)\n        val lst_AK = new Array[Long](k)\n\
    \        val lst_AL = new Array[Long](k)\n        val lst_AM = new Array[Long](k)\n\
    \        val lst_AN = new Array[Long](k)\n        val lst_AO = new Array[Long](k)\n\
    \        val lst_AP = new ", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val grid = grid.toList\n        val visited = new mutable.HashSet[Long]()\n\
    \        val ans = List[Long]()\n        val visitedSet = mutable.HashSet[Long]()\n\
    \        val visitedSet2 = mutable.HashSet[Long]()\n        val visitedSet3 =\
    \ mutable.HashSet[Long]()\n        val visitedSet4 = mutable.HashSet[Long]()\n\
    \        val visitedSet5 = mutable.HashSet[Long]()\n        val visitedSet6 =\
    \ mutable.HashSet[Long]()\n        val visitedSet7 = mutable.HashSet[Long]()\n\
    \        val visitedSet8 = mutable.HashSet[Long]()\n        val visitedSet9 =\
    \ mutable.HashSet[Long]()\n        val visitedSet10 = mutable.HashSet[Long]()\n\
    \        val visitedSet11 = mutable.HashSet[Long]()\n        val visitedSet12\
    \ = mutable.HashSet[Long]()\n        val visitedSet13 = mutable.HashSet[Long]()\n\
    \        val visitedSet14 = mutable.HashSet[Long]()\n        val visitedSet15\
    \ = mutable.HashSet[Long]()\n        val visitedSet16 = mutable.HashSet[Long]()\n\
    \        val visitedSet17 = mutable.HashSet[Long]()\n        val visitedSet18\
    \ = mutable.HashSet[Long]()\n        val visitedSet19 = mutable.HashSet[Long]()\n\
    \        val visitedSet20 = mutable.HashSet[Long]()\n        val visitedSet21\
    \ = mutable.HashSet[Long]()\n        val visitedSet22 = mutable.HashSet[Long]()\n\
    \        val visitedSet23 = mutable.HashSet[Long]()\n        val visitedSet24\
    \ = mutable.HashSet[Long]()\n        val visitedSet25 = mutable.HashSet[Long]()\n\
    \        val visitedSet26 = mutable.HashSet[Long]()\n        val visitedSet27\
    \ = mutable.HashSet[Long]()\n        val visitedSet28 = mutable.HashSet[Long]()\n\
    \        val visitedSet29 = mutable.HashSet[Long]()\n        val visitedSet30\
    \ = mutable.HashSet[Long]()\n        ", "        val n = grid.size\n        val\
    \ m = grid(0).size\n        val lst_A = grid.map(_.toList).toList\n        val\
    \ lst_B = grid.map(_.toList).toList\n        val lst_C = lst_A.map(_.toList).distinct\n\
    \        val lst_D = lst_B.map(_.toList).distinct\n        val lst_E = lst_C.map(_.toList).distinct\n\
    \        val lst_F = lst_D.map(_.toList).distinct\n        val lst_G = lst_E.map(_.toList).distinct\n\
    \        val lst_H = lst_F.map(_.toList).distinct\n        val lst_I = lst_G.map(_.toList).distinct\n\
    \        val lst_J = lst_H.map(_.toList).distinct\n        val lst_K = lst_I.map(_.toList).distinct\n\
    \        val lst_L = lst_J.map(_.toList).distinct\n        val lst_M = lst_K.map(_.toList).distinct\n\
    \        val lst_N = lst_L.map(_.toList).distinct\n        val lst_O = lst_M.map(_.toList).distinct\n\
    \        val lst_P = lst_O.map(_.toList).distinct\n        val lst_Q = lst_P.map(_.toList).distinct\n\
    \        val lst_R = lst_Q.map(_.toList).distinct\n        val lst_S = lst_R.map(_.toList).distinct\n\
    \        val lst_T = lst_S.map(_.toList).distinct\n        val lst_U = lst_T.map(_.toList).distinct\n\
    \        val lst_V = lst_U.map(_.toList).distinct\n        val lst_W = lst_V.map(_.toList).distinct\n\
    \        val lst_X = lst_W.map(_.toList).distinct\n        val lst_Y = lst_X.map(_.toList).distinct\n\
    \        val lst_Z = lst_Y.map(_.toList).distinct\n        val lst_A = lst_Z.map(_.toList).distinct\n\
    \        val lst_B = lst_A.map(_.toList).distinct\n        val lst_C = lst_B.map(_.toList).distinct\n\
    \        val lst_D = lst_C.map(_.toList).distinct\n        val lst_E = lst_D.map(_.toList).distinct\n\
    \        val lst_F = lst_E.map(_.toList).distinct\n        val lst_G = lst_F.",
  "        val N = grid.length\n        val M = grid(0).length\n        val grid =\
    \ grid.toList\n        val visited = new mutable.HashSet[Long]()\n        val\
    \ result = new mutable.ListBuffer[Long]()\n        val visitedList = new mutable.ListBuffer[Long]()\n\
    \        val visitedList2 = new mutable.ListBuffer[Long]()\n        val visitedList3\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList4 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList5 = new mutable.ListBuffer[Long]()\n        val visitedList6\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList7 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList8 = new mutable.ListBuffer[Long]()\n        val visitedList9\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList10 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList11 = new mutable.ListBuffer[Long]()\n        val visitedList12\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList13 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList14 = new mutable.ListBuffer[Long]()\n        val visitedList15\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList16 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList17 = new mutable.ListBuffer[Long]()\n        val visitedList18\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList19 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList20 = new mutable.ListBuffer[Long]()\n        val visitedList21\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList22 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList23 = new mutable.ListBuffer[Long]()\n        val visitedList24\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList25 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList26 = new mutable.ListBuffer[Long]()\n        val visitedList27\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList28 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList29 = new mutable.ListBuffer[Long]()\n        ", "    \
    \    val N = grid.size\n        val visited = new mutable.HashSet[Long]()\n  \
    \      val results = new mutable.ListBuffer[Long]()\n        val visitedList =\
    \ new mutable.HashSet[Long]()\n        val visitedList2 = new mutable.HashSet[Long]()\n\
    \        val visitedList3 = new mutable.HashSet[Long]()\n        val visitedList4\
    \ = new mutable.HashSet[Long]()\n        val visitedList5 = new mutable.HashSet[Long]()\n\
    \        val visitedList6 = new mutable.HashSet[Long]()\n        val visitedList7\
    \ = new mutable.HashSet[Long]()\n        val visitedList8 = new mutable.HashSet[Long]()\n\
    \        val visitedList9 = new mutable.HashSet[Long]()\n        val visitedList10\
    \ = new mutable.HashSet[Long]()\n        val visitedList11 = new mutable.HashSet[Long]()\n\
    \        val visitedList12 = new mutable.HashSet[Long]()\n        val visitedList13\
    \ = new mutable.HashSet[Long]()\n        val visitedList14 = new mutable.HashSet[Long]()\n\
    \        val visitedList15 = new mutable.HashSet[Long]()\n        val visitedList16\
    \ = new mutable.HashSet[Long]()\n        val visitedList17 = new mutable.HashSet[Long]()\n\
    \        val visitedList18 = new mutable.HashSet[Long]()\n        val visitedList19\
    \ = new mutable.HashSet[Long]()\n        val visitedList20 = new mutable.HashSet[Long]()\n\
    \        val visitedList21 = new mutable.HashSet[Long]()\n        val visitedList22\
    \ = new mutable.HashSet[Long]()\n        val visitedList23 = new mutable.HashSet[Long]()\n\
    \        val visitedList24 = new mutable.HashSet[Long]()\n        val visitedList25\
    \ = new mutable.HashSet[Long]()\n        val visitedList26 = new mutable.HashSet[Long]()\n\
    \        val visitedList27 = new mutable.HashSet[Long]()\n        val visitedList28\
    \ = new mutable.HashSet[Long]()\n        val visitedList29 = new mutable.HashSet[Long]()\n\
    \        val visitedList30 = new mutable.HashSet[Long]()"]
stop_tokens:
- "\n    }\n"
