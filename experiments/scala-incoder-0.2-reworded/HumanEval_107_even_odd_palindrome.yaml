name: HumanEval_107_even_odd_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return a tuple that has the number of even and\
  \ odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n\
  \    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    //\
  \ Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and\
  \ two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n\
  \    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n\
  \    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd\
  \ integer palindromes respectively.\n    def evenOddPalindrome(n : Long) : Tuple2[Long,\
  \ Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddPalindrome((123l)).equals(((8l,\
  \ 13l))));\n    assert(evenOddPalindrome((12l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals(((1l,\
  \ 2l))));\n    assert(evenOddPalindrome((63l)).equals(((6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals(((5l,\
  \ 6l))));\n    assert(evenOddPalindrome((19l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals(((4l,\
  \ 5l))));\n    assert(evenOddPalindrome((1l)).equals(((0l, 1l))));\n    }\n\n}\n"
completions: ["        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            val palindrome = i.toString\n\
    \            val reversePalindrome = reverse(palindrome)\n            if (palindrome\
    \ == reversePalindrome) {\n                evenPalindromes += i\n            \
    \    evenPalindromeCount += palindrome.length\n            } else {\n        \
    \        oddPalindromes += i\n                oddPalindromeCount += palindrome.length\n\
    \            }\n            i += 1\n        }\n        val evenPalindromeCount\
    \ = evenPalindromeCount.sum\n        val oddPalindromeCount = oddPalindromeCount.sum\n\
    \        return (evenPalindromeCount, oddPalindromeCount)", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            val palindrome = i.toString\n\
    \            val reversePalindrome = reverse(palindrome)\n            if (palindrome\
    \ == reversePalindrome) {\n                evenPalindromes += i\n            }\
    \ else {\n                oddPalindromes += i\n            }\n            i +=\
    \ 1\n        }\n        evenPalindromes.toList match {\n            case Nil =>\
    \ (1l, 0l)\n            case x => evenPalindromes.toList match {\n           \
    \     case Nil => (0l, x.toLong)\n                case y => (x.toLong, y.toLong)\n\
    \            }\n        }", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val palindromes = mutable.Set[Long]()\n\
    \        var even = 0\n        var odd = 0\n        var palindrome = 0\n     \
    \   var evenPalindrome = 0\n        var oddPalindrome = 0\n        var palindromes\
    \ = 0\n        var evenPalindromes = 0\n        var oddPalindromes = 0\n     \
    \   var palindrome = 0\n        var evenPalindrome = 0\n        var oddPalindrome\
    \ = 0\n        var palindromes = 0\n        var evenPalindromes = 0\n        var\
    \ oddPalindromes = 0\n        var palindrome = 0\n        var evenPalindrome =\
    \ 0\n        var oddPalindrome = 0\n        var palindromes = 0\n        var evenPalindromes\
    \ = 0\n        var oddPalindromes = 0\n        var palindrome = 0\n        var\
    \ evenPalindrome = 0\n        var oddPalindrome = 0\n        var palindromes =\
    \ 0\n        var evenPalindromes = 0\n        var oddPalindromes = 0\n       \
    \ var palindrome = 0\n        var evenPalindrome = 0\n        var oddPalindrome\
    \ = 0\n        var palindromes = 0\n        var evenPalindromes = 0\n        var\
    \ oddPalindromes = 0\n        var palindrome = 0\n        var evenPalindrome =\
    \ 0\n        var oddPalindrome = 0\n        var palindromes = 0\n        var evenPalindromes\
    \ = 0\n        var oddPalindromes = 0\n        var palindrome = 0\n        var\
    \ evenPalindrome = 0\n        var oddPalindrome = 0\n        var palindromes =\
    \ 0\n        var evenPalindromes = 0\n        var oddPalindromes = 0\n       \
    \ var palindrome = 0\n        var evenPalindrome = 0\n        var oddPalindrome\
    \ = 0\n        var palindromes = 0\n        var evenPalindromes = 0\n        var\
    \ oddPalindromes = 0\n        var palindrome = 0\n        var evenPalindrome =\
    \ 0\n        var oddPalindrome = 0\n        var palindromes = 0\n        var evenPalindromes\
    \ = 0\n        var oddPalindromes = 0\n        var palindrome = 0\n        var\
    \ evenPalindrome = 0\n        var oddPalindrome = 0\n        var palindromes =\
    \ 0\n        var evenPalindromes = 0\n        var oddPalindro", "        val evenPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val palindromes = mutable.ListBuffer[Long]()\n        val palindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val palindromes2\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val palindromes3 = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val palindromes4 = mutable.ListBuffer[Long]()\n        val palindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val palindromes5\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val palindromes6 = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val palindromes7 = mutable.ListBuffer[Long]()\n        val palindromeCount7\
    \ = mutable.ListBuffer[Long]", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCount2 =\
    \ 0\n        val oddPalindromeCount2 = 0\n        val evenPalindromeCount3 = 0\n\
    \        val oddPalindromeCount3 = 0\n        val evenPalindromeCount4 = 0\n \
    \       val oddPalindromeCount4 = 0\n        val evenPalindromeCount5 = 0\n  \
    \      val oddPalindromeCount5 = 0\n        val evenPalindromeCount6 = 0\n   \
    \     val oddPalindromeCount6 = 0\n        val evenPalindromeCount7 = 0\n    \
    \    val oddPalindromeCount7 = 0\n        val evenPalindromeCount8 = 0\n     \
    \   val oddPalindromeCount8 = 0\n        val evenPalindromeCount9 = 0\n      \
    \  val oddPalindromeCount9 = 0\n        val evenPalindromeCount10 = 0\n      \
    \  val oddPalindromeCount10 = 0\n        val evenPalindromeCount11 = 0\n     \
    \   val oddPalindromeCount11 = 0\n        val evenPalindromeCount12 = 0\n    \
    \    val oddPalindromeCount12 = 0\n        val evenPalindromeCount13 = 0\n   \
    \     val oddPalindromeCount13 = 0\n        val evenPalindromeCount14 = 0\n  \
    \      val oddPalindromeCount14 = 0\n        val evenPalindromeCount15 = 0\n \
    \       val oddPalindromeCount15 = 0\n        val evenPalindromeCount16 = 0\n\
    \        val oddPalindromeCount16 = 0\n        val evenPalindromeCount17 = 0\n\
    \        val oddPalindromeCount17 = 0\n        val evenPalindromeCount18 = 0\n\
    \        val oddPalindromeCount18 = 0\n        val evenPalindromeCount19 = 0\n\
    \        val oddPalindromeCount19 = 0\n        val evenPalindromeCount20 = 0\n\
    \        val oddPalindromeCount20 = 0\n        val evenPalindromeCount21 = 0\n\
    \        val oddPalindromeCount21 = 0\n        val evenPalindromeCount22 = 0\n\
    \        val oddPalindrome", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeSum = 0\n\
    \        val oddPalindromeSum = 0\n        val evenPalindromeSum2 = 0\n      \
    \  val oddPalindromeSum2 = 0\n        val evenPalindromeSum3 = 0\n        val\
    \ oddPalindromeSum3 = 0\n        val evenPalindromeSum4 = 0\n        val oddPalindromeSum4\
    \ = 0\n        val evenPalindromeSum5 = 0\n        val oddPalindromeSum5 = 0\n\
    \        val evenPalindromeSum6 = 0\n        val oddPalindromeSum6 = 0\n     \
    \   val evenPalindromeSum7 = 0\n        val oddPalindromeSum7 = 0\n        val\
    \ evenPalindromeSum8 = 0\n        val oddPalindromeSum8 = 0\n        val evenPalindromeSum9\
    \ = 0\n        val oddPalindromeSum9 = 0\n        val evenPalindromeSum10 = 0\n\
    \        val oddPalindromeSum10 = 0\n        val evenPalindromeSum11 = 0\n   \
    \     val oddPalindromeSum11 = 0\n        val evenPalindromeSum12 = 0\n      \
    \  val oddPalindromeSum12 = 0\n        val evenPalindromeSum13 = 0\n        val\
    \ oddPalindromeSum13 = 0\n        val evenPalindromeSum14 = 0\n        val oddPalindromeSum14\
    \ = 0\n        val evenPalindromeSum15 = 0\n        val oddPalindromeSum15 = 0\n\
    \        val evenPalindromeSum16 = 0\n        val oddPalindromeSum16 = 0\n   \
    \     val evenPalindromeSum17 = 0\n        val oddPalindromeSum17 = 0\n      \
    \  val evenPalindromeSum18 = 0\n        val oddPalindromeSum18 = 0\n        val\
    \ evenPalindromeSum19 = 0\n        val oddPalindromeSum19 = 0\n        val evenPalindromeSum20\
    \ = 0\n        val oddPalindromeSum20 = 0\n        val evenPalindromeSum21 = 0\n\
    \        val oddPalindromeSum21 = 0\n", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuples = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val oddPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val evenPalindromeTuples\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuples = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val oddPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val evenPalindromeTuples\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuples = mutable.",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindrome = 0\n        val\
    \ oddPalindrome = 0\n        val palindrome = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromeCount = 0\n \
    \       val evenPalindrome = 0\n        val oddPalindrome = 0\n        val palindrome\
    \ = 0\n        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n\
    \        val palindromeCount = 0\n        val evenPalindrome = 0\n        val\
    \ oddPalindrome = 0\n        val palindrome = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromeCount = 0\n \
    \       val evenPalindrome = 0\n        val oddPalindrome = 0\n        val palindrome\
    \ = 0\n        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n\
    \        val palindromeCount = 0\n        val evenPalindrome = 0\n        val\
    \ oddPalindrome = 0\n        val palindrome = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromeCount = 0\n \
    \       val evenPalindrome = 0\n        val oddPalindrome = 0\n        val palindrome\
    \ = 0\n        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n\
    \        val palindromeCount = 0\n        val evenPalindrome = 0\n        val\
    \ oddPalindrome = 0\n        val palindrome = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromeCount = 0\n \
    \       val evenPalindrome = 0\n        val oddPalindrome = 0\n        val palindrome\
    \ = 0\n        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromePairs = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromePairs = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val evenPalindromePairsCount = mutable.Set[Tuple2[Long, Long]]()\n  \
    \      val oddPalindromePairsCount = mutable.Set[Tuple2[Long, Long]]()\n     \
    \   val evenPalindromePairsCount2 = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromePairsCount2 = mutable.Set[Tuple2[Long, Long]]()\n        val\
    \ evenPalindromePairsCount3 = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromePairsCount3\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromePairsCount4 =\
    \ mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromePairsCount4 = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromePairsCount5 = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val oddPalindromePairsCount5 = mutable.Set[Tuple2[Long, Long]]()\n  \
    \      val evenPalindromePairsCount6 = mutable.Set[Tuple2[Long, Long]]()\n   \
    \     val oddPalindromePairsCount6 = mutable.Set[Tuple2[Long, Long]]()\n     \
    \   val evenPalindromePairsCount7 = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromePairsCount7 = mutable.Set[Tuple2[Long, Long]]()\n        val\
    \ evenPalindromePairsCount8 = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromePairsCount8\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromePairsCount9 =\
    \ mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromePairsCount9 = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindro", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        var even = 0\n    \
    \    var odd = 0\n        var i = 0\n        var j = 0\n        while(i < n) {\n\
    \            while(j < n) {\n                if(i % 10 == j % 10) {\n        \
    \            evenPalindromes += i\n                    j++\n                }\n\
    \                else {\n                    oddPalindromes += i\n           \
    \         j++\n                }\n            }\n            i += 2\n        \
    \    j = 0\n        }\n        evenPalindromes.toList match {\n            case\
    \ Nil => (even, odd)\n            case x => x.foldLeft((even, odd))((x, y) =>\
    \ x + y)\n        }", "        val evenPalindromes = mutable.Set[Long]()\n   \
    \     val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromes = mutable.Set[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindromeCount2 = 0\n     \
    \   val oddPalindromeCount2 = 0\n        val palindromes2: mutable.Set[Long] =\
    \ mutable.Set()\n        val palindromeCount2 = 0\n        val evenPalindromeCount3\
    \ = 0\n        val oddPalindromeCount3 = 0\n        val palindromes3: mutable.Set[Long]\
    \ = mutable.Set()\n        val palindromeCount3 = 0\n        val evenPalindromeCount4\
    \ = 0\n        val oddPalindromeCount4 = 0\n        val palindromes4: mutable.Set[Long]\
    \ = mutable.Set()\n        val palindromeCount4 = 0\n        val evenPalindromeCount5\
    \ = 0\n        val oddPalindromeCount5 = 0\n        val palindromes5: mutable.Set[Long]\
    \ = mutable.Set()\n        val palindromeCount5 = 0\n        val evenPalindromeCount6\
    \ = 0\n        val oddPalindromeCount6 = 0\n        val palindromes6: mutable.Set[Long]\
    \ = mutable.Set()\n        val palindromeCount6 = 0\n        val evenPalindromeCount7\
    \ = 0\n        val oddPalindromeCount7 = 0\n        val palindromes7: mutable.Set[Long]\
    \ = mutable.Set()\n        val palindromeCount7 = 0\n        val evenPalindromeCount8\
    \ = 0\n        val oddPalindromeCount8 = 0\n        val palindromes8: mutable.Set[Long]\
    \ = mutable.Set()\n        val palindromeCount8 = 0\n        val evenPalindromeCount9\
    \ = 0\n        val oddPalindromeCount9 = 0\n        val palindromes9: mutable.Set[Long]\
    \ = mutable.Set()\n        val palindromeCount9 = 0\n        val evenPalindromeCount10\
    \ = 0\n        val oddPalindromeCount10 = 0\n        val palindromes10: ", " \
    \       val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromePairs = mutable.Set[Tuple2[Long, Long]]()\n \
    \       val oddPalindromePairs = mutable.Set[Tuple2[Long, Long]]()\n        val\
    \ evenPalindromePairCount = 0\n        val oddPalindromePairCount = 0\n      \
    \  val evenPalindromePairs = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromePairs\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromePairCount = 0\n\
    \        val oddPalindromePairCount = 0\n        val evenPalindromePairs = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromePairs = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val evenPalindromePairCount = 0\n        val oddPalindromePairCount =\
    \ 0\n        val evenPalindromePairs = mutable.Set[Tuple2[Long, Long]]()\n   \
    \     val oddPalindromePairs = mutable.Set[Tuple2[Long, Long]]()\n        val\
    \ evenPalindromePairCount = 0\n        val oddPalindromePairCount = 0\n      \
    \  val evenPalindromePairs = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromePairs\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromePairCount = 0\n\
    \        val oddPalindromePairCount = 0\n        val evenPalindromePairs = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromePairs = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val evenPalindromePairCount = 0\n        val oddPalindromePairCount =\
    \ 0\n        val evenPalindromePairs = mutable.Set[Tuple2[Long, Long]]()\n   \
    \     val oddPalindromePairs = mutable.Set[Tuple2[Long, Long]]()\n        val\
    \ evenPalindromePairCount = 0\n        val oddPalindromePairCount = 0\n      \
    \  val evenPalindromePairs = mutable.Set", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).filter(_ % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(_\
    \ % 2 == 1)\n        for (i <- evenPalindromeRange) {\n            val evenPalindrome\
    \ = i.toString.reverse\n            val oddPalindrome = i.toString.reverse\n \
    \           if (evenPalindrome == oddPalindrome) {\n                evenPalindromes\
    \ += i\n                evenPalindromeCount += 1\n            } else {\n     \
    \           oddPalindromes += i\n                oddPalindromeCount += 1\n   \
    \         }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", " \
    \       val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCounts = mutable.ListBuffer[Long]()\n        val oddPalindromeCounts\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountSum = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountSum = mutable.ListBuffer[Long]()\n        val evenPalindromeCountSums\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountSums = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountSumsSum = mutable.ListBuffer[Long]()\n       \
    \ val oddPalindromeCountSumsSum = mutable.ListBuffer[Long]()\n        val evenPalindromeCountSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountSumsSumsSum = mutable.ListBuffer[Long]()\n   \
    \     val oddPalindromeCountSumsSumsSum = mutable.ListBuffer[Long]()\n       \
    \ val evenPalindromeCountSumsSumsSums = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromeCountSumsSumsSums = mutable.ListBuffer[Long]()\n        val evenPalindromeCountSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val ", "        val evenPalindromes =\
    \ mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n    \
    \    val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        val oddPalindromeCount10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount11 = mutable.Set[Long]()\n        val evenPalindromeCount12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount13 = mutable.Set[Long]()\n        val oddPalindromeCount13\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount14 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount14 = mutable.Set[Long]()\n        val ", "    \
    \    val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = 0\n    \
    \    val oddPalindromeCount = 0\n        val palindromes = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount = 0\n        val evenPalindrome = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindrome = mutable.ListBuffer.empty[Long]\n        val palindrome\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val palindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val palindromeCount = 0\n        val\
    \ evenPalindrome = mutable.ListBuffer.empty[Long]\n        val oddPalindrome =\
    \ mutable.ListBuffer.empty[Long]\n        val palindrome = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val palindromes = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount = 0\n        val evenPalindrome = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindrome = mutable.ListBuffer.empty[Long]\n        val palindrome\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val palindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val palindromeCount = 0\n        val\
    \ evenPalindrome = mutable.ListBuffer.empty[Long]\n        val oddPalindrome =\
    \ mutable.ListBuffer.empty[Long]\n        val palindrome = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val palindromes = mutable.ListBuffer.empty[Long]\n\
    \        val palindrome", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val palindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val palindromeCount = mutable.Set[Long]()\n \
    \       val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val palindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val palindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val palindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val palindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val palindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val palindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val palindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val palindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        ", "       \
    \ val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        var evenPalindromeCountIndex\
    \ = 0\n        var oddPalindromeCountIndex = 0\n        var evenPalindromeCountMax\
    \ = 0\n        var oddPalindromeCountMax = 0\n        var evenPalindromeCountMin\
    \ = 0\n        var oddPalindromeCountMin = 0\n        var evenPalindromeCountSum\
    \ = 0\n        var oddPalindromeCountSum = 0\n        var evenPalindromeCountSum2\
    \ = 0\n        var oddPalindromeCountSum2 = 0\n        var evenPalindromeCountSum3\
    \ = 0\n        var oddPalindromeCountSum3 = 0\n        var evenPalindromeCountSum4\
    \ = 0\n        var oddPalindromeCountSum4 = 0\n        var evenPalindromeCountSum5\
    \ = 0\n        var oddPalindromeCountSum5 = 0\n        var evenPalindromeCountSum6\
    \ = 0\n        var oddPalindromeCountSum6 = 0\n        var evenPalindromeCountSum7\
    \ = 0\n        var oddPalindromeCountSum7 = 0\n        var evenPalindromeCountSum8\
    \ = 0\n        var oddPalindromeCountSum8 = 0\n        var evenPalindromeCountSum9\
    \ = 0\n        var oddPalindromeCountSum9 = 0\n        var evenPalindromeCountSum10\
    \ = 0\n        var oddPalindromeCountSum10 = 0\n        var evenPalindromeCountSum11\
    \ = 0\n        var oddPalindromeCountSum11 = 0\n        var evenPalindromeCountSum12\
    \ = 0\n        var oddPalindromeCountSum12 = 0\n        var evenPalindromeCountSum13\
    \ = 0\n        var oddPalindromeCountSum13 = 0\n        var evenPalindromeCountSum14\
    \ = 0\n        var oddPalindromeCountSum14 = 0\n        var evenPalindromeCountSum15\
    \ = 0\n        var oddPalindromeCountSum15 = 0\n        var evenPalindromeCountSum16\
    \ = 0\n        var oddPalindromeCountSum16 = 0\n        var evenPalindromeCountSum17\
    \ = 0\n        var oddPalindromeCountSum17 = 0\n        var evenPalindromeCountSum18\
    \ = 0\n        var ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val palindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ palindromeCount = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount3 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount5 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount7 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val palindro", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val ", "        val evenPalindromes =\
    \ mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n    \
    \    val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n       \
    \ val evenPalindromeCount2 = 0\n        val oddPalindromeCount2 = 0\n        val\
    \ evenPalindromeCount3 = 0\n        val oddPalindromeCount3 = 0\n        val evenPalindromeCount4\
    \ = 0\n        val oddPalindromeCount4 = 0\n        val evenPalindromeCount5 =\
    \ 0\n        val oddPalindromeCount5 = 0\n        val evenPalindromeCount6 = 0\n\
    \        val oddPalindromeCount6 = 0\n        val evenPalindromeCount7 = 0\n \
    \       val oddPalindromeCount7 = 0\n        val evenPalindromeCount8 = 0\n  \
    \      val oddPalindromeCount8 = 0\n        val evenPalindromeCount9 = 0\n   \
    \     val oddPalindromeCount9 = 0\n        val evenPalindromeCount10 = 0\n   \
    \     val oddPalindromeCount10 = 0\n        val evenPalindromeCount11 = 0\n  \
    \      val oddPalindromeCount11 = 0\n        val evenPalindromeCount12 = 0\n \
    \       val oddPalindromeCount12 = 0\n        val evenPalindromeCount13 = 0\n\
    \        val oddPalindromeCount13 = 0\n        val evenPalindromeCount14 = 0\n\
    \        val oddPalindromeCount14 = 0\n        val evenPalindromeCount15 = 0\n\
    \        val oddPalindromeCount15 = 0\n        val evenPalindromeCount16 = 0\n\
    \        val oddPalindromeCount16 = 0\n        val evenPalindromeCount17 = 0\n\
    \        val oddPalindromeCount17 = 0\n        val evenPalindromeCount18 = 0\n\
    \        val oddPalindromeCount18 = 0\n        val evenPalindromeCount19 = 0\n\
    \        val oddPalindromeCount19 = 0\n        val evenPalindromeCount20 = 0\n\
    \        val oddPalindromeCount20 = 0\n        val evenPalindromeCount21 = 0\n\
    \        val oddPalindromeCount21 = 0\n        val evenPalindromeCount22 = 0\n\
    \        val oddPalindromeCount22", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindrome = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindrome = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindrome = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindrome = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val ", "        val evenPalindromes =\
    \ mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        var evenPalindrome = 0\n        var oddPalindrome = 0\n        for(i\
    \ <- 1 to n) {\n            val reverse = i.toString.reverse\n            val\
    \ isEven = reverse.charAt(0).toInt == reverse.charAt(reverse.length - 1)\n   \
    \         if(isEven) {\n                evenPalindromes += i\n               \
    \ evenPalindrome += 1\n            } else {\n                oddPalindromes +=\
    \ i\n                oddPalindrome += 1\n            }\n        }\n        (evenPalindromes.toList,\
    \ oddPalindromes.toList)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).filter(x => x % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(x\
    \ => x % 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val\
    \ evenPalindrome = x % 2 == 0\n            val oddPalindrome = x % 2 != 0\n  \
    \          if (evenPalindrome && oddPalindrome) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            } else if (evenPalindrome\
    \ && !oddPalindrome) {\n                oddPalindromes += x\n                oddPalindromeCount\
    \ += 1\n            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeRange = Range(1, n).toList\n        val oddPalindromeRange\
    \ = Range(1, n).toList.reverse\n        evenPalindromeRange foreach { x =>\n \
    \           val evenPalindrome = x % 2 == 0\n            if (evenPalindrome) {\n\
    \                evenPalindromes += x\n                evenPalindromeCount +=\
    \ 1\n            }\n        }\n        oddPalindromeRange foreach { x =>\n   \
    \         val oddPalindrome = x % 2 != 0\n            if (oddPalindrome) {\n \
    \               oddPalindromes += x\n                oddPalindromeCount += 1\n\
    \            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val palindromes\
    \ = mutable.Set[Long]()\n        val palindromeCount = mutable.Set[Long]()\n \
    \       val evenPalindromeCountSet = mutable.Set[Long]()\n        val oddPalindromeCountSet\
    \ = mutable.Set[Long]()\n        val palindromeCountSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSet = mutable.Set[Long]()\n        val oddPalindromeCountSetSet\
    \ = mutable.Set[Long]()\n        val palindromeCountSetSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSet = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSet\
    \ = mutable.Set[Long]()\n        val palindromeCountSetSetSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val palindromeCountSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val\
    \ palindromeCountSetSetSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n\
    \        val palindromeCountSetSetSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n\
    \        val palindromeCountSetSetSetSet = mutable.Set[Long]()\n        val ",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val palindromes = mutable.Set[Long]()\n        val palindromeCount =\
    \ 0\n        val palindromeTuple = Tuple2(palindromeCount, palindromes)\n    \
    \    val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val palindromes = mutable.Set[Long]()\n        val palindromeCount =\
    \ 0\n        val palindromeTuple = Tuple2(palindromeCount, palindromes)\n    \
    \    val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val palin", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).filter(_ % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(_\
    \ % 2 == 1)\n        evenPalindromeRange foreach { x =>\n            val reverse\
    \ = x.toString.reverse\n            val isEven = reverse.startsWith(x)\n     \
    \       if (isEven) {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else {\n                oddPalindromes += x\n          \
    \      oddPalindromeCount += 1\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.Set[Long]()\n \
    \       val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val palindromes = mutable.Set[Long]()\n        val palindromeCount =\
    \ mutable.Set[Long]()\n        val evenPalindromeCountMap = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap = mutable.Map[Long, Long]()\n   \
    \     val palindromeMap = mutable.Map[Long, Long]()\n        val palindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n  \
    \      val palindromeMap2 = mutable.Map[Long, Long]()\n        val palindromeCountMap2\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap3 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap3 = mutable.Map[Long, Long]()\n  \
    \      val palindromeMap3 = mutable.Map[Long, Long]()\n        val palindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n  \
    \      val palindromeMap4 = mutable.Map[Long, Long]()\n        val palindromeCountMap4\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap5 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap5 = mutable.Map[Long, Long]()\n  \
    \      val palindromeMap5 = mutable.Map[Long, Long]()\n        val palindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n  \
    \      val palindromeMap6 = mutable.Map[Long, Long]()\n        val ", "      \
    \  val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromePairs = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromePairs = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val evenPalindromePairsCount = mutable.Set[Tuple2[Long, Long]]()\n  \
    \      val oddPalindromePairsCount = mutable.Set[Tuple2[Long, Long]]()\n     \
    \   val evenPalindromePairsCountSize = mutable.Set[Long]()\n        val oddPalindromePairsCountSize\
    \ = mutable.Set[Long]()\n        val evenPalindromePairsCountSizeSize = mutable.Set[Long]()\n\
    \        val oddPalindromePairsCountSizeSize = mutable.Set[Long]()\n        val\
    \ evenPalindromePairsCountSizeSizeSize = mutable.Set[Long]()\n        val oddPalindromePairsCountSizeSizeSize\
    \ = mutable.Set[Long]()\n        val evenPalindromePairsCountSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val oddPalindromePairsCountSizeSizeSizeSize =\
    \ mutable.Set[Long]()\n        val evenPalindromePairsCountSizeSizeSizeSize =\
    \ mutable.Set[Long]()\n        val oddPalindromePairsCountSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val evenPalindromePairsCountSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val oddPalindromePairsCountSizeSizeSizeSize = mutable.Set[Long]()\n \
    \       val evenPalindromePairsCountSizeSizeSizeSize = mutable.Set[Long]()\n \
    \       val oddPalindromePairsCountSizeSizeSizeSize = mutable.Set[Long]()\n  \
    \      val evenPalindromePairsCountSizeSizeSizeSize = mutable.Set[Long]()\n  \
    \      val oddPalindromePairsCountSizeSizeSizeSize = mutable.Set[Long]()\n   \
    \     val evenPalindromePairsCountSizeSizeSizeSize = mutable.Set[Long]()\n   \
    \     val oddPalindromePairsCountSizeSize", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val maxPalindromes = math.min(math.ceil(n/2),\
    \ math.ceil(n/4))\n        val maxPalindromeCount = math.min(math.ceil(n/2), math.ceil(n/4))\n\
    \        for(i <- 1 to maxPalindromes) {\n            val palindrome = math.min(math.ceil(n/2),\
    \ math.ceil(n/4))\n            val palindromeCount = math.min(math.ceil(n/2),\
    \ math.ceil(n/4))\n            val evenPalindrome = math.min(math.ceil(n/2), math.ceil(n/4))\n\
    \            val oddPalindrome = math.min(math.ceil(n/2), math.ceil(n/4))\n  \
    \          val evenPalindromeCount = math.min(math.ceil(n/2), math.ceil(n/4))\n\
    \            val oddPalindromeCount = math.min(math.ceil(n/2), math.ceil(n/4))\n\
    \            if(palindrome == palindromeCount) {\n                evenPalindromes\
    \ += evenPalindrome\n                evenPalindromeCount += 1\n            }\n\
    \            else {\n                oddPalindromes += oddPalindrome\n       \
    \         oddPalindromeCount += 1\n            }\n        }\n        evenPalindromeCount\
    \ match {\n            case 0 => (1l, 0l)\n            case 1 => (1l, 1l)\n  \
    \          case 2 => (1l, 2l)\n            case 3 => (1l, 3l)\n            case\
    \ 4 => (1l, 4l)\n            case 5 => (1l, 5l)\n            case 6 => (1l, 6l)\n\
    \            case 7 => (1l, 7l)\n            case 8 => (1l, 8l)\n            case\
    \ 9 => (1l, 9l)\n            case 10 => (1l, 10l)\n            case 11 => (1l,\
    \ 11l)\n            case 12 => (2l, 0l)\n            case 13 => (2l, 1l)\n   \
    \         case 14 => (2l, 2l)\n            case 15 => (2l, 3l)\n            case\
    \ 16 => (2l, 4l)\n            case 17 => (2l, 5l)\n            case 18 => (2l,\
    \ 6l)\n            case 19 => (2l, 7l)\n            case 20 => (2l, 8l)\n    \
    \        case 21 => (2l, 9l)\n            case 22 => (2l, 10l)\n            case\
    \ 23 => (2l, 11l)\n            case 24 => (3l, 0l)\n            case 25 => (3",
  "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val maxPalindromes = math.min(math.ceil(n/2),\
    \ 10^3)\n        val maxPalindromeCount = math.min(math.ceil(n/2), 10^3)\n   \
    \     for(i <- 1 to maxPalindromes) {\n            val palindrome = i.toString\n\
    \            val reversePalindrome = palindrome.reverse\n            if(palindrome\
    \ == reversePalindrome) {\n                evenPalindromes += i\n            \
    \    evenPalindromeCount += 1\n            } else {\n                oddPalindromes\
    \ += i\n                oddPalindromeCount += 1\n            }\n        }\n  \
    \      (evenPalindromeCount, oddPalindromeCount)", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n     \
    \   val evenPalindromeRange = Range(1, n).toList\n        val oddPalindromeRange\
    \ = Range(1, n).toList.reverse\n        evenPalindromeRange foreach { x =>\n \
    \           val evenPalindrome = x % 2 == 0\n            val oddPalindrome = x\
    \ % 2 != 0\n            if (evenPalindrome && oddPalindrome) {\n             \
    \   evenPalindromes += x\n                evenPalindromeCount += 1\n         \
    \   } else if (evenPalindrome && !oddPalindrome) {\n                oddPalindromes\
    \ += x\n                oddPalindromeCount += 1\n            }\n        }\n  \
    \      (evenPalindromeCount, oddPalindromeCount)", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n     \
    \   val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuplesSet\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuplesSet2 = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val oddPalindromeTuplesSet2 = mutable.Set[Tuple2[Long, Long]]()\n   \
    \     val evenPalindromeTuplesSet3 = mutable.Set[Tuple2[Long, Long]]()\n     \
    \   val oddPalindromeTuplesSet3 = mutable.Set[Tuple2[Long, Long]]()\n        val\
    \ evenPalindromeTuplesSet4 = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet4\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuplesSet5 =\
    \ mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet5 = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuplesSet6 = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val oddPalindromeTuplesSet6 = mutable.Set[Tuple2[Long, Long]]()\n   \
    \     val evenPalindromeTuplesSet7 = mutable.Set[Tuple2[Long, Long]]()\n     \
    \   val oddPalindromeTuplesSet7 = mutable.Set[Tuple2[Long, Long]]()\n        val\
    \ evenPalindromeTuplesSet8 = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet8\
    \ = mutable.Set[Tuple2[Long, Long]]", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = range(1,\
    \ n).filter(x => x % 2 == 0)\n        val oddPalindromeRange = range(1, n).filter(x\
    \ => x % 2 != 0)\n        for (i <- evenPalindromeRange) {\n            val reverse\
    \ = i.reverse\n            if (reverse == i) {\n                evenPalindromes\
    \ += i\n                evenPalindromeCount += 1\n            }\n        }\n \
    \       for (i <- oddPalindromeRange) {\n            val reverse = i.reverse\n\
    \            if (reverse == i) {\n                oddPalindromes += i\n      \
    \          oddPalindromeCount += 1\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        var even = 0\n\
    \        var odd = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ n) {\n            while (j < n) {\n                if (i % 10 == j % 10) {\n\
    \                    evenPalindromes += i\n                    oddPalindromes\
    \ += j\n                    i += 1\n                    j += 1\n             \
    \   } else {\n                    i += 1\n                    j += 1\n       \
    \         }\n            }\n            even = evenPalindromes.count(_ % 2 ==\
    \ 0)\n            odd = oddPalindromes.count(_ % 2 == 1)\n            evenPalindromes.clear()\n\
    \            oddPalindromes.clear()\n            i += 1\n            j += 1\n\
    \        }\n        (even, odd)", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        var even = 0\n    \
    \    var odd = 0\n        var i = 0\n        var j = 0\n        while (i < n)\
    \ {\n            val temp = i\n            while (temp > 0) {\n              \
    \  val remainder = temp % 10\n                if (remainder == 0) {\n        \
    \            evenPalindromes += temp\n                    evenPalindromes += temp\n\
    \                    even += 1\n                } else {\n                   \
    \ oddPalindromes += temp\n                    oddPalindromes += temp\n       \
    \             odd += 1\n                }\n                temp /= 10\n      \
    \      }\n            i += 1\n        }\n        val evenPalindrome = evenPalindromes.toList\n\
    \        val oddPalindrome = oddPalindromes.toList\n        val evenPalindromeCount\
    \ = evenPalindrome.size\n        val oddPalindromeCount = oddPalindrome.size\n\
    \        val evenPalindromeTuple = evenPalindrome.toList\n        val oddPalindromeTuple\
    \ = oddPalindrome.toList\n        val evenPalindromeTuple2 = evenPalindromeTuple.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1).toList\n        val oddPalindromeTuple2 = oddPalindromeTuple.zipWithIndex.filter(_._2\
    \ % 2 == 1).map(_._1).toList\n        val evenPalindromeTuple3 = evenPalindromeTuple2.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1).toList\n        val oddPalindromeTuple3 = oddPalindromeTuple2.zipWithIndex.filter(_._2\
    \ % 2 == 1).map(_._1).toList\n        val evenPalindromeTuple4 = evenPalindromeTuple3.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1).toList\n        val oddPalindromeTuple4 = oddPalindromeTuple3.zipWithIndex.filter(_._2\
    \ % 2 == 1).map(_._1).toList\n        val evenPalindromeTuple5 = evenPalindromeTuple4.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1).toList\n        val oddPalindromeTuple5 = oddPalindromeTuple4.zipWithIndex.filter(_._2\
    \ % 2 == 1).map(_._1).toList\n        val evenPalindro", "        val evenPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeRange = Range(1, n).filter(_ % 2 == 0)\n        val oddPalindromeRange\
    \ = Range(1, n).filter(_ % 2 == 1)\n        evenPalindromeRange foreach { x =>\n\
    \            val evenPalindrome = x % 2 == 0\n            val oddPalindrome =\
    \ x % 2 != 0\n            if (evenPalindrome && oddPalindrome) {\n           \
    \     evenPalindromes += x\n                evenPalindromeCount += 1\n       \
    \     } else if (evenPalindrome && !oddPalindrome) {\n                oddPalindromes\
    \ += x\n                oddPalindromeCount += 1\n            }\n        }\n  \
    \      (evenPalindromeCount, oddPalindromeCount)", "        val evenPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        for (i <- 1 to\
    \ n) {\n            val evenPalindrome = evenPalindromes.takeWhile(_ < i).last\n\
    \            val oddPalindrome = oddPalindromes.takeWhile(_ < i).last\n      \
    \      if (evenPalindrome == oddPalindrome) {\n                evenPalindromeCount\
    \ += evenPalindrome\n                oddPalindromeCount += oddPalindrome\n   \
    \         } else {\n                evenPalindromes += evenPalindrome\n      \
    \          oddPalindromes += oddPalindrome\n            }\n        }\n       \
    \ (evenPalindromeCount.sum, oddPalindromeCount.sum)", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        val oddPalindromeCount10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount11 = mutable.Set[Long]()\n        val evenPalindromeCount12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount13 = mutable.Set[Long]()\n        val oddPalindromeCount13\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount14 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount14 = mutable.Set[Long]()\n        val ", "    \
    \    val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverse = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverse2 = mutable.ListBuffer[Long]()\n      \
    \  val oddPalindromeCountReverse2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverse3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverse3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverse4 = mutable.ListBuffer[Long]()\n      \
    \  val oddPalindromeCountReverse4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverse5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverse5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverse6 = mutable.ListBuffer[Long]()\n      \
    \  val oddPalindromeCountReverse6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverse7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverse7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverse8 = mutable.ListBuffer[Long]()\n      \
    \  val oddPalindromeCountReverse8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverse9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverse9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverse10 = mutable.ListBuffer[Long]()\n     \
    \   val oddPalindromeCountReverse10 = mutable.ListBuffer[Long]()\n        val\
    \ evenPalindromeCountReverse11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverse11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverse12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val maxPalindromes = math.ceil(n/2.0).toInt\n\
    \        val maxPalindrome = math.ceil(n/2.0).toInt\n        val maxPalindromeIndex\
    \ = math.ceil(n/2.0).toInt\n        val evenPalindromeIndex = 0\n        val oddPalindromeIndex\
    \ = 0\n        val evenPalindrome = math.ceil(n/2.0).toInt\n        val oddPalindrome\
    \ = math.ceil(n/2.0).toInt\n        val evenPalindromeCount = math.ceil(n/2.0).toInt\n\
    \        val oddPalindromeCount = math.ceil(n/2.0).toInt\n        val evenPalindromeIndex\
    \ = math.ceil(n/2.0).toInt\n        val oddPalindromeIndex = math.ceil(n/2.0).toInt\n\
    \        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val maxPalindromes = math.ceil(n/2.0).toInt\n        val maxPalindrome\
    \ = math.ceil(n/2.0).toInt\n        val maxPalindromeIndex = math.ceil(n/2.0).toInt\n\
    \        val evenPalindromeIndex = 0\n        val oddPalindromeIndex = 0\n   \
    \     val evenPalindrome = math.ceil(n/2.0).toInt\n        val oddPalindrome =\
    \ math.ceil(n/2.0).toInt\n        val evenPalindromeCount = math.ceil(n/2.0).toInt\n\
    \        val oddPalindromeCount = math.ceil(n/2.0).toInt\n        val evenPalindromeIndex\
    \ = math.ceil(n/2.0).toInt\n        val oddPalindromeIndex = math.ceil(n/2.0).toInt\n\
    \        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val maxPalindromes = math.ceil(n/2.0).toInt\n        val maxPalindrome\
    \ = math.ceil(n/", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        var i = 0\n       \
    \ while (i < n) {\n            val p = i\n            val q = n - p\n        \
    \    val r = p / 2\n            val s = q / 2\n            val t = r + s\n   \
    \         val u = math.gcd(t, n)\n            val v = u / 2\n            val w\
    \ = v / 2\n            val x = math.gcd(t, n)\n            val y = x / 2\n   \
    \         val z = math.gcd(t, n)\n            val a = math.gcd(t, n)\n       \
    \     val b = x / 2\n            val c = math.gcd(t, n)\n            val d = math.gcd(t,\
    \ n)\n            val e = math.gcd(t, n)\n            val f = math.gcd(t, n)\n\
    \            val g = math.gcd(t, n)\n            val h = math.gcd(t, n)\n    \
    \        val i = math.gcd(t, n)\n            val j = math.gcd(t, n)\n        \
    \    val k = math.gcd(t, n)\n            val l = math.gcd(t, n)\n            val\
    \ m = math.gcd(t, n)\n            val n = math.gcd(t, n)\n            val o =\
    \ math.gcd(t, n)\n            val p = math.gcd(t, n)\n            val q = math.gcd(t,\
    \ n)\n            val r = math.gcd(t, n)\n            val s = math.gcd(t, n)\n\
    \            val t = math.gcd(t, n)\n            val u = math.gcd(t, n)\n    \
    \        val v = math.gcd(t, n)\n            val w = math.gcd(t, n)\n        \
    \    val x = math.gcd(t, n)\n            val y = math.gcd(t, n)\n            val\
    \ z = math.gcd(t, n)\n            val a = math.gcd(t, n)\n            val b =\
    \ math.gcd(t, n)\n            val c = math.gcd(t, n)\n            val d = math.gcd(t,\
    \ n)\n            val e = math.gcd(t, n)\n            val f = math.gcd(t, n)\n\
    \            val g = math.gcd(t, n)\n            val h = math.gcd(t, n)\n    \
    \        val i = math.gcd(t, n)\n            val j = math.gcd(t, n)\n        \
    \    val k = math.gcd(t, n)\n            val l = math.gcd(t, n)\n            val\
    \ m = math.gcd(t, n)\n            val n = math.gcd(t, n)\n            val o =\
    \ math.gcd(t, n)\n            val p = math.gcd(t, n)\n            val q = math.gcd(t,\
    \ n)\n            val r = math.gcd(t, n)\n            val s = math.gcd(t, n)\n\
    \            val t = math.gcd(t, n)\n            val u = math.gcd(t, n)\n    \
    \        val v = math.gcd(t, n)\n            val w = math.gcd(t, n)\n        \
    \    val x = math.gcd(t, n)", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        var even = 0\n    \
    \    var odd = 0\n        var i = 0\n        var j = 0\n        while (i < n)\
    \ {\n            while (j < n) {\n                if (i % 10 == j % 10) {\n  \
    \                  evenPalindromes += i\n                    oddPalindromes +=\
    \ j\n                }\n                j += 1\n            }\n            i +=\
    \ 1\n            evenPalindromes.clear()\n            oddPalindromes.clear()\n\
    \        }\n        evenPalindromes.toList.sortWith(_ < _).zipWithIndex.foreach\
    \ { case (v, i) => if (v % 2 == 0) even += 1 else odd += 1 }\n        (even, odd)",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeCount2 = 0\n        val oddPalindromeCount2 =\
    \ 0\n        val evenPalindromeCount3 = 0\n        val oddPalindromeCount3 = 0\n\
    \        val evenPalindromeCount4 = 0\n        val oddPalindromeCount4 = 0\n \
    \       val evenPalindromeCount5 = 0\n        val oddPalindromeCount5 = 0\n  \
    \      val evenPalindromeCount6 = 0\n        val oddPalindromeCount6 = 0\n   \
    \     val evenPalindromeCount7 = 0\n        val oddPalindromeCount7 = 0\n    \
    \    val evenPalindromeCount8 = 0\n        val oddPalindromeCount8 = 0\n     \
    \   val evenPalindromeCount9 = 0\n        val oddPalindromeCount9 = 0\n      \
    \  val evenPalindromeCount10 = 0\n        val oddPalindromeCount10 = 0\n     \
    \   val evenPalindromeCount11 = 0\n        val oddPalindromeCount11 = 0\n    \
    \    val evenPalindromeCount12 = 0\n        val oddPalindromeCount12 = 0\n   \
    \     val evenPalindromeCount13 = 0\n        val oddPalindromeCount13 = 0\n  \
    \      val evenPalindromeCount14 = 0\n        val oddPalindromeCount14 = 0\n \
    \       val evenPalindromeCount15 = 0\n        val oddPalindromeCount15 = 0\n\
    \        val evenPalindromeCount16 = 0\n        val oddPalindromeCount16 = 0\n\
    \        val evenPalindromeCount17 = 0\n        val oddPalindromeCount17 = 0\n\
    \        val evenPalindromeCount18 = 0\n        val oddPalindromeCount18 = 0\n\
    \        val evenPalindromeCount19 = 0\n        val oddPalindromeCount19 = 0\n\
    \        val evenPalindromeCount20 = 0\n        val oddPalindromeCount20 = 0\n\
    \        val evenPalindromeCount21 = 0\n        val oddPalindromeCount21 = 0\n\
    \        val evenPalindromeCount22 = 0\n        val oddPalindromeCount22", " \
    \       val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val palindro", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val palindromes2 = mutable.ListBuffer[Long]()\n        val palindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val palindromes3\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val palindromes4 = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val palindromes5 = mutable.ListBuffer[Long]()\n        val palindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val palindromes6\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val palindromes7 = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount7 = mutable.ListBuffer[Long]", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        val oddPalindromeCount10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount11 = mutable.Set[Long]()\n        val evenPalindromeCount12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount13 = mutable.Set[Long]()\n        val oddPalindromeCount13\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount14 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount14 = mutable.Set[Long]()\n        val ", "    \
    \    val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1, n).filter(x\
    \ => x % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(x => x %\
    \ 2 != 0)\n        for (i <- evenPalindromeRange) {\n            val evenPalindrome\
    \ = i.toString\n            val oddPalindrome = i.toString.reverse\n         \
    \   if (evenPalindrome == oddPalindrome) {\n                evenPalindromes +=\
    \ i\n                evenPalindromeCount += 1\n            } else {\n        \
    \        oddPalindromes += i\n                oddPalindromeCount += 1\n      \
    \      }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", "   \
    \     val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCountSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet2 = mutable.Set[Long]()\n        val oddPalindromeCountSet2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet3 = mutable.Set[Long]()\n        val evenPalindromeCountSet4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet5 = mutable.Set[Long]()\n        val oddPalindromeCountSet5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet6 = mutable.Set[Long]()\n        val evenPalindromeCountSet7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet8 = mutable.Set[Long]()\n        val oddPalindromeCountSet8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet9 = mutable.Set[Long]()\n        val evenPalindromeCountSet10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet11 = mutable.Set[Long]()\n        val oddPalindromeCountSet11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet12 = mutable.Set[Long]()\n        val evenPalindromeCountSet13\
    \ = mutable.Set[Long", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val max = (1l to n).toList\n\
    \        for(i <- max) {\n            val evenPalindrome = evenPalindromes.filter(_\
    \ % i == 0).length\n            val oddPalindrome = oddPalindromes.filter(_ %\
    \ i == 0).length\n            if(evenPalindrome == 0 || oddPalindrome == 0) {\n\
    \                evenPalindromeCount += 1\n                oddPalindromeCount\
    \ += 1\n            } else {\n                evenPalindromeCount += evenPalindrome\n\
    \                oddPalindromeCount += oddPalindrome\n            }\n        \
    \    evenPalindromes += i\n            oddPalindromes += i\n        }\n      \
    \  (evenPalindromeCount, oddPalindromeCount)", "        val evenPalindromes =\
    \ mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n    \
    \    val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n       \
    \ val evenPalindromePair = mutable.Set[(Long, Long)]()\n        val oddPalindromePair\
    \ = mutable.Set[(Long, Long)]()\n        val evenPalindromePairs = mutable.Set[(Long,\
    \ Long)]()\n        val oddPalindromePairs = mutable.Set[(Long, Long)]()\n   \
    \     val evenPalindromePairsCount = mutable.Set[Long]()\n        val oddPalindromePairsCount\
    \ = mutable.Set[Long]()\n        val evenPalindromePairsCount2 = mutable.Set[Long]()\n\
    \        val oddPalindromePairsCount2 = mutable.Set[Long]()\n        val evenPalindromePairsCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromePairsCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromePairsCount4 = mutable.Set[Long]()\n        val oddPalindromePairsCount4\
    \ = mutable.Set[Long]()\n        val evenPalindromePairsCount5 = mutable.Set[Long]()\n\
    \        val oddPalindromePairsCount5 = mutable.Set[Long]()\n        val evenPalindromePairsCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromePairsCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromePairsCount7 = mutable.Set[Long]()\n        val oddPalindromePairsCount7\
    \ = mutable.Set[Long]()\n        val evenPalindromePairsCount8 = mutable.Set[Long]()\n\
    \        val oddPalindromePairsCount8 = mutable.Set[Long]()\n        val evenPalindromePairsCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromePairsCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromePairsCount10 = mutable.Set[Long]()\n        val oddPalindromePairsCount10\
    \ = mutable.Set[Long]()\n        val evenPalindro", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14 = ", "     \
    \   val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeRange = Range(1, n).filter(x => x % 2 == 0)\n        val\
    \ oddPalindromeRange = Range(1, n).filter(x => x % 2 != 0)\n        evenPalindromeRange\
    \ foreach { x =>\n            val reversedString = x.toString.reverse\n      \
    \      val reversedStringLength = reversedString.length\n            val evenPalindrome\
    \ = reversedString.take(reversedStringLength / 2).toSet\n            val oddPalindrome\
    \ = reversedString.take(reversedStringLength / 2).toSet\n            if (evenPalindrome.isEmpty\
    \ && oddPalindrome.isEmpty) {\n                evenPalindromeCount += 1\n    \
    \            oddPalindromeCount += 1\n            } else if (evenPalindrome.isEmpty\
    \ || oddPalindrome.isEmpty) {\n                evenPalindromeCount += 1\n    \
    \            oddPalindromeCount += 1\n            } else if (evenPalindrome.isEmpty\
    \ && oddPalindrome.isEmpty) {\n                evenPalindromeCount += 1\n    \
    \            oddPalindromeCount += 1\n            } else if (evenPalindrome.isEmpty\
    \ && oddPalindrome.isEmpty) {\n                evenPalindromeCount += 1\n    \
    \            oddPalindromeCount += 1\n            } else if (evenPalindrome.isEmpty\
    \ && oddPalindrome.isEmpty) {\n                evenPalindromeCount += 1\n    \
    \            oddPalindromeCount += 1\n            } else if (evenPalindrome.isEmpty\
    \ && oddPalindrome.isEmpty) {\n                evenPalindromeCount += 1\n    \
    \            oddPalindromeCount += 1\n            } else if (evenPalindrome.isEmpty\
    \ && oddPalindrome.isEmpty) {\n                evenPalindromeCount += 1\n    \
    \            oddPalindromeCount += 1\n            } else if (evenPalindrome.isEmpty\
    \ && oddPalindrome.isEmpty) {\n                evenPalindromeCount += 1\n    \
    \            oddPalindromeCount += 1\n            } else if (evenPalindrome.isEmpty\
    \ && oddPalindrome.isEmpty) {\n                evenPalindromeCount += 1\n    \
    \            oddPalindromeCount += 1\n            } else if (evenPalindrome.isEmpty\
    \ && oddPalindrome.isEmpty", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = 1\
    \ to n\n        val oddPalindromeRange = 1 to n\n        evenPalindromeRange foreach\
    \ { x =>\n            val reverse = x.toString.reverse\n            if (reverse\
    \ == x) {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            }\n        }\n        oddPalindromeRange foreach { x =>\n\
    \            val reverse = x.toString.reverse\n            if (reverse == x) {\n\
    \                oddPalindromes += x\n                oddPalindromeCount += 1\n\
    \            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < n) {\n \
    \           val p = i\n            val q = n - 1\n            while (p < q) {\n\
    \                if (p(q - p) == p(q - q)) {\n                    evenPalindromes\
    \ += p\n                    oddPalindromes += q\n                }\n         \
    \       p += 1\n                q -= 1\n            }\n            i += 1\n  \
    \      }\n        (evenPalindromes.size, oddPalindromes.size)", "        val evenPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        var even = 0\n        var odd = 0\n        var i = 0\n        while (i\
    \ < n) {\n            val p = i\n            val q = n - p\n            val r\
    \ = math.gcd(p, q)\n            val s = p / r\n            val t = q / r\n   \
    \         val u = math.gcd(s, t)\n            val v = s / u\n            val w\
    \ = t / u\n            val x = v * w\n            val y = v * w\n            val\
    \ z = v * w\n            val a = math.gcd(v, w)\n            val b = v / a\n \
    \           val c = w / a\n            val d = math.gcd(b, c)\n            val\
    \ e = b / d\n            val f = c / d\n            val g = math.gcd(e, f)\n \
    \           val h = e / g\n            val i = f / g\n            val j = g /\
    \ h\n            val k = math.gcd(i, j)\n            val l = i / k\n         \
    \   val m = j / k\n            val n = k / h\n            val o = math.gcd(n,\
    \ m)\n            val p = n / o\n            val q = m / o\n            val r\
    \ = o / h\n            val s = math.gcd(p, q)\n            val t = p / s\n   \
    \         val u = q / s\n            val v = s / t\n            val w = s / u\n\
    \            val x = v * w\n            val y = v * w\n            val z = v *\
    \ w\n            val a = math.gcd(v, w)\n            val b = v / a\n         \
    \   val c = w / a\n            val d = math.gcd(b, c)\n            val e = b /\
    \ d\n            val f = c / d\n            val g = math.gcd(e, f)\n         \
    \   val h = e / g\n            val i = f / g\n            val j = g / h\n    \
    \        val k = math.gcd(i, j)\n            val l = i / k\n            val m\
    \ = j / k\n            val n = k / h\n            val o = math.gcd(n, m)\n   \
    \         val p = n / o\n            val q = m / o\n            val r = o / h\n\
    \            val s = math.gcd(p, q)\n            val t = p / s\n            val\
    \ u = q / s\n            val v = s / t\n            val w = s / u\n          \
    \  val x = v * w\n            val y = v * w\n            val z = v * w\n     \
    \       val a = math.gcd(v, w)\n            val b = v / a\n            ", "  \
    \      val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val palindromes = mutable.Set[Long]()\n       \
    \ var i = 0\n        while (i < n) {\n            val p = i\n            val q\
    \ = n - p\n            val r = math.gcd(q, p)\n            val a = math.gcd(q,\
    \ r)\n            val b = math.gcd(r, p)\n            val c = math.gcd(p, r)\n\
    \            val d = math.gcd(p, a)\n            val e = math.gcd(p, b)\n    \
    \        val f = math.gcd(p, c)\n            val g = math.gcd(p, d)\n        \
    \    val h = math.gcd(p, e)\n            val i = math.gcd(p, f)\n            val\
    \ j = math.gcd(p, g)\n            val k = math.gcd(p, h)\n            val l =\
    \ math.gcd(p, i)\n            val m = math.gcd(p, j)\n            val n = math.gcd(p,\
    \ k)\n            val o = math.gcd(p, l)\n            val p = math.gcd(p, m)\n\
    \            val q = math.gcd(p, n)\n            val r = math.gcd(p, o)\n    \
    \        val a = math.gcd(q, r)\n            val b = math.gcd(r, q)\n        \
    \    val c = math.gcd(q, a)\n            val d = math.gcd(r, a)\n            val\
    \ e = math.gcd(q, b)\n            val f = math.gcd(r, c)\n            val g =\
    \ math.gcd(r, d)\n            val h = math.gcd(r, e)\n            val i = math.gcd(r,\
    \ f)\n            val j = math.gcd(r, g)\n            val k = math.gcd(r, h)\n\
    \            val l = math.gcd(r, i)\n            val m = math.gcd(r, j)\n    \
    \        val n = math.gcd(r, k)\n            val o = math.gcd(r, l)\n        \
    \    val p = math.gcd(r, m)\n            val q = math.gcd(r, n)\n            val\
    \ r = math.gcd(r, o)\n            val a = math.gcd(a, b)\n            val b =\
    \ math.gcd(b, c)\n            val c = math.gcd(c, d)\n            val d = math.gcd(d,\
    \ e)\n            val e = math.gcd(e, b)\n            val f = math.gcd(f, c)\n\
    \            val g = math.gcd(g, d)\n            val h = math.gcd(h, e)\n    \
    \        val i = math.gcd(i, f)\n            val j = math.gcd(j, g)\n        \
    \    val k = math.gcd(k, h)\n            val l = math.gcd(l, i)\n            val\
    \ m = math.gcd(m, j)\n            val n = math.gcd(n, k)\n            val o =\
    \ math.gcd(o, l)\n            val p = math.gcd(p, m)\n            val q = math.gcd(q,\
    \ n)\n            val r = math.gcd(r, o)\n            val a = math.gcd(", "  \
    \      val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeSum = 0\n        var oddPalindromeSum = 0\n \
    \       var evenPalindromeSumOfSquare = 0\n        var oddPalindromeSumOfSquare\
    \ = 0\n        var evenPalindromeSumOfSquareRoot = 0\n        var oddPalindromeSumOfSquareRoot\
    \ = 0\n        var evenPalindromeSumOfSquareRootOfSquare = 0\n        var oddPalindromeSumOfSquareRootOfSquare\
    \ = 0\n        var evenPalindromeSumOfSquareRootOfSquareOfSquare = 0\n       \
    \ var oddPalindromeSumOfSquareRootOfSquareOfSquare = 0\n        var evenPalindromeSumOfSquareRootOfSquareOfSquareOfSquare\
    \ = 0\n        var oddPalindromeSumOfSquareRootOfSquareOfSquareOfSquare = 0\n\
    \        var evenPalindromeSumOfSquareRootOfSquareOfSquareOfSquare = 0\n     \
    \   var oddPalindromeSumOfSquareRootOfSquareOfSquareOfSquare = 0\n        var\
    \ evenPalindromeSumOfSquareRootOfSquareOfSquareOfSquare = 0\n        var oddPalindromeSumOfSquareRootOfSquareOfSquareOfSquare\
    \ = 0\n        var evenPalindromeSumOfSquareRootOfSquareOfSquareOfSquare = 0\n\
    \        var oddPalindromeSumOfSquareRootOfSquareOfSquareOfSquare = 0\n      \
    \  var evenPalindromeSumOfSquareRootOfSquareOfSquareOfSquare = 0\n        var\
    \ oddPalindromeSumOfSquareRootOfSquareOfSquareOfSquare = 0\n        var evenPalindromeSumOfSquareRootOfSquareOfSquareOfSquare\
    \ = 0\n        var oddPalindromeSumOfSquareRootOfSquareOfSquareOfSquare = 0\n\
    \        var evenPalindromeSumOfSquareRootOfSquareOfSquareOfSquare = 0\n     \
    \   var oddPalindromeSumOfSquareRootOfSquareOfSquareOfSquare = 0\n        var\
    \ evenPalindromeSumOfSquareRootOfSquareOfSquareOfSquare = 0\n        var oddPalindromeSumOfSquareRootOfSquareOfSquareOfSquare\
    \ = 0\n        var evenPalindromeSumOfSquareRootOfSquareOfSquareOfSquare = 0\n\
    \        var oddPalindromeSumOfSquareRootOfSquareOfSquareOfSquare = 0\n      \
    \  var evenPalindromeSumOfSquareRootOfSquareOfSquare", "        val evenPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val evenPalindromeCountPerpalindrome = mutable.Set[Long]()\n  \
    \      val oddPalindromeCountPerpalindrome = mutable.Set[Long]()\n        val\
    \ evenPalindromeCountPerpalindromePerpalindrome = mutable.Set[Long]()\n      \
    \  val oddPalindromeCountPerpalindromePerpalindrome = mutable.Set[Long]()\n  \
    \      val evenPalindromeCountPerpalindromePerpalindromePerpalindrome = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerpalindromePerpalindromePerpalindrome = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerpalindromePerpalindromePerpalindromePerpalindrome\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerpalindromePerpalindromePerpalindromePerpalindromePerpalindrome\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPerpalindromePerpalindromePerpalindromePerpalindromePerpalindrome\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerpalindromePerpalindromePerpalindromePerpalindromePerpalindromePerpalindrome\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPerpalindromePerpalindromePerpalindromePerpalindromePerpalindromePerpalindrome\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerpalindromePerpalindromePerpalindromePerpalindromePerpalindromePerpalindromePerpalindrome\
    \ = mutable.Set[Long]()\n        val evenPalindrome", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        val oddPalindromeCount10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount11 = mutable.Set[Long]()\n        val evenPalindromeCount12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount13 = mutable.Set[Long]()\n        val oddPalindromeCount13\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount14 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount14 = mutable.Set[Long]()\n        val ", "    \
    \    val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1, n).toList\n\
    \        val oddPalindromeRange = Range(1, n).toList.reverse\n        evenPalindromeRange\
    \ foreach { x =>\n            val evenPalindrome = x.toString.reverse\n      \
    \      evenPalindromes += evenPalindrome\n            evenPalindromeCount += 1\n\
    \            if (evenPalindromeCount % 2 == 0) {\n                evenPalindromes\
    \ += evenPalindrome\n                evenPalindromeCount += 1\n            }\n\
    \        }\n        oddPalindromeRange foreach { x =>\n            val oddPalindrome\
    \ = x.toString.reverse\n            oddPalindromes += oddPalindrome\n        \
    \    oddPalindromeCount += 1\n            if (oddPalindromeCount % 2 == 1) {\n\
    \                oddPalindromes += oddPalindrome\n                oddPalindromeCount\
    \ += 1\n            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val palindro", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val maxPalindromes = math.max(math.min(math.ceil(n/2), n), 2)\n        for(i\
    \ <- 1 to maxPalindromes) {\n            val palindrome = i * i\n            val\
    \ evenPalindrome = if (palindrome % 2 == 0) palindrome else palindrome + 1\n \
    \           val oddPalindrome = if (palindrome % 2 == 1) palindrome else palindrome\
    \ - 1\n            evenPalindromes += evenPalindrome\n            oddPalindromes\
    \ += oddPalindrome\n        }\n        evenPalindromeCount += evenPalindromes.filter(x\
    \ => x % 2 == 0).size\n        oddPalindromeCount += oddPalindromes.filter(x =>\
    \ x % 2 == 1).size\n        Tuple2(evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val range = (1l..n).toList\n        for (i <-\
    \ range) {\n            val str = i.toString\n            val reverseStr = str.reverse\n\
    \            if (str == reverseStr) {\n                evenPalindromeCount +=\
    \ 1\n                if (str.isEven) {\n                    evenPalindromes +=\
    \ i\n                }\n            } else {\n                oddPalindromeCount\
    \ += 1\n                if (str.isEven) {\n                    oddPalindromes\
    \ += i\n                }\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        var evenPalindrome\
    \ = 0\n        var oddPalindrome = 0\n        var i = 2\n        while (i <= n)\
    \ {\n            if (i % 2 == 0) {\n                evenPalindromes += i\n   \
    \             evenPalindrome += 1\n            } else {\n                oddPalindromes\
    \ += i\n                oddPalindrome += 1\n            }\n            i += 1\n\
    \        }\n        evenPalindromes.toList.sortWith(_ < _)\n        oddPalindromes.toList.sortWith(_\
    \ < _)\n        (evenPalindrome, oddPalindrome)", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        val oddPalindromeCount10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount11 = mutable.Set[Long]()\n        val evenPalindromeCount12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount13 = mutable.Set[Long]()\n        val oddPalindromeCount13\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount14 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount14 = mutable.Set[Long]()\n        val ", "    \
    \    val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCounts = mutable.Set[Long]()\n\
    \        val oddPalindromeCounts = mutable.Set[Long]()\n        val evenPalindromeCountPairs\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeCountPairs = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountPairsSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountPairsSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountPairsSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSortedSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountPairsSortedSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSortedSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountPairsSortedSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSortedSortedSortedSortedSorted\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeCountPairsSortedSortedSortedSortedSorted\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeCountPairsSortedSortedSortedSortedSortedSorted\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeCountPairsSortedSortedSortedSortedSortedSorted\
    \ = mutable.Set[Tuple2[Long, Long]]", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            val currentPalindrome\
    \ = i.toString\n            val reversedPalindrome = currentPalindrome.reverse\n\
    \            if (currentPalindrome == reversedPalindrome) {\n                evenPalindromes\
    \ += i\n                evenPalindromeCount += i\n            } else {\n     \
    \           oddPalindromes += i\n                oddPalindromeCount += i\n   \
    \         }\n            i += 1\n        }\n        val evenPalindromeCount =\
    \ evenPalindromeCount.size\n        val oddPalindromeCount = oddPalindromeCount.size\n\
    \        val evenPalindromes = evenPalindromes.toList\n        val oddPalindromes\
    \ = oddPalindromes.toList\n        val evenPalindromeTuple = evenPalindromes.zipWithIndex.filter(_._2\
    \ == evenPalindromeCount).map(_._1)\n        val oddPalindromeTuple = oddPalindromes.zipWithIndex.filter(_._2\
    \ == oddPalindromeCount).map(_._1)\n        val evenPalindromeTuple2 = evenPalindromeTuple.zipWithIndex.filter(_._2\
    \ == evenPalindromeCount).map(_._1)\n        val oddPalindromeTuple2 = oddPalindromeTuple.zipWithIndex.filter(_._2\
    \ == oddPalindromeCount).map(_._1)\n        val evenPalindromeTuple3 = evenPalindromeTuple2.zipWithIndex.filter(_._2\
    \ == evenPalindromeCount).map(_._1)\n        val oddPalindromeTuple3 = oddPalindromeTuple2.zipWithIndex.filter(_._2\
    \ == oddPalindromeCount).map(_._1)\n        val evenPalindromeTuple4 = evenPalindromeTuple3.zipWithIndex.filter(_._2\
    \ == evenPalindromeCount).map(_._1)\n        val oddPalindromeTuple4 = oddPalindromeTuple3.zipWithIndex.filter(_._2\
    \ == oddPalindromeCount).map(_._", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        var even = 0\n\
    \        var odd = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ n) {\n            while (j < n) {\n                if (i % 10 == j % 10) {\n\
    \                    evenPalindromes += i\n                    oddPalindromes\
    \ += j\n                    even++\n                    odd++\n              \
    \  }\n                j++\n            }\n            i += 1\n            j =\
    \ 0\n        }\n        val evenPalindrome = evenPalindromes.toList\n        val\
    \ oddPalindrome = oddPalindromes.toList\n        val evenPalindromeTuple = evenPalindrome.zip(evenPalindrome).map(x\
    \ => x._1 -> x._2)\n        val oddPalindromeTuple = oddPalindrome.zip(oddPalindrome).map(x\
    \ => x._1 -> x._2)\n        val evenPalindromeTuple2 = evenPalindromeTuple.filter(_._2\
    \ % 2 == 0).map(_._1)\n        val oddPalindromeTuple2 = oddPalindromeTuple.filter(_._2\
    \ % 2 == 1).map(_._1)\n        val evenPalindromeTuple3 = evenPalindromeTuple2.filter(_._2\
    \ % 3 == 0).map(_._1)\n        val oddPalindromeTuple3 = oddPalindromeTuple2.filter(_._2\
    \ % 3 == 1).map(_._1)\n        val evenPalindromeTuple4 = evenPalindromeTuple3.filter(_._2\
    \ % 4 == 0).map(_._1)\n        val oddPalindromeTuple4 = oddPalindromeTuple3.filter(_._2\
    \ % 4 == 1).map(_._1)\n        val evenPalindromeTuple5 = evenPalindromeTuple4.filter(_._2\
    \ % 5 == 0).map(_._1)\n        val oddPalindromeTuple5 = oddPalindromeTuple4.filter(_._2\
    \ % 5 == 1).map(_._1)\n        val evenPalindromeTuple6 = evenPalindromeTuple5.filter(_._2\
    \ % 6 == 0).map(_._1)\n        val oddPalindromeTuple6 = oddPalindromeTuple5.filter(_._2\
    \ % 6 == 1).map(_._1)\n        val evenPalindromeTuple7 = evenPalindromeTuple6.filter(_._",
  "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = 0\n    \
    \    val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1, n).toList\n\
    \        val oddPalindromeRange = Range(1, n).toList.reverse\n        evenPalindromeRange\
    \ foreach { x =>\n            val evenPalindrome = x % 2 == 0\n            val\
    \ oddPalindrome = x % 2 != 0\n            if (evenPalindrome && oddPalindrome)\
    \ {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else if (evenPalindrome && !oddPalindrome) {\n         \
    \       oddPalindromes += x\n                oddPalindromeCount += 1\n       \
    \     }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", "    \
    \    val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).filter(_ % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(_\
    \ % 2 == 1)\n        evenPalindromeRange foreach { x =>\n            val evenPalindrome\
    \ = x % 2 == 0\n            val oddPalindrome = x % 2 != 0\n            if (evenPalindrome\
    \ && oddPalindrome) {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else if (evenPalindrome && !oddPalindrome) {\n         \
    \       oddPalindromes += x\n                oddPalindromeCount += 1\n       \
    \     }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", "    \
    \    val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        val oddPalindromeCount10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount11 = mutable.Set[Long]()\n        val evenPalindromeCount12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount13 = mutable.Set[Long]()\n        val oddPalindromeCount13\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount14 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount14 = mutable.Set[Long]()\n        val ", "    \
    \    val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList = mutable.Set[Long]()\n        val evenPalindromeCountList2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList3 = mutable.Set[Long]()\n        val oddPalindromeCountList3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList4 = mutable.Set[Long]()\n        val evenPalindromeCountList5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList6 = mutable.Set[Long]()\n        val oddPalindromeCountList6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList7 = mutable.Set[Long]()\n        val evenPalindromeCountList8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList9 = mutable.Set[Long]()\n        val oddPalindromeCountList9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList10 = mutable.Set[Long]()\n        val evenPalindromeCountList11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList12 = mutable.Set[Long]()\n        val oddPalindromeCountList12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList13 = mutable.Set[Long]()",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val palindro", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            val p = i\n         \
    \   val q = p\n            while (p != q) {\n                val r = p % 10\n\
    \                val s = r\n                p /= 10\n                q /= 10\n\
    \                if (r == s) {\n                    evenPalindromes += p\n   \
    \                 evenPalindromes += q\n                }\n            }\n   \
    \         i += 1\n        }\n        evenPalindromes.toList.sortWith(_ < _).zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1).toList match {\n            case Nil => (1l, 0l)\n     \
    \       case x :: xs => (x.toLong, (xs.length - x.toLong).toLong)\n        }",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindromeCount = 0\n      \
    \  val oddPalindromeCount = 0\n        val palindromeCount = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromeCount = 0\n \
    \       val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n    \
    \    val palindromeCount = 0\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val palindromeCount = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromeCount = 0\n \
    \       val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n    \
    \    val palindromeCount = 0\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val palindromeCount = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromeCount = 0\n \
    \       val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n    \
    \    val palindromeCount = 0\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val palindromeCount = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromeCount = 0\n \
    \       val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n    \
    \    val palindromeCount = 0\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val palindromeCount = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromeCount = 0\n \
    \       val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n    \
    \    val palindromeCount", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = 1\
    \ to n\n        val oddPalindromeRange = 1 to n\n        evenPalindromeRange foreach\
    \ { x =>\n            val reversed = x.reverse\n            if (x == reversed)\
    \ {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            }\n        }\n        oddPalindromeRange foreach { x =>\n\
    \            val reversed = x.reverse\n            if (x == reversed) {\n    \
    \            oddPalindromes += x\n                oddPalindromeCount += 1\n  \
    \          }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", " \
    \       val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val range = (1l..n).toList\n\
    \        range.foreach(x => {\n            val reversed = x.reverse\n        \
    \    val isEven = reversed.toString.toInt == x\n            if (isEven) {\n  \
    \              evenPalindromes += x\n                evenPalindromeCount += 1\n\
    \            } else {\n                oddPalindromes += x\n                oddPalindromeCount\
    \ += 1\n            }\n        })\n        (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n       \
    \ val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeSum = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeSum = mutable.ListBuffer[Long]()\n        val evenPalindromeSumCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeSumCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeSumCount = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromeSumCount = mutable.ListBuffer[Long]()\n        val evenPalindromeSumCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeSumCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeSumCount = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromeSumCount = mutable.ListBuffer[Long]()\n        val evenPalindromeSumCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeSumCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeSumCount = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromeSumCount = mutable.ListBuffer[Long]()\n        val evenPalindromeSumCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeSumCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeSumCount = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromeSumCount = mutable.ListBuffer[Long]()\n        val evenPalindromeSumCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeSumCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeSumCount = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromeSumCount = mutable.ListBuffer[Long]()\n        val evenPalindromeSumCount\
    \ = mutable.ListBuffer[", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).toList\n        val oddPalindromeRange = Range(1, n).toList.reverse\n   \
    \     for (i <- evenPalindromeRange) {\n            val evenPalindrome = i.toString.reverse\n\
    \            if (evenPalindrome == i.toString) {\n                evenPalindromes\
    \ += i\n                evenPalindromeCount += 1\n            }\n        }\n \
    \       for (i <- oddPalindromeRange) {\n            val oddPalindrome = i.toString.reverse\n\
    \            if (oddPalindrome == i.toString) {\n                oddPalindromes\
    \ += i\n                oddPalindromeCount += 1\n            }\n        }\n  \
    \      (evenPalindromeCount, oddPalindromeCount)", "        val evenPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            val p = i\n         \
    \   val q = n - p\n            val r = math.gcd(p, q)\n            val a = p /\
    \ r\n            val b = q / r\n            val c = math.gcd(a, b)\n         \
    \   val d = a / c\n            val e = b / c\n            val f = math.gcd(d,\
    \ e)\n            val g = d / f\n            val h = e / f\n            val i\
    \ = math.gcd(g, h)\n            val j = g / i\n            val k = h / i\n   \
    \         val l = math.gcd(j, k)\n            val m = j / l\n            val n\
    \ = k / l\n            val o = math.gcd(m, n)\n            val p = m / o\n   \
    \         val q = n / o\n            val r = math.gcd(p, q)\n            val a\
    \ = p / r\n            val b = q / r\n            val c = math.gcd(a, b)\n   \
    \         val d = a / c\n            val e = b / c\n            val f = math.gcd(d,\
    \ e)\n            val g = d / f\n            val h = e / f\n            val i\
    \ = math.gcd(g, h)\n            val j = g / i\n            val k = h / i\n   \
    \         val l = math.gcd(j, k)\n            val m = j / l\n            val n\
    \ = k / l\n            val o = math.gcd(m, n)\n            val p = m / o\n   \
    \         val q = n / o\n            val r = math.gcd(p, q)\n            val a\
    \ = p / r\n            val b = q / r\n            val c = math.gcd(a, b)\n   \
    \         val d = a / c\n            val e = b / c\n            val f = math.gcd(d,\
    \ e)\n            val g = d / f\n            val h = e / f\n            val i\
    \ = math.gcd(g, h)\n            val j = g / i\n            val k = h / i\n   \
    \         val l = math.gcd(j, k)\n            val m = j / l\n            val n\
    \ = k / l\n            val o = math.gcd(m, n)\n            val p = m / o\n   \
    \         val q = n / o\n            val r = math.gcd(p, q)\n            val a\
    \ = p / r\n            val b = q / r\n            val c = math.gcd(a, b)\n   \
    \         val d = a / c\n            val e = b / c\n            val f = math.",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val palindromes = mutable.Set[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            val x = i\n         \
    \   val y = i\n            val z = i\n            val w = i\n            val a\
    \ = i\n            val b = i\n            val c = i\n            val d = i\n \
    \           val e = i\n            val f = i\n            val g = i\n        \
    \    val h = i\n            val j = i\n            val k = i\n            val\
    \ l = i\n            val m = i\n            val n = i\n            val o = i\n\
    \            val p = i\n            val q = i\n            val r = i\n       \
    \     val s = i\n            val t = i\n            val u = i\n            val\
    \ v = i\n            val w = i\n            val x = i\n            val y = i\n\
    \            val z = i\n            val w = i\n            val a = i\n       \
    \     val b = i\n            val c = i\n            val d = i\n            val\
    \ e = i\n            val f = i\n            val g = i\n            val h = i\n\
    \            val j = i\n            val k = i\n            val l = i\n       \
    \     val m = i\n            val n = i\n            val o = i\n            val\
    \ p = i\n            val q = i\n            val r = i\n            val s = i\n\
    \            val t = i\n            val u = i\n            val v = i\n       \
    \     val w = i\n            val x = i\n            val y = i\n            val\
    \ z = i\n            val w = i\n            val a = i\n            val b = i\n\
    \            val c = i\n            val d = i\n            val e = i\n       \
    \     val f = i\n            val g = i\n            val h = i\n            val\
    \ j = i\n            val k = i\n            val l = i\n            val m = i\n\
    \            val n = i\n            val o = i\n            val p = i\n       \
    \     val q = i\n            val r = i\n            val s = i\n            val\
    \ t = i\n            val u = i\n            val v = i\n            val w = i\n\
    \            val x = i\n            val y = i\n            val z = i\n       \
    \     val w = i\n            val a = i\n            val b = i\n            val\
    \ c = i\n            val d = i\n            val e = i\n            val f = i\n\
    \            val g = i\n            val h = i\n            val j = i\n       \
    \     val k = ", "        val evenPalindromes = mutable.Set[Long]()\n        val\
    \ oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCounts\
    \ = mutable.Set[Long]()\n        val oddPalindromeCounts = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPair = mutable.Set[Long]()\n        val oddPalindromeCountPair\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPairs = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPairs = mutable.Set[Long]()\n        val evenPalindromeCountPairsPair\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPairsPair = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPairsPairs = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountPairsPairs = mutable.Set[Long]()\n        val evenPalindromeCountPairsPairsPair\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPairsPairsPair = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPairsPairsPairs = mutable.Set[Long]()\n      \
    \  val oddPalindromeCountPairsPairsPairs = mutable.Set[Long]()\n        val evenPalindromeCountPairsPairsPairsPair\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPairsPairsPairsPair = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPairsPairsPairsPairs = mutable.Set[Long]()\n \
    \       val oddPalindromeCountPairsPairsPairsPairs = mutable.Set[Long]()\n   \
    \     val evenPalindromeCountPairsPairsPairsPairsPair = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPairsPairsPairsPairsPair = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPairsPairsPairsPairsPairs = mutable.Set[Long]()\n",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val palindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val palindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val palindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val palindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val palindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val palindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val palindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val palindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val palindromeCount8\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val palindro", "        val evenPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val palindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ palindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount3 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount5 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount7 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount9 = mutable.ListBuffer.empty[Long]\n        val evenP",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val palindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList = mutable.Set[Long]()\n        val palindromesList\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountListList = mutable.Set[Long]()\n\
    \        val oddPalindromeCountListList = mutable.Set[Long]()\n        val palindromesListList\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountListListList = mutable.Set[Long]()\n\
    \        val oddPalindromeCountListListList = mutable.Set[Long]()\n        val\
    \ palindromesListListList = mutable.Set[Long]()\n        val evenPalindromeCountListListList\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountListListList = mutable.Set[Long]()\n\
    \        val palindromesListListList = mutable.Set[Long]()\n        val evenPalindromeCountListListList\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountListListList = mutable.Set[Long]()\n\
    \        val palindromesListListList = new mutable.LinkedList[Long]()\n      \
    \  val evenPalindromeCountListListList = new mutable.LinkedList[Long]()\n    \
    \    val oddPalindromeCountListListList = new mutable.LinkedList[Long]()\n   \
    \     val palindromesListListListList = new mutable.LinkedList[Long]()\n     \
    \   val evenPalindromeCountListListListList = new mutable.LinkedList[Long]()\n\
    \        val oddPalindromeCountListListListList = new mutable.LinkedList[Long]()\n\
    \        val palindromesListListListList = new mutable.LinkedList[Long]()\n  \
    \      val evenPalindromeCountListListListList = new mutable.LinkedList[Long]()\n\
    \        val oddPalindromeCountListListListList = new mutable.Lin", "        val\
    \ evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        var even = 0\n        var odd = 0\n        var i = 0\n        var j =\
    \ 0\n        while(i < n) {\n            while(j < n) {\n                if(i\
    \ % 10 == j % 10) {\n                    evenPalindromes += i\n              \
    \      oddPalindromes += j\n                    i += 2\n                    j\
    \ += 2\n                } else {\n                    even += 1\n            \
    \        odd += 1\n                    i += 1\n                    j += 1\n  \
    \              }\n            }\n            i += 1\n            j += 1\n    \
    \    }\n        (evenPalindromes.toList, oddPalindromes.toList)", "        val\
    \ evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val oddPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val evenPalindromeTuples\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuples = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val oddPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val evenPalindromeTuples\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuples = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val palindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val palindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val palindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val palindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val palindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1, n).toList\n\
    \        val oddPalindromeRange = Range(1, n).toList.reverse\n        for (i <-\
    \ evenPalindromeRange) {\n            val evenPalindrome = i.toString.reverse\n\
    \            if (evenPalindrome == i.toString) {\n                evenPalindromes\
    \ += i\n                evenPalindromeCount += 1\n            }\n        }\n \
    \       for (i <- oddPalindromeRange) {\n            val oddPalindrome = i.toString.reverse\n\
    \            if (oddPalindrome == i.toString) {\n                oddPalindromes\
    \ += i\n                oddPalindromeCount += 1\n            }\n        }\n  \
    \      val evenPalindromeTuple = Tuple2(evenPalindromeCount, evenPalindromes)\n\
    \        val oddPalindromeTuple = Tuple2(oddPalindromeCount, oddPalindromes)\n\
    \        return (evenPalindromeTuple, oddPalindromeTuple)", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCounts = mutable.Set[Long]()\n\
    \        val oddPalindromeCounts = mutable.Set[Long]()\n        val evenPalindromeCountRange\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountRanges = mutable.Set[Long]()\n        val oddPalindromeCountRanges\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountRangeRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountRangeRange = mutable.Set[Long]()\n        val evenPalindromeCountRangeRanges\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountRangeRanges = mutable.Set[Long]()\n\
    \        val evenPalindromeCountRangeRangeRange = mutable.Set[Long]()\n      \
    \  val oddPalindromeCountRangeRangeRange = mutable.Set[Long]()\n        val evenPalindromeCountRangeRangeRanges\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountRangeRangeRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountRangeRangeRanges = mutable.Set[Long]()\n     \
    \   val oddPalindromeCountRangeRangeRange = mutable.Set[Long]()\n        val evenPalindromeCountRangeRangeRanges\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountRangeRangeRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountRangeRangeRanges = mutable.Set[Long]()\n     \
    \   val oddPalindromeCountRangeRangeRange = mutable.Set[Long]()\n        val evenPalindromeCountRangeRangeRanges\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountRangeRangeRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountRangeRangeRanges = mutable.Set[Long]()\n     \
    \   val oddPalindro", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountPer\
    \ = 0\n        val oddPalindromeCountPer = 0\n        val evenPalindromeCountPerPer\
    \ = 0\n        val oddPalindromeCountPerPer = 0\n        val evenPalindromeCountPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPer = 0\n        val evenPalindromeCountPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPer = 0\n        val evenPalindromeCountPerPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPerPer = 0\n        val evenPalindromeCountPerPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPerPer = 0\n        val evenPalindromeCountPerPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPerPer = 0\n        val evenPalindromeCountPerPerPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPerPerPer = 0\n        val evenPalindromeCountPerPerPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPerPerPer = 0\n        val evenPalindromeCountPerPerPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPerPerPer = 0\n        val evenPalindromeCountPerPerPerPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPerPerPerPer = 0\n        val evenPalindromeCountPerPerPerPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPerPerPerPer = 0\n        val evenPalindromeCountPerPerPerPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPerPerPerPer = 0\n        val evenPalindromeCountPerPerPerPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPerPerPerPer = 0\n        val evenPalindromeCountPerPerPerPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPerPerPerPerPer = 0\n        val\
    \ even", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val palindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val palindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val palindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val palindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val palindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val palindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val palindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val palindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val palindro",
  "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCounts = mutable.Set[Long]()\n        val oddPalindromeCounts\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPairs = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountPairs = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val evenPalindromeCountPairsSorted = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val oddPalindromeCountPairsSorted = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val evenPalindromeCountPairsSortedSorted = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val oddPalindromeCountPairsSortedSorted = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val evenPalindromeCountPairsSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountPairsSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSortedSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountPairsSortedSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSortedSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountPairsSortedSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSortedSortedSortedSortedSorted\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeCountPairsSortedSortedSortedSortedSorted\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeCountPairsSortedSortedSortedSortedSortedSorted\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeCountPairsSortedSortedSortedSortedSortedSorted\
    \ = mutable.Set[Tuple2[Long, Long]]", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuples = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val oddPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val evenPalindromeTuples\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuples = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val oddPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val evenPalindromeTuples\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuples = mutable.",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1, n).toList\n\
    \        val oddPalindromeRange = Range(1, n).toList.reverse\n        evenPalindromeRange\
    \ foreach { x =>\n            val evenPalindrome = x % 2 == 0\n            val\
    \ oddPalindrome = x % 2 != 0\n            if (evenPalindrome && oddPalindrome)\
    \ {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else if (evenPalindrome && !oddPalindrome) {\n         \
    \       oddPalindromes += x\n                oddPalindromeCount += 1\n       \
    \     }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", "    \
    \    val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val palindromes = mutable.Set[Long]()\n        val palindromeCount = 0\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val palindromes = mutable.Set[Long]()\n        val palindromeCount = 0\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val palindromes = mutable.Set[Long]()\n        val palindromeCount = 0\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val palindromes = mutable.Set[Long]()\n        val palindromeCount = 0\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val palindromes = mutable.Set[Long]()\n        val palindromeCount = 0\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val palindromes = mutable.Set[Long]()\n        val palindromeCount = 0\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val palindromes = mutable.Set[Long]()\n        val palindromeCount = 0\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val palindromes = mutable.Set[Long]()\n        val palindromeCount = 0\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val palindromes = mutable.Set[Long]()\n        val palindromeCount = 0\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val palindromes = mutable.Set[Long]()\n        val palindromeCount = 0\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val palindromes = mutable.Set[Long]()\n        val palindro", "        val\
    \ evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromes = mutable.Set[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromes = mutable.Set[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromes = mutable.Set[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromes = mutable.Set[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromes = mutable.Set[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromes = mutable.Set[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palin", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n     \
    \   val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val palindromes = mutable.Set[Long]()\n        val palindromeCount =\
    \ 0\n        val palindromeTuple = Tuple2(palindromeCount, palindromes)\n    \
    \    val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple2 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple2 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple3 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple3 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple4 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple4 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple5 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple5 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple6 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple6 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple7 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple7 = Tuple2(evenPalindromeCount, oddPalindromeCoun",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val palindromes = mutable.Set[Long]()\n       \
    \ val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val palindromeCount = mutable.Set[Long]()\n \
    \       val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val palindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val palindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val palindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val palindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val palindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val palindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val palindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val palindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        ", "       \
    \ val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        var even = 0\n        var odd = 0\n  \
    \      var i = 0\n        var j = 0\n        while (i < n) {\n            val\
    \ temp = i\n            while (temp > 0) {\n                val remainder = temp\
    \ % 10\n                if (remainder == 0) {\n                    evenPalindromes\
    \ += i\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    even",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val palindromes = mutable.Set[Long]()\n       \
    \ val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val palindromeCount = mutable.Set[Long]()\n \
    \       val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val palindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val palindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val palindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val palindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val palindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val palindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val palindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val palindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        ", "       \
    \ val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        val oddPalindromeCount10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount11 = mutable.Set[Long]()\n        val evenPalindromeCount12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount13 = mutable.Set[Long]()\n        val oddPalindromeCount13\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount14 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount14 = mutable.Set[Long]()\n        val ", "    \
    \    val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeRange = Range(1, n).filter(x => x % 2 == 0)\n        val\
    \ oddPalindromeRange = Range(1, n).filter(x => x % 2 != 0)\n        evenPalindromeRange\
    \ foreach { x =>\n            val evenPalindrome = x.toString\n            val\
    \ oddPalindrome = evenPalindrome.reverse\n            if (evenPalindrome == oddPalindrome)\
    \ {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else {\n                oddPalindromes += x\n          \
    \      oddPalindromeCount += 1\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.Set[Long]()\n \
    \       val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        var even = 0\n\
    \        var odd = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ n) {\n            while (j < n) {\n                if (j == i) {\n         \
    \           evenPalindromes += j\n                    even += 1\n            \
    \    } else {\n                    oddPalindromes += j\n                    odd\
    \ += 1\n                }\n                j += 1\n            }\n           \
    \ i += 1\n            j = 0\n        }\n        (even, odd)", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n     \
    \   val evenPalindromeCountTmp = 0\n        val oddPalindromeCountTmp = 0\n  \
    \      val evenPalindromeCountTmp2 = 0\n        val oddPalindromeCountTmp2 = 0\n\
    \        val evenPalindromeCountTmp3 = 0\n        val oddPalindromeCountTmp3 =\
    \ 0\n        val evenPalindromeCountTmp4 = 0\n        val oddPalindromeCountTmp4\
    \ = 0\n        val evenPalindromeCountTmp5 = 0\n        val oddPalindromeCountTmp5\
    \ = 0\n        val evenPalindromeCountTmp6 = 0\n        val oddPalindromeCountTmp6\
    \ = 0\n        val evenPalindromeCountTmp7 = 0\n        val oddPalindromeCountTmp7\
    \ = 0\n        val evenPalindromeCountTmp8 = 0\n        val oddPalindromeCountTmp8\
    \ = 0\n        val evenPalindromeCountTmp9 = 0\n        val oddPalindromeCountTmp9\
    \ = 0\n        val evenPalindromeCountTmp10 = 0\n        val oddPalindromeCountTmp10\
    \ = 0\n        val evenPalindromeCountTmp11 = 0\n        val oddPalindromeCountTmp11\
    \ = 0\n        val evenPalindromeCountTmp12 = 0\n        val oddPalindromeCountTmp12\
    \ = 0\n        val evenPalindromeCountTmp13 = 0\n        val oddPalindromeCountTmp13\
    \ = 0\n        val evenPalindromeCountTmp14 = 0\n        val oddPalindromeCountTmp14\
    \ = 0\n        val evenPalindromeCountTmp15 = 0\n        val oddPalindromeCountTmp15\
    \ = 0\n        val evenPalindromeCountTmp16 = 0\n        val oddPalindromeCountTmp16\
    \ = 0\n        val evenPalindromeCountTmp17 = 0\n        val oddPalindromeCountTmp17\
    \ = 0\n        val evenPalindromeCountTmp18 = 0\n        val oddPalindromeCountT",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val maxPalindromes = math.max(math.min(math.ceil(n/2),\
    \ math.ceil(n/2)), n)\n        val evenPalindromeRange = 1 to maxPalindromes step\
    \ 2\n        val oddPalindromeRange = 1 to maxPalindromes step 1\n        for\
    \ (i <- evenPalindromeRange) {\n            if (isPalindrome(i)) {\n         \
    \       evenPalindromes += i\n                evenPalindromeCount += 1\n     \
    \       }\n        }\n        for (i <- oddPalindromeRange) {\n            if\
    \ (isPalindrome(i)) {\n                oddPalindromes += i\n                oddPalindromeCount\
    \ += 1\n            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeRange = Range(1, n).toList\n        val oddPalindromeRange\
    \ = Range(1, n).toList.reverse\n        evenPalindromeRange foreach { x =>\n \
    \           val evenPalindrome = x % 2 == 0\n            if (evenPalindrome) {\n\
    \                evenPalindromes += x\n                evenPalindromeCount +=\
    \ 1\n            }\n        }\n        oddPalindromeRange foreach { x =>\n   \
    \         val oddPalindrome = x % 2 == 1\n            if (oddPalindrome) {\n \
    \               oddPalindromes += x\n                oddPalindromeCount += 1\n\
    \            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple2 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple2 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple3 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple3 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple4 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple4 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple5 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple5 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple6 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple6 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple7 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple7 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple8 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple8 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple9 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple9 = Tuple2(evenPalindromeCount, ", "        val\
    \ evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).filter(x => x % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(x\
    \ => x % 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val\
    \ reversedString = reverseString(x)\n            if (reversedString == x) {\n\
    \                evenPalindromeCount += 1\n                evenPalindromes +=\
    \ x\n            }\n        }\n        oddPalindromeRange foreach { x =>\n   \
    \         val reversedString = reverseString(x)\n            if (reversedString\
    \ == x) {\n                oddPalindromeCount += 1\n                oddPalindromes\
    \ += x\n            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        var i =\
    \ 2\n        while (i <= n) {\n            val evenPalindrome = i\n          \
    \  val oddPalindrome = i\n            val evenPalindromeCount = evenPalindromeCount.size\n\
    \            val oddPalindromeCount = oddPalindromeCount.size\n            while\
    \ (evenPalindrome != oddPalindrome) {\n                val temp = evenPalindrome\n\
    \                evenPalindrome = oddPalindrome\n                oddPalindrome\
    \ = temp\n                evenPalindromeCount += 1\n                oddPalindromeCount\
    \ += 1\n            }\n            evenPalindromes += evenPalindrome\n       \
    \     oddPalindromes += oddPalindrome\n            i += 1\n        }\n       \
    \ val evenPalindromes = evenPalindromes.toList\n        val oddPalindromes = oddPalindromes.toList\n\
    \        val evenPalindromeCount = evenPalindromeCount.toList\n        val oddPalindromeCount\
    \ = oddPalindromeCount.toList\n        val evenPalindromeTuple = evenPalindromes.zip(evenPalindromeCount).map(x\
    \ => (x._1, x._2))\n        val oddPalindromeTuple = oddPalindromes.zip(oddPalindromeCount).map(x\
    \ => (x._1, x._2))\n        val evenPalindromeTuple2 = evenPalindromeTuple.zip(evenPalindromeTuple).map(x\
    \ => (x._1, x._2))\n        val oddPalindromeTuple2 = oddPalindromeTuple.zip(oddPalindromeTuple).map(x\
    \ => (x._1, x._2))\n        val evenPalindromeTuple3 = evenPalindromeTuple2.zip(evenPalindromeTuple2).map(x\
    \ => (x._1, x._2))\n        val oddPalindromeTuple3 = oddPalindromeTuple2.zip(oddPalindromeTuple2).map(x\
    \ => (x._1, x._2))\n        val evenPalindromeTuple4 = evenPalindro", "      \
    \  val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuples = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val oddPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val evenPalindromeTuples\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuples = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val oddPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val evenPalindromeTuples\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuples = mutable.",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.Set[Long]()\n        val\
    \ oddPalindromes = mutable.Set[Long]()\n        var i = 0\n        while (i <\
    \ n) {\n            val palindrome = i.toString\n            val reversePalindrome\
    \ = reverse(palindrome)\n            if (palindrome == reversePalindrome) {\n\
    \                evenPalindromes += i\n            } else {\n                oddPalindromes\
    \ += i\n            }\n            i += 1\n        }\n        val evenPalindromeCount\
    \ = evenPalindromes.size\n        val oddPalindromeCount = oddPalindromes.size\n\
    \        val evenPalindromeTuple = evenPalindromes.toList\n        val oddPalindromeTuple\
    \ = oddPalindromes.toList\n        val evenPalindromeTuple2 = evenPalindromeTuple.zipWithIndex.filter(_._2\
    \ == evenPalindromeCount).map(_._1).toList\n        val oddPalindromeTuple2 =\
    \ oddPalindromeTuple.zipWithIndex.filter(_._2 == oddPalindromeCount).map(_._1).toList\n\
    \        val evenPalindromeTuple3 = evenPalindromeTuple2.zipWithIndex.filter(_._2\
    \ == evenPalindromeCount).map(_._1).toList\n        val oddPalindromeTuple3 =\
    \ oddPalindromeTuple2.zipWithIndex.filter(_._2 == oddPalindromeCount).map(_._1).toList\n\
    \        val evenPalindromeTuple4 = evenPalindromeTuple3.zipWithIndex.filter(_._2\
    \ == evenPalindromeCount).map(_._1).toList\n        val oddPalindromeTuple4 =\
    \ oddPalindromeTuple3.zipWithIndex.filter(_._2 == oddPalindromeCount).map(_._1).toList\n\
    \        val evenPalindromeTuple5 = evenPalindromeTuple4.zipWithIndex.filter(_._2\
    \ == evenPalindromeCount).map(_._1).toList\n        val oddPalindromeTuple5 =\
    \ oddPalindromeTuple4.zipWithIndex.filter(_._2 == oddPalindromeCount).map(_._1).toList\n\
    \        val evenPalindromeTuple6 = evenPalindromeTuple5.zipWithIndex.filter(_._2\
    \ == evenPalindromeCount).map(_._1).toList\n", "        val evenPalindromes =\
    \ mutable.ListBuffer.empty[Long]\n        val oddPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCounts = mutable.ListBuffer[Long]()\n        val oddPalindromeCounts\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountPair = mutable.ListBuffer[(Long,\
    \ Long)]()\n        val oddPalindromeCountPair = mutable.ListBuffer[(Long, Long)]()\n\
    \        val evenPalindromeCountPairs = mutable.ListBuffer[(Long, Long)]()\n \
    \       val oddPalindromeCountPairs = mutable.ListBuffer[(Long, Long)]()\n   \
    \     val evenPalindromeCountPair = mutable.ListBuffer[(Long, Long)]()\n     \
    \   val oddPalindromeCountPair = mutable.ListBuffer[(Long, Long)]()\n        val\
    \ evenPalindromeCountPairs = mutable.ListBuffer[(Long, Long)]()\n        val oddPalindromeCountPairs\
    \ = mutable.ListBuffer[(Long, Long)]()\n        val evenPalindromeCountPair =\
    \ mutable.ListBuffer[(Long, Long)]()\n        val oddPalindromeCountPair = mutable.ListBuffer[(Long,\
    \ Long)]()\n        val evenPalindromeCountPairs = mutable.ListBuffer[(Long, Long)]()\n\
    \        val oddPalindromeCountPairs = mutable.ListBuffer[(Long, Long)]()\n  \
    \      val evenPalindromeCountPair = mutable.ListBuffer[(Long, Long)]()\n    \
    \    val oddPalindromeCountPair = mutable.ListBuffer[(Long, Long)]()\n       \
    \ val evenPalindromeCountPairs = mutable.ListBuffer[(Long, Long)]()\n        val\
    \ oddPalindromeCountPairs = mutable.ListBuffer[(Long, Long)]()\n        val evenPalindromeCountPair\
    \ = mutable.ListBuffer[(Long, Long)]()\n        val oddPalindromeCountPair = mutable.ListBuffer[(Long,\
    \ Long)]()\n        val evenPalindromeCountPairs = mutable.ListBuffer[(Long, Long)]()\n\
    \        val oddPalindromeCountPair", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val palindromes = mutable.Set[Long]()\n       \
    \ val palindromeCount = 0\n        val palindromeTuple = Tuple2(palindromeCount,\
    \ palindromes)\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple2 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple2 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple3 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple3 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple4 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple4 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple5 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple5 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple6 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple6 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple7 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple7 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCoun", "        val evenPalindromes = mutable.Set[Long]()\n   \
    \     val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).filter(x => x % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(x\
    \ => x % 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val\
    \ reverse = x.reverse\n            if (reverse == x) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            }\n        }\n \
    \       oddPalindromeRange foreach { x =>\n            val reverse = x.reverse\n\
    \            if (reverse == x) {\n                oddPalindromes += x\n      \
    \          oddPalindromeCount += 1\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCounts = mutable.Set[Long]()\n        val oddPalindromeCounts\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountArray = mutable.Set[Long]()\n\
    \        val oddPalindromeCountArray = mutable.Set[Long]()\n        val evenPalindromeCountArrays\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountArrays = mutable.Set[Long]()\n\
    \        val evenPalindromeCountArrayArray = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountArrayArray = mutable.Set[Long]()\n        val evenPalindromeCountArrayArrays\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountArrayArrays = mutable.Set[Long]()\n\
    \        val evenPalindromeCountArrayArrayArray = mutable.Set[Long]()\n      \
    \  val oddPalindromeCountArrayArrayArray = mutable.Set[Long]()\n        val evenPalindromeCountArrayArrayArrays\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountArrayArrayArrays = mutable.Set[Long]()\n\
    \        val evenPalindromeCountArrayArrayArrayArray = mutable.Set[Long]()\n \
    \       val oddPalindromeCountArrayArrayArrayArray = mutable.Set[Long]()\n   \
    \     val evenPalindromeCountArrayArrayArrayArrays = mutable.Set[Long]()\n   \
    \     val oddPalindromeCountArrayArrayArrayArrayArray = mutable.Set[Long]()\n\
    \        val evenPalindromeCountArrayArrayArrayArrayArrays = mutable.Set[Long]()\n\
    \        val oddPalindromeCountArrayArrayArrayArrayArrayArray = mutable.Set[Long]()\n\
    \        val evenPalindromeCountArrayArrayArrayArrayArrayArrays = mutable.Set[Long]()\n\
    \        val oddPalindromeCountArrayArrayArrayArrayArrayArrayArray = mutable.Set[Long]()\n\
    \        val evenPalindromeCountArray", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val palindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val palindromeCount = mutable.Set[Long]()\n \
    \       val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val palindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val palindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val palindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val palindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val palindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val palindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val palindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val palindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        ", "       \
    \ val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        val oddPalindromeCount10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount11 = mutable.Set[Long]()\n        val evenPalindromeCount12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount13 = mutable.Set[Long]()\n        val oddPalindromeCount13\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount14 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount14 = mutable.Set[Long]()\n        val "]
stop_tokens:
- "\n    }\n"
