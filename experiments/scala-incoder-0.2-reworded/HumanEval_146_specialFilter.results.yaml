language: scala
name: HumanEval_146_specialFilter
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x > 10 && x.toString.take(1).forall(y => y % 2 == 1)).size \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppmoafdih.scala:17)\n\tat Problem.main(tmppmoafdih.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj99_b12o.scala:18)\n\tat Problem.main(tmpj99_b12o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (i <- 0 until numsCopy.size) {\n         \
    \   if (numsCopy(i) > 10) {\n                if (numsCopy(i) %% 2 == 1) {\n  \
    \                  if (numsCopy(i) < (numsCopy(i) / 2)) count += 1\n         \
    \       }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcxvu60ky.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (numsCopy(i) %% \e[31m2\e\
    [0m == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value %% is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(num\
    \ => num > 10 && num % 2 == 1 && num % 2 == 0).length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp21cfsagv.scala:17)\n\tat Problem.main(tmp21cfsagv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (i <- 0 until numsCopy.size) {\n         \
    \   if (numsCopy(i) > 10) {\n                if (numsCopy(i) %% 2 == 1) {\n  \
    \                  if (numsCopy(i) < (10 * numsCopy(i))) {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph9b5siho.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (numsCopy(i) %% \e[31m2\e\
    [0m == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value %% is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(_ >\
    \ 10).filter(_ % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsoi9zlts.scala:18)\n\tat Problem.main(tmpsoi9zlts.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp80wtil9x.scala:21)\n\tat Problem.main(tmp80wtil9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj99_b12o.scala:18)\n\tat Problem.main(tmpj99_b12o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(x => if (x > 10 && x % 2 == 1 && x % 2 == 0) numsCopy.remove(x))\n\
    \        numsCopy.size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz6vfn4ym.scala:14:79 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numsCopy.foreach(\e[36mx\e[0m => \e[33mif\e[0m\
    \ (x > \e[31m10\e[0m && x % \e[31m2\e[0m == \e[31m1\e[0m && x % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) numsCopy.remove(x))\n\e[31m\e[31m   |\e[0m                   \
    \                                                   ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue remove is not a member of List[Long] - did you mean numsCopy.reduce?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(x => x > 10 && numsCopy.head % 2 == 1 && numsCopy.last\
    \ % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqh2mduqa.scala:18)\n\tat Problem.main(tmpqh2mduqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp80wtil9x.scala:21)\n\tat Problem.main(tmp80wtil9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        numsCopy2.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgwisoygj.scala:20)\n\tat Problem.main(tmpgwisoygj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzk304nls.scala:21)\n\tat Problem.main(tmpzk304nls.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 != 0)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.size\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpps1h66wz.scala:21)\n\tat Problem.main(tmpps1h66wz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(n => {\n            if (n > 10 && n % 2 == 1 && n %\
    \ 2 == 0) {\n                numsCopy.remove(n)\n            }\n        })\n \
    \       numsCopy.size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpht9afqmq.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                numsCopy.remove(n)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a\
    \ member of List[Long] - did you mean numsCopy.reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1659799992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (i <- 0 until numsCopy.size) {\n         \
    \   if (numsCopy(i) > 10) {\n                if (numsCopy(i) %% 2 == 1) {\n  \
    \                  if (numsCopy(i) < (numsCopy(i) / 2)) {\n                  \
    \      count += 1\n                    }\n                }\n            }\n \
    \       }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt40pjpv7.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (numsCopy(i) %% \e[31m2\e\
    [0m == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value %% is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x > 10).count(x => x.toString.charAt(0).toInt == 1 && x.toString.charAt(1).toInt\
    \ == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmxcwdca5.scala:17)\n\tat Problem.main(tmpmxcwdca5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjuvaxp86.scala:21)\n\tat Problem.main(tmpjuvaxp86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10 && x.toString.charAt(0) % 2 != 0 && x.toString.charAt(nums.length - 1)\
    \ % 2 != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 3\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmp14kxgd6v.scala:13)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.IterableOnceOps.count(IterableOnce.scala:605)\n\tat scala.collection.IterableOnceOps.count$(IterableOnce.scala:602)\n\
    \tat scala.collection.AbstractIterable.count(Iterable.scala:926)\n\tat Problem$.specialFilter(tmp14kxgd6v.scala:13)\n\
    \tat Problem$.main(tmp14kxgd6v.scala:17)\n\tat Problem.main(tmp14kxgd6v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(x => if (x > 10 && numsCopy.head % 2 == 1 && numsCopy.last\
    \ % 2 == 1) numsCopy.remove(x))\n        numsCopy.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcxwgakax.scala:14:103 -----------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numsCopy.foreach(\e[36mx\e[0m => \e[33mif\e[0m\
    \ (x > \e[31m10\e[0m && numsCopy.head % \e[31m2\e[0m == \e[31m1\e[0m && numsCopy.last\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) numsCopy.remove(x))\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \                 ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a member\
    \ of List[Long] - did you mean numsCopy.reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1659799992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        var lastDigit = 0\n        var firstDigit = 0\n\
    \        for(i <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n\
    \            if(num > 10) {\n                if(firstDigit % 2 != 0 && lastDigit\
    \ % 2 != 0) {\n                    count += 1\n                }\n           \
    \     firstDigit = 0\n                lastDigit = 0\n            } else {\n  \
    \              firstDigit += 1\n                lastDigit += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiow4j7rr.scala:35)\n\tat Problem.main(tmpiow4j7rr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10 && x % 2 == 1 && x % 2 == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp72pq5lu5.scala:17)\n\tat Problem.main(tmp72pq5lu5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_ % 2 != 0)\n        numsCopy4.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6upxbqg.scala:22)\n\tat Problem.main(tmpb6upxbqg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj99_b12o.scala:18)\n\tat Problem.main(tmpj99_b12o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj99_b12o.scala:18)\n\tat Problem.main(tmpj99_b12o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp80wtil9x.scala:21)\n\tat Problem.main(tmp80wtil9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(x => {\n            val firstDigit = x % 10\n      \
    \      val lastDigit = x % 10\n            val firstOdd = x % 2 == 1\n       \
    \     val lastOdd = x % 2 == 1\n            if (firstDigit > 10 && lastDigit >\
    \ 10 && firstOdd && lastOdd) {\n                numsCopy.remove(x)\n         \
    \   }\n        })\n        numsCopy.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgvqun2hx.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                numsCopy.remove(x)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a\
    \ member of List[Long] - did you mean numsCopy.reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1659799992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(_ >\
    \ 10).filter(_ % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsoi9zlts.scala:18)\n\tat Problem.main(tmpsoi9zlts.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for(i <- 0 until numsCopy.size) {\n          \
    \  if(numsCopy(i) > 10) {\n                if(numsCopy(i) %% 2 == 1) {\n     \
    \               count += 1\n                }\n            }\n        }\n    \
    \    count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0t284z9r.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m(numsCopy(i) %% \e[31m2\e\
    [0m == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value %% is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 1).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdzkkw6ey.scala:19)\n\tat Problem.main(tmpdzkkw6ey.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(num\
    \ => num > 10 && num.asDigit(0) % 2 == 1 && num.asDigit(-1) % 2 == 1).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsadcfbq8.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.filter(\e[36mnum\e[0m => num > \e[31m10\e\
    [0m && num.asDigit(\e[31m0\e[0m) % \e[31m2\e[0m == \e[31m1\e[0m && num.asDigit(-\e\
    [31m1\e[0m) % \e[31m2\e[0m == \e[31m1\e[0m).length\n\e[31m\e[31m   |\e[0m    \
    \                                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                           value asDigit is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpsadcfbq8.scala:13:70 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.filter(\e[36mnum\e[0m => num > \e[31m10\e\
    [0m && num.asDigit(\e[31m0\e[0m) % \e[31m2\e[0m == \e[31m1\e[0m && num.asDigit(-\e\
    [31m1\e[0m) % \e[31m2\e[0m == \e[31m1\e[0m).length\n\e[31m\e[31m   |\e[0m    \
    \                                                              ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                   value asDigit is not a member\
    \ of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659800003
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x > 10 && x.toString.charAt(0).toChar % 2 == 1 && x.toString.charAt(x.toString.length\
    \ - 1).toChar % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 1).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5pbml3pi.scala:19)\n\tat Problem.main(tmp5pbml3pi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(_ > 10)\
    \ && (nums.takeWhile(_ % 2 == 1).takeWhile(_ % 2 == 1).length == nums.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0vkwvonh.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.count(_ > \e[31m10\e[0m) && (nums.takeWhile(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).takeWhile(_ % \e[31m2\e[0m == \e[31m1\e[0m).length\
    \ == nums.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        value && is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659800003
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp80wtil9x.scala:21)\n\tat Problem.main(tmp80wtil9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 != 0)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsp24_2bi.scala:24)\n\tat Problem.main(tmpsp24_2bi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(x => x > 10 && numsCopy.head % 2 == 1 && numsCopy.last\
    \ % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqh2mduqa.scala:18)\n\tat Problem.main(tmpqh2mduqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10 && x.toString.charAt(0).toInt == 1 && x.toString.charAt(x.toString.length\
    \ - 1).toInt == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2_151t92.scala:17)\n\tat Problem.main(tmp2_151t92.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjuvaxp86.scala:21)\n\tat Problem.main(tmpjuvaxp86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp80wtil9x.scala:21)\n\tat Problem.main(tmp80wtil9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj99_b12o.scala:18)\n\tat Problem.main(tmpj99_b12o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (ns <- numsCopy) {\n            if (ns > 10)\
    \ {\n                if (ns % 2 == 1 && ns % 3 == 1) {\n                    count\
    \ += 1\n                }\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj6h2tdsr.scala:26)\n\tat Problem.main(tmpj6h2tdsr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj99_b12o.scala:18)\n\tat Problem.main(tmpj99_b12o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj99_b12o.scala:18)\n\tat Problem.main(tmpj99_b12o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 != 0)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsp24_2bi.scala:24)\n\tat Problem.main(tmpsp24_2bi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for ( n <- numsCopy) {\n            if ( n > 10\
    \ && n % 2 == 1 && n % 2 == 0) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw9wq7wav.scala:24)\n\tat Problem.main(tmpw9wq7wav.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj99_b12o.scala:18)\n\tat Problem.main(tmpj99_b12o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x > 10 && x % 2 != 0 && x % 2 != 1).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf0vneh3w.scala:17)\n\tat Problem.main(tmpf0vneh3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(_ >\
    \ 10).filter(_ % 2 == 1).filter(_ % 2 == 1).length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp72twl9ky.scala:18)\n\tat Problem.main(tmp72twl9ky.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(num => {\n            if (num > 10) {\n            \
    \    if (num % 2 == 1) {\n                    if (numsCopy.head % 2 == 1 && numsCopy.last\
    \ % 2 == 1) {\n                        numsCopy.head += 1\n                  \
    \      numsCopy.last -= 1\n                    }\n                }\n        \
    \    }\n        })\n        numsCopy.count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6h2amrmw.scala:18:38 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                        numsCopy.head += \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value += is not a member of Long - did you mean Long.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp6h2amrmw.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                        numsCopy.last -= \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value -= is not a member of Long - did you mean Long.!=?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6h2amrmw.scala:24:8 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        numsCopy.count\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (Long => Boolean) => Int\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj99_b12o.scala:18)\n\tat Problem.main(tmpj99_b12o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for(i <- 0 until numsCopy.size) {\n          \
    \  val num = numsCopy(i)\n            if(num > 10) {\n                if(num %\
    \ 2 == 1 && num % 2 == 0) {\n                    count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq46le79p.scala:27)\n\tat Problem.main(tmpq46le79p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10 && x % 2 == 1 && x % 2 == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp72pq5lu5.scala:17)\n\tat Problem.main(tmp72pq5lu5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 == 0)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpieq9lmhb.scala:23)\n\tat Problem.main(tmpieq9lmhb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj99_b12o.scala:18)\n\tat Problem.main(tmpj99_b12o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(num => {\n            if (num > 10) {\n            \
    \    if (numsCopy.head % 2 == 1 && numsCopy.last % 2 == 1)\n                 \
    \   numsCopy.remove(0)\n            }\n        })\n        numsCopy.size\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprer_2l50.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                    numsCopy.remove(\e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ remove is not a member of List[Long] - did you mean numsCopy.reduce?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        var lastDigit = 0\n        var firstDigit = 0\n        for (i <- nums)\
    \ {\n            if (i > 10) {\n                count += 1\n                lastDigit\
    \ = i\n            }\n            if (i % 2 == 0) {\n                firstDigit\
    \ = i\n            }\n        }\n        if (count > 0 && lastDigit % 2 == 1 &&\
    \ firstDigit % 2 == 1) {\n            count\n        } else {\n            0\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3h9t786o.scala:19:28\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                lastDigit = i\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Found:    (i : Long)\n\e[31m   |\e[0m                \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3h9t786o.scala:22:29 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                firstDigit = i\n\e[31m\e[31m   |\e[0m                \
    \             ^\e[0m\n\e[31m   |\e[0m                             Found:    (i\
    \ : Long)\n\e[31m   |\e[0m                             Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x > 10 && x.toString.charAt(0).toChar % 2 == 1 && x.toString.charAt(x.toString.length-1).toChar\
    \ % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsMap = nums.toMap\n\
    \        val numsMapKeys = numsMap.keys\n        val numsMapValues = numsMap.values.toList\n\
    \        val numsMapValuesLength = numsMapValues.length\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toLong\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptnx8dzch.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsMapValuesLength\e[0m\
    \ = numsMapValuesLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsMapValuesLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptnx8dzch.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumsMapValuesLength\e[0m\
    \ = numsMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsMapValuesLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptnx8dzch.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumsMapValuesLength\e[0m\
    \ = numsMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsMapValuesLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptnx8dzch.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsMapValuesLength\e[0m\
    \ = numsMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsMapValuesLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptnx8dzch.scala:21:12 ---------------------------"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        numsCopy3.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx995zfho.scala:21)\n\tat Problem.main(tmpx995zfho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsMap = nums.toMap\n\
    \        numsMap.values.filter(x => x > 10 && numsMap(x).isOdd && numsMap(x).isOdd).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqhxlrmaj.scala:13:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsMap\e[0m = nums.toMap\n\
    \e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m \
    \                               Cannot prove that Long <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                where:    K is a type variable\n\
    \e[31m   |\e[0m                                          V is a type variable\n\
    \e[31m   |\e[0m                                .\n1 error found\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjuvaxp86.scala:21)\n\tat Problem.main(tmpjuvaxp86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        numsCopy3.length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnqr08_jh.scala:20)\n\tat Problem.main(tmpnqr08_jh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        numsCopy3.size\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxuu_dd44.scala:20)\n\tat Problem.main(tmpxuu_dd44.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(num => {\n            if (num > 10) {\n            \
    \    if (numsCopy.head % 2 == 1 && numsCopy.last % 2 == 1) {\n               \
    \     numsCopy.foreach(x => numsCopy.remove(x))\n                }\n         \
    \   }\n        })\n        numsCopy.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo20fmgya.scala:17:51 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                    numsCopy.foreach(\e[36mx\e[0m =>\
    \ numsCopy.remove(x))\n\e[31m\e[31m   |\e[0m                                 \
    \         ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a member of\
    \ List[Long] - did you mean numsCopy.reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10) {\n                if (i %\
    \ 2 == 1) {\n                    if (i % 2 == 0) {\n                        if\
    \ (i % 2 == 1) {\n                            if (i % 2 == 0) {\n            \
    \                    count += 1\n                            }\n             \
    \           }\n                    }\n                }\n            }\n     \
    \   }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpclfpdoot.scala:31)\n\tat Problem.main(tmpclfpdoot.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800014
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_ % 2 != 0)\n        numsCopy4.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6upxbqg.scala:22)\n\tat Problem.main(tmpb6upxbqg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10 && x.toString.charAt(0).toInt == 1 && x.toString.charAt(nums.length -\
    \ 1).toInt == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1qz9pqz0.scala:17)\n\tat Problem.main(tmp1qz9pqz0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsMap = nums.groupBy(x\
    \ => x % 10).mapValues(_.size)\n        numsMap.getOrElse(10, 0l) + numsMap.getOrElse(9,\
    \ 0l)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb6ffxe2p.scala:14:34 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numsMap.getOrElse(\e[31m10\e[0m, \e[31m0l\e[0m)\
    \ + numsMap.getOrElse(\e[31m9\e[0m, \e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of AnyVal, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659800015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter( x => x > 10 && numsCopy.head % 2 == 1 && numsCopy.last\
    \ % 2 == 1 )\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq2cpwj79.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        numsCopy.filter( \e[36mx\e\
    [0m => x > \e[31m10\e[0m && numsCopy.head % \e[31m2\e[0m == \e[31m1\e[0m && numsCopy.last\
    \ % \e[31m2\e[0m == \e[31m1\e[0m )\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800014
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_ % 2 != 0)\n        val\
    \ numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        numsCopy5.size\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcwgzdl38.scala:23)\n\tat Problem.main(tmpcwgzdl38.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp01po0l1m.scala:21)\n\tat Problem.main(tmp01po0l1m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        var firstOdd = 0\n        var lastOdd = 0\n  \
    \      var firstEven = 0\n        var lastEven = 0\n        for(i <- 0 until numsCopy.size)\
    \ {\n            val num = numsCopy(i)\n            val firstDigit = num / 10\n\
    \            val lastDigit = num % 10\n            if(firstDigit % 2 == 1) {\n\
    \                firstEven = firstEven+1\n            }\n            if(lastDigit\
    \ % 2 == 1) {\n                lastEven = lastEven+1\n            }\n        \
    \    if(firstDigit > 10) {\n                firstOdd = firstOdd+1\n          \
    \  }\n            if(lastDigit > 10) {\n                lastOdd = lastOdd+1\n\
    \            }\n        }\n        count = firstOdd + lastOdd + firstEven + lastEven\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkwyrijl9.scala:40)\n\tat Problem.main(tmpkwyrijl9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj99_b12o.scala:18)\n\tat Problem.main(tmpj99_b12o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x > 10 && x.toString.charAt(0).toChar % 2 == 1 && x.toString.charAt(x.toString.length\
    \ - 1).toChar % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2 ==\
    \ 0)\n        numsCopy5.size\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphr4mpbg9.scala:22)\n\tat Problem.main(tmphr4mpbg9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 != 0)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsp24_2bi.scala:24)\n\tat Problem.main(tmpsp24_2bi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(_ > 10)\
    \ && (nums.takeWhile(_ % 2 == 1).lastOption.isOdd && nums.takeWhile(_ % 2 == 1).headOption.isOdd)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp80ahnd4k.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.count(_ > \e[31m10\e[0m) && (nums.takeWhile(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).lastOption.isOdd && nums.takeWhile(_ % \e[31m2\e\
    [0m == \e[31m1\e[0m).headOption.isOdd)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value && is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp80ahnd4k.scala:13:69 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        nums.count(_ > \e[31m10\e[0m) && (nums.takeWhile(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).lastOption.isOdd && nums.takeWhile(_ % \e[31m2\e\
    [0m == \e[31m1\e[0m).headOption.isOdd)\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                             value isOdd is not a member of Option[Long]\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (i <- 0 until numsCopy.size) {\n         \
    \   val num = numsCopy(i)\n            if (num > 10) {\n                val firstDigit\
    \ = num / 10\n                val lastDigit = num % 10\n                if (firstDigit\
    \ % 2 == 1 && lastDigit % 2 == 1) {\n                    count += 1\n        \
    \        }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps55qs1ii.scala:30)\n\tat Problem.main(tmps55qs1ii.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 != 0)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsp24_2bi.scala:24)\n\tat Problem.main(tmpsp24_2bi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (i <- 0 until numsCopy.size) {\n         \
    \   if (numsCopy(i) > 10) {\n                if (numsCopy(i) %% 2 == 1) {\n  \
    \                  if (numsCopy(i) < (numsCopy(i) / 2)) {\n                  \
    \      count += 1\n                    }\n                }\n            }\n \
    \       }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt40pjpv7.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (numsCopy(i) %% \e[31m2\e\
    [0m == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value %% is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 != 0)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsp24_2bi.scala:24)\n\tat Problem.main(tmpsp24_2bi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2 ==\
    \ 0)\n        val numsCopy6 = numsCopy5.filter(_ > 10).filter(_ % 2 == 1)\n  \
    \      val numsCopy7 = numsCopy6.filter(_ % 2 == 0)\n        val numsCopy8 = numsCopy7.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        val numsCopy9 = numsCopy8.filter(_ % 2 ==\
    \ 0)\n        val numsCopy10 = numsCopy9.filter(_ > 10).filter(_ % 2 == 1)\n \
    \       numsCopy10.size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi2q4l6k_.scala:27)\n\tat Problem.main(tmpi2q4l6k_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 != 0)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsp24_2bi.scala:24)\n\tat Problem.main(tmpsp24_2bi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        numsCopy3.size\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxuu_dd44.scala:20)\n\tat Problem.main(tmpxuu_dd44.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        numsCopy3.size\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxuu_dd44.scala:20)\n\tat Problem.main(tmpxuu_dd44.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(_ >\
    \ 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv3d6vh2i.scala:17)\n\tat Problem.main(tmpv3d6vh2i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for(i <- 0 until numsCopy.size) {\n          \
    \  if(numsCopy(i) > 10) {\n                if(numsCopy(i) % 2 == 1) {\n      \
    \              if(numsCopy(i) < 10) {\n                        if(numsCopy(i +\
    \ 1) < 10) {\n                            if(numsCopy(i + 2) > 10) {\n       \
    \                         count += 1\n                            }\n        \
    \                }\n                    }\n                }\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4yaq6t8v.scala:32)\n\tat Problem.main(tmp4yaq6t8v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x > 10 && x.toString.charAt(0).toChar % 2 == 1 && x.toString.charAt(x.toString.length\
    \ - 1).toChar % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2 ==\
    \ 1)\n        numsCopy5.size\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo4ph2zj0.scala:23)\n\tat Problem.main(tmpo4ph2zj0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        numsCopy3.size\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxuu_dd44.scala:20)\n\tat Problem.main(tmpxuu_dd44.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzk304nls.scala:21)\n\tat Problem.main(tmpzk304nls.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10 && x.toString.charAt(0) % 2 == 1 && x.toString.charAt(nums.length - 1)\
    \ % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 3\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmpa2qxjtgv.scala:13)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.IterableOnceOps.count(IterableOnce.scala:605)\n\tat scala.collection.IterableOnceOps.count$(IterableOnce.scala:602)\n\
    \tat scala.collection.AbstractIterable.count(Iterable.scala:926)\n\tat Problem$.specialFilter(tmpa2qxjtgv.scala:13)\n\
    \tat Problem$.main(tmpa2qxjtgv.scala:17)\n\tat Problem.main(tmpa2qxjtgv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ %\
    \ 2 == 0)\n        numsCopy2.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0bwid55r.scala:19)\n\tat Problem.main(tmp0bwid55r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val evens = numsCopy.filter(x => x % 2 == 0)\n        val odds = numsCopy.filter(x\
    \ => x % 2 != 0)\n        val firstOdds = evens.filter(x => x % 2 == 1)\n    \
    \    val lastOdds = evens.filter(x => x % 2 == 0)\n        val firstEvens = odds.filter(x\
    \ => x % 2 == 1)\n        val lastEvens = odds.filter(x => x % 2 == 0)\n     \
    \   val firstOddsEvens = firstOdds.filter(x => x % 2 == 1)\n        val lastOddsEvens\
    \ = lastOdds.filter(x => x % 2 == 0)\n        val firstEvensOdds = firstEvens.filter(x\
    \ => x % 2 == 1)\n        val lastEvensOdds = lastEvens.filter(x => x % 2 == 0)\n\
    \        val firstOddsEvensOdds = firstOddsEvens.filter(x => x % 2 == 1)\n   \
    \     val lastOddsEvensOdds = lastOddsEvens.filter(x => x % 2 == 0)\n        val\
    \ firstEvensOddsEvens = firstEvensOdds.filter(x => x % 2 == 1)\n        val lastEvensOddsEvens\
    \ = lastEvensOdds.filter(x => x % 2 == 0)\n        val firstOddsEvensOddsEvens\
    \ = firstOddsEvensOdds.filter(x => x % 2 == 1)\n        val lastOddsEvensOddsEvens\
    \ = lastOddsEvensOdds.filter(x => x % 2 == 0)\n        val firstEvensOddsEvensOdds\
    \ = firstEvensOddsEvens.filter(x => x % 2 == 1)\n        val lastEvensOddsEvensOdds\
    \ = lastEvensOddsEvens.filter(x => x % 2 == 0)\n        val firstOddsEvensOddsEvensOdds\
    \ = firstOddsEvensOddsEvens.filter(x => x % 2 == 1)\n        val lastOddsEvensOddsEvensOdds\
    \ = lastOddsEvensOddsEvens.filter(x => x % 2 == 0)\n        val firstEvensOddsEvensOddsEvensOdds\
    \ = firstEvensOddsEvensOddsEvens.filter(x => x % 2 == 1)\n        val last\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd9mz1zg1.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd9mz1zg1.scala:34:47\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e\
    [36mfirstEvensOddsEvensOddsEvensOdds\e[0m = firstEvensOddsEvensOddsEvens.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Not found: firstEvensOddsEvensOddsEvens\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd9mz1zg1.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(num => {\n            if (num > 10) {\n            \
    \    if (numsCopy.head % 2 == 1 && numsCopy.last % 2 == 1) {\n               \
    \     numsCopy.clear()\n                }\n            }\n        })\n       \
    \ numsCopy.size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpunfzc8mx.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                    numsCopy.clear()\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue clear is\
    \ not a member of List[Long] - did you mean numsCopy.clone?\n1 error found\n"
  stdout: ''
  timestamp: 1659800015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10 && x.toString.charAt(0).toInt == 1 && x.toString.charAt(x.toString.length-1).toInt\
    \ == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqqw_hqvu.scala:17)\n\tat Problem.main(tmpqqw_hqvu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        var lastDigit = 0\n        var firstDigit = 0\n        for (i <- nums)\
    \ {\n            if (i > 10) {\n                count += 1\n                lastDigit\
    \ = i\n            } else if (i % 2 == 1) {\n                count += 1\n    \
    \            firstDigit = i\n            }\n        }\n        if (count == 0)\
    \ {\n            return 0\n        }\n        if (lastDigit % 2 == 1) {\n    \
    \        count += 1\n        }\n        if (firstDigit % 2 == 1) {\n         \
    \   count += 1\n        }\n        if (count == 0) {\n            return 0\n \
    \       }\n        return count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz0z05c78.scala:19:28\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                lastDigit = i\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Found:    (i : Long)\n\e[31m   |\e[0m                \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpz0z05c78.scala:22:29 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                firstDigit = i\n\e[31m\e[31m   |\e[0m                \
    \             ^\e[0m\n\e[31m   |\e[0m                             Found:    (i\
    \ : Long)\n\e[31m   |\e[0m                             Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i<- nums) {\n            if (i > 10 && i % 2 != 0 && i % 2 != 1)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw0pfj5sz.scala:23)\n\tat Problem.main(tmpw0pfj5sz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 != 0)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsp24_2bi.scala:24)\n\tat Problem.main(tmpsp24_2bi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(_ >\
    \ 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv3d6vh2i.scala:17)\n\tat Problem.main(tmpv3d6vh2i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10) {\n                if (i %\
    \ 2 == 1) {\n                    if (i % 2 == 0) {\n                        if\
    \ (i % 2 == 1) {\n                            count += 1\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy11j8ylz.scala:29)\n\tat Problem.main(tmpy11j8ylz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (i <- 0 until numsCopy.size) {\n         \
    \   if (numsCopy(i) > 10) {\n                if (numsCopy(i) %% 2 == 1) {\n  \
    \                  if (numsCopy(i) < (numsCopy(i) / 2)) count += 1\n         \
    \       }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcxvu60ky.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (numsCopy(i) %% \e[31m2\e\
    [0m == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value %% is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (i<- 0 until numsCopy.size) {\n          \
    \  val num = numsCopy(i)\n            if (num > 10) {\n                if (numsCopy(i-1)\
    \ % 2 == 1 && numsCopy(i+1) % 2 == 1) {\n                    count += 1\n    \
    \            }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmpqssnofdl.scala:18)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.specialFilter(tmpqssnofdl.scala:22)\n\
    \tat Problem$.main(tmpqssnofdl.scala:27)\n\tat Problem.main(tmpqssnofdl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (i <- 0 until numsCopy.size) {\n         \
    \   if (numsCopy(i) > 10) {\n                if (numsCopy(i) %% 2 == 1) {\n  \
    \                  if (numsCopy(i) < (10 * numsCopy(i))) {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph9b5siho.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (numsCopy(i) %% \e[31m2\e\
    [0m == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value %% is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        var firstOdd = 0\n        var lastOdd = 0\n  \
    \      for(i <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n\
    \            if(num > 10) {\n                if(num % 2 == 0) {\n            \
    \        count += 1\n                    if(num % 2 == 1) {\n                \
    \        firstOdd += 1\n                    }\n                } else {\n    \
    \                lastOdd += 1\n                }\n            }\n        }\n \
    \       (count * 2l) + (firstOdd * 1l) + (lastOdd * 1l)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb7uxb40u.scala:34)\n\tat Problem.main(tmpb7uxb40u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (n <- nums) {\n            if (n > 10 && n.toString.charAt(0).toChar\
    \ % 2 == 1 && n.toString.charAt(n.toString.length-1).toChar % 2 == 1) {\n    \
    \            count += 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (i <- 0 until numsCopy.size) {\n         \
    \   val num = numsCopy(i)\n            if (num > 10) {\n                if (numsCopy(i-1)\
    \ % 2 == 1 && numsCopy(i+1) % 2 == 1) {\n                    count += 1\n    \
    \            }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmpdt1jk2gh.scala:18)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.specialFilter(tmpdt1jk2gh.scala:22)\n\
    \tat Problem$.main(tmpdt1jk2gh.scala:27)\n\tat Problem.main(tmpdt1jk2gh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsMap = nums.toMap\n\
    \        val numsMapKeys = numsMap.keys\n        val numsMapValues = numsMap.values.toList\n\
    \        val numsMapValuesSum = numsMapValues.sum\n        val numsMapValuesSum2\
    \ = numsMapValuesSum * numsMapValuesSum\n        val numsMapValuesSum3 = numsMapValuesSum2\
    \ * numsMapValuesSum\n        val numsMapValuesSum4 = numsMapValuesSum3 * numsMapValuesSum\n\
    \        val numsMapValuesSum5 = numsMapValuesSum4 * numsMapValuesSum\n      \
    \  val numsMapValuesSum6 = numsMapValuesSum5 * numsMapValuesSum\n        val numsMapValuesSum7\
    \ = numsMapValuesSum6 * numsMapValuesSum\n        val numsMapValuesSum8 = numsMapValuesSum7\
    \ * numsMapValuesSum\n        val numsMapValuesSum9 = numsMapValuesSum8 * numsMapValuesSum\n\
    \        val numsMapValuesSum10 = numsMapValuesSum9 * numsMapValuesSum\n     \
    \   val numsMapValuesSum11 = numsMapValuesSum10 * numsMapValuesSum\n        val\
    \ numsMapValuesSum12 = numsMapValuesSum11 * numsMapValuesSum\n        val numsMapValuesSum13\
    \ = numsMapValuesSum12 * numsMapValuesSum\n        val numsMapValuesSum14 = numsMapValuesSum13\
    \ * numsMapValuesSum\n        val numsMapValuesSum15 = numsMapValuesSum14 * numsMapValuesSum\n\
    \        val numsMapValuesSum16 = numsMapValuesSum15 * numsMapValuesSum\n    \
    \    val numsMapValuesSum17 = numsMapValuesSum16 * numsMapValuesSum\n        val\
    \ numsMapValuesSum18 = numsMapValuesSum17 * numsMapValuesSum\n        val numsMapValuesSum19\
    \ = numsMapValuesSum18 * numsMapValuesSum\n        val numsMapValuesSum20 = numsMapValuesSum19\
    \ * numsMapValuesSum\n        val numsMapValuesSum21 = numsMapValuesSum20 * numsMapValuesSum\n\
    \        val numsMapValuesSum22 = numsMapValuesSum21 * numsMapValuesSum\n    \
    \    val numsMapValuesSum23 = numsMapValuesSum22 * \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp35z0vqar.scala:38:53 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mnumsMapValuesSum23\e[0m\
    \ = numsMapValuesSum22 * \n\e[31m\e[31m   |\e[0m                             \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \          expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmp35z0vqar.scala:13:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsMap\e[0m = nums.toMap\n\
    \e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m \
    \                               Cannot prove that Long <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                where:    K is a type variable\n\
    \e[31m   |\e[0m                                          V is a type variable\n\
    \e[31m   |\e[0m                                .\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp35z0vqar.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 == 0)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpieq9lmhb.scala:23)\n\tat Problem.main(tmpieq9lmhb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (i <- 0 until numsCopy.size) {\n         \
    \   val num = numsCopy(i)\n            if (num > 10) {\n                if (numsCopy(i).isOdd)\
    \ {\n                    if (numsCopy(i).isOdd && numsCopy(i).isOdd) {\n     \
    \                   count += 1\n                    }\n                }\n   \
    \         }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaytu9ei3.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m (numsCopy(i).isOdd) {\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpaytu9ei3.scala:19:36 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                    \e[33mif\e[0m (numsCopy(i).isOdd && numsCopy(i).isOdd)\
    \ {\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        value isOdd is not a member of Long\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzk304nls.scala:21)\n\tat Problem.main(tmpzk304nls.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x > 10 && x.toString.charAt(0).toChar % 2 == 1 && x.toString.charAt(x.toString.length\
    \ - 1).toChar % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj99_b12o.scala:18)\n\tat Problem.main(tmpj99_b12o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2 ==\
    \ 0)\n        val numsCopy6 = numsCopy5.filter(_ > 10).filter(_ % 2 == 1)\n  \
    \      val numsCopy7 = numsCopy6.filter(_ % 2 == 0)\n        val numsCopy8 = numsCopy7.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        val numsCopy9 = numsCopy8.filter(_ % 2 ==\
    \ 0)\n        val numsCopy10 = numsCopy9.filter(_ > 10).filter(_ % 2 == 1)\n \
    \       numsCopy10.size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi2q4l6k_.scala:27)\n\tat Problem.main(tmpi2q4l6k_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        var lastOdd = false\n        var firstOdd = false\n\
    \        for (i <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n\
    \            if (num > 10) {\n                if (lastOdd && firstOdd) {\n   \
    \                 count += 1\n                }\n                lastOdd = num\
    \ % 2 != 0\n                firstOdd = num % 2 != 1\n            } else {\n  \
    \              lastOdd = false\n                firstOdd = false\n           \
    \ }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3zshhudm.scala:34)\n\tat Problem.main(tmp3zshhudm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(_ >\
    \ 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv3d6vh2i.scala:17)\n\tat Problem.main(tmpv3d6vh2i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (i <- 0 until numsCopy.size) {\n         \
    \   if (numsCopy(i) > 10) {\n                if (numsCopy(i) %% 2 == 1) {\n  \
    \                  if (numsCopy(i) < (numsCopy(i) / 2)) {\n                  \
    \      count += 1\n                    }\n                }\n            }\n \
    \       }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt40pjpv7.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (numsCopy(i) %% \e[31m2\e\
    [0m == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value %% is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (i <- 0 until numsCopy.size) {\n         \
    \   if (numsCopy(i) > 10) {\n                if (numsCopy(i) mod 2 != 0) {\n \
    \                   if (numsCopy(i) mod 2 != 1) {\n                        count\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \       count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2jhuhnvv.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (numsCopy(i) mod \e[31m2\e\
    [0m != \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue mod is not a member of Long, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2jhuhnvv.scala:18:36\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                    \e[33mif\e\
    [0m (numsCopy(i) mod \e[31m2\e[0m != \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m  \
    \                      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a\
    \ member of Long, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(num => num > 10).count(num => num % 2 == 1 && num % 3\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqrzau005.scala:19)\n\tat Problem.main(tmpqrzau005.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10) {\n                if (i %\
    \ 2 == 1) {\n                    if (i % 2 == 0) {\n                        if\
    \ (i % 2 == 1) {\n                            count += 1\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy11j8ylz.scala:29)\n\tat Problem.main(tmpy11j8ylz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        numsCopy3.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprcf_5wd8.scala:21)\n\tat Problem.main(tmprcf_5wd8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj99_b12o.scala:18)\n\tat Problem.main(tmpj99_b12o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(x => x > 10 && numsCopy.head % 2 == 1 && numsCopy.last\
    \ % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqh2mduqa.scala:18)\n\tat Problem.main(tmpqh2mduqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsSorted =\
    \ nums.sortWith(_ < _)\n        val odd = numsSorted.filter(_ % 2 == 1)\n    \
    \    val even = numsSorted.filter(_ % 2 == 0)\n        val first = even.head\n\
    \        val last = even.last\n        val firstOdd = odd.filter(x => x % 2 ==\
    \ 1)\n        val lastOdd = odd.filter(x => x % 2 == 0)\n        val firstEven\
    \ = even.filter(x => x % 2 == 0)\n        val lastEven = even.filter(x => x %\
    \ 2 == 1)\n        val firstOddEven = firstOdd.filter(x => x % 2 == 0)\n     \
    \   val lastOddEven = lastOdd.filter(x => x % 2 == 0)\n        val firstOddEvenLastOdd\
    \ = firstOddEven.last\n        val lastOddEvenLastOdd = lastOddEven.last\n   \
    \     val firstEvenLastOdd = firstEven.last\n        val lastEvenLastOdd = lastEven.last\n\
    \        val firstEvenLastOddEven = firstEvenLastOdd.filter(x => x % 2 == 0)\n\
    \        val lastEvenLastOddEven = lastEvenLastOdd.filter(x => x % 2 == 0)\n \
    \       val firstEvenLastOddEvenLastOdd = firstEvenLastOddEven.last\n        val\
    \ lastEvenLastOddEvenLastOdd = lastEvenLastOddEven.last\n        val firstEvenLastOddEvenLastOddEven\
    \ = firstEvenLastOddEvenLastOdd.filter(x => x % 2 == 0)\n        val lastEvenLastOddEvenLastOddEven\
    \ = lastEvenLastOddEvenLastOdd.filter(x => x % 2 == 0)\n        val firstEvenLastOddEvenLastOddEvenLastOdd\
    \ = firstEvenLastOddEvenLastOddEven.last\n        val lastEvenLastOddEvenLastOddEvenLastOdd\
    \ = lastEvenLastOddEvenLastOddEven.last\n        val firstEvenLastOddEvenLastOddEvenLastOddEven\
    \ = firstEvenLastOddEvenLastOddEvenLastOdd.filter(x => x % 2 == 0)\n        val\
    \ lastEvenLastOddEvenLastOddEvenLastOddEven = lastEvenLastOddEvenLastOddEvenLastOddEven.last\n\
    \        val firstEvenLastOddEvenLastOddEvenLastO\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoyd4mjm2.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoyd4mjm2.scala:28:52\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mfirstEvenLastOddEven\e[0m = firstEvenLastOdd.filter(\e[36mx\e[0m => x % \e\
    [31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \            value filter is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpoyd4mjm2.scala:29:50 ------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastEvenLastOddEven\e[0m = lastEvenLastOdd.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                           ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                             value filter is not a member of Long\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpoyd4mjm2.scala:37:56 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mlastEvenLastOddEvenLastOddEvenLastOddEven\e\
    [0m = lastEvenLastOddEvenLastOddEvenLastOddEven.last\n\e[31m\e[31m   |\e[0m  \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \    Recursive \e[33mvalue\e[0m \e[35mlastEvenLastOddEvenLastOddEvenLastOddEven\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoyd4mjm2.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659800027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        var lastDigit = 0\n        var firstDigit = 0\n        for (i <- nums)\
    \ {\n            if (i > 10) {\n                count += 1\n                if\
    \ (lastDigit % 2 == 1) {\n                    count += 1\n                }\n\
    \                if (firstDigit % 2 == 1) {\n                    count += 1\n\
    \                }\n            }\n            lastDigit = i\n            firstDigit\
    \ = i\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ka1py_e.scala:26:24\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            lastDigit = i\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Found:    (i : Long)\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ka1py_e.scala:27:25\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            firstDigit = i\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (i : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10 && x.toString.charAt(0).toChar % 2 == 1 && x.toString.charAt(x.toString.length\
    \ - 1).toChar % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10 && nums(x) % 2 == 1 && nums(x) % 2 == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa1l88t50.scala:13:39\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        nums.count(\e[36mx\e\
    [0m => x > \e[31m10\e[0m && nums(x) % \e[31m2\e[0m == \e[31m1\e[0m && nums(x)\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \    Found:    (x : Long)\n\e[31m   |\e[0m                                   \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa1l88t50.scala:13:59\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        nums.count(\e[36mx\e\
    [0m => x > \e[31m10\e[0m && nums(x) % \e[31m2\e[0m == \e[31m1\e[0m && nums(x)\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                                     Found:    (x : Long)\n\e[31m   |\e[0m  \
    \                                                  Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_ % 2 != 0)\n        numsCopy4.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6upxbqg.scala:22)\n\tat Problem.main(tmpb6upxbqg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        var firstOdd = false\n        var lastOdd = false\n        for (i <-\
    \ nums) {\n            if (i > 10) {\n                count += 1\n           \
    \     if (i % 2 == 1) {\n                    firstOdd = true\n               \
    \ }\n                if (i % 2 == 0) {\n                    lastOdd = true\n \
    \               }\n            }\n        }\n        if (firstOdd && lastOdd)\
    \ {\n            count += 1\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd808fc1v.scala:34)\n\tat Problem.main(tmpd808fc1v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10 && x % 2 == 1 && x % 2 == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp72pq5lu5.scala:17)\n\tat Problem.main(tmp72pq5lu5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(x => {\n            if (x > 10 && x % 2 == 1 && x %\
    \ 2 == 0) {\n                numsCopy.remove(x)\n            }\n        })\n \
    \       numsCopy.size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcp9igwx2.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                numsCopy.remove(x)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a\
    \ member of List[Long] - did you mean numsCopy.reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1659800027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        var firstOdd = 0\n        var lastOdd = 0\n  \
    \      var firstEven = 0\n        var lastEven = 0\n        for (i <- 0 until\
    \ numsCopy.size) {\n            val num = numsCopy(i)\n            if (num > 10)\
    \ {\n                count += 1\n                if (num % 2 == 0) {\n       \
    \             if (num % 2 == 1) {\n                        firstEven += 1\n  \
    \                  } else {\n                        lastEven += 1\n         \
    \           }\n                } else {\n                    if (num % 2 == 1)\
    \ {\n                        firstOdd += 1\n                    } else {\n   \
    \                     lastOdd += 1\n                    }\n                }\n\
    \            }\n        }\n        (count * (firstOdd + lastOdd) + (firstEven\
    \ + lastEven))\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_veaty6i.scala:42)\n\tat Problem.main(tmp_veaty6i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 == 0)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpieq9lmhb.scala:23)\n\tat Problem.main(tmpieq9lmhb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x > 10 && x.toString.charAt(0) % 2 != 0 && x.toString.charAt(nums.length - 1)\
    \ % 2 != 0).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 3\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmpqd_5cq47.scala:13)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.specialFilter(tmpqd_5cq47.scala:13)\n\
    \tat Problem$.main(tmpqd_5cq47.scala:17)\n\tat Problem.main(tmpqd_5cq47.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800028
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsSorted =\
    \ nums.sortWith(_ < _)\n        val odds = numsSorted.filter(x => x.toString.toInt%2\
    \ == 1)\n        val evens = numsSorted.filter(x => x.toString.toInt%2 == 0)\n\
    \        val firstOdds = evens.filter(x => x.toString.toInt%2 == 1)\n        val\
    \ firstEvens = odds.filter(x => x.toString.toInt%2 == 0)\n        val firstOddsEvens\
    \ = firstOdds.filter(x => x.toString.toInt%2 == 1)\n        val firstOddsOdds\
    \ = firstEvens.filter(x => x.toString.toInt%2 == 0)\n        val firstOddsEvensOdds\
    \ = firstOddsEvens.filter(x => x.toString.toInt%2 == 1)\n        val firstOddsEvensEvens\
    \ = firstOddsOdds.filter(x => x.toString.toInt%2 == 0)\n        val firstOddsEvensOddsEvens\
    \ = firstOddsEvensOdds.filter(x => x.toString.toInt%2 == 1)\n        val firstOddsEvensEvensOdds\
    \ = firstOddsEvensEvens.filter(x => x.toString.toInt%2 == 0)\n        val firstOddsEvensEvensEvensOdds\
    \ = firstOddsEvensEvensOdds.filter(x => x.toString.toInt%2 == 1)\n        val\
    \ firstOddsEvensEvensEvensEvensOdds = firstOddsEvensEvensEvensOdds.filter(x =>\
    \ x.toString.toInt%2 == 0)\n        val firstOddsEvensEvensEvensEvensEvensOdds\
    \ = firstOddsEvensEvensEvensEvensOdds.filter(x => x.toString.toInt%2 == 1)\n \
    \       val firstOddsEvensEvensEvensEvensEvensEvensOdds = firstOddsEvensEvensEvensEvensEvensOdds.filter(x\
    \ => x.toString.toInt%2 == 0)\n        val firstOddsEvensEvensEvensEvensEvensEvensEvensOdds\
    \ = firstOddsEvensEvensEvensEvensEvensEvensOdds.filter(x => x.toString.toInt%2\
    \ == 1)\n        val firstOddsEvensEvensEvensEvensEven\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn3qpw6k.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfn3qpw6k.scala:30:5 ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsMap = nums.toMap\n\
    \        val numsMapKeys = numsMap.keys\n        val numsMapValues = numsMap.values.toList\n\
    \        val numsMapValuesLength = numsMapValues.length\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toLong\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength.toInt\n        val numsMapValuesLength = numsMapValuesLength.toInt\n\
    \        val numsMapValuesLength = numsMapValuesLength.toInt\n        val numsMapValuesLength\
    \ = numsMapValuesLength\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptnx8dzch.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsMapValuesLength\e[0m\
    \ = numsMapValuesLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsMapValuesLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptnx8dzch.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumsMapValuesLength\e[0m\
    \ = numsMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsMapValuesLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptnx8dzch.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumsMapValuesLength\e[0m\
    \ = numsMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsMapValuesLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptnx8dzch.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsMapValuesLength\e[0m\
    \ = numsMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsMapValuesLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptnx8dzch.scala:21:12 ---------------------------"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (i <- 0 until numsCopy.size) {\n         \
    \   if (numsCopy(i) > 10) {\n                if (numsCopy(i) % 2 == 1) {\n   \
    \                 if (numsCopy(i-1) % 2 == 1) {\n                        count\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \       count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmpcoecbrqg.scala:18)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.specialFilter(tmpcoecbrqg.scala:23)\n\
    \tat Problem$.main(tmpcoecbrqg.scala:28)\n\tat Problem.main(tmpcoecbrqg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 == 0)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpieq9lmhb.scala:23)\n\tat Problem.main(tmpieq9lmhb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp80wtil9x.scala:21)\n\tat Problem.main(tmp80wtil9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for(i <- 0 until nums.size) {\n            if(nums(i) > 10) {\n     \
    \           if(nums(i) % 2 == 1 && nums(i) != nums(i).floor) {\n             \
    \       count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmlxi_qv7.scala:16:58 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m(nums(i) % \e[31m2\e[0m\
    \ == \e[31m1\e[0m && nums(i) != nums(i).floor) {\n\e[31m\e[31m   |\e[0m      \
    \                                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m      value floor is not a member of Long.\n\e[31m   |\e[0m      An extension\
    \ method was tried, but could not be fully constructed:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m          doubleWrapper(nums.apply(i))\n1 error found\n"
  stdout: ''
  timestamp: 1659800025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(num => {\n            val firstDigit = num / 10\n  \
    \          val lastDigit = num % 10\n            if (firstDigit % 2 == 1 && lastDigit\
    \ % 2 == 1) {\n                numsCopy.remove(num)\n            }\n        })\n\
    \        numsCopy.size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwv379mh0.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                numsCopy.remove(num)\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not\
    \ a member of List[Long] - did you mean numsCopy.reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10 && x.toString.take(1).forall(x => x % 2 == 1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphtwejv1h.scala:17)\n\tat Problem.main(tmphtwejv1h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter( x => x > 10 && numsCopy.head % 2 == 1 && numsCopy.last\
    \ % 2 == 1 )\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq2cpwj79.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        numsCopy.filter( \e[36mx\e\
    [0m => x > \e[31m10\e[0m && numsCopy.head % \e[31m2\e[0m == \e[31m1\e[0m && numsCopy.last\
    \ % \e[31m2\e[0m == \e[31m1\e[0m )\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10) && (nums.headOption.map(x => x % 2 == 1).getOrElse(false) && nums.lastOption.map(x\
    \ => x % 2 == 1).getOrElse(false))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ifag2eg.scala:13:32 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.count(\e[36mx\e[0m => x > \e[31m10\e[0m)\
    \ && (nums.headOption.map(\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m).getOrElse(\e\
    [31mfalse\e[0m) && nums.lastOption.map(\e[36mx\e[0m => x % \e[31m2\e[0m == \e\
    [31m1\e[0m).getOrElse(\e[31mfalse\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value && is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 != 0)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsp24_2bi.scala:24)\n\tat Problem.main(tmpsp24_2bi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 1).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdzkkw6ey.scala:19)\n\tat Problem.main(tmpdzkkw6ey.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(x => {\n            val firstDigit = x % 10\n      \
    \      val lastDigit = x % 10\n            val firstOdd = x % 2\n            val\
    \ lastOdd = x % 2\n            if (firstDigit > 10 && lastDigit > 10 && firstOdd\
    \ && lastOdd) {\n                numsCopy.remove(x)\n            }\n        })\n\
    \        numsCopy.size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpawjkrakc.scala:19:53\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (firstDigit\
    \ > \e[31m10\e[0m && lastDigit > \e[31m10\e[0m && firstOdd && lastOdd) {\n\e[31m\e\
    [31m   |\e[0m                                                     ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                             Found:    (firstOdd\
    \ : Long)\n\e[31m   |\e[0m                                             Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpawjkrakc.scala:19:65\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (firstDigit\
    \ > \e[31m10\e[0m && lastDigit > \e[31m10\e[0m && firstOdd && lastOdd) {\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                                              Found:\
    \    (lastOdd : Long)\n\e[31m   |\e[0m                                       \
    \       Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpawjkrakc.scala:20:25 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                numsCopy.remove(x)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue remove is not a member of List[Long], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import collection.convert.ImplicitConversions.seq AsJavaList\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\e[31m\
    \   |\e[0m  import collection.convert.ImplicitConversions.collection asJava\n\e\
    [31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659800038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(n => {\n            val firstDigit = n.toString.charAt(0)\n\
    \            val lastDigit = n.toString.charAt(n.toString.length - 1)\n      \
    \      val firstDigitOdd = firstDigit % 2 == 1\n            val lastDigitOdd =\
    \ lastDigit % 2 == 1\n            if (firstDigitOdd && lastDigitOdd) {\n     \
    \           numsCopy.remove(n)\n            }\n        })\n        numsCopy.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkjetktvi.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                numsCopy.remove(n)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a\
    \ member of List[Long] - did you mean numsCopy.reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1659800037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsSorted =\
    \ nums.sortWith((a, b) => a < b)\n        val even = numsSorted.filter(_ % 2 ==\
    \ 0)\n        val odd = numsSorted.filter(_ % 2 != 0)\n        val firstOdd =\
    \ odd.takeWhile(_ < 10)\n        val lastOdd = odd.drop(10).reverse\n        val\
    \ firstEven = even.takeWhile(_ < 10)\n        val lastEven = even.drop(10).reverse\n\
    \        val firstOddAndLastEven = firstOdd ++ lastEven\n        val firstEvenAndLastOdd\
    \ = firstEven ++ lastOdd\n        val firstOddAndLastOddAndFirstEven = firstOdd\
    \ ++ lastOdd ++ firstEven\n        val firstOddAndLastOddAndFirstEvenAndLastOdd\
    \ = firstOdd ++ lastOdd ++ firstEven ++ lastOdd\n        val firstOddAndLastOddAndFirstEvenAndLastOddAndFirstEven\
    \ = firstOdd ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven\n        val firstOddAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOdd\
    \ = firstOdd ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven ++ lastOdd\n    \
    \    val firstOddAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOddAndFirstEven\
    \ = firstOdd ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven\n\
    \        val firstOddAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOdd\
    \ = firstOdd ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven\
    \ ++ lastOdd\n        val firstOddAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOddAndFirstEven\
    \ = firstOdd ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven\
    \ ++ lastOdd ++ firstEven\n        val firstOddAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOddAndFirstEvenAndLastOdd\
    \ = firstOdd ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven ++ lastOdd ++ firstEven\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk11lqj53.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800037
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for(i <- 0 until numsCopy.size) {\n          \
    \  val num = numsCopy(i)\n            if(num > 10) {\n                val first\
    \ = num / 10\n                val last = num % 10\n                if(first %\
    \ 2 == 1 && last % 2 == 1) {\n                    count += 1\n               \
    \ }\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0ba1ll96.scala:30)\n\tat Problem.main(tmp0ba1ll96.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800038
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjuvaxp86.scala:21)\n\tat Problem.main(tmpjuvaxp86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzk304nls.scala:21)\n\tat Problem.main(tmpzk304nls.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(num => {\n            if (num > 10) {\n            \
    \    if (num % 2 == 0) {\n                    if (numsCopy.head % 2 == 0 && numsCopy.last\
    \ % 2 == 1) {\n                        numsCopy.head += 1\n                  \
    \      numsCopy.last -= 1\n                    }\n                }\n        \
    \    }\n        })\n        numsCopy.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpekd34e4s.scala:18:38 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                        numsCopy.head += \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value += is not a member of Long - did you mean Long.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpekd34e4s.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                        numsCopy.last -= \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value -= is not a member of Long - did you mean Long.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800037
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (i <- 0 until numsCopy.size) {\n         \
    \   if (numsCopy(i) > 10) {\n                if (numsCopy(i) % 2 == 1 && numsCopy(i-1)\
    \ % 2 == 1) {\n                    count += 1\n                }\n           \
    \ }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmpp9gjgkwu.scala:17)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.specialFilter(tmpp9gjgkwu.scala:21)\n\
    \tat Problem$.main(tmpp9gjgkwu.scala:26)\n\tat Problem.main(tmpp9gjgkwu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for(i <- nums) {\n            if(i.toString.length > 1 && i.toString.charAt(0).toInt\
    \ == 1 && i.toString.charAt(i).toInt == 1) {\n                count += 1\n   \
    \         }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz83eyopd.scala:15:93\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(i.toString.length\
    \ > \e[31m1\e[0m && i.toString.charAt(\e[31m0\e[0m).toInt == \e[31m1\e[0m && i.toString.charAt(i).toInt\
    \ == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                                  \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (i : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800038
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10 && x.toString.charAt(0) % 2 != 0 && x.toString.charAt(nums.size - 1)\
    \ % 2 != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 3\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmptjis8mqo.scala:13)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.IterableOnceOps.count(IterableOnce.scala:605)\n\tat scala.collection.IterableOnceOps.count$(IterableOnce.scala:602)\n\
    \tat scala.collection.AbstractIterable.count(Iterable.scala:926)\n\tat Problem$.specialFilter(tmptjis8mqo.scala:13)\n\
    \tat Problem$.main(tmptjis8mqo.scala:17)\n\tat Problem.main(tmptjis8mqo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        var lastDigit = 0\n        var firstDigit = 0\n        for(i <- 0 until\
    \ nums.size) {\n            val num = nums(i)\n            if(num > 10) {\n  \
    \              if(lastDigit % 2 == 1) {\n                    count += 1\n    \
    \            }\n                if(firstDigit % 2 == 1) {\n                  \
    \  count += 1\n                }\n            }\n            lastDigit = num %\
    \ 10\n            firstDigit = num / 10\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6p_7h6v3.scala:26:24\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            lastDigit = num %\
    \ \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    Long\n\e[31m   |\e[0m         \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6p_7h6v3.scala:27:25 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m            firstDigit = num / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Found:    Long\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800039
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 != 0)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsp24_2bi.scala:24)\n\tat Problem.main(tmpsp24_2bi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x > 10 && x.toString.charAt(0).toChar % 2 == 1 && x.toString.charAt(x.toString.length\
    \ - 1).toChar % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (i <- 0 until numsCopy.size) {\n         \
    \   if (numsCopy(i) > 10) {\n                if (numsCopy(i) %% 2 == 1) {\n  \
    \                  if (numsCopy(i) < (numsCopy(i) / 2)) count += 1\n         \
    \       }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcxvu60ky.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (numsCopy(i) %% \e[31m2\e\
    [0m == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value %% is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        numsCopy4.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5yr_is88.scala:21)\n\tat Problem.main(tmp5yr_is88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(_ > 10)\
    \ && (nums.takeWhile(_ % 2 == 1).takeWhile(_ % 2 == 1).forall(x => x % 2 == 1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6uids_j1.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.count(_ > \e[31m10\e[0m) && (nums.takeWhile(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).takeWhile(_ % \e[31m2\e[0m == \e[31m1\e[0m).forall(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value && is not a member\
    \ of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659800037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(num\
    \ => num > 10 && num.first % 2 == 1 && num.last % 2 == 1).length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi50c0_tq.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.filter(\e[36mnum\e[0m => num > \e[31m10\e\
    [0m && num.first % \e[31m2\e[0m == \e[31m1\e[0m && num.last % \e[31m2\e[0m ==\
    \ \e[31m1\e[0m).length\n\e[31m\e[31m   |\e[0m                                \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                     value\
    \ first is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi50c0_tq.scala:13:65\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        nums.filter(\e[36mnum\e\
    [0m => num > \e[31m10\e[0m && num.first % \e[31m2\e[0m == \e[31m1\e[0m && num.last\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \                                               ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                      value last is not a member of Long\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800039
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for (i <- 0 until numsCopy.size) {\n         \
    \   val num = numsCopy(i)\n            if (num > 10) {\n                if (num\
    \ % 2 == 1 && num % 10 == 1) {\n                    count += 1\n             \
    \   }\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc7fj8fsu.scala:27)\n\tat Problem.main(tmpc7fj8fsu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 != 0)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsp24_2bi.scala:24)\n\tat Problem.main(tmpsp24_2bi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        var lastDigit = 0\n        var firstDigit = 0\n        for (i <- nums)\
    \ {\n            if (i > 10) {\n                count += 1\n                lastDigit\
    \ = i\n            } else {\n                if (i % 2 == 0) {\n             \
    \       firstDigit = i\n                }\n            }\n        }\n        if\
    \ (firstDigit == 0 && lastDigit == 0) {\n            count += 1\n        }\n \
    \       count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphn82qtzl.scala:19:28\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                lastDigit = i\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Found:    (i : Long)\n\e[31m   |\e[0m                \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphn82qtzl.scala:22:33 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                    firstDigit = i\n\e[31m\e[31m   |\e[0m            \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \ Found:    (i : Long)\n\e[31m   |\e[0m                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800039
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        var firstOdd = 0\n        var lastOdd = 0\n        for (i <- nums) {\n\
    \            if (i > 10) {\n                count += 1\n                if (i\
    \ % 2 == 1) {\n                    firstOdd += 1\n                }\n        \
    \        if (i % 2 == 0) {\n                    lastOdd += 1\n               \
    \ }\n            }\n        }\n        (count * 2l) + (firstOdd * 1l) + (lastOdd\
    \ * 1l)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpando9k9_.scala:31)\n\tat Problem.main(tmpando9k9_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(x => {\n            if (x > 10 && numsCopy.head % 2\
    \ == 1 && numsCopy.last % 2 == 1) numsCopy.remove(x)\n        })\n        numsCopy.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphuiyg592.scala:15:85 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (x > \e[31m10\e[0m && numsCopy.head\
    \ % \e[31m2\e[0m == \e[31m1\e[0m && numsCopy.last % \e[31m2\e[0m == \e[31m1\e\
    [0m) numsCopy.remove(x)\n\e[31m\e[31m   |\e[0m                               \
    \                                             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue remove is not a member of List[Long] - did you mean numsCopy.reduce?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800039
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2 ==\
    \ 0)\n        numsCopy5.length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyramt__b.scala:22)\n\tat Problem.main(tmpyramt__b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800039
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(x => x > 10 && numsCopy.head % 2 == 1 && numsCopy.last\
    \ % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqh2mduqa.scala:18)\n\tat Problem.main(tmpqh2mduqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 1).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdzkkw6ey.scala:19)\n\tat Problem.main(tmpdzkkw6ey.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(x => {\n            if (x > 10 && x % 2 == 1 && x %\
    \ 2 == 0) {\n                numsCopy.remove(x)\n            }\n        })\n \
    \       numsCopy.size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcp9igwx2.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                numsCopy.remove(x)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a\
    \ member of List[Long] - did you mean numsCopy.reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1659800027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 == 0)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpieq9lmhb.scala:23)\n\tat Problem.main(tmpieq9lmhb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(x => x > 10).count(x => x.toString.charAt(0).toInt ==\
    \ 1 && (x.toString.charAt(1).toInt == 1 || x.toString.charAt(1).toInt == 3))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuyzbo_xz.scala:18)\n\tat Problem.main(tmpuyzbo_xz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        for(i <- 0 until numsCopy.size) {\n          \
    \  val num = numsCopy(i)\n            if(num > 10) {\n                if(num %\
    \ 2 == 1 && num % 2 == 0) {\n                    count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq46le79p.scala:27)\n\tat Problem.main(tmpq46le79p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp80wtil9x.scala:21)\n\tat Problem.main(tmp80wtil9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        var firstOdd = 0\n        var lastOdd = 0\n  \
    \      var firstEven = 0\n        var lastEven = 0\n        for (i <- 0 until\
    \ numsCopy.size) {\n            val num = numsCopy(i)\n            if (num > 10)\
    \ {\n                count += 1\n                if (num % 2 == 0) {\n       \
    \             firstEven += 1\n                } else {\n                    firstOdd\
    \ += 1\n                }\n                if (num % 2 == 0) {\n             \
    \       lastEven += 1\n                } else {\n                    lastOdd +=\
    \ 1\n                }\n            }\n        }\n        (count * 2)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpryfk4ca8.scala:39)\n\tat Problem.main(tmpryfk4ca8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjuvaxp86.scala:21)\n\tat Problem.main(tmpjuvaxp86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp80wtil9x.scala:21)\n\tat Problem.main(tmp80wtil9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj99_b12o.scala:18)\n\tat Problem.main(tmpj99_b12o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzk304nls.scala:21)\n\tat Problem.main(tmpzk304nls.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(num\
    \ => num > 10 && num % 2 == 1 && num % 2 == 0).length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp21cfsagv.scala:17)\n\tat Problem.main(tmp21cfsagv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        var firstOdd = 0\n        var lastOdd = 0\n  \
    \      var firstEven = 0\n        var lastEven = 0\n        for(i <- 0 until numsCopy.size)\
    \ {\n            val num = numsCopy(i)\n            if(num > 10) {\n         \
    \       if(num % 2 == 0) {\n                    firstEven = num\n            \
    \    } else {\n                    lastEven = num\n                }\n       \
    \     } else {\n                if(num % 2 == 0) {\n                    firstOdd\
    \ = num\n                } else {\n                    lastOdd = num\n       \
    \         }\n            }\n        }\n        count = firstOdd + lastOdd + firstEven\
    \ + lastEven\n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgawmmjbe.scala:23:32\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                    firstEven\
    \ = num\n\e[31m\e[31m   |\e[0m                                ^^^\e[0m\n\e[31m\
    \   |\e[0m                                Found:    (num : Long)\n\e[31m   |\e\
    [0m                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpgawmmjbe.scala:25:31 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    lastEven = num\n\e[31m\e[31m   |\e\
    [0m                               ^^^\e[0m\n\e[31m   |\e[0m                  \
    \             Found:    (num : Long)\n\e[31m   |\e[0m                        \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgawmmjbe.scala:29:31\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                    firstOdd\
    \ = num\n\e[31m\e[31m   |\e[0m                               ^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    (num : Long)\n\e[31m   |\e\
    [0m                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpgawmmjbe.scala:31:30 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    lastOdd = num\n\e[31m\e[31m   |\e\
    [0m                              ^^^\e[0m\n\e[31m   |\e[0m                   \
    \           Found:    (num : Long)\n\e[31m   |\e[0m                          \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgawmmjbe.scala:35:14\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m        count = firstOdd + lastOdd\
    \ + firstEven + lastEven\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available w"
  stdout: ''
  timestamp: 1659800040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        var lastOdd = false\n        var firstOdd = false\n\
    \        var lastEven = false\n        var firstEven = false\n        var lastEvenOdd\
    \ = false\n        var firstEvenOdd = false\n        var lastOddEven = false\n\
    \        var firstOddEven = false\n        var lastOddOdd = false\n        var\
    \ firstOddOdd = false\n        var lastEvenOddEven = false\n        var firstEvenOddEven\
    \ = false\n        var lastEvenOddOdd = false\n        var firstEvenOddOdd = false\n\
    \        var lastOddEvenOdd = false\n        var firstOddEvenOdd = false\n   \
    \     var lastOddOddEven = false\n        var firstOddOddEven = false\n      \
    \  var lastEvenOddEvenOdd = false\n        var firstEvenOddEvenOdd = false\n \
    \       var lastEvenOddOddEven = false\n        var firstEvenOddOddEven = false\n\
    \        var lastOddEvenOddEven = false\n        var firstOddEvenOddEven = false\n\
    \        var lastOddOddEvenOdd = false\n        var firstOddOddEvenOdd = false\n\
    \        var lastEvenOddEvenOddEven = false\n        var firstEvenOddEvenOddEven\
    \ = false\n        var lastEvenOddOddOdd = false\n        var firstEvenOddOddOdd\
    \ = false\n        var lastOddEvenOddOdd = false\n        var firstOddEvenOddOdd\
    \ = false\n        var lastOddOddEvenOdd = false\n        var firstOddOddEvenOdd\
    \ = false\n        var lastEvenOddEvenOddEven = false\n        var firstEvenOddEvenOddEven\
    \ = false\n        var lastEvenOddOddEvenOdd = false\n        var firstEvenOddOddEvenOdd\
    \ = false\n        var lastOddEvenOddEvenOdd = false\n        var firstOddEvenOddEvenOdd\
    \ = false\n        var lastOddOddEvenOddEven = false\n        var firstOddOddEvenOddEven\
    \ = false\n        var lastEvenOddEvenOddEvenOdd = false\n        var firstEvenOddEvenOddEvenOdd\
    \ = false\n        var lastOddEvenOddOdd = false\n        var firstOddEvenOddOdd\
    \ = false\n        var lastOddOddEvenOdd = false\n        var firstOddOddEvenOdd\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp44ocg8wo.scala:62:32 ---------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m        \e[33mvar\e[0m \e[36mfirstOddOddEvenOdd\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44ocg8wo.scala:47:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mlastOddOddEvenOdd\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlastOddOddEvenOdd is already\
    \ defined as \e[33mvariable\e[0m \e[35mlastOddOddEvenOdd\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44ocg8wo.scala:48:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m48 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mfirstOddOddEvenOdd\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfirstOddOddEvenOdd is\
    \ already defined as \e[33mvariable\e[0m \e[35mfirstOddOddEvenOdd\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp44ocg8wo.scala:49:12 ---------------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m        \e[33mvar\e[0m \e[36mlastEvenOddEvenOddEven\e[0m = \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mlastEvenOddEvenOddEven is already defined as \e[33mvariable\e[0m\
    \ \e[35mlastEvenOddEvenOddEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44ocg8wo.scala:50:12 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mvar\e[0m \e[36mfirstEvenOddEvenOddEven\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstEv"
  stdout: ''
  timestamp: 1659800039
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10 && x.toString.take(1).forall(x => x % 2 == 1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphtwejv1h.scala:17)\n\tat Problem.main(tmphtwejv1h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800029
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10) {\n                if (i %\
    \ 2 == 1) {\n                    if (i % 2 == 0) {\n                        if\
    \ (i % 2 == 1) {\n                            if (i % 2 == 0) {\n            \
    \                    count += 1\n                            }\n             \
    \           }\n                    }\n                }\n            }\n     \
    \   }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpclfpdoot.scala:31)\n\tat Problem.main(tmpclfpdoot.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800014
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10) {\n                if (i %\
    \ 2 == 1) {\n                    if (i % 2 != 0) {\n                        count\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \       count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq1xumvhk.scala:28)\n\tat Problem.main(tmpq1xumvhk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x > 10 && x.toString.substring(0,1).toInt == 1 && x.toString.substring(0,2).toInt\
    \ == 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk0mhe7h0.scala:17)\n\tat Problem.main(tmpk0mhe7h0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(x => x > 10 && numsCopy.head % 2 == 1 && numsCopy.last\
    \ % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqh2mduqa.scala:18)\n\tat Problem.main(tmpqh2mduqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        var lastDigit = 0\n        var firstDigit = 0\n        for (i <- nums)\
    \ {\n            if (i > 10) {\n                count += 1\n                lastDigit\
    \ = i\n            } else {\n                if (i % 2 == 1) {\n             \
    \       firstDigit = i\n                }\n            }\n        }\n        if\
    \ (firstDigit == 0 && lastDigit == 0) {\n            count += 1\n        }\n \
    \       count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfa6jbg64.scala:19:28\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                lastDigit = i\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Found:    (i : Long)\n\e[31m   |\e[0m                \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfa6jbg64.scala:22:33 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                    firstDigit = i\n\e[31m\e[31m   |\e[0m            \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \ Found:    (i : Long)\n\e[31m   |\e[0m                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(x => {\n            if (x > 10) {\n                if\
    \ (x % 2 == 1 && x % 10 == 1) {\n                    numsCopy.remove(x)\n    \
    \            }\n            }\n        })\n        numsCopy.size\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7gyfh59r.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                    numsCopy.remove(x)\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove\
    \ is not a member of List[Long] - did you mean numsCopy.reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1659800042
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10 && x.toString.charAt(0).toInt == 1 && x.toString.charAt(x.toString.length-1).toInt\
    \ == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqqw_hqvu.scala:17)\n\tat Problem.main(tmpqqw_hqvu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj99_b12o.scala:18)\n\tat Problem.main(tmpj99_b12o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        numsCopy3.size\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxuu_dd44.scala:20)\n\tat Problem.main(tmpxuu_dd44.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(_ >\
    \ 10).filter(_ % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsoi9zlts.scala:18)\n\tat Problem.main(tmpsoi9zlts.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_ % 2 != 0)\n        numsCopy4.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6upxbqg.scala:22)\n\tat Problem.main(tmpb6upxbqg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x > 10 && x % 2 != 0 && x % 2 != 1).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf0vneh3w.scala:17)\n\tat Problem.main(tmpf0vneh3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(n => {\n            if (n > 10 && n % 2 == 1 && n %\
    \ 2 == 0) {\n                numsCopy.remove(n)\n            }\n        })\n \
    \       numsCopy.size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpht9afqmq.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                numsCopy.remove(n)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a\
    \ member of List[Long] - did you mean numsCopy.reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1659799992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        var firstOdd = 0\n        var lastOdd = 0\n        for (i <- nums) {\n\
    \            if (i > 10) {\n                count += 1\n                if (i\
    \ % 2 == 1) {\n                    firstOdd += 1\n                }\n        \
    \        if (i % 2 == 0) {\n                    lastOdd += 1\n               \
    \ }\n            }\n        }\n        if (firstOdd > 0 && lastOdd > 0) {\n  \
    \          count += firstOdd * lastOdd\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfm4dkdig.scala:34)\n\tat Problem.main(tmpfm4dkdig.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800042
