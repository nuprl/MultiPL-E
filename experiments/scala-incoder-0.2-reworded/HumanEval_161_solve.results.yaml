language: scala
name: HumanEval_161_solve
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        val chars = s.toCharArray\n \
    \       val len = chars.length\n        var i = 0\n        while (i < len) {\n\
    \            val c = chars(i)\n            if (c.isLetter) {\n               \
    \ val lower = c.toLower\n                val upper = c.toUpper\n             \
    \   if (lower != upper) {\n                    result.append(lower)\n        \
    \            result.append(upper)\n                } else {\n                \
    \    result.append(c)\n                }\n            } else {\n             \
    \   result.append(c)\n            }\n            i += 1\n        }\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc2hy5ggt.scala:40)\n\tat Problem.main(tmpc2hy5ggt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z'){\n                result.append((s.charAt(i) - 'A').toString)\n    \
    \        }\n            else{\n                result.append(s.charAt(i))\n  \
    \          }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbfx8h59a.scala:32)\n\tat Problem.main(tmpbfx8h59a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append(c.toUpperCase)\n            }else if(c == 'b' || c\
    \ == 'B'){\n                result.append(c.toLowerCase)\n            }else{\n\
    \                result.append(c)\n            }\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnv3as5fl.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpnv3as5fl.scala:23:32 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                result.append(c.toLowerCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toLowerCase is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val reversed = chars.reverse\n   \
    \     val result = reversed.foldLeft(\"\") { (result, c) => if (c.isLetter) c.toUpperCase(c)\
    \ else c.toLowerCase(c) }\n        if (chars.isEmpty) result\n        else result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdk5d3ijs.scala:19:78 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = reversed.foldLeft(\e\
    [31m\"\"\e[0m) { (\e[36mresult\e[0m, \e[36mc\e[0m) => \e[33mif\e[0m (c.isLetter)\
    \ c.toUpperCase(c) \e[33melse\e[0m c.toLowerCase(c) }\n\e[31m\e[31m   |\e[0m \
    \                                                                           ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdk5d3ijs.scala:19:100\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = reversed.foldLeft(\e[31m\"\"\e[0m) { (\e[36mresult\e[0m, \e\
    [36mc\e[0m) => \e[33mif\e[0m (c.isLetter) c.toUpperCase(c) \e[33melse\e[0m c.toLowerCase(c)\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toLowerCase is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val reversed = new mutable.ListBuffer[Char]()\n\
    \        val result = new mutable.ListBuffer[Char]()\n        chars.foreach(c\
    \ => {\n            if (c.isLetter) reversed.add(c)\n            else result.add(c)\n\
    \        })\n        if (reversed.isEmpty) s.reverse\n        else result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_f7oijr.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_f7oijr.scala:19:25\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mChar\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793900
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for (i <- 0 until s.length)\n\
    \            if (s(i) >= 'a' && s(i) <= 'z')\n                result.append(s(i).toUpper\
    \ + s(i).toLower)\n            else\n                result.append(s(i))\n   \
    \     return result.toString\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfsu6mck3.scala:26)\n\tat Problem.main(tmpfsu6mck3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append(\"A\")\n            }else if(c == 'b' || c == 'B'){\n\
    \                result.append(\"B\")\n            }else if(c == 'c' || c == 'C'){\n\
    \                result.append(\"C\")\n            }else if(c == 'd' || c == 'D'){\n\
    \                result.append(\"D\")\n            }else if(c == 'e' || c == 'E'){\n\
    \                result.append(\"E\")\n            }else if(c == 'f' || c == 'F'){\n\
    \                result.append(\"F\")\n            }else if(c == 'g' || c == 'G'){\n\
    \                result.append(\"G\")\n            }else if(c == 'h' || c == 'H'){\n\
    \                result.append(\"H\")\n            }else if(c == 'i' || c == 'I'){\n\
    \                result.append(\"I\")\n            }else if(c == 'j' || c == 'J'){\n\
    \                result.append(\"J\")\n            }else if(c == 'k' || c == 'K'){\n\
    \                result.append(\"K\")\n            }else if(c == 'l' || c == 'L'){\n\
    \                result.append(\"L\")\n            }else if(c == 'm' || c == 'M'){\n\
    \                result.append(\"M\")\n            }else if(c == 'n' || c == 'N'){\n\
    \                result.append(\"N\")\n            }else if(c == 'o' || c == 'O'){\n\
    \                result.append(\"O\")\n            }else if(c == 'p' || c == 'P'){\n\
    \                result.append(\"P\")\n            }else if(c == 'q' || c == 'Q'){\n\
    \                result.append(\"Q\")\n            }else if(c == 'r' || c == 'R'){\n\
    \                result.append(\"R\")\n            }else if(c == 's' || c == 'S'){\n\
    \                result.append(\"S\")\n            }else if(c == 't' || c == 'T'){\n\
    \                result.append(\"T\")\n            }else if(c == 'u' || c == 'U'){\n\
    \                result.append(\"U\")\n            }else if(c == 'v' || c == 'V'){\n\
    \                result.append(\"V\")\n            }else if(c == 'w' || c == 'W'){\n\
    \                result.append(\"W\")\n            }else if(c == 'x' || c == 'X'){\n\
    \                result.append(\"X\")\n            }else if(c == 'y' || c == 'Y'){\n\
    \                result.append(\"Y\")\n            }else if(c == 'z' || c == 'Z'){\n\
    \                result.\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfrz_47bk.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpfrz_47bk.scala:85:0 ----------------------------\e[0m\e[0m\n\e[31m85\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[33m\e[33m-- Warning: /tmp/tmpfrz_47bk.scala:73:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m73 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659793901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpalf49ab2.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result.append((s.charAt(i) - \e[31m'a'\e\
    [0m).toUpper + s.charAt(i).toLower)\n\e[31m\e[31m   |\e[0m                   \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \              value toUpper is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659793903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        val chars = s.toCharArray\n \
    \       for(i <- 0 until chars.length){\n            val c = chars(i)\n      \
    \      if(c.isLetter){\n                val l = c.toLower\n                val\
    \ u = c.toUpper\n                val l = if(l == u) l else l + \"@\" + u\n   \
    \             result.append(l)\n            }\n            else{\n           \
    \     result.append(c)\n            }\n        }\n        result.toString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4d3dfd14.scala:24:20 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36ml\e[0m = \e[33mif\e\
    [0m(l == u) l \e[33melse\e[0m l + \e[31m\"@\"\e[0m + u\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml\
    \ is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659793900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            val isLetter = c.isLetter\n    \
    \        val isUpper = c.toUpper == c\n            val isLower = c.toLower ==\
    \ c\n            val isUpperOrLower = isUpper || isLower\n            val isLetterOrNotLetter\
    \ = isLetter && !isLetter\n            val isLetterOrNotLetterOrNotLetter = isLetterOrNotLetter\
    \ && !isLetterOrNotLetter\n            val isLetterOrNotLetterOrNotLetterOrNotLetter\
    \ = isLetterOrNotLetterOrNotLetter && !isLetterOrNotLetterOrNotLetter\n      \
    \      val isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter = isLetterOrNotLetterOrNotLetterOrNotLetter\
    \ && !isLetterOrNotLetterOrNotLetterOrNotLetter\n            val isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ = isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter && !isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\n\
    \            val isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ = isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter && !isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\n\
    \            val isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ = isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ && !isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\n\
    \            val isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ = isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ && !isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\n\
    \            val isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ = isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ && !isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOr\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpflb54yl4.scala:46:0 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpflb54yl4.scala:32:227\
    \ -----------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e[0m\
    \ \e[36misLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\e\
    [0m = isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetter\
    \ && !isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOr\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \                                                                            \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: isLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOrNotLetterOr\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpflb54yl4.scala:45:1\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpflb54yl4.scala:34:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m34 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659793902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = s.toUpperCase\n        val reversed = result.reverse\n \
    \       val noLetters = reversed.replaceAll(\"[^a-zA-Z]\", \"\")\n        if (noLetters.isEmpty)\
    \ result else noLetters\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbvr2_tpw.scala:23)\n\tat Problem.main(tmpbvr2_tpw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgd1o4jja.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpalf49ab2.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result.append((s.charAt(i) - \e[31m'a'\e\
    [0m).toUpper + s.charAt(i).toLower)\n\e[31m\e[31m   |\e[0m                   \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \              value toUpper is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659793903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val strList = s.toList\n        val strList2 = strList.map(x => x.toUpperCase)\n\
    \        val strList3 = strList.map(x => x.toLowerCase)\n        val strList4\
    \ = strList.map(x => x.toUpperCase)\n        val strList5 = strList.map(x => x.toLowerCase)\n\
    \        val strList6 = strList.map(x => x.toUpperCase)\n        val strList7\
    \ = strList.map(x => x.toLowerCase)\n        val strList8 = strList.map(x => x.toUpperCase)\n\
    \        val strList9 = strList.map(x => x.toLowerCase)\n        val strList10\
    \ = strList.map(x => x.toUpperCase)\n        val strList11 = strList.map(x =>\
    \ x.toLowerCase)\n        val strList12 = strList.map(x => x.toUpperCase)\n  \
    \      val strList13 = strList.map(x => x.toLowerCase)\n        val strList14\
    \ = strList.map(x => x.toUpperCase)\n        val strList15 = strList.map(x =>\
    \ x.toLowerCase)\n        val strList16 = strList.map(x => x.toUpperCase)\n  \
    \      val strList17 = strList.map(x => x.toLowerCase)\n        val strList18\
    \ = strList.map(x => x.toUpperCase)\n        val strList19 = strList.map(x =>\
    \ x.toLowerCase)\n        val strList20 = strList.map(x => x.toUpperCase)\n  \
    \      val strList21 = strList.map(x => x.toLowerCase)\n        val strList22\
    \ = strList.map(x => x.toUpperCase)\n        val strList23 = strList.map(x =>\
    \ x.toLowerCase)\n        val strList24 = strList.map(x => x.toUpperCase)\n  \
    \      val strList25 = strList.map(x => x.toLowerCase)\n        val strList26\
    \ = strList.map(x => x.toUpperCase)\n        val strList27 = strList.map(x =>\
    \ x.toLowerCase)\n        val strList28 = strList.map(x => x.toUpperCase)\n  \
    \      val strList29 = strList.map(x => x.toLowerCase)\n        val strList30\
    \ = strList.map(x => x.toUpperCase)\n        val strList31 = strList.map(x =>\
    \ x.toLowerCase)\n        val strList32 = strList.map(x => x.toUpperCase)\n  \
    \      val strList33 = strList.map(x => x.toLowerCase)\n        val strList34\
    \ = strList.map(x => x.toUpperCase)\n        val str\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnzqtdg6a.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnzqtdg6a.scala:18:42\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mstrList2\e[0m = strList.map(\e[36mx\e[0m => x.toUpperCase)\n\e[31m\e[31m \
    \  |\e[0m                                        ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                               value toUpperCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnzqtdg6a.scala:19:42 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mstrList3\e[0m = strList.map(\e\
    [36mx\e[0m => x.toLowerCase)\n\e[31m\e[31m   |\e[0m                          \
    \              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpnzqtdg6a.scala:20:42 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mstrList4\e[0m = strList.map(\e[36mx\e[0m\
    \ => x.toUpperCase)\n\e[31m\e[31m   |\e[0m                                   \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpnzqtdg6a.scala:21:42 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mstrList5\e[0m = strList.map(\e[36mx\e[0m => x.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnzqtdg6a.scala:22:42\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mstrList6\e[0m = strList.map(\e[36mx\e[0m => x.toUpperCase)\n\e[31m\e[31m \
    \  |\e[0m                                        ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                               value toUpperCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnzqtdg6a.scala:23:42 -----------"
  stdout: ''
  timestamp: 1659793905
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z'){\n                result.append((s.charAt(i) - 'A').toString)\n    \
    \        }\n            else{\n                result.append(s.charAt(i))\n  \
    \          }\n        }\n        result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpikkat6xf.scala:29:15\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        result.reverse\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    StringBuilder\n\
    \e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                result.append((s.charAt(i)\
    \ - 'a').toUpperCase)\n            }\n            else if(s.charAt(i) >= 'A' &&\
    \ s.charAt(i) <= 'Z'){\n                result.append((s.charAt(i) - 'A').toUpperCase)\n\
    \            }\n            else{\n                result.append(s.charAt(i))\n\
    \            }\n        }\n        return result.toString()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpec7vxmlg.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result.append((s.charAt(i) - \e[31m'a'\e\
    [0m).toUpperCase)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value toUpperCase is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpec7vxmlg.scala:23:50\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                result.append((s.charAt(i)\
    \ - \e[31m'A'\e[0m).toUpperCase)\n\e[31m\e[31m   |\e[0m                      \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               value toUpperCase is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659793903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\n\
    \            chars += s.charAt(i)\n        chars.toList.reverse.foldLeft(\"\"\
    ){\n            case (acc, c) => if (c.isLetter) acc + c.toUpperCase(c) else acc\
    \ + c.toLowerCase\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxzp4o7bb.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793900
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper\
    \ + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgx7baw7r.scala:26)\n\tat Problem.main(tmpgx7baw7r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (chars.contains(c)) {\n              \
    \  chars.remove(c)\n            } else {\n                chars += c\n       \
    \     }\n        }\n        if (chars.isEmpty) {\n            result.append(s)\n\
    \        } else {\n            chars.foreach { c =>\n                val upper\
    \ = c.toUpperCase\n                val lower = c.toLowerCase\n               \
    \ if (upper == lower) {\n                    result.append(upper)\n          \
    \      } else {\n                    result.append(lower)\n                }\n\
    \            }\n        }\n        result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6036oed4.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793900
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_e0hk5ed.scala:26)\n\tat Problem.main(tmp_e0hk5ed.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else chars += s.charAt(i).toUpper\n\n        chars.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmposrio76c.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c.isLetter){\n              \
    \  val l = c.toUpperCase\n                val u = c.toLowerCase\n            \
    \    result.append((if(u == l) u else l))\n            }\n            else{\n\
    \                result.append(c)\n            }\n        }\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvnjkiw73.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36ml\e[0m = c.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpvnjkiw73.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mu\e[0m = c.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E051] Reference Error: /tmp/tmpvnjkiw73.scala:23:23 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                result.append((\e[33mif\e[0m(u == l)\
    \ u \e[33melse\e[0m l))\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mAmbiguous overload. The overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mappend\e[0m in \e[33mclass\e[0m \e[35mStringBuilder\e[0m with types\n\
    \e[31m   |\e[0m (x: Char): StringBuilder\n\e[31m   |\e[0m (x: Double): StringBuilder\n\
    \e[31m   |\e[0m (x: Float): StringBuilder\n\e[31m   |\e[0m (x: Long): StringBuilder\n\
    \e[31m   |\e[0m (x: Int): StringBuilder\n\e[31m   |\e[0m (x: Short): StringBuilder\n\
    \e[31m   |\e[0m (x: Byte): StringBuilder\n\e[31m   |\e[0m (x: Boolean): StringBuilder\n\
    \e[31m   |\e[0m (s: StringBuilder): StringBuilder\n\e[31m   |\e[0m (cs: CharSequence):\
    \ StringBuilder\n\e[31m   |\e[0m (s: String): StringBuilder\n\e[31m   |\e[0m (x:\
    \ Any): StringBuilder\n\e[31m   |\e[0mall match arguments ((u : <error value toLowerCase\
    \ is not a member of Char>) | \n\e[31m   |\e[0m  (l : <error value toUpperCase\
    \ is not a member of Char>))\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val strList = s.toList\n        strList.foldLeft(\"\"){ (result, c) =>\n\
    \            val isLetter = c.isLetter\n            if (isLetter) {\n        \
    \        val upperCase = c.toUpperCase\n                val lowerCase = c.toLowerCase\n\
    \                if (strList.contains(lowerCase)) {\n                    result\
    \ + lowerCase\n                } else if (strList.contains(upperCase)) {\n   \
    \                 result + upperCase\n                } else {\n             \
    \       result + c\n                }\n            } else {\n                result\
    \ + c\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbkut0zey.scala:21:34 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mupperCase\e[0m =\
    \ c.toUpperCase\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbkut0zey.scala:22:34\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e\
    [0m \e[36mlowerCase\e[0m = c.toLowerCase\n\e[31m\e[31m   |\e[0m              \
    \                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659793903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new mutable.StringBuilder\n        for(i <- 0 until s.length)\n\
    \        {\n            val c = s.charAt(i)\n            if(c.isLetter)\n    \
    \        {\n                val lower = c.toLower\n                val upper =\
    \ c.toUpper\n                if(lower == upper)\n                {\n         \
    \           result.append(lower)\n                }\n                else\n  \
    \              {\n                    result.append(upper)\n                }\n\
    \            }\n            else\n            {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqi1o1qin.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c.isLetter) result.append(c.toUpperCase)\n\
    \            else result.append(c)\n        }\n        result.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe1zyaji7.scala:20:43 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(c.isLetter) result.append(c.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659793909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val reversed = new mutable.ListBuffer[Char]()\n\
    \        val result = new mutable.ListBuffer[Char]()\n        for(i <- 0 until\
    \ chars.length){\n            val c = chars(i)\n            if(c == 'A' || c ==\
    \ 'a'){\n                reversed.add(c)\n            }else if(c == 'B' || c ==\
    \ 'b'){\n                reversed.add(c)\n            }else if(c == 'C' || c ==\
    \ 'c'){\n                reversed.add(c)\n            }else if(c == 'D' || c ==\
    \ 'd'){\n                reversed.add(c)\n            }else if(c == 'E' || c ==\
    \ 'e'){\n                reversed.add(c)\n            }else if(c == 'F' || c ==\
    \ 'f'){\n                reversed.add(c)\n            }else if(c == 'G' || c ==\
    \ 'g'){\n                reversed.add(c)\n            }else if(c == 'H' || c ==\
    \ 'h'){\n                reversed.add(c)\n            }else if(c == 'I' || c ==\
    \ 'i'){\n                reversed.add(c)\n            }else if(c == 'J' || c ==\
    \ 'j'){\n                reversed.add(c)\n            }else if(c == 'K' || c ==\
    \ 'k'){\n                reversed.add(c)\n            }else if(c == 'L' || c ==\
    \ 'l'){\n                reversed.add(c)\n            }else if(c == 'M' || c ==\
    \ 'm'){\n                reversed.add(c)\n            }else if(c == 'N' || c ==\
    \ 'n'){\n                reversed.add(c)\n            }else if(c == 'O' || c ==\
    \ 'o'){\n                reversed.add(c)\n            }else if(c == 'P' || c ==\
    \ 'p'){\n                reversed.add(c)\n            }else if(c == 'Q' || c ==\
    \ 'q'){\n                reversed.add(c)\n            }else if(c == 'R' || c ==\
    \ 'r'){\n                reversed.add(c)\n            }else if(c == 'S' || c ==\
    \ 's'){\n                reversed.add(c)\n            }else if(c == 'T' || c ==\
    \ 't'){\n                reversed.add(c)\n            }else if(c == 'U' || c ==\
    \ 'u'){\n                reversed.add(c)\n            }else if(c == 'V' || c ==\
    \ 'v'){\n                reversed.add(c)\n            }else if(c == 'W' || c ==\
    \ 'w'){\n                reversed.add(c)\n            }else if(c == 'X' || c ==\
    \ 'x'){\n                reversed.add(c)\n            }else if(c == 'Y' || c ==\
    \ 'y'){\n                reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4w65p5l_.scala:85:0 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4w65p5l_.scala:18:27\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mreversed\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mChar\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4w65p5l_.scala:19:25 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4w65p5l_.scala:71:16\
    \ ------------------------\e[0m\e[0m\n\e[31m71 |\e[0m                reverse\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: reverse\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp4w65p5l_.scala:73:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m73 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1659793907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val result = new StringBuilder\n \
    \       val reversed = new mutable.ListBuffer[Char]()\n        val reversedChars\
    \ = new mutable.ListBuffer[Char]()\n        val charsCount = chars.length\n  \
    \      for(i <- 0 until charsCount) {\n            val c = chars(i)\n        \
    \    if(c == 'a') {\n                reversed.add(c)\n                reversedChars.add(c)\n\
    \            } else if(c == 'A') {\n                reversed.add(c)\n        \
    \        reversedChars.add(c)\n            } else if(c == '#') {\n           \
    \     reversed.add(c)\n                reversedChars.add(c)\n            } else\
    \ if(c == '@') {\n                reversed.add(c)\n                reversedChars.add(c)\n\
    \            } else if(c == 'C') {\n                reversed.add(c)\n        \
    \        reversedChars.add(c)\n            } else if(c == 'a' || c == 'A' || c\
    \ == '#' || c == '@' || c == 'C') {\n                reversed.add(c)\n       \
    \         reversedChars.add(c)\n            } else {\n                reversed.add(c)\n\
    \                reversedChars.add(c)\n            }\n        }\n        for(i\
    \ <- 0 until charsCount) {\n            val c = chars(i)\n            if(c ==\
    \ 'a' || c == 'A' || c == '#' || c == '@' || c == 'C') {\n                result.append((reversedChars.toList.reverse.toList))\n\
    \            } else {\n                result.append(c)\n            }\n     \
    \   }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgwcbo8mf.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgwcbo8mf.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mreversedChars\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mChar\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793907
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuxic02f3.scala:26)\n\tat Problem.main(tmpuxic02f3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n     \
    \           chars += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr687six0.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793907
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val result = new StringBuilder\n \
    \       for(i <- 0 until chars.length){\n            val c = chars(i)\n      \
    \      if(c.isLetter){\n                val lower = c.toLower\n              \
    \  val upper = c.toUpper\n                if(lower < upper){\n               \
    \     result.append(upper)\n                }else{\n                    result.append(lower)\n\
    \                }\n            }else{\n                result.append(c)\n   \
    \         }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5lk6mle_.scala:36)\n\tat Problem.main(tmp5lk6mle_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val strList = s.toList\n        strList.foldLeft(\"\") { (str, c) =>\n\
    \            if (c.isLetter) str + c.toUpperCase\n            else str + c\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb3wcsoye.scala:19:36 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (c.isLetter) str + c.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659793911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = s.toUpperCase\n        val chars = result.toCharArray\n\
    \        chars.foreach(c => {\n            val index = chars.indexOf(c)\n    \
    \        if (index >= 0) {\n                chars(index) = chars(index).swap\n\
    \            }\n        })\n        result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmr7_7cfj.scala:22:44 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                chars(index) = chars(index).swap\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value swap is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for (c <- s) {\n    \
    \        if (c.isLetter) {\n                chars += c.toUpperCase\n         \
    \   } else {\n                chars += c.toLowerCase\n            }\n        }\n\
    \        if (chars.isEmpty) {\n            s.reverse\n        } else {\n     \
    \       chars.reverse\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3rppz1j.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            chars += s.charAt(i)\n        }\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk5hocuur.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hza0fl8.scala:26)\n\tat Problem.main(tmp9hza0fl8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val result = new mutable.ListBuffer[String]()\n\
    \        val len = chars.length\n        for(i <- 0 until len){\n            if(chars(i)\
    \ >= 'a' && chars(i) <= 'z'){\n                result.append((chars(i) - 'a').toString)\n\
    \            }\n            else if(chars(i) >= 'A' && chars(i) <= 'Z'){\n   \
    \             result.append((chars(i) - 'A').toString)\n            }\n      \
    \      else{\n                result.append(chars(i))\n            }\n       \
    \ }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"\
    4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjvpeiqvp.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append(\"A\")\n            }else if(c == 'b' || c == 'B'){\n\
    \                result.append(\"B\")\n            }else if(c == 'c' || c == 'C'){\n\
    \                result.append(\"C\")\n            }else if(c == 'd' || c == 'D'){\n\
    \                result.append(\"D\")\n            }else if(c == 'e' || c == 'E'){\n\
    \                result.append(\"E\")\n            }else if(c == 'f' || c == 'F'){\n\
    \                result.append(\"F\")\n            }else if(c == 'g' || c == 'G'){\n\
    \                result.append(\"G\")\n            }else if(c == 'h' || c == 'H'){\n\
    \                result.append(\"H\")\n            }else if(c == 'i' || c == 'I'){\n\
    \                result.append(\"I\")\n            }else if(c == 'j' || c == 'J'){\n\
    \                result.append(\"J\")\n            }else if(c == 'k' || c == 'K'){\n\
    \                result.append(\"K\")\n            }else if(c == 'l' || c == 'L'){\n\
    \                result.append(\"L\")\n            }else if(c == 'm' || c == 'M'){\n\
    \                result.append(\"M\")\n            }else if(c == 'n' || c == 'N'){\n\
    \                result.append(\"N\")\n            }else if(c == 'o' || c == 'O'){\n\
    \                result.append(\"O\")\n            }else if(c == 'p' || c == 'P'){\n\
    \                result.append(\"P\")\n            }else if(c == 'q' || c == 'Q'){\n\
    \                result.append(\"Q\")\n            }else if(c == 'r' || c == 'R'){\n\
    \                result.append(\"R\")\n            }else if(c == 's' || c == 'S'){\n\
    \                result.append(\"S\")\n            }else if(c == 't' || c == 'T'){\n\
    \                result.append(\"T\")\n            }else if(c == 'u' || c == 'U'){\n\
    \                result.append(\"U\")\n            }else if(c == 'v' || c == 'V'){\n\
    \                result.append(\"V\")\n            }else if(c == 'w' || c == 'W'){\n\
    \                result.append(\"W\")\n            }else if(c == 'x' || c == 'X'){\n\
    \                result.append(\"X\")\n            }else if(c == 'y' || c == 'Y'){\n\
    \                result.append(\"Y\")\n            }else if(c == 'z' || c == 'Z'){\n\
    \                result.\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfrz_47bk.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpfrz_47bk.scala:85:0 ----------------------------\e[0m\e[0m\n\e[31m85\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[33m\e[33m-- Warning: /tmp/tmpfrz_47bk.scala:73:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m73 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659793901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }else if(c == 'b' || c == 'B'){\n                result.append((s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase))\n            }else if(c == 'c' || c == 'C'){\n \
    \               result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }else if(c == 'd' || c == 'D'){\n                result.append((s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase))\n            }else if(c == 'e' || c == 'E'){\n \
    \               result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }else if(c == 'f' || c == 'F'){\n                result.append((s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase))\n            }else if(c == 'g' || c == 'G'){\n \
    \               result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }else if(c == 'h' || c == 'H'){\n                result.append((s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase))\n            }else if(c == 'i' || c == 'I'){\n \
    \               result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }else if(c == 'j' || c == 'J'){\n                result.append((s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase))\n            }else if(c == 'k' || c == 'K'){\n \
    \               result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }else if(c == 'l' || c == 'L'){\n                result.append((s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase))\n            }else if(c == 'm' || c == 'M'){\n \
    \               result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }else if(c == 'n' || c == 'N'){\n                result.append((s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase))\n            }else if(c == 'o' || c == 'O'){\n \
    \               result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }else if(c == 'p' || c == 'P'){\n                result.append((s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase))\n            }else if(c == 'q' || c == 'Q\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3vm6vp51.scala:52:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(c == \e[31m'q'\e\
    [0m || c == \e[31m'Q\e[0m\n\e[31m\e[31m   |\e[0m                             \
    \         ^\e[0m\n\e[31m   |\e[0msymbol literal 'Q is no longer supported,\n\e\
    [31m   |\e[0muse a string literal \"Q\" or an application Symbol(\"Q\") instead,\n\
    \e[31m   |\e[0mor enclose in braces '{Q} if you want a quoted expression.\n\e\
    [31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3vm6vp51.scala:53:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    ')' expected, but '}' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmp3vm6vp51.scala:66:0 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3vm6vp51.scala:21:43\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase))\n\e[31m\e[31m   |\e[0m                         \
    \      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp3vm6vp51.scala:23:43 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                result.append((s.charAt(i).toLowerCase + s.charAt(i).toUpperCase))\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3vm6vp51.scala:25:43\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase))\n\e[31m\e[31m   |\e[0m                         \
    \      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      value toUpperC"
  stdout: ''
  timestamp: 1659793915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = s.toUpperCase\n        val chars = s.toCharArray\n     \
    \   chars.foreach(c => {\n            if (c.isLetter) {\n                val newChar\
    \ = c.toUpperCase\n                if (newChar != c) {\n                    result\
    \ = result.replace(c.toString, newChar.toString)\n                }\n        \
    \    }\n        })\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphw19zehg.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mnewChar\e[0m = c.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              value toUpperCase is not a member of Char\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmphw19zehg.scala:23:27 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    result = result.replace(c.toString,\
    \ newChar.toString)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val result\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793913
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgag40ptw.scala:26)\n\tat Problem.main(tmpgag40ptw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append(\"A\")\n            }else if(c == 'b' || c == 'B'){\n\
    \                result.append(\"B\")\n            }else if(c == 'c' || c == 'C'){\n\
    \                result.append(\"C\")\n            }else if(c == 'd' || c == 'D'){\n\
    \                result.append(\"D\")\n            }else if(c == 'e' || c == 'E'){\n\
    \                result.append(\"E\")\n            }else if(c == 'f' || c == 'F'){\n\
    \                result.append(\"F\")\n            }else if(c == 'g' || c == 'G'){\n\
    \                result.append(\"G\")\n            }else if(c == 'h' || c == 'H'){\n\
    \                result.append(\"H\")\n            }else if(c == 'i' || c == 'I'){\n\
    \                result.append(\"I\")\n            }else if(c == 'j' || c == 'J'){\n\
    \                result.append(\"J\")\n            }else if(c == 'k' || c == 'K'){\n\
    \                result.append(\"K\")\n            }else if(c == 'l' || c == 'L'){\n\
    \                result.append(\"L\")\n            }else if(c == 'm' || c == 'M'){\n\
    \                result.append(\"M\")\n            }else if(c == 'n' || c == 'N'){\n\
    \                result.append(\"N\")\n            }else if(c == 'o' || c == 'O'){\n\
    \                result.append(\"O\")\n            }else if(c == 'p' || c == 'P'){\n\
    \                result.append(\"P\")\n            }else if(c == 'q' || c == 'Q'){\n\
    \                result.append(\"Q\")\n            }else if(c == 'r' || c == 'R'){\n\
    \                result.append(\"R\")\n            }else if(c == 's' || c == 'S'){\n\
    \                result.append(\"S\")\n            }else if(c == 't' || c == 'T'){\n\
    \                result.append(\"T\")\n            }else if(c == 'u' || c == 'U'){\n\
    \                result.append(\"U\")\n            }else if(c == 'v' || c == 'V'){\n\
    \                result.append(\"V\")\n            }else if(c == 'w' || c == 'W'){\n\
    \                result.append(\"W\")\n            }else if(c == 'x' || c == 'X'){\n\
    \                result.append(\"X\")\n            }else if(c == 'y' || c == 'Y'){\n\
    \                result.append(\"Y\")\n            }else if(c == 'z' || c == 'Z'){\n\
    \                result.\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfrz_47bk.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpfrz_47bk.scala:85:0 ----------------------------\e[0m\e[0m\n\e[31m85\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[33m\e[33m-- Warning: /tmp/tmpfrz_47bk.scala:73:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m73 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659793901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i).toLowerCase == s.charAt(i).toUpperCase || s.charAt(i).toLowerCase\
    \ == s.charAt(i).toLowerCase){\n                chars += s.charAt(i)\n       \
    \     }\n        }\n        if(chars.size == 0){\n            return s\n     \
    \   }\n        else{\n            val reversed = chars.toSeq.reverse\n       \
    \     val result = reversed.mkString(\"\")\n            return result\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhw2sry4.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpzhw2sry4.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m(s.charAt(i).toLowerCase ==\
    \ s.charAt(i).toUpperCase || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase){\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659793912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new mutable.ListBuffer[String]()\n        for(i <- 0 until\
    \ s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n    \
    \            result.add(s.charAt(i).toUpper + s.charAt(i).toLower)\n         \
    \   }\n            else{\n                result.add(s.charAt(i))\n          \
    \  }\n        }\n        if(result.isEmpty){\n            s.reverse\n        }\n\
    \        else{\n            result.reverse\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfqs6zx04.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793911
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n\
    \        {\n            val c = s.charAt(i)\n            if(c.isLetter)\n    \
    \        {\n                val l = c.toLower\n                val u = c.toUpper\n\
    \                if(l == u)\n                    result.setCharAt(i, l)\n    \
    \            else\n                    result.setCharAt(i, u)\n            }\n\
    \            else\n                result.setCharAt(i, c)\n        }\n       \
    \ result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: index 0, length 0\n\tat java.base/java.lang.String.checkIndex(String.java:4563)\n\
    \tat java.base/java.lang.AbstractStringBuilder.setCharAt(AbstractStringBuilder.java:533)\n\
    \tat java.base/java.lang.StringBuilder.setCharAt(StringBuilder.java:91)\n\tat\
    \ scala.collection.mutable.StringBuilder.setCharAt(StringBuilder.scala:406)\n\t\
    at Problem$.solve$$anonfun$1(tmp6kg0ewkv.scala:28)\n\tat Problem$.solve$$anonfun$adapted$1(tmp6kg0ewkv.scala:32)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.solve(tmp6kg0ewkv.scala:32)\n\
    \tat Problem$.main(tmp6kg0ewkv.scala:36)\n\tat Problem.main(tmp6kg0ewkv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n\
    \            chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp67nq1jcs.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprbx4ucc4.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = s.toUpperCase\n        val list = s.toList\n        list.foreach\
    \ { x =>\n            val index = list.indexOf(x)\n            if (index != -1)\
    \ {\n                if (x.isLetter) {\n                    val temp = list.remove(index)\n\
    \                    list.remove(index)\n                    list.insert(index,\
    \ temp)\n                } else {\n                    list.remove(index)\n  \
    \              }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiq3ha5p3.scala:23:36 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33mval\e[0m \e[36mtemp\e[0m =\
    \ list.remove(index)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m  value remove is not a member of List[Char] - did you mean\
    \ list.reduce?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiq3ha5p3.scala:24:25\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                    list.remove(index)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ remove is not a member of List[Char], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiq3ha5p3.scala:25:25\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    list.insert(index,\
    \ temp)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m    value insert is not a member of List[Char] - did you mean list.init?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpiq3ha5p3.scala:27:25 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    list.remove(index)\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is\
    \ not a member of List[Char], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection."
  stdout: ''
  timestamp: 1659793914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.Set[Char]()\n        for(i <- 0 until s.length) chars\
    \ += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfehmcsp6.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \n        chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6dz8h77b.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val reversed = chars.reverse\n   \
    \     val result = reversed.foldLeft(\"\") { (acc, c) =>\n            if (c.isLetter)\
    \ acc + c.toUpperCase\n            else acc + c\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuagfv9nu.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (c.isLetter) acc + c.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659793917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val str = new StringBuilder(s)\n        val chars = str.map(_.toChar)\n\
    \        val charsMap = chars.toMap\n        val charsSet = chars.toSet\n    \
    \    val charsArray = chars.toArray\n        val charsArrayMap = charsArray.toMap\n\
    \        val charsArraySet = charsArray.toSet\n        val charsArrayArray = charsArray.toArray\n\
    \        val charsArrayArrayMap = charsArrayArray.toMap\n        val charsArrayArraySet\
    \ = charsArrayArray.toSet\n        val charsArrayArrayArray = charsArrayArray.toArray\n\
    \        val charsArrayArrayArrayMap = charsArrayArrayArray.toMap\n        val\
    \ charsArrayArrayArraySet = charsArrayArrayArray.toSet\n        val charsArrayArrayArrayArray\
    \ = charsArrayArrayArray.toArray\n        val charsArrayArrayArrayArrayMap = charsArrayArrayArrayArray.toMap\n\
    \        val charsArrayArrayArrayArraySet = charsArrayArrayArrayArray.toSet\n\
    \        val charsArrayArrayArrayArrayArray = charsArrayArrayArrayArray.toArray\n\
    \        val charsArrayArrayArrayArrayArrayMap = charsArrayArrayArrayArrayArray.toMap\n\
    \        val charsArrayArrayArrayArrayArraySet = charsArrayArrayArrayArrayArray.toSet\n\
    \        val charsArrayArrayArrayArrayArrayArray = charsArrayArrayArrayArrayArray.toArray\n\
    \        val charsArrayArrayArrayArrayArrayArrayMap = charsArrayArrayArrayArrayArrayArray.toMap\n\
    \        val charsArrayArrayArrayArrayArrayArraySet = charsArrayArrayArrayArrayArrayArray.toSet\n\
    \        val charsArrayArrayArrayArrayArrayArrayArray = charsArrayArrayArrayArrayArrayArray.toArray\n\
    \        val charsArrayArrayArrayArrayArrayArrayArrayMap = charsArrayArrayArrayArrayArrayArrayArrayArray.toMap\n\
    \        val charsArrayArrayArrayArrayArrayArrayArraySet = charsArrayArrayArrayArrayArrayArrayArray.toSet\n\
    \        val charsArrayArrayArrayArrayArrayArrayArrayArray = charsArrayArrayArrayArrayArrayArrayArray.toArray\n\
    \        val charsArrayArrayArrayArrayArrayArrayArrayMap = charsArrayArrayArrayArrayArrayArrayArray.toMap\n\
    \        val charsArrayArrayArrayArrayArrayArrayArraySet = charsArrayArrayArrayArrayArrayArrayArray.toSet\n\
    \        val charsArrayArrayArrayArrayArrayArrayArrayArray = charsArrayArrayArrayArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxnquqxu8.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mcharsArrayArrayArrayArrayArrayArrayArrayMap\e\
    [0m = charsArrayArrayArrayArrayArrayArrayArray.toMap\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcharsArrayArrayArrayArrayArrayArrayArrayMap is already defined\
    \ as \e[33mvalue\e[0m \e[35mcharsArrayArrayArrayArrayArrayArrayArrayMap\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxnquqxu8.scala:44:12 ---------------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m        \e[33mval\e[0m \e[36mcharsArrayArrayArrayArrayArrayArrayArraySet\e\
    [0m = charsArrayArrayArrayArrayArrayArrayArray.toSet\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcharsArrayArrayArrayArrayArrayArrayArraySet is already defined\
    \ as \e[33mvalue\e[0m \e[35mcharsArrayArrayArrayArrayArrayArrayArraySet\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxnquqxu8.scala:45:12 ---------------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m        \e[33mval\e[0m \e[36mcharsArrayArrayArrayArrayArrayArrayArrayArray\e\
    [0m = charsArrayArrayArrayArray\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcharsArrayArrayArrayArrayArrayArrayArrayArray is already defined\
    \ as \e[33mvalue\e[0m \e[35mcharsArrayArrayArrayArrayArrayArrayArrayArray\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpxnquqxu8.scala:19:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mcharsMap\e[0m = chars.toMap\n\e[31m\e[31m   |\e[0m    \
    \              "
  stdout: ''
  timestamp: 1659793919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            chars += s.charAt(i)\n        }\n        chars.reverse.foldLeft(\"\
    \"){ (result, c) =>\n            if(c.isLetter){\n                result + c.toUpperCase\n\
    \            } else {\n                result + c\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptwrl_v3f.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            chars += s.charAt(i)\n        }\n        chars.toList.reverse.foldLeft(\"\
    \"){ (result, c) => result + c.toUpperCase() }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprw3swn3f.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for (c <- s) {\n    \
    \        if (c.isLetter) {\n                chars += c.toUpperCase\n         \
    \   } else {\n                chars += c\n            }\n        }\n        chars.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjwdc9az8.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793917
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe_ne8k65.scala:26)\n\tat Problem.main(tmpe_ne8k65.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        val chars = s.toCharArray\n \
    \       for (i <- 0 until chars.length)\n            if (chars(i) >= 'a' && chars(i)\
    \ <= 'z')\n                chars(i) match {\n                    case 'a' -> chars(i)\
    \ match {\n                        case 'A' -> chars(i) match {\n            \
    \                case 'a' -> chars(i) match {\n                              \
    \  case 'A' -> chars(i) match {\n                                    case 'a'\
    \ -> chars(i) match {\n                                        case 'A' -> chars(i)\
    \ match {\n                                            case 'a' -> chars(i) match\
    \ {\n                                                case 'A' -> chars(i) match\
    \ {\n                                                    case 'a' -> chars(i)\
    \ match {\n                                                        case 'A' ->\
    \ chars(i) match {\n                                                         \
    \   case 'a' -> chars(i) match {\n                                           \
    \                     case 'A' -> chars(i) match {\n                         \
    \                                           case 'a' -> chars(i) match {\n   \
    \                                                                     case 'A'\
    \ -> chars(i) match {\n                                                      \
    \                      case \"a\" -> chars(i) match {\n                      \
    \                                                          case \"A\" -> chars(i)\
    \ match {\n                                                                  \
    \                  case \"a\" -> chars(i) match {\n                          \
    \                                                              case \"A\" -> chars(i)\
    \ match {\n                                                                  \
    \                          case \"a\" -> chars(i) match {\n                  \
    \                                                                            \
    \  case \"A\" -> chars(i) match {\n                                          \
    \                                                          case \"a\" -> chars(i)\
    \ match {\n                                                                  \
    \                                      case \"A\" -> chars(i) match {\n      \
    \                                                                            \
    \                          case \"a\" -> chars(i) match {\n                  \
    \                                                                            \
    \                  case \"A\" -> chars(i) match {\n                          \
    \                                                                            \
    \              case \"a\" -> chars(i) match {\n                              \
    \                                                                            \
    \              case \"A\" -> chars(i) match {\n                              \
    \                                                                            \
    \                  case \"a\" -> chars(i) match {\n                          \
    \                                                                            \
    \                          case \"A\" -> chars(i) match {\n                  \
    \                                                                            \
    \                                      case \"a\" -> chars(i) match {\n      \
    \                                                                            \
    \                                                      case \"A\" -> chars(i)\
    \ match {\n                                                                  \
    \                                                                          case\
    \ \"a\" -> chars(i) match {\n                                                \
    \                                                                            \
    \                    case \"A\" -> chars(i) match {\n                        \
    \                                                                            \
    \                                                case \"a\" -> chars(i) match\
    \ {\n                                                                        \
    \                                                                            \
    \    case \"A\" -> chars(i) match {\n                                        \
    \                                                                            \
    \                                        case \"a\" -> chars(i) match {\n    \
    \                                                                            \
    \                                                                            \
    \    case \"A\" -> chars(i) match {\n                                        \
    \                                                                            \
    \                                                case \"a\" -> chars(i) match\
    \ {\n                                                                        \
    \                                                                            \
    \                    case \"A\" -> chars(i) match {\n                        \
    \                                                                            \
    \                                                                        case\
    \ \"a\" -> chars(i) \n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb29gic1s.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=>' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb29gic1s.scala:62:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m62 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    '=>' expected, but 'def' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb29gic1s.scala:74:0 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'=>' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb29gic1s.scala:60:192\
    \ -------------------\e[0m\e[0m\n\e[31m60 |\e[0m                             \
    \                                                                            \
    \                                                                   \e[33mcase\e\
    [0m \e[31m\"a\"\e[0m -> chars(i) \n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \                                                                            \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \              Found:    Unit\n\e[31m   |\e[0m                               \
    \                 Required: (String, Char)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpb29gic1s.scala:73:1 ---------------------\e[0m\e\
    [0m\n\e[31m73 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:  \
    \  Unit\n\e[31m   |\e[0m Required: (String, Char)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659793920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val reversed = new mutable.ListBuffer[Char]()\n\
    \        val result = new mutable.ListBuffer[Char]()\n        for(i <- 0 until\
    \ chars.length){\n            val c = chars(i)\n            if(c.isLetter){\n\
    \                val c = c.toUpperCase\n                reversed.add(c)\n    \
    \        }\n            else{\n                val c = c.toLowerCase\n       \
    \         reversed.add(c)\n            }\n        }\n        for(i <- 0 until\
    \ reversed.length){\n            result.add(reversed(i))\n        }\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6dps3c6i.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6dps3c6i.scala:19:25\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mChar\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append(\"A\")\n            }else if(c == 'b' || c == 'B'){\n\
    \                result.append(\"B\")\n            }else if(c == 'c' || c == 'C'){\n\
    \                result.append(\"C\")\n            }else if(c == 'd' || c == 'D'){\n\
    \                result.append(\"D\")\n            }else if(c == 'e' || c == 'E'){\n\
    \                result.append(\"E\")\n            }else if(c == 'f' || c == 'F'){\n\
    \                result.append(\"F\")\n            }else if(c == 'g' || c == 'G'){\n\
    \                result.append(\"G\")\n            }else if(c == 'h' || c == 'H'){\n\
    \                result.append(\"H\")\n            }else if(c == 'i' || c == 'I'){\n\
    \                result.append(\"I\")\n            }else if(c == 'j' || c == 'J'){\n\
    \                result.append(\"J\")\n            }else if(c == 'k' || c == 'K'){\n\
    \                result.append(\"K\")\n            }else if(c == 'l' || c == 'L'){\n\
    \                result.append(\"L\")\n            }else if(c == 'm' || c == 'M'){\n\
    \                result.append(\"M\")\n            }else if(c == 'n' || c == 'N'){\n\
    \                result.append(\"N\")\n            }else if(c == 'o' || c == 'O'){\n\
    \                result.append(\"O\")\n            }else if(c == 'p' || c == 'P'){\n\
    \                result.append(\"P\")\n            }else if(c == 'q' || c == 'Q'){\n\
    \                result.append(\"Q\")\n            }else if(c == 'r' || c == 'R'){\n\
    \                result.append(\"R\")\n            }else if(c == 's' || c == 'S'){\n\
    \                result.append(\"S\")\n            }else if(c == 't' || c == 'T'){\n\
    \                result.append(\"T\")\n            }else if(c == 'u' || c == 'U'){\n\
    \                result.append(\"U\")\n            }else if(c == 'v' || c == 'V'){\n\
    \                result.append(\"V\")\n            }else if(c == 'w' || c == 'W'){\n\
    \                result.append(\"W\")\n            }else if(c == 'x' || c == 'X'){\n\
    \                result.append(\"X\")\n            }else if(c == 'y' || c == 'Y'){\n\
    \                result.append(\"Y\")\n            }else if(c == 'z' || c == 'Z'){\n\
    \                result.\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfrz_47bk.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpfrz_47bk.scala:85:0 ----------------------------\e[0m\e[0m\n\e[31m85\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[33m\e[33m-- Warning: /tmp/tmpfrz_47bk.scala:73:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m73 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659793901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val reversed = new mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length) {\n            if (chars(i) >= 'a' &&\
    \ chars(i) <= 'z') {\n                reversed.append((chars(i) - 'a').toUpperCase)\n\
    \            } else if (chars(i) >= 'A' && chars(i) <= 'Z') {\n              \
    \  reversed.append((chars(i) - 'A').toUpperCase)\n            } else {\n     \
    \           reversed.append(chars(i))\n            }\n        }\n        if (reversed.isEmpty)\
    \ {\n            s.reverse\n        } else {\n            reversed.mkString.reverse\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpde5h9j5u.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            chars += s.charAt(i)\n        }\n        chars.toList.reverse.foldLeft(\"\
    \"){ (res, c) =>\n            if(c.isLetter) res += c.toUpperCase\n          \
    \  else res += c.toLowerCase\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplfr6zwvt.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c.isLetter){\n              \
    \  val c = c.toUpperCase\n                val c = c.toLower\n                result.append((c))\n\
    \            }\n            else{\n                result.append(c)\n        \
    \    }\n        }\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp72aa4bky.scala:22:20 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mc\e[0m = c.toLower\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mc\
    \ is already defined as \e[33mvalue\e[0m \e[35mc\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659793918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\
    \ chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt5980a3x.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until\
    \ s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n      \
    \          chars += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_e067heb.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                val\
    \ c = s.charAt(i).toChar\n                val cc = c.toUpperCase\n           \
    \     val ccc = cc.toLowerCase\n                val cccc = ccc.toUpperCase\n \
    \               val ccccc = cccc.toLowerCase\n                val cccccc = ccccc.toUpperCase\n\
    \                val ccccccc = cccccc.toLowerCase\n                val cccccccc\
    \ =ccccccc.toUpperCase\n                val cccccccc =ccccccc.toLowerCase\n  \
    \              val cccccccc =ccccccc.toUpperCase\n                val cccccccc\
    \ =ccccccc.toLowerCase\n                val cccccccc =ccccccc.toUpperCase\n  \
    \              val cccccccc =ccccccc.toLowerCase\n                val cccccccc\
    \ =ccccccc.toUpperCase\n                val cccccccc =ccccccc.toLowerCase\n  \
    \              val cccccccc =ccccccc.toUpperCase\n                val cccccccc\
    \ =ccccccc.toLowerCase\n                val cccccccc =ccccccc.toUpperCase\n  \
    \              val cccccccc =ccccccc.toLowerCase\n                val cccccccc\
    \ =ccccccc.toUpperCase\n                val cccccccc =ccccccc.toLowerCase\n  \
    \              val cccccccc =ccccccc.toUpperCase\n                val cccccccc\
    \ =ccccccc.toLowerCase\n                val cccccccc =ccccccc.toUpperCase\n  \
    \              val cccccccc =ccccccc.toLowerCase\n                val cccccccc\
    \ =ccccccc.toUpperCase\n                val cccccccc =ccccccc.toLowerCase\n  \
    \              val cccccccc =ccccccc.toUpperCase\n                val cccccccc\
    \ =ccccccc.toLowerCase\n                val cccccccc =ccccccc.toUpperCase\n  \
    \              val cccccccc =ccccccc.toLowerCase\n                val cccccccc\
    \ =ccccccc.toUpperCase\n                val cccccccc =ccccccc.toLowerCase\n  \
    \              val cccccccc =ccccccc.toUpperCase\n                val cccccccc\
    \ =ccccccc.toLowerCase\n                val cccccccc \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxxercak9.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxxercak9.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpxxercak9.scala:21:27 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m                \e[33mval\e[0m \e[36mcc\e[0m = c.toUpperCase\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value toUpperCase is not a member of Char\n\e[33m\e\
    [33m-- Warning: /tmp/tmpxxercak9.scala:57:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m57 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = s.toUpperCase\n        val reversed = result.map(c => if\
    \ (c.isLetter) c.toUpperCase(c) else c)\n        if (reversed.isEmpty) result\n\
    \        else reversed.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaxziax49.scala:18:57 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = result.map(\e\
    [36mc\e[0m => \e[33mif\e[0m (c.isLetter) c.toUpperCase(c) \e[33melse\e[0m c)\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659793920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c.isLetter){\n              \
    \  val c = c.toUpperCase\n                val c = c.toLower\n                val\
    \ c = c.toUpperCase\n                val c = c.toLower\n                result.append((c))\n\
    \            }\n            else{\n                result.append(c)\n        \
    \    }\n        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpga_bsv7u.scala:22:20 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mc\e[0m = c.toLower\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mc\
    \ is already defined as \e[33mvalue\e[0m \e[35mc\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659793919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgd1o4jja.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n     \
    \           chars += s.charAt(i)\n            else if (s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z')\n                chars += s.charAt(i).swapCase\n            else\n \
    \               chars += s.charAt(i)\n        chars.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx7apt6zz.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val reversed = chars.reverse\n   \
    \     val result = reversed.foldLeft(\"\")( (acc, c) => acc + (if (c.isLetter)\
    \ c.toUpperCase() else c.toLowerCase()) )\n        if (chars.isEmpty) result\n\
    \        else result.reverse\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpae2a2692.scala:19:81 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = reversed.foldLeft(\e\
    [31m\"\"\e[0m)( (\e[36macc\e[0m, \e[36mc\e[0m) => acc + (\e[33mif\e[0m (c.isLetter)\
    \ c.toUpperCase() \e[33melse\e[0m c.toLowerCase()) )\n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \ ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value toUpperCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpae2a2692.scala:19:102\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = reversed.foldLeft(\e[31m\"\"\e[0m)( (\e[36macc\e[0m, \e[36mc\e\
    [0m) => acc + (\e[33mif\e[0m (c.isLetter) c.toUpperCase() \e[33melse\e[0m c.toLowerCase())\
    \ )\n\e[31m\e[31m   |\e[0m                                                   \
    \                                                 ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                               value toLowerCase is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \        {\n            val c = s.charAt(i)\n            if(c.isLetter)\n    \
    \        {\n                val l = c.toUpperCase\n                val u = c.toLowerCase\n\
    \                if(result.length == 0)\n                    result.append(u)\n\
    \                else\n                {\n                    if(result.length\
    \ == 1)\n                        result.append(l)\n                    else\n\
    \                    {\n                        val last = result.charAt(result.length-1)\n\
    \                        if(last.isLetter)\n                            result.append(u+last)\n\
    \                        else\n                            result.append(u+last+l)\n\
    \                    }\n                }\n            }\n            else\n \
    \               result.append(c)\n        }\n        result.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_fa9087d.scala:23:26 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36ml\e[0m = c.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp_fa9087d.scala:24:26 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mu\e[0m = c.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        value toLowerCase is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            chars += s.charAt(i)\n        }\n        chars.toList.reverse.foldLeft(\"\
    \"){ (result, c) =>\n            if(c.isLetter){\n                result + c.toUpperCase\n\
    \            }else{\n                result + c\n            }\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo4yt9h2v.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                chars\
    \ += s.charAt(i)\n            }\n        }\n        if(chars.isEmpty){\n     \
    \       return s\n        }\n        chars.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpea0weem1.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        val chars = s.toCharArray\n \
    \       val len = chars.length\n        val charsMap = mutable.HashMap[Char, Int]()\n\
    \        for (i <- 0 until len) {\n            charsMap += chars(i) -> i\n   \
    \     }\n        for (i <- 0 until len) {\n            val c = chars(i)\n    \
    \        if (charsMap.contains(c)) {\n                val index = charsMap(c)\n\
    \                val c = chars(index)\n                charsMap.remove(c)\n  \
    \              charsMap += c -> index\n            }\n            result.append(c)\n\
    \        }\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzu4jigbx.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcharsMap\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprbx4ucc4.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append(c.toUpperCase)\n            }else if(c == 'b' || c\
    \ == 'B'){\n                result.append(c.toLowerCase)\n            }else if(c\
    \ == 'c' || c == 'C'){\n                result.append(c.toUpperCase)\n       \
    \     }else if(c == 'd' || c == 'D'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'e' || c == 'E'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'f' || c == 'F'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'g' || c == 'G'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'h' || c == 'H'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'i' || c == 'I'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'j' || c == 'J'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'k' || c == 'K'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'l' || c == 'L'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'm' || c == 'M'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'n' || c == 'N'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'o' || c == 'O'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'p' || c == 'P'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'q' || c == 'Q'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'r' || c == 'R'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 's' || c == 'S'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 't' || c == 'T'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'u' || c == 'U'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'v' || c == 'V'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'w' || c == 'W'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'x' || c == 'X'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'y' || c == 'Y'){\n                result.append(c.toUpperCase)\n\
    \            }else \n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8omhk4cj.scala:70:17 ---------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m            }\e[33melse\e[0m \n\e[31m\e[31m   |\e[0m\
    \                 ^\e[0m\n\e[31m   |\e[0m                 expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp8omhk4cj.scala:84:0 ----------------------------\e[0m\e[0m\n\e[31m84\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8omhk4cj.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8omhk4cj.scala:23:32 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                result.append(c.toLowerCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8omhk4cj.scala:25:32 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8omhk4cj.scala:27:32 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                result.append(c.toLowerCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8omhk4cj.scala:29:32 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a mem"
  stdout: ''
  timestamp: 1659793928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \        {\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n       \
    \     {\n                result.append((s.charAt(i) - 'a').toString)\n       \
    \     }\n            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\n     \
    \       {\n                result.append((s.charAt(i) - 'A').toString)\n     \
    \       }\n            else\n            {\n                result.append(s.charAt(i))\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp202478e8.scala:36)\n\tat Problem.main(tmp202478e8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        val chars = s.toCharArray\n \
    \       for(i <- 0 until chars.length){\n            val c = chars(i)\n      \
    \      if(c == 'a'){\n                result.append(\"A\")\n            }else\
    \ if(c == 'A'){\n                result.append(\"a\")\n            }else if(c\
    \ == 'b'){\n                result.append(\"B\")\n            }else if(c == 'B'){\n\
    \                result.append(\"b\")\n            }else if(c == 'c'){\n     \
    \           result.append(\"C\")\n            }else if(c == 'C'){\n          \
    \      result.append(\"c\")\n            }else if(c == 'd'){\n               \
    \ result.append(\"D\")\n            }else if(c == 'D'){\n                result.append(\"\
    d\")\n            }else if(c == 'e'){\n                result.append(\"E\")\n\
    \            }else if(c == 'E'){\n                result.append(\"e\")\n     \
    \       }else if(c == 'f'){\n                result.append(\"F\")\n          \
    \  }else if(c == 'F'){\n                result.append(\"f\")\n            }else\
    \ if(c == 'g'){\n                result.append(\"G\")\n            }else if(c\
    \ == 'G'){\n                result.append(\"g\")\n            }else if(c == 'h'){\n\
    \                result.append(\"H\")\n            }else if(c == 'H'){\n     \
    \           result.append(\"h\")\n            }else if(c == 'i'){\n          \
    \      result.append(\"I\")\n            }else if(c == 'I'){\n               \
    \ result.append(\"i\")\n            }else if(c == 'j'){\n                result.append(\"\
    J\")\n            }else if(c == 'J'){\n                result.append(\"j\")\n\
    \            }else if(c == 'k'){\n                result.append(\"K\")\n     \
    \       }else if(c == 'K'){\n                result.append(\"k\")\n          \
    \  }else if(c == 'l'){\n                result.append(\"L\")\n            }else\
    \ if(c == 'L'){\n                result.append(\"l\")\n            }else if(c\
    \ == 'm'){\n                result.append(\"M\")\n            }else if(c == 'M'){\n\
    \                result.append(\"m\")\n            }else if(c == 'n'){\n     \
    \           result.append(\"N\")\n            }else if(c == 'N'){\n          \
    \      result.append(\"n\")\n            }else if(c == 'o'){\n               \
    \ result.append(\"O\")\n            }else if(c == 'O'){\n                result.append(\"\
    o\")\n            }else if(c == 'p'){\n                result.append(\"P\")\n\
    \            }else if(c == 'P'){\n                result.append(\"p\")\n     \
    \       }else if(c == 'q'){\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq44papxi.scala:100:0 ---------------------------\e\
    [0m\e[0m\n\e[31m100 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq44papxi.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i <-\
    \ \e[31m0\e[0m until chars.length){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: String\n\e\
    [31m20 |\e[0m            \e[33mval\e[0m \e[36mc\e[0m = chars(i)\n\e[31m21 |\e\
    [0m            \e[33mif\e[0m(c == \e[31m'a'\e[0m){\n\e[31m22 |\e[0m          \
    \      result.append(\e[31m\"A\"\e[0m)\n\e[31m23 |\e[0m            }\e[33melse\e\
    [0m \e[33mif\e[0m(c == \e[31m'A'\e[0m){\n\e[31m24 |\e[0m                result.append(\e\
    [31m\"a\"\e[0m)\n\e[31m25 |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(c ==\
    \ \e[31m'b'\e[0m){\n\e[31m26 |\e[0m                result.append(\e[31m\"B\"\e\
    [0m)\n\e[31m27 |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(c == \e[31m'B'\e\
    [0m){\n\e[31m28 |\e[0m                result.append(\e[31m\"b\"\e[0m)\n\e[31m29\
    \ |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(c == \e[31m'c'\e[0m){\n\e[31m30\
    \ |\e[0m                result.append(\e[31m\"C\"\e[0m)\n\e[31m31 |\e[0m     \
    \       }\e[33melse\e[0m \e[33mif\e[0m(c == \e[31m'C'\e[0m){\n\e[31m32 |\e[0m\
    \                result.append(\e[31m\"c\"\e[0m)\n\e[31m33 |\e[0m            }\e\
    [33melse\e[0m \e[33mif\e[0m(c == \e[31m'd'\e[0m){\n\e[31m34 |\e[0m           \
    \     result.append(\e[31m\"D\"\e[0m)\n\e[31m35 |\e[0m            }\e[33melse\e\
    [0m \e[33mif\e[0m(c == \e[31m'D'\e[0m){\n\e[31m36 |\e[0m                result.append(\e\
    [31m\"d\"\e[0m)\n\e[31m37 |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(c ==\
    \ \e[31m'e'\e[0m){\n\e[31m38 |\e[0m                result.append(\e[31m\"E\"\e\
    [0m)\n\e[31m39 |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(c == \e[31m'E'\e\
    [0m){\n\e[31m40 |\e[0m                result.append(\e[31m\"e\"\e[0m)\n\e[31m41\
    \ |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(c == \e[31m'f'\e[0m){\n\e[31m42\
    \ |\e[0m                result.append(\e[31m\"F\"\e[0m)\n\e[31m43 |\e[0m     \
    \       }\e[33melse\e[0m \e[33mif\e[0m(c == \e[31m'F'\e[0m){\n\e[31m44 |\e[0m\
    \                result.append(\e[31m\"f\"\e[0m"
  stdout: ''
  timestamp: 1659793927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        val chars = s.toCharArray\n \
    \       for(i <- 0 until chars.length){\n            val c = chars(i)\n      \
    \      if(c == 'a' || c == 'A'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'b' || c == 'B'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'c' || c == 'C'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'd' || c == 'D'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'e' || c == 'E'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'f' || c == 'F'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'g' || c == 'G'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'h' || c == 'H'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'i' || c == 'I'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'j' || c == 'J'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'k' || c == 'K'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'l' || c == 'L'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'm' || c == 'M'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'n' || c == 'N'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'o' || c == 'O'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'p' || c == 'P'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgns4qanf.scala:67:0 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgns4qanf.scala:22:40\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n\e[31m\e[31m   |\e[0m                            \
    \   ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgns4qanf.scala:24:40 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m                result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgns4qanf.scala:26:40\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n\e[31m\e[31m   |\e[0m                            \
    \   ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgns4qanf.scala:28:40 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m                result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgns4qanf.scala:30:40\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n\e[31m\e[31m   |\e[0m                            \
    \   ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgns4qanf.scala:32:40 ------------------------\e[0m\e[0m\n\e[31m32 |\e\
    [0m             "
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = s.toUpperCase\n        val chars = result.toCharArray\n\
    \        val reversed = chars.reverse\n        val newString = new StringBuilder\n\
    \        for (i <- 0 until reversed.length) {\n            if (chars(i) != reversed(i))\
    \ {\n                newString.append(chars(i))\n            } else {\n      \
    \          newString.append(reversed(i))\n            }\n        }\n        newString.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_fpkskg9.scala:31)\n\tat Problem.main(tmp_fpkskg9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for (c <- s) {\n    \
    \        if (c.isLetter) chars += c.toUpperCase\n            else chars += c.toLowerCase\n\
    \        }\n        if (chars.isEmpty) s.reverse\n        else chars.reverse.mkString.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgbb02rqa.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgd1o4jja.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793900
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnxj41hz1.scala:26)\n\tat Problem.main(tmpnxj41hz1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe_ne8k65.scala:26)\n\tat Problem.main(tmpe_ne8k65.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a'){\n                result.append(\"\
    A\")\n            }else if(c == 'A'){\n                result.append(\"a\")\n\
    \            }else if(c == 'b'){\n                result.append(\"B\")\n     \
    \       }else if(c == 'B'){\n                result.append(\"b\")\n          \
    \  }else if(c == 'c'){\n                result.append(\"C\")\n            }else\
    \ if(c == 'C'){\n                result.append(\"c\")\n            }else if(c\
    \ == 'd'){\n                result.append(\"D\")\n            }else if(c == 'D'){\n\
    \                result.append(\"d\")\n            }else if(c == 'e'){\n     \
    \           result.append(\"E\")\n            }else if(c == 'E'){\n          \
    \      result.append(\"e\")\n            }else if(c == 'f'){\n               \
    \ result.append(\"F\")\n            }else if(c == 'F'){\n                result.append(\"\
    f\")\n            }else if(c == 'g'){\n                result.append(\"G\")\n\
    \            }else if(c == 'G'){\n                result.append(\"g\")\n     \
    \       }else if(c == 'h'){\n                result.append(\"H\")\n          \
    \  }else if(c == 'H'){\n                result.append(\"h\")\n            }else\
    \ if(c == 'i'){\n                result.append(\"I\")\n            }else if(c\
    \ == 'I'){\n                result.append(\"i\")\n            }else if(c == 'j'){\n\
    \                result.append(\"J\")\n            }else if(c == 'J'){\n     \
    \           result.append(\"j\")\n            }else if(c == 'k'){\n          \
    \      result.append(\"K\")\n            }else if(c == 'K'){\n               \
    \ result.append(\"k\")\n            }else if(c == 'l'){\n                result.append(\"\
    L\")\n            }else if(c == 'L'){\n                result.append(\"l\")\n\
    \            }else if(c == 'm'){\n                result.append(\"M\")\n     \
    \       }else if(c == 'M'){\n                result.append(\"m\")\n          \
    \  }else if(c == 'n'){\n                result.append(\"N\")\n            }else\
    \ if(c == 'N'){\n                result.append(\"n\")\n            }else if(c\
    \ == 'o'){\n                result.append(\"O\")\n            }else if(c == 'O'){\n\
    \                result.append(\"o\")\n            }else if(c == 'p'){\n     \
    \           result.append(\"P\")\n            }else if(c == 'P'){\n          \
    \      result.append(\"p\")\n            }else if(c == 'q'){\n               \
    \ result.append(\"Q\")\n            }else if(c\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjq59e8wa.scala:87:4 ----------------------------\e\
    [0m\e[0m\n\e[31m87 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjq59e8wa.scala:100:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m100 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjq59e8wa.scala:86:21 --------------------\e[0m\e\
    [0m\n\e[31m86 |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(c\n\e[31m\e[31m\
    \   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                     Found:\
    \    (c : Char)\n\e[31m   |\e[0m                     Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjq59e8wa.scala:99:1 ---------------------\e\
    [0m\e[0m\n\e[31m99 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpjq59e8wa.scala:88:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m88 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for (c <- s) {\n    \
    \        if (c.isLetter) {\n                chars += c.toUpperCase\n         \
    \   } else {\n                chars += c\n            }\n        }\n        chars.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjwdc9az8.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\
    \ chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptmmnju0f.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until\
    \ s.length)\n            chars += s.charAt(i)\n        chars.toList.reverse.foldLeft(\"\
    \")(_ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5wgxujt8.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hza0fl8.scala:26)\n\tat Problem.main(tmp9hza0fl8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        val chars = s.toCharArray\n \
    \       val len = chars.length\n        val reversed = new mutable.ListBuffer[Char]()\n\
    \        val upperCase = new mutable.ListBuffer[Char]()\n        val lowerCase\
    \ = new mutable.ListBuffer[Char]()\n        for (i <- 0 until len) {\n       \
    \     val c = chars(i)\n            if (c.isLetter) {\n                if (c.toUpperCase\
    \ == c) {\n                    upperCase += c\n                } else {\n    \
    \                lowerCase += c\n                }\n            } else {\n   \
    \             reversed += c\n            }\n        }\n        if (upperCase.isEmpty)\
    \ {\n            upperCase = lowerCase\n        }\n        if (lowerCase.isEmpty)\
    \ {\n            lowerCase = reversed\n        }\n        upperCase.foreach {\
    \ c => result += c.toUpperCase }\n        lowerCase.foreach { c => result += c.toLowerCase\
    \ }\n        result.append(reversed.mkString)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0zzs2ulr.scala:20:27 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0zzs2ulr.scala:21:28\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mupperCase\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mChar\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0zzs2ulr.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlowerCase\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0zzs2ulr.scala:26:22\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mif\e\
    [0m (c.toUpperCase == c) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value toUpperCase is not a member of Char\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmp0zzs2ulr.scala:36:22 -----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            upperCase = lowerCase\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val upperCase\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp0zzs2ulr.scala:39:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m39 |\e[0m            lowerCase\
    \ = reversed\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n\
    \            if((s.charAt(i) >= 'a' && s.charAt(i) <= 'z') || (s.charAt(i) >=\
    \ 'A' && s.charAt(i) <= 'Z'))\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa23vvfwz.scala:26)\n\tat Problem.main(tmpa23vvfwz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = s.toUpperCase\n        val reversed = result.reverse\n \
    \       if (result.isEmpty) reversed\n        else reversed.replaceAll(\"[^A-Z]\"\
    , \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphm52qnty.scala:23)\n\tat Problem.main(tmphm52qnty.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val len = chars.length\n        val\
    \ result = new Array[Char](len)\n        var i = 0\n        while (i < len) {\n\
    \            val c = chars(i)\n            if (c.isLetter) {\n               \
    \ val lower = c.toLower\n                val upper = c.toUpper\n             \
    \   if (lower == upper) {\n                    result(i) = lower\n           \
    \     } else {\n                    result(i) = upper\n                }\n   \
    \         } else {\n                result(i) = c\n            }\n           \
    \ i += 1\n        }\n        new String(result)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_zb1x0lg.scala:39)\n\tat Problem.main(tmp_zb1x0lg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpalf49ab2.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result.append((s.charAt(i) - \e[31m'a'\e\
    [0m).toUpper + s.charAt(i).toLower)\n\e[31m\e[31m   |\e[0m                   \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \              value toUpper is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659793903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                result.append((s.charAt(i)\
    \ - 'a').toUpperCase)\n            }\n            else if(s.charAt(i) >= 'A' &&\
    \ s.charAt(i) <= 'Z'){\n                result.append((s.charAt(i) - 'A').toUpperCase)\n\
    \            }\n            else{\n                result.append(s.charAt(i))\n\
    \            }\n        }\n        return result.toString()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpec7vxmlg.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result.append((s.charAt(i) - \e[31m'a'\e\
    [0m).toUpperCase)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value toUpperCase is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpec7vxmlg.scala:23:50\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                result.append((s.charAt(i)\
    \ - \e[31m'A'\e[0m).toUpperCase)\n\e[31m\e[31m   |\e[0m                      \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               value toUpperCase is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659793903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val strList = s.toList\n        val reversed = strList.foldLeft(\"\"\
    ){\n            case (acc, x) => acc + (if (x.isLetter) x.toUpperCase() else x.toLowerCase)\n\
    \        }\n        if (strList.size == 0) reversed\n        else reversed.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm2g7xd6b.scala:19:54 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m (acc, x) => acc + (\e[33mif\e\
    [0m (x.isLetter) x.toUpperCase() \e[33melse\e[0m x.toLowerCase)\n\e[31m\e[31m\
    \   |\e[0m                                                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm2g7xd6b.scala:19:75\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e\
    [0m (acc, x) => acc + (\e[33mif\e[0m (x.isLetter) x.toUpperCase() \e[33melse\e\
    [0m x.toLowerCase)\n\e[31m\e[31m   |\e[0m                                    \
    \                                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                           value toLowerCase is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new mutable.StringBuilder\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6v3wsocd.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.charAt(i))\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpihsvfz4a.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result.append((s.charAt(i) - \e[31m'a'\e\
    [0m).toUpper + s.charAt(i))\n\e[31m\e[31m   |\e[0m                           \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \      value toUpper is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659793930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }else if(c == 'b' || c == 'B'){\n                result.append((s.charAt(i).toLowerCase\
    \ + s.charAt(i).toUpperCase))\n            }else if(c == '#' || c == '@'){\n \
    \               result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase\
    \ + s.charAt(i)))\n            }else{\n                result.append(c)\n    \
    \        }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbopoe0vt.scala:21:43 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase))\n\e[31m\e[31m   |\e[0m                         \
    \      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpbopoe0vt.scala:23:43 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                result.append((s.charAt(i).toLowerCase + s.charAt(i).toUpperCase))\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbopoe0vt.scala:25:43\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase + s.charAt(i)))\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                    value toUpperCase is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659793931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n\
    \            if(i == 0 || s.charAt(i) != s.charAt(i-1))\n                result.append(s.charAt(i))\n\
    \            else\n                result.append(s.charAt(i).toUpper)\n      \
    \  result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5rlhl3f9.scala:26)\n\tat Problem.main(tmp5rlhl3f9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length){\n\
    \            chars += s.charAt(i)\n        }\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgosu1pve.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (chars.contains(c)) {\n              \
    \  result.append(c.toUpperCase)\n            } else {\n                result.append(c)\n\
    \            }\n            chars += c\n        }\n        result.toString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp67ngikx4.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp67ngikx4.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i).toLowerCase\
    \ != s.charAt(i).toUpperCase && !chars.contains(s.charAt(i)))\n              \
    \  result.append(s.charAt(i))\n            else\n                chars += s.charAt(i)\n\
    \        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp78go1vai.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp78go1vai.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (s.charAt(i).toLowerCase !=\
    \ s.charAt(i).toUpperCase && !chars.contains(s.charAt(i)))\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp78go1vai.scala:24:15 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        result.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    StringBuilder\n\e[31m   |\e[0m        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.HashSet[Char]()\n        for (c <- s) {\n       \
    \     if (c.isLetter) chars += c\n            else chars += c.toUpperCase\n  \
    \      }\n        if (chars.isEmpty) s.reverse\n        else chars.toList.foldLeft(\"\
    \")(_ + _.toUpperCase)\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyujivctq.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val reversed = new mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until chars.length){\n            val c = chars(i)\n     \
    \       if(c == 'a' || c == 'A'){\n                reversed.add(c)\n         \
    \   }else if(c == 'b' || c == 'B'){\n                reversed.add(c)\n       \
    \     }else if(c == 'c' || c == 'C'){\n                reversed.add(c)\n     \
    \       }else if(c == 'd' || c == 'D'){\n                reversed.add(c)\n   \
    \         }else if(c == 'e' || c == 'E'){\n                reversed.add(c)\n \
    \           }else if(c == 'f' || c == 'F'){\n                reversed.add(c)\n\
    \            }else if(c == 'g' || c == 'G'){\n                reversed.add(c)\n\
    \            }else if(c == 'h' || c == 'H'){\n                reversed.add(c)\n\
    \            }else if(c == 'i' || c == 'I'){\n                reversed.add(c)\n\
    \            }else if(c == 'j' || c == 'J'){\n                reversed.add(c)\n\
    \            }else if(c == 'k' || c == 'K'){\n                reversed.add(c)\n\
    \            }else if(c == 'l' || c == 'L'){\n                reversed.add(c)\n\
    \            }else if(c == 'm' || c == 'M'){\n                reversed.add(c)\n\
    \            }else if(c == 'n' || c == 'N'){\n                reversed.add(c)\n\
    \            }else if(c == 'o' || c == 'O'){\n                reversed.add(c)\n\
    \            }else if(c == 'p' || c == 'P'){\n                reversed.add(c)\n\
    \            }else if(c == 'q' || c == 'Q'){\n                reversed.add(c)\n\
    \            }else if(c == 'r' || c == 'R'){\n                reversed.add(c)\n\
    \            }else if(c == 's' || c == 'S'){\n                reversed.add(c)\n\
    \            }else if(c == 't' || c == 'T'){\n                reversed.add(c)\n\
    \            }else if(c == 'u' || c == 'U'){\n                reversed.add(c)\n\
    \            }else if(c == 'v' || c == 'V'){\n                reversed.add(c)\n\
    \            }else if(c == 'w' || c == 'W'){\n                reversed.add(c)\n\
    \            }else if(c == 'x' || c == 'X'){\n                reversed.add(c)\n\
    \            }else if(c == 'y' || c == 'Y'){\n                reversed.add(c)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2j6uk4ck.scala:84:0 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2j6uk4ck.scala:18:27\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mreversed\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mChar\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp2j6uk4ck.scala:19:8 ---------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until chars.length){\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e\
    [31m   |\e[0m        Required: String\n\e[31m20 |\e[0m            \e[33mval\e\
    [0m \e[36mc\e[0m = chars(i)\n\e[31m21 |\e[0m            \e[33mif\e[0m(c == \e\
    [31m'a'\e[0m || c == \e[31m'A'\e[0m){\n\e[31m22 |\e[0m                reversed.add(c)\n\
    \e[31m23 |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(c == \e[31m'b'\e[0m\
    \ || c == \e[31m'B'\e[0m){\n\e[31m24 |\e[0m                reversed.add(c)\n\e\
    [31m25 |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(c == \e[31m'c'\e[0m ||\
    \ c == \e[31m'C'\e[0m){\n\e[31m26 |\e[0m                reversed.add(c)\n\e[31m27\
    \ |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(c == \e[31m'd'\e[0m || c ==\
    \ \e[31m'D'\e[0m){\n\e[31m28 |\e[0m                reversed.add(c)\n\e[31m29 |\e\
    [0m            }\e[33melse\e[0m \e[33mif\e[0m(c == \e[31m'e'\e[0m || c == \e[31m'E'\e\
    [0m){\n\e[31m30 |\e[0m                reversed.add(c)\n\e[31m31 |\e[0m       \
    \     }\e[33melse\e[0m \e[33mif\e[0m(c == \e[31m'f'\e[0m || c == \e[31m'F'\e[0m){\n\
    \e[31m32 |\e[0m                reversed.add(c)\n\e[31m33 |\e[0m            }\e\
    [33melse\e[0m \e[33mif\e[0m(c == \e[31m'g'\e[0m || c == \e[31m'G'\e[0m){\n\e[31m34\
    \ |\e[0m                reversed.add(c)\n\e[31m35 |\e[0m            }\e[33melse\e\
    [0m \e[33mif\e[0m(c == \e[31m'h'\e[0m || c == \e[31m'H'\e[0m){\n\e[31m36 |\e[0m\
    \                reversed.add(c)\n\e[31m37 |\e[0m            }\e[33melse\e[0m"
  stdout: ''
  timestamp: 1659793936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val charsReversed = chars.reverse\n\
    \        val charsReversedString = charsReversed.mkString.reverse\n        charsReversedString.toUpperCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpux10pjsc.scala:23)\n\tat Problem.main(tmpux10pjsc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \        {\n            val c = s.charAt(i)\n            if(c == 'a' || c == 'A')\n\
    \            {\n                result.append(c.toUpperCase)\n            }\n\
    \            else\n            {\n                result.append(c)\n         \
    \   }\n        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppvyf0yug.scala:23:32 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        val len = s.length\n        var\
    \ i = 0\n        while (i < len) {\n            val c = s.charAt(i)\n        \
    \    if (c.isLetter) {\n                val upper = c.toUpperCase\n          \
    \      val lower = c.toLowerCase\n                if (upper == lower) {\n    \
    \                result.append(upper)\n                } else {\n            \
    \        result.append(lower)\n                }\n            } else {\n     \
    \           result.append(c)\n            }\n            i += 1\n        }\n \
    \       result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp51bp4ssr.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36mupper\e[0m = c.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            value toUpperCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp51bp4ssr.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mlower\e[0m = c.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            value toLowerCase is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val result = new mutable.ListBuffer[String]()\n\
    \        val len = chars.length\n        for (i <- 0 until len) {\n          \
    \  val c = chars(i)\n            if (c.isLetter) {\n                val upper\
    \ = c.toUpperCase\n                val lower = c.toLowerCase\n               \
    \ if (upper != lower) {\n                    result += upper\n               \
    \ } else {\n                    result += lower\n                }\n         \
    \   } else {\n                result += c\n            }\n        }\n        if\
    \ (result.isEmpty) {\n            s.reverse\n        } else {\n            new\
    \ String(result.toArray)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplx56zvzs.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplx56zvzs.scala:23:30\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e\
    [0m \e[36mupper\e[0m = c.toUpperCase\n\e[31m\e[31m   |\e[0m                  \
    \          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            value\
    \ toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmplx56zvzs.scala:24:30 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m                \e[33mval\e[0m \e[36mlower\e[0m = c.toLowerCase\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                        value toLowerCase is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659793937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                chars\
    \ += s.charAt(i)\n            }\n        }\n        if(chars.isEmpty){\n     \
    \       return s\n        }\n        chars.reverse.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1nqtfw0x.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      result += s.charAt(i)\n        chars.toSeq.reverse.foreach(c => result\
    \ += c.toUpperCase)\n        if(chars.size == 0)\n            result.reverse\n\
    \        else\n            result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgtxviq4f.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpgtxviq4f.scala:26:19 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            result.reverse\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    StringBuilder\n\
    \e[31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpgtxviq4f.scala:28:12 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            result\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (result : StringBuilder)\n\
    \e[31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \        {\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n       \
    \     {\n                result.append((s.charAt(i) - 'a').toUpperCase)\n    \
    \        }\n            else\n            {\n                result.append((s.charAt(i)\
    \ - 'a'))\n            }\n        }\n        return result.toString\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpghfswvre.scala:22:50 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                result.append((s.charAt(i) - \e[31m'a'\e\
    [0m).toUpperCase)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value toUpperCase is not a member\
    \ of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659793937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for (c <- s) {\n    \
    \        if (c.isLetter) chars += c.toUpperCase\n            else chars += c.toLowerCase\n\
    \        }\n        if (chars.isEmpty) s.reverse\n        else chars.reverse.mkString.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgbb02rqa.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c.isLetter){\n              \
    \  val c = c.toUpperCase\n                val c = c.toLower\n                result\
    \ += c\n            }else{\n                result += c\n            }\n     \
    \   }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1_gm5ld2.scala:22:20 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mc\e[0m = c.toLower\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mc\
    \ is already defined as \e[33mvalue\e[0m \e[35mc\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659793935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until\
    \ s.length) chars += s(i)\n        chars.toList.reverse.mkString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzpjq_krc.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1q4le5ee.scala:26)\n\tat Problem.main(tmp1q4le5ee.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        val chars = mutable.Set[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.foreach {\n            case c if c.isLetter => result.append(c.toUpperCase)\n\
    \            case c => result.append(c)\n        }\n        if(chars.isEmpty)\
    \ result.reverse\n        else result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeqgufe38.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpeqgufe38.scala:25:33 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m(chars.isEmpty) result.reverse\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          Found:    StringBuilder\n\e[31m   |\e[0m        \
    \                  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until\
    \ s.length){\n            chars += s(i)\n        }\n        chars.toList.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0iqluvcd.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.HashSet[Char]()\n        for (c <- s) {\n       \
    \     if (c.isLetter) chars += c\n            else chars += c.toUpperCase\n  \
    \      }\n        if (chars.isEmpty) s.reverse\n        else chars.toList.foldLeft(\"\
    \") { (s, c) => s + c.toUpperCase }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzfn32vr_.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val reversed = new mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until chars.length){\n            val c = chars(i)\n     \
    \       if(c.isLetter){\n                val upper = c.toUpperCase\n         \
    \       val lower = c.toLowerCase\n                if(upper.isLetter && lower.isLetter){\n\
    \                    reversed.append(upper)\n                    reversed.append(lower)\n\
    \                }else if(upper.isLetter && !lower.isLetter){\n              \
    \      reversed.append(upper)\n                }else if(!upper.isLetter && lower.isLetter){\n\
    \                    reversed.append(lower)\n                }\n            }else{\n\
    \                reversed.append(c)\n            }\n        }\n        if(reversed.isEmpty){\n\
    \            s.reverse\n        }else{\n            reversed.mkString\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaokhyes_.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaokhyes_.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e\
    [0m \e[36mupper\e[0m = c.toUpperCase\n\e[31m\e[31m   |\e[0m                  \
    \          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            value\
    \ toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpaokhyes_.scala:23:30 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m                \e[33mval\e[0m \e[36mlower\e[0m = c.toLowerCase\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                        value toLowerCase is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659793939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe_ne8k65.scala:26)\n\tat Problem.main(tmpe_ne8k65.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append(\"A\")\n            }else if(c == 'b' || c == 'B'){\n\
    \                result.append(\"B\")\n            }else if(c == 'c' || c == 'C'){\n\
    \                result.append(\"C\")\n            }else if(c == 'd' || c == 'D'){\n\
    \                result.append(\"D\")\n            }else if(c == 'e' || c == 'E'){\n\
    \                result.append(\"E\")\n            }else if(c == 'f' || c == 'F'){\n\
    \                result.append(\"F\")\n            }else if(c == 'g' || c == 'G'){\n\
    \                result.append(\"G\")\n            }else if(c == 'h' || c == 'H'){\n\
    \                result.append(\"H\")\n            }else if(c == 'i' || c == 'I'){\n\
    \                result.append(\"I\")\n            }else if(c == 'j' || c == 'J'){\n\
    \                result.append(\"J\")\n            }else if(c == 'k' || c == 'K'){\n\
    \                result.append(\"K\")\n            }else if(c == 'l' || c == 'L'){\n\
    \                result.append(\"L\")\n            }else if(c == 'm' || c == 'M'){\n\
    \                result.append(\"M\")\n            }else if(c == 'n' || c == 'N'){\n\
    \                result.append(\"N\")\n            }else if(c == 'o' || c == 'O'){\n\
    \                result.append(\"O\")\n            }else if(c == 'p' || c == 'P'){\n\
    \                result.append(\"P\")\n            }else if(c == 'q' || c == 'Q'){\n\
    \                result.append(\"Q\")\n            }else if(c == 'r' || c == 'R'){\n\
    \                result.append(\"R\")\n            }else if(c == 's' || c == 'S'){\n\
    \                result.append(\"S\")\n            }else if(c == 't' || c == 'T'){\n\
    \                result.append(\"T\")\n            }else if(c == 'u' || c == 'U'){\n\
    \                result.append(\"U\")\n            }else if(c == 'v' || c == 'V'){\n\
    \                result.append(\"V\")\n            }else if(c == 'w' || c == 'W'){\n\
    \                result.append(\"W\")\n            }else if(c == 'x' || c == 'X'){\n\
    \                result.append(\"X\")\n            }else if(c == 'y' || c == 'Y'){\n\
    \                result.append(\"Y\")\n            }else if(c == 'z' || c == 'Z'){\n\
    \                result.\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfrz_47bk.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpfrz_47bk.scala:85:0 ----------------------------\e[0m\e[0m\n\e[31m85\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[33m\e[33m-- Warning: /tmp/tmpfrz_47bk.scala:73:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m73 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659793901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for (c <- s) {\n    \
    \        if (c.isLetter) {\n                chars += c.toUpperCase\n         \
    \   } else {\n                chars += c\n            }\n        }\n        if\
    \ (chars.isEmpty) {\n            return s\n        } else {\n            chars.reverse\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjuqcrqde.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new mutable.ListBuffer[String]()\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n     \
    \           result.append((s.charAt(i) - 'a').toString)\n            else\n  \
    \              result.append((s.charAt(i) - 'A').toString)\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpknbm5ny0.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'A'){\n                result.append(c.toLowerCase)\n\
    \            }else{\n                result.append(c)\n            }\n       \
    \ }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzmuf5w4g.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpzmuf5w4g.scala:23:32 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                result.append(c.toLowerCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toLowerCase is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for(c <- s) {\n            if(c == '@') {\n                chars += '@'\n\
    \            }\n            if(c == '#') {\n                chars += '#'\n   \
    \         }\n            if(c == '@' || c == '#') {\n                chars +=\
    \ c\n            }\n        }\n        if(chars.isEmpty) {\n            result.append(s)\n\
    \        } else {\n            for(c <- chars) {\n                val index =\
    \ s.indexOf(c)\n                if(index != -1) {\n                    val newChar\
    \ = s.charAt(index).toUpperCase + s.charAt(index).toLowerCase\n              \
    \      result.append(newChar)\n                }\n            }\n        }\n \
    \       result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpax34_wo1.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.Set[Char]()\n        for(i <- 0 until s.length) chars\
    \ += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfehmcsp6.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a'){\n                result.append(\"\
    A\")\n            }else if(c == 'A'){\n                result.append(\"a\")\n\
    \            }else if(c == 'b'){\n                result.append(\"B\")\n     \
    \       }else if(c == 'B'){\n                result.append(\"b\")\n          \
    \  }else if(c == 'c'){\n                result.append(\"C\")\n            }else\
    \ if(c == 'C'){\n                result.append(\"c\")\n            }else if(c\
    \ == 'd'){\n                result.append(\"D\")\n            }else if(c == 'D'){\n\
    \                result.append(\"d\")\n            }else if(c == 'e'){\n     \
    \           result.append(\"E\")\n            }else if(c == 'E'){\n          \
    \      result.append(\"e\")\n            }else if(c == 'f'){\n               \
    \ result.append(\"F\")\n            }else if(c == 'F'){\n                result.append(\"\
    f\")\n            }else if(c == 'g'){\n                result.append(\"G\")\n\
    \            }else if(c == 'G'){\n                result.append(\"g\")\n     \
    \       }else if(c == 'h'){\n                result.append(\"H\")\n          \
    \  }else if(c == 'H'){\n                result.append(\"h\")\n            }else\
    \ if(c == 'i'){\n                result.append(\"I\")\n            }else if(c\
    \ == 'I'){\n                result.append(\"i\")\n            }else if(c == 'j'){\n\
    \                result.append(\"J\")\n            }else if(c == 'J'){\n     \
    \           result.append(\"j\")\n            }else if(c == 'k'){\n          \
    \      result.append(\"K\")\n            }else if(c == 'K'){\n               \
    \ result.append(\"k\")\n            }else if(c == 'l'){\n                result.append(\"\
    L\")\n            }else if(c == 'L'){\n                result.append(\"l\")\n\
    \            }else if(c == 'm'){\n                result.append(\"M\")\n     \
    \       }else if(c == 'M'){\n                result.append(\"m\")\n          \
    \  }else if(c == 'n'){\n                result.append(\"N\")\n            }else\
    \ if(c == 'N'){\n                result.append(\"n\")\n            }else if(c\
    \ == 'o'){\n                result.append(\"O\")\n            }else if(c == 'O'){\n\
    \                result.append(\"o\")\n            }else if(c == 'p'){\n     \
    \           result.append(\"P\")\n            }else if(c == 'P'){\n          \
    \      result.append(\"p\")\n            }else if(c == 'q'){\n               \
    \ result.append(\"Q\")\n            }else \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoyewhq0s.scala:86:17 ---------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m            }\e[33melse\e[0m \n\e[31m\e[31m   |\e[0m\
    \                 ^\e[0m\n\e[31m   |\e[0m                 expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpoyewhq0s.scala:100:0 ---------------------------\e[0m\e[0m\n\e[31m100\
    \ |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof\
    \ found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoyewhq0s.scala:99:1\
    \ ---------------------\e[0m\e[0m\n\e[31m99 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpoyewhq0s.scala:88:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m88 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659793941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i).toLowerCase == s.charAt(i).toUpperCase\
    \ || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase)\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i)\n   \
    \     chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprgf9kthc.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmprgf9kthc.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (s.charAt(i).toLowerCase ==\
    \ s.charAt(i).toUpperCase || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659793941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new mutable.StringBuilder\n        for (i <- 0 until s.length)\n\
    \            if (s(i).isLetter) result.append(s(i).swapCase)\n            else\
    \ result.append(s(i))\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp15zgl27v.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfbdq0sqc.scala:26)\n\tat Problem.main(tmpfbdq0sqc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgag40ptw.scala:26)\n\tat Problem.main(tmpgag40ptw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.toSeq.reverse.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7h8jev6h.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n\
    \            if((s.charAt(i) >= 'a' && s.charAt(i) <= 'z') || (s.charAt(i) >=\
    \ 'A' && s.charAt(i) <= 'Z'))\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa23vvfwz.scala:26)\n\tat Problem.main(tmpa23vvfwz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1q4le5ee.scala:26)\n\tat Problem.main(tmp1q4le5ee.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toLower\n\
    \        chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdrr6z2xe.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793942
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until\
    \ s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n    \
    \            chars += s.charAt(i)\n            }\n            else if(s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z'){\n                chars += s.charAt(i).toUpper\n\
    \            }\n            else{\n                chars += s.charAt(i)\n    \
    \        }\n        }\n        chars.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbnityqb.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793942
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.charAt(i))\n            else\n                result.append(s.charAt(i))\n\
    \        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5hwg9giu.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result.append((s.charAt(i) - \e[31m'a'\e\
    [0m).toUpper + s.charAt(i))\n\e[31m\e[31m   |\e[0m                           \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \      value toUpper is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659793944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n     \
    \           chars += s.charAt(i)\n            else if (s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z')\n                chars += s.charAt(i).toUpper\n            else\n  \
    \              chars += s.charAt(i)\n        chars.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5duavcmz.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793942
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append(c.toUpperCase)\n            }else if(c == 'b' || c\
    \ == 'B'){\n                result.append(c.toLowerCase)\n            }else{\n\
    \                result.append(c)\n            }\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxsy_q249.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpxsy_q249.scala:23:32 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                result.append(c.toLowerCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toLowerCase is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = s.toUpperCase\n        val reversed = result.map(c => if\
    \ (c.isLetter) c.toUpperCase(c) else c)\n        if (result.isEmpty) result\n\
    \        else reversed.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqgccfiny.scala:18:57 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = result.map(\e\
    [36mc\e[0m => \e[33mif\e[0m (c.isLetter) c.toUpperCase(c) \e[33melse\e[0m c)\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659793946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new mutable.StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a'){\n                result.append(\"\
    A\")\n            }else if(c == 'A'){\n                result.append(\"a\")\n\
    \            }else if(c == 'b'){\n                result.append(\"B\")\n     \
    \       }else if(c == 'B'){\n                result.append(\"b\")\n          \
    \  }else if(c == 'c'){\n                result.append(\"C\")\n            }else\
    \ if(c == 'C'){\n                result.append(\"c\")\n            }else if(c\
    \ == 'd'){\n                result.append(\"D\")\n            }else if(c == 'D'){\n\
    \                result.append(\"d\")\n            }else if(c == 'e'){\n     \
    \           result.append(\"E\")\n            }else if(c == 'E'){\n          \
    \      result.append(\"e\")\n            }else if(c == 'f'){\n               \
    \ result.append(\"F\")\n            }else if(c == 'F'){\n                result.append(\"\
    f\")\n            }else if(c == 'g'){\n                result.append(\"G\")\n\
    \            }else if(c == 'G'){\n                result.append(\"g\")\n     \
    \       }else if(c == 'h'){\n                result.append(\"H\")\n          \
    \  }else if(c == 'H'){\n                result.append(\"h\")\n            }else\
    \ if(c == 'i'){\n                result.append(\"I\")\n            }else if(c\
    \ == 'I'){\n                result.append(\"i\")\n            }else if(c == 'j'){\n\
    \                result.append(\"J\")\n            }else if(c == 'J'){\n     \
    \           result.append(\"j\")\n            }else if(c == 'k'){\n          \
    \      result.append(\"K\")\n            }else if(c == 'K'){\n               \
    \ result.append(\"k\")\n            }else if(c == 'l'){\n                result.append(\"\
    L\")\n            }else if(c == 'L'){\n                result.append(\"l\")\n\
    \            }else if(c == 'm'){\n                result.append(\"M\")\n     \
    \       }else if(c == 'M'){\n                result.append(\"m\")\n          \
    \  }else if(c == 'n'){\n                result.append(\"N\")\n            }else\
    \ if(c == 'N'){\n                result.append(\"n\")\n            }else if(c\
    \ == 'o'){\n                result.append(\"O\")\n            }else if(c == 'O'){\n\
    \                result.append(\"o\")\n            }else if(c == 'p'){\n     \
    \           result.append(\"P\")\n            }else if(c == 'P'){\n          \
    \      result.append(\"p\")\n            }else if(c == 'q'){\n               \
    \ result.append(\"Q\")\n            }else \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyoa355c6.scala:86:17 ---------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m            }\e[33melse\e[0m \n\e[31m\e[31m   |\e[0m\
    \                 ^\e[0m\n\e[31m   |\e[0m                 expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpyoa355c6.scala:100:0 ---------------------------\e[0m\e[0m\n\e[31m100\
    \ |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof\
    \ found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyoa355c6.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyoa355c6.scala:99:1 ---------------------\e\
    [0m\e[0m\n\e[31m99 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpyoa355c6.scala:88:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m88 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659793947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new mutable.ListBuffer[String]()\n        for(i <- 0 until\
    \ s.length){\n            val c = s.charAt(i)\n            if(c == 'a' || c ==\
    \ 'A'){\n                result.append(\"A\")\n            }else if(c == 'b' ||\
    \ c == 'B'){\n                result.append(\"B\")\n            }else if(c ==\
    \ 'c' || c == 'C'){\n                result.append(\"C\")\n            }else if(c\
    \ == 'd' || c == 'D'){\n                result.append(\"D\")\n            }else\
    \ if(c == 'e' || c == 'E'){\n                result.append(\"E\")\n          \
    \  }else if(c == 'f' || c == 'F'){\n                result.append(\"F\")\n   \
    \         }else if(c == 'g' || c == 'G'){\n                result.append(\"G\"\
    )\n            }else if(c == 'h' || c == 'H'){\n                result.append(\"\
    H\")\n            }else if(c == 'i' || c == 'I'){\n                result.append(\"\
    I\")\n            }else if(c == 'j' || c == 'J'){\n                result.append(\"\
    J\")\n            }else if(c == 'k' || c == 'K'){\n                result.append(\"\
    K\")\n            }else if(c == 'l' || c == 'L'){\n                result.append(\"\
    L\")\n            }else if(c == 'm' || c == 'M'){\n                result.append(\"\
    M\")\n            }else if(c == 'n' || c == 'N'){\n                result.append(\"\
    N\")\n            }else if(c == 'o' || c == 'O'){\n                result.append(\"\
    O\")\n            }else if(c == 'p' || c == 'P'){\n                result.append(\"\
    P\")\n            }else if(c == 'q' || c == 'Q'){\n                result.append(\"\
    Q\")\n            }else if(c == 'r' || c == 'R'){\n                result.append(\"\
    R\")\n            }else if(c == 's' || c == 'S'){\n                result.append(\"\
    S\")\n            }else if(c == 't' || c == 'T'){\n                result.append(\"\
    T\")\n            }else if(c == 'u' || c == 'U'){\n                result.append(\"\
    U\")\n            }else if(c == 'v' || c == 'V'){\n                result.append(\"\
    V\")\n            }else if(c == 'w' || c == 'W'){\n                result.append(\"\
    W\")\n            }else if(c == 'x' || c == 'X'){\n                result.append(\"\
    X\")\n            }else if(c == 'y' || c == 'Y'){\n                result.append(\"\
    Y\")\n            }else if(c == 'z' || c == '\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpc4bg7hy2.scala:70:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(c == \e[31m'z'\e\
    [0m || c == '\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      unclosed character literal\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc4bg7hy2.scala:84:0 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc4bg7hy2.scala:17:25\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpc4bg7hy2.scala:83:1 ---------------------\e[0m\e[0m\n\e[31m83\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpc4bg7hy2.scala:72:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m72 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n\e[33m\e[33m-- [E129] Potential Issue Warning:\
    \ /tmp/tmpc4bg7hy2.scala:71:4 -----------------\e[0m\e[0m\n\e[33m70 |\e[0m   \
    \         }\e[33melse\e[0m \e[33mif\e[0m(c == \e[31m'z'\e[0m || c == '\n\e[33m71\
    \ |\e[0m    }\n\e[33m\e[33m   |\e[0m                                       ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 warnings found\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append(c.toUpperCase)\n            }else if(c == 'b' || c\
    \ == 'B'){\n                result.append(c.toLowerCase)\n            }else{\n\
    \                result.append(c)\n            }\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxsy_q249.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpxsy_q249.scala:23:32 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                result.append(c.toLowerCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toLowerCase is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        val chars = s.toCharArray\n \
    \       for(i <- 0 until chars.length) {\n            val c = chars(i)\n     \
    \       if(c == 'a' || c == 'A') {\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            } else {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp18rc18yt.scala:22:40 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                result.append((chars(i).toUpperCase +\
    \ chars(i).toLowerCase))\n\e[31m\e[31m   |\e[0m                              \
    \ ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659793947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = s.toUpperCase\n        val reversed = result.reverse\n \
    \       val letters = result.filter(_ >= 'a' && _ <= 'z')\n        if (letters.isEmpty)\
    \ {\n            reversed\n        } else {\n            val newLetters = letters.map(_\
    \ - 'a').toList\n            val newReversed = reversed.zip(newLetters).map {\
    \ case (letter, newLetter) => newLetter + letter }\n            newReversed.mkString\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpwqiws_8v.scala:19:36 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = result.filter(_\
    \ >= \e[31m'a'\e[0m && _ <= \e[31m'z'\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                        Wrong number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1659793945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append(c.toUpperCase)\n            }else if(c == 'b' || c\
    \ == 'B'){\n                result.append(c.toLowerCase)\n            }else if(c\
    \ == 'c' || c == 'C'){\n                result.append(c.toUpperCase)\n       \
    \     }else if(c == 'd' || c == 'D'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'e' || c == 'E'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'f' || c == 'F'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'g' || c == 'G'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'h' || c == 'H'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'i' || c == 'I'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'j' || c == 'J'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'k' || c == 'K'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'l' || c == 'L'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'm' || c == 'M'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'n' || c == 'N'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'o' || c == 'O'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'p' || c == 'P'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'q' || c == 'Q'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'r' || c == 'R'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 's' || c == 'S'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 't' || c == 'T'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'u' || c == 'U'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'v' || c == 'V'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'w' || c == 'W'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'x' || c == 'X'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'y' || c == 'Y'){\n                result.append(c.toUpperCase)\n\
    \            }else \n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8omhk4cj.scala:70:17 ---------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m            }\e[33melse\e[0m \n\e[31m\e[31m   |\e[0m\
    \                 ^\e[0m\n\e[31m   |\e[0m                 expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp8omhk4cj.scala:84:0 ----------------------------\e[0m\e[0m\n\e[31m84\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8omhk4cj.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8omhk4cj.scala:23:32 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                result.append(c.toLowerCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8omhk4cj.scala:25:32 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8omhk4cj.scala:27:32 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                result.append(c.toLowerCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8omhk4cj.scala:29:32 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a mem"
  stdout: ''
  timestamp: 1659793928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n     \
    \           chars += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr687six0.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val result = new StringBuilder\n \
    \       val charsCount = chars.length\n        val charsReversed = chars.reverse\n\
    \        val charsReversedCount = charsReversed.length\n        var i = 0\n  \
    \      var j = 0\n        while (i < charsCount) {\n            if (chars(i) >=\
    \ 'a' && chars(i) <= 'z') {\n                charsReversed(j) = chars(i)\n   \
    \             j++\n            } else if (chars(i) >= 'A' && chars(i) <= 'Z')\
    \ {\n                charsReversed(j) = chars(i)\n                j++\n      \
    \      } else {\n                result.append(chars(i))\n                i++\n\
    \            }\n        }\n        result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpimqyu09r.scala:27:19 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                j++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpimqyu09r.scala:30:19\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                j++\n\e\
    [31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E018] Syntax Error: /tmp/tmpimqyu09r.scala:33:19 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                i++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val result = new StringBuilder\n \
    \       for (i <- 0 until chars.length) {\n            val c = chars(i)\n    \
    \        if (c.isLetter) {\n                val lower = c.toLower\n          \
    \      val upper = c.toUpper\n                if (lower == upper) {\n        \
    \            result.append(lower)\n                } else {\n                \
    \    result.append(upper)\n                }\n            } else {\n         \
    \       result.append(c)\n            }\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0r9lvddw.scala:36)\n\tat Problem.main(tmp0r9lvddw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.Set[Char]()\n        for(i <- 0 until s.length) chars\
    \ += s(i)\n        chars.toList.sortWith(_ < _).reverse.mkString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmfzu3sk8.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append(c.toUpperCase)\n            }else if(c == 'b' || c\
    \ == 'B'){\n                result.append(c.toLowerCase)\n            }else if(c\
    \ == 'c' || c == 'C'){\n                result.append(c.toUpperCase)\n       \
    \     }else if(c == 'd' || c == 'D'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'e' || c == 'E'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'f' || c == 'F'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'g' || c == 'G'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'h' || c == 'H'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'i' || c == 'I'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'j' || c == 'J'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'k' || c == 'K'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'l' || c == 'L'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'm' || c == 'M'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'n' || c == 'N'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'o' || c == 'O'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'p' || c == 'P'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'q' || c == 'Q'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'r' || c == 'R'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 's' || c == 'S'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 't' || c == 'T'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'u' || c == 'U'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'v' || c == 'V'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'w' || c == 'W'){\n                result.append(c.toUpperCase)\n\
    \            }else if(c == 'x' || c == 'X'){\n                result.append(c.toLowerCase)\n\
    \            }else if(c == 'y' || c == 'Y'){\n                result.append(c.toUpperCase)\n\
    \            }else \n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8omhk4cj.scala:70:17 ---------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m            }\e[33melse\e[0m \n\e[31m\e[31m   |\e[0m\
    \                 ^\e[0m\n\e[31m   |\e[0m                 expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp8omhk4cj.scala:84:0 ----------------------------\e[0m\e[0m\n\e[31m84\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8omhk4cj.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8omhk4cj.scala:23:32 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                result.append(c.toLowerCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8omhk4cj.scala:25:32 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8omhk4cj.scala:27:32 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                result.append(c.toLowerCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8omhk4cj.scala:29:32 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a mem"
  stdout: ''
  timestamp: 1659793928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i).toLowerCase != s.charAt(i).toUpperCase && chars.contains(s.charAt(i)))\n\
    \                chars.remove(s.charAt(i))\n            else\n               \
    \ chars.add(s.charAt(i))\n        chars.toList.map(_.toUpperCase).mkString(\"\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1970uxyt.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp1970uxyt.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m(s.charAt(i).toLowerCase !=\
    \ s.charAt(i).toUpperCase && chars.contains(s.charAt(i)))\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \ value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659793947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == c.toUpperCase || c == c.toLowerCase\
    \ ){\n                result.append(c.toUpperCase)\n            }else{\n     \
    \           result.append(c)\n            }\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpisx1se4t.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(c == c.toUpperCase || c ==\
    \ c.toLowerCase ){\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    value toUpperCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpisx1se4t.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toLower\n\
    \        chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvjkka6gg.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val strArray = s.toCharArray\n        val strArrayReversed = strArray.reverse\n\
    \        strArrayReversed.foldLeft(\"\"){ (result, c) =>\n            val isLetter\
    \ = c.toString.isLetter\n            if(isLetter){\n                result + c.toUpperCase\n\
    \            }else{\n                result + c.toLowerCase\n            }\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpatsr0766.scala:20:38 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36misLetter\e[0m = c.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           value isLetter is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpatsr0766.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                result + c.toUpperCase\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                  value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpatsr0766.scala:24:27 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                result + c.toLowerCase\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \           value toLowerCase is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until\
    \ s.length) chars += s.charAt(i)\n        chars.toList.reverse.foldLeft(\"\")(_\
    \ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6sxot0jy.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\n\
    \                chars += s.charAt(i).toUpper\n            else\n            \
    \    chars += s.charAt(i)\n        chars.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqtifxk3h.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\
    \ chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp41jv2w89.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = s.toUpperCase\n        val chars = result.toCharArray\n\
    \        val reversed = new mutable.ListBuffer[Char]()\n        chars.foreach(c\
    \ => {\n            val isLetter = c.isLetter\n            val isUpper = c.toUpper\
    \ == c\n            val isLower = c.toLower == c\n            if (isLetter) {\n\
    \                if (isUpper) {\n                    reversed.add(c)\n       \
    \         } else {\n                    reversed.add(c.toLower)\n            \
    \    }\n            } else {\n                reversed.add(c)\n            }\n\
    \        })\n        reversed.toString.toUpperCase\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplzyhysk9.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n\
    \            chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp67nq1jcs.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i).toLowerCase == s.charAt(i).toUpperCase || s.charAt(i).toLowerCase\
    \ == s.charAt(i).toLowerCase){\n                result.append((s.charAt(i).toLowerCase).reverse)\n\
    \            }else{\n                result.append(s.charAt(i))\n            }\n\
    \        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp301nv_t6.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m(s.charAt(i).toLowerCase ==\
    \ s.charAt(i).toUpperCase || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase){\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp301nv_t6.scala:20:43 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                result.append((s.charAt(i).toLowerCase).reverse)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659793952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnxj41hz1.scala:26)\n\tat Problem.main(tmpnxj41hz1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val len = chars.length\n        val\
    \ result = new Array[Char](len)\n        var i = 0\n        var j = 0\n      \
    \  var k = 0\n        var temp = 0\n        var flag = false\n        var flag2\
    \ = false\n        var flag3 = false\n        var flag4 = false\n        var flag5\
    \ = false\n        var flag6 = false\n        var flag7 = false\n        var flag8\
    \ = false\n        var flag9 = false\n        var flag10 = false\n        var\
    \ flag11 = false\n        var flag12 = false\n        var flag13 = false\n   \
    \     var flag14 = false\n        var flag15 = false\n        var flag16 = false\n\
    \        var flag17 = false\n        var flag18 = false\n        var flag19 =\
    \ false\n        var flag20 = false\n        var flag21 = false\n        var flag22\
    \ = false\n        var flag23 = false\n        var flag24 = false\n        var\
    \ flag25 = false\n        var flag26 = false\n        var flag27 = false\n   \
    \     var flag28 = false\n        var flag29 = false\n        var flag30 = false\n\
    \        var flag31 = false\n        var flag32 = false\n        var flag33 =\
    \ false\n        var flag34 = false\n        var flag35 = false\n        var flag36\
    \ = false\n        var flag37 = false\n        var flag38 = false\n        var\
    \ flag39 = false\n        var flag40 = false\n        var flag41 = false\n   \
    \     var flag42 = false\n        var flag43 = false\n        var flag44 = false\n\
    \        var flag45 = false\n        var flag46 = false\n        var flag47 =\
    \ false\n        var flag48 = false\n        var flag49 = false\n        var flag50\
    \ = false\n        var flag51 = false\n        var flag52 = false\n        var\
    \ flag53 = false\n        var flag54 = false\n        var flag55 = false\n   \
    \     var flag56 = false\n        var flag57 = false\n        var flag58 = false\n\
    \        var flag59 = false\n        var flag60 = false\n        var flag61 =\
    \ false\n        var flag62 = false\n        var flag63 = false\n        var flag64\
    \ = false\n        var flag65 = false\n        var flag66 = false\n        var\
    \ flag67 = false\n        var flag68 = false\n        var flag69 = false\n   \
    \     var flag70 = false\n        var flag71 = false\n        var flag72 = false\n\
    \        var flag73 = false\n        var flag74 = false\n        var flag75 =\
    \ false\n        var flag76 = false\n        var flag77 = false\n        var flag78\
    \ = false\n        var flag79 = false\n        var flag80 = false\n        var\
    \ flag81 = false\n        var flag82 = false\n        var flag83 = false\n   \
    \     var flag84 = false\n        var flag85 = false\n        var flag86 = false\n\
    \        var flag87 = false\n        var flag88 = false\n        var flag89 =\
    \ false\n        var flag90 = false\n        var flag9\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoif932hc.scala:115:4 ---------------------------\e\
    [0m\e[0m\n\e[31m115 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpoif932hc.scala:115:5 --------------------\e[0m\e[0m\n\e[31m115 |\e[0m\
    \    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m    |\e[0m     Found:    Unit\n\
    \e[31m    |\e[0m     Required: String\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = s.toUpperCase\n        val reversed = result.reverse\n \
    \       val letters = result.filter(_.isLetter)\n        if(letters.isEmpty) reversed\n\
    \        else letters.foldLeft(reversed)((acc, letter) => acc + letter)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpue4z3zl4.scala:24)\n\tat Problem.main(tmpue4z3zl4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.Set[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.toList.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfir_anc4.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until\
    \ s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n      \
    \          chars += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_e067heb.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append(\"A\")\n            }else if(c == 'b' || c == 'B'){\n\
    \                result.append(\"B\")\n            }else if(c == 'c' || c == 'C'){\n\
    \                result.append(\"C\")\n            }else if(c == 'd' || c == 'D'){\n\
    \                result.append(\"D\")\n            }else if(c == 'e' || c == 'E'){\n\
    \                result.append(\"E\")\n            }else if(c == 'f' || c == 'F'){\n\
    \                result.append(\"F\")\n            }else if(c == 'g' || c == 'G'){\n\
    \                result.append(\"G\")\n            }else if(c == 'h' || c == 'H'){\n\
    \                result.append(\"H\")\n            }else if(c == 'i' || c == 'I'){\n\
    \                result.append(\"I\")\n            }else if(c == 'j' || c == 'J'){\n\
    \                result.append(\"J\")\n            }else if(c == 'k' || c == 'K'){\n\
    \                result.append(\"K\")\n            }else if(c == 'l' || c == 'L'){\n\
    \                result.append(\"L\")\n            }else if(c == 'm' || c == 'M'){\n\
    \                result.append(\"M\")\n            }else if(c == 'n' || c == 'N'){\n\
    \                result.append(\"N\")\n            }else if(c == 'o' || c == 'O'){\n\
    \                result.append(\"O\")\n            }else if(c == 'p' || c == 'P'){\n\
    \                result.append(\"P\")\n            }else if(c == 'q' || c == 'Q'){\n\
    \                result.append(\"Q\")\n            }else if(c == 'r' || c == 'R'){\n\
    \                result.append(\"R\")\n            }else if(c == 's' || c == 'S'){\n\
    \                result.append(\"S\")\n            }else if(c == 't' || c == 'T'){\n\
    \                result.append(\"T\")\n            }else if(c == 'u' || c == 'U'){\n\
    \                result.append(\"U\")\n            }else if(c == 'v' || c == 'V'){\n\
    \                result.append(\"V\")\n            }else if(c == 'w' || c == 'W'){\n\
    \                result.append(\"W\")\n            }else if(c == 'x' || c == 'X'){\n\
    \                result.append(\"X\")\n            }else if(c == 'y' || c == 'Y'){\n\
    \                result.append(\"Y\")\n            }else if(c == 'z' || c == 'Z'){\n\
    \                result.\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfrz_47bk.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpfrz_47bk.scala:85:0 ----------------------------\e[0m\e[0m\n\e[31m85\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[33m\e[33m-- Warning: /tmp/tmpfrz_47bk.scala:73:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m73 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659793901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append(c.toUpperCase)\n            }else if(c == 'b' || c\
    \ == 'B'){\n                result.append(c.toLowerCase)\n            }else{\n\
    \                result.append(c)\n            }\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxsy_q249.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpxsy_q249.scala:23:32 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                result.append(c.toLowerCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toLowerCase is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append(c.toUpperCase)\n            }else if(c == 'b' || c\
    \ == 'B'){\n                result.append(c.toLowerCase)\n            }else{\n\
    \                result.append(c)\n            }\n        }\n        return result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpelgzola0.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpelgzola0.scala:23:32 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                result.append(c.toLowerCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toLowerCase is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val reversed = chars.reverse\n   \
    \     val result = reversed.foldLeft(\"\") { (result, c) =>\n            if (c.isLetter)\
    \ c.toUpperCase\n            else c.toLowerCase\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfus3q56w.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (c.isLetter) c.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            value toUpperCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfus3q56w.scala:21:19 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m c.toLowerCase\n\e[31m\e[31m\
    \   |\e[0m                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \  value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659793954
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplxfp1m42.scala:26)\n\tat Problem.main(tmplxfp1m42.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\n\
    \            chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6c7qdf83.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new mutable.ListBuffer[String]()\n        val chars = s.toCharArray\n\
    \        for(i <- 0 until chars.length){\n            val c = chars(i)\n     \
    \       if(c == 'a'){\n                result.add(\"A\")\n            }else if(c\
    \ == 'A'){\n                result.add(\"a\")\n            }else if(c == 'b'){\n\
    \                result.add(\"B\")\n            }else if(c == 'B'){\n        \
    \        result.add(\"b\")\n            }else if(c == 'c'){\n                result.add(\"\
    C\")\n            }else if(c == 'C'){\n                result.add(\"c\")\n   \
    \         }else if(c == 'd'){\n                result.add(\"D\")\n           \
    \ }else if(c == 'D'){\n                result.add(\"d\")\n            }else if(c\
    \ == 'e'){\n                result.add(\"E\")\n            }else if(c == 'E'){\n\
    \                result.add(\"e\")\n            }else if(c == 'f'){\n        \
    \        result.add(\"F\")\n            }else if(c == 'F'){\n                result.add(\"\
    f\")\n            }else if(c == 'g'){\n                result.add(\"G\")\n   \
    \         }else if(c == 'G'){\n                result.add(\"g\")\n           \
    \ }else if(c == 'h'){\n                result.add(\"H\")\n            }else if(c\
    \ == 'H'){\n                result.add(\"h\")\n            }else if(c == 'i'){\n\
    \                result.add(\"I\")\n            }else if(c == 'I'){\n        \
    \        result.add(\"i\")\n            }else if(c == 'j'){\n                result.add(\"\
    J\")\n            }else if(c == 'J'){\n                result.add(\"j\")\n   \
    \         }else if(c == 'k'){\n                result.add(\"K\")\n           \
    \ }else if(c == 'K'){\n                result.add(\"k\")\n            }else if(c\
    \ == 'l'){\n                result.add(\"L\")\n            }else if(c == 'L'){\n\
    \                result.add(\"l\")\n            }else if(c == 'm'){\n        \
    \        result.add(\"M\")\n            }else if(c == 'M'){\n                result.add(\"\
    m\")\n            }else if(c == 'n'){\n                result.add(\"N\")\n   \
    \         }else if(c == 'N'){\n                result.add(\"n\")\n           \
    \ }else if(c == 'o'){\n                result.add(\"O\")\n            }else if(c\
    \ == 'O'){\n                result.add(\"o\")\n            }else if(c\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9k1rvn9b.scala:82:4 ----------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9k1rvn9b.scala:95:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m95 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp9k1rvn9b.scala:17:25 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9k1rvn9b.scala:81:21 --------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(c\n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ Found:    (c : Char)\n\e[31m   |\e[0m                     Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9k1rvn9b.scala:94:1\
    \ ---------------------\e[0m\e[0m\n\e[31m94 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmp9k1rvn9b.scala:83:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m83 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659793955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprbx4ucc4.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n\
    \        {\n            val c = s.charAt(i)\n            if(c.isLetter)\n    \
    \        {\n                val upper = c.toUpperCase\n                val lower\
    \ = c.toLowerCase\n                if(upper.isLetter && lower.isLetter)\n    \
    \            {\n                    result.setCharAt(i, upper)\n             \
    \       result.setCharAt(i, lower)\n                }\n                else\n\
    \                {\n                    result.setCharAt(i, c)\n             \
    \   }\n            }\n            else\n            {\n                result.setCharAt(i,\
    \ c)\n            }\n        }\n        result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdirupww5.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36mupper\e[0m = c.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            value toUpperCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdirupww5.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mlower\e[0m = c.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            value toLowerCase is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.charAt(i))\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeaift4ax.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result.append((s.charAt(i) - \e[31m'a'\e\
    [0m).toUpper + s.charAt(i))\n\e[31m\e[31m   |\e[0m                           \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \      value toUpper is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659793955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ArrayBuffer.empty[Char]\n        for (c <- s) {\n\
    \            if (c.isLetter) {\n                chars += c.toUpperCase\n     \
    \       } else {\n                chars += c\n            }\n        }\n     \
    \   chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp37ff8yqd.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\
    \ chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp41jv2w89.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until\
    \ s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n    \
    \            chars += s.charAt(i)\n            }\n            else if(s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z'){\n                chars += s.charAt(i).toUpper\n\
    \            }\n            else{\n                chars += s.charAt(i)\n    \
    \        }\n        }\n        chars.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbnityqb.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793942
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \n        chars.toList.sortWith(_ < _).reverse.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu771xjuv.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\
    \ \n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z') \n              \
    \  result.append((s.charAt(i) - 'a').toUpperCase)\n            else\n        \
    \        result.append(s.charAt(i))\n        return result.toString\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp47u0e8ia.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result.append((s.charAt(i) - \e[31m'a'\e\
    [0m).toUpperCase)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value toUpperCase is not a member\
    \ of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659793956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                chars\
    \ += s.charAt(i)\n            }\n        }\n        if(chars.isEmpty){\n     \
    \       return s\n        }\n        val reversed = s.reverse\n        for(i <-\
    \ 0 until reversed.length){\n            if(reversed.charAt(i) >= 'a' && reversed.charAt(i)\
    \ <= 'z'){\n                reversed.charAt(i) match {\n                    case\
    \ 'a' =>\n                        reversed.charAt(i) match {\n               \
    \             case 'A' =>\n                                reversed.charAt(i)\
    \ match {\n                                    case 'a' =>\n                 \
    \                       reversed.charAt(i) match {\n                         \
    \                   case 'A' =>\n                                            \
    \    reversed.charAt(i) match {\n                                            \
    \        case 'a' =>\n                                                       \
    \ reversed.charAt(i) match {\n                                               \
    \             case 'A' =>\n                                                  \
    \              reversed.charAt(i) match {\n                                  \
    \                                  case 'a' =>\n                             \
    \                                           reversed.charAt(i) match {\n     \
    \                                                                       case 'A'\
    \ =>\n                                                                       \
    \         reversed.charAt(i) match {\n                                       \
    \                                             case 'a' =>\n                  \
    \                                                                      reversed.charAt(i)\
    \ match {\n                                                                  \
    \                          case 'A' =>\n                                     \
    \                                                           reversed.charAt(i)\
    \ match {\n                                                                  \
    \                                  case 'a' =>\n                             \
    \                                                                           reversed.charAt(i)\
    \ match {\n                                                                  \
    \                                          case 'A' =>\n                     \
    \                                                                            \
    \               reversed.charAt(i) match {\n                                 \
    \                                                                            \
    \       case 'a' =>\n                                                        \
    \                                                                reversed.charAt(i)\
    \ match {\n                                                                  \
    \                                                          case 'A' =>\n     \
    \                                                                            \
    \                                               reversed.charAt(i) match {\n \
    \                                                                            \
    \                                                       case 'a' =>\n        \
    \                                                                            \
    \                                                    reversed.charAt(i) match\
    \ {\n                                                                        \
    \                                                                    case 'A'\
    \ =>\n                                                                       \
    \                                                                         reversed.charAt(i)\
    \ match {\n                                                                  \
    \                                                                            \
    \      case 'a' =>\n                                                         \
    \                                                                            \
    \                   reversed.charAt(i) match {\n                             \
    \                                                                            \
    \                                                   case 'A' =>\n            \
    \                                                                            \
    \                                                                        reversed.charAt(i)\
    \ match {\n                                                                  \
    \                                                                            \
    \                      case 'a' =>\n                                         \
    \                                                                            \
    \                                                   reversed.charAt(i) match {\n\
    \                                                                            \
    \                                                                            \
    \                    case 'A' =>\n                                           \
    \                                                                            \
    \                                                         reversed.charAt(i) match\
    \ {\n                                                                        \
    \                                                                            \
    \                                case 'a' =>\n                               \
    \                                                                            \
    \                                                                            \
    \ reversed.charAt(i) match {\n                                               \
    \                                                                            \
    \                                                                 case 'A' =>\n\
    \                                                                            \
    \                                                                            \
    \                                        reversed.charAt(i) match {\n        \
    \                                                                            \
    \                                                                            \
    \                                    case 'a' =>\n                           \
    \                                                                            \
    \                                                                            \
    \                     reversed.charAt(i) match {\n                           \
    \                                                                            \
    \                                                                            \
    \                         case 'A' =>\n                                      \
    \                                                                            \
    \                                                                            \
    \                  reversed.charAt(i) match {\n                              \
    \                                                                            \
    \                                                                            \
    \                              case 'a' =>\n                                 \
    \                               \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzw3hf_mc.scala:93:0 ----------------------------\e\
    [0m\e[0m\n\e[31m93 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzw3hf_mc.scala:17:20\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mchars\e[0m = mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzw3hf_mc.scala:27:8\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mfor\e[0m(i <-\
    \ \e[31m0\e[0m until reversed.length){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e\
    [31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: String\n\
    \e[31m28 |\e[0m            \e[33mif\e[0m(reversed.charAt(i) >= \e[31m'a'\e[0m\
    \ && reversed.charAt(i) <= \e[31m'z'\e[0m){\n\e[31m29 |\e[0m                reversed.charAt(i)\
    \ \e[33mmatch\e[0m {\n\e[31m30 |\e[0m                    \e[33mcase\e[0m \e[31m'a'\e\
    [0m =>\n\e[31m31 |\e[0m                        reversed.charAt(i) \e[33mmatch\e\
    [0m {\n\e[31m32 |\e[0m                            \e[33mcase\e[0m \e[31m'A'\e\
    [0m =>\n\e[31m33 |\e[0m                                reversed.charAt(i) \e[33mmatch\e\
    [0m {\n\e[31m34 |\e[0m                                    \e[33mcase\e[0m \e[31m'a'\e\
    [0m =>\n\e[31m35 |\e[0m                                        reversed.charAt(i)\
    \ \e[33mmatch\e[0m {\n\e[31m36 |\e[0m                                        \
    \    \e[33mcase\e[0m \e[31m'A'\e[0m =>\n\e[31m37 |\e[0m                      \
    \                          reversed.charAt(i) \e[33mmatch\e[0m {\n\e[31m38 |\e\
    [0m                                                    \e[33mcase\e[0m \e[31m'a'\e\
    [0m =>\n\e[31m39 |\e[0m                                                      \
    \  reversed.charAt(i) \e[33mmatch\e[0m {\n\e[31m40 |\e[0m                    \
    \                                        \e[33mcase\e[0m \e[31m'A'\e[0m =>\n\e\
    [31m41 |\e[0m                                                                reversed.charAt(i)\
    \ \e["
  stdout: ''
  timestamp: 1659793957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\
    \ chars += s.charAt(i)\n        chars.toList.sortWith(_.isLower && !_.isUpper).reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgqbg3njs.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ArrayBuffer.empty[Char]\n        for (c <- s) {\n\
    \            chars += c\n        }\n        chars.toList.reverse.foldLeft(\"\"\
    ) { (s, c) => s + c.toUpperCase + c.toLowerCase }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ldxl1yf.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        val chars = mutable.Set[Char]()\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      result += s.charAt(i)\n        chars.toList.reverse.foreach(c => result\
    \ += c.toString)\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw0jhsdbw.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val reversed = chars.reverse\n   \
    \     val result = reversed.foldLeft(\"\"){ (result, c) => if (Character.isLetter(c))\
    \ c.toUpperCase() else c.toLowerCase() }\n        if (chars.isEmpty) result\n\
    \        else result.reverse\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp5o9gmed.scala:19:88 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = reversed.foldLeft(\e\
    [31m\"\"\e[0m){ (\e[36mresult\e[0m, \e[36mc\e[0m) => \e[33mif\e[0m (Character.isLetter(c))\
    \ c.toUpperCase() \e[33melse\e[0m c.toLowerCase() }\n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpp5o9gmed.scala:19:109 -----------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = reversed.foldLeft(\e[31m\"\"\e[0m){\
    \ (\e[36mresult\e[0m, \e[36mc\e[0m) => \e[33mif\e[0m (Character.isLetter(c)) c.toUpperCase()\
    \ \e[33melse\e[0m c.toLowerCase() }\n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659793957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for (c <- s) {\n    \
    \        if (c.isLetter) {\n                chars += c.toUpperCase\n         \
    \   } else {\n                chars += c\n            }\n        }\n        chars.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjwdc9az8.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i).toLowerCase == s.charAt(i).toUpperCase || s.charAt(i).toLowerCase\
    \ == s.charAt(i).toLowerCase){\n                chars += s.charAt(i)\n       \
    \     }\n        }\n        if(chars.size == 0){\n            return s\n     \
    \   }\n        val reversed = new StringBuilder(s.length)\n        for(i <- 0\
    \ until s.length){\n            if(chars.contains(s.charAt(i))){\n           \
    \     reversed.append(s.charAt(i).toLowerCase)\n            }\n            else{\n\
    \                reversed.append(s.charAt(i))\n            }\n        }\n    \
    \    return reversed.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt84o6t_f.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpt84o6t_f.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m(s.charAt(i).toLowerCase ==\
    \ s.charAt(i).toUpperCase || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase){\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpt84o6t_f.scala:29:44 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m                reversed.append(s.charAt(i).toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659793957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a'){\n                result.append(\"\
    A\")\n            }else if(c == 'A'){\n                result.append(\"a\")\n\
    \            }else if(c == 'b'){\n                result.append(\"B\")\n     \
    \       }else if(c == 'B'){\n                result.append(\"b\")\n          \
    \  }else if(c == 'c'){\n                result.append(\"C\")\n            }else\
    \ if(c == 'C'){\n                result.append(\"c\")\n            }else if(c\
    \ == 'd'){\n                result.append(\"D\")\n            }else if(c == 'D'){\n\
    \                result.append(\"d\")\n            }else if(c == 'e'){\n     \
    \           result.append(\"E\")\n            }else if(c == 'E'){\n          \
    \      result.append(\"e\")\n            }else if(c == 'f'){\n               \
    \ result.append(\"F\")\n            }else if(c == 'F'){\n                result.append(\"\
    f\")\n            }else if(c == 'g'){\n                result.append(\"G\")\n\
    \            }else if(c == 'G'){\n                result.append(\"g\")\n     \
    \       }else if(c == 'h'){\n                result.append(\"H\")\n          \
    \  }else if(c == 'H'){\n                result.append(\"h\")\n            }else\
    \ if(c == 'i'){\n                result.append(\"I\")\n            }else if(c\
    \ == 'I'){\n                result.append(\"i\")\n            }else if(c == 'j'){\n\
    \                result.append(\"J\")\n            }else if(c == 'J'){\n     \
    \           result.append(\"j\")\n            }else if(c == 'k'){\n          \
    \      result.append(\"K\")\n            }else if(c == 'K'){\n               \
    \ result.append(\"k\")\n            }else if(c == 'l'){\n                result.append(\"\
    L\")\n            }else if(c == 'L'){\n                result.append(\"l\")\n\
    \            }else if(c == 'm'){\n                result.append(\"M\")\n     \
    \       }else if(c == 'M'){\n                result.append(\"m\")\n          \
    \  }else if(c == 'n'){\n                result.append(\"N\")\n            }else\
    \ if(c == 'N'){\n                result.append(\"n\")\n            }else if(c\
    \ == 'o'){\n                result.append(\"O\")\n            }else if(c == 'O'){\n\
    \                result.append(\"o\")\n            }else if(c == 'p'){\n     \
    \           result.append(\"P\")\n            }else if(c == 'P'){\n          \
    \      result.append(\"p\")\n            }else if(c == 'q'){\n               \
    \ result.append(\"Q\")\n            }else if(c\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjq59e8wa.scala:87:4 ----------------------------\e\
    [0m\e[0m\n\e[31m87 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjq59e8wa.scala:100:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m100 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjq59e8wa.scala:86:21 --------------------\e[0m\e\
    [0m\n\e[31m86 |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(c\n\e[31m\e[31m\
    \   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                     Found:\
    \    (c : Char)\n\e[31m   |\e[0m                     Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjq59e8wa.scala:99:1 ---------------------\e\
    [0m\e[0m\n\e[31m99 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpjq59e8wa.scala:88:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m88 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c.isLetter) result.append(c.toUpperCase)\n\
    \            else result.append(c)\n        }\n        result.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe1zyaji7.scala:20:43 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(c.isLetter) result.append(c.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659793909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprbx4ucc4.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.substring(i, i + 1))\n            else\n                result.append(s.charAt(i))\n\
    \        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzcd9eg09.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result.append((s.charAt(i) - \e[31m'a'\e\
    [0m).toUpper + s.substring(i, i + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m      \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                           value toUpper is not a member of Int\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpzcd9eg09.scala:23:15 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        result.reverse\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    StringBuilder\n\e[31m\
    \   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \n        chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqbu5wjj0.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgd1o4jja.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        val chars = s.toCharArray\n \
    \       for (i <- 0 until chars.length)\n            if (chars(i) >= 'a' && chars(i)\
    \ <= 'z')\n                chars(i) match {\n                    case 'a' =>\n\
    \                        chars(i) match {\n                            case 'A'\
    \ =>\n                                chars(i) match {\n                     \
    \               case 'a' =>\n                                        chars(i)\
    \ match {\n                                            case 'A' =>\n         \
    \                                       chars(i) match {\n                   \
    \                                 case 'a' =>\n                              \
    \                          chars(i) match {\n                                \
    \                            case 'A' =>\n                                   \
    \                             chars(i) match {\n                             \
    \                                       case 'a' =>\n                        \
    \                                                chars(i) match {\n          \
    \                                                                  case 'A' =>\n\
    \                                                                            \
    \    chars(i) match {\n                                                      \
    \                              case 'a' =>\n                                 \
    \                                                       chars(i) match {\n   \
    \                                                                            \
    \             case 'A' =>\n                                                  \
    \                                              chars(i) match {\n            \
    \                                                                            \
    \            case 'a' =>\n                                                   \
    \                                                     chars(i) match {\n     \
    \                                                                            \
    \                           case 'A' =>\n                                    \
    \                                                                            chars(i)\
    \ match {\n                                                                  \
    \                                                  case 'a' =>\n             \
    \                                                                            \
    \                               chars(i) match {\n                           \
    \                                                                            \
    \                     case 'A' =>\n                                          \
    \                                                                            \
    \          chars(i) match {\n                                                \
    \                                                                            \
    \        case 'a' =>\n                                                       \
    \                                                                            \
    \     chars(i) match {\n                                                     \
    \                                                                            \
    \           case \"A\" => chars(i) match {\n                                 \
    \                                                                            \
    \                                   case \"a\" => chars(i) match {\n         \
    \                                                                            \
    \                                                               case \"A\" =>\
    \ chars(i) match {\n                                                         \
    \                                                                            \
    \                   case \"a\" => chars(i) match {\n                         \
    \                                                                            \
    \                                                       case \"A\" => chars(i)\
    \ match {\n                                                                  \
    \                                                                            \
    \                  case \"a\" => chars(i) match {\n                          \
    \                                                                            \
    \                                                              case \"A\" => chars(i)\
    \ match {\n                                                                  \
    \                                                                            \
    \                          case \"a\" => chars(i) match {\n                  \
    \                                                                            \
    \                                                                            \
    \  case \"A\" => chars(i) match {\n                                          \
    \                                                                            \
    \                                                          case \"a\" => chars(i)\
    \ match {\n                                                                  \
    \                                                                            \
    \                                      case \"A\" => chars(i) match {\n      \
    \                                                                            \
    \                                                                            \
    \                          case \"a\" => chars(i) match {\n                  \
    \                                                                            \
    \                                                                            \
    \                  case \"A\" => chars(i) match {\n                          \
    \                                                                            \
    \                                                                            \
    \              case \"a\" => chars(i) match {\n                              \
    \                                                                            \
    \                                                                            \
    \              case \"A\" => chars(i) match {\n                              \
    \                                                                            \
    \                                                                            \
    \                  case \"a\" => chars(i) match {\n                          \
    \                                                                            \
    \                                                                            \
    \                          case \"A\" => chars(i) match {\n                  \
    \                                                                            \
    \                                                                            \
    \                                      case \"a\" => chars(i) match {\n      \
    \                                                                            \
    \                                                                            \
    \                                                      case \"A\" => chars(i)\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi5hq1p2u.scala:84:0 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmpi5hq1p2u.scala:52:145 ----------------------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m                                                    \
    \                                                                            \
    \            \e[33mcase\e[0m \e[31m\"A\"\e[0m => chars(i) \e[33mmatch\e[0m {\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \             ^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpi5hq1p2u.scala:53:149\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m53 |\e[0m        \
    \                                                                            \
    \                                                            \e[33mcase\e[0m \e\
    [31m\"a\"\e[0m => chars(i) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                                                                ^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types String and Char cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpi5hq1p2u.scala:54:153 ----------------------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m                                                    \
    \                                                                            \
    \                    \e[33mcase\e[0m \e[31m\"A\"\e[0m => chars(i) \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m                                                 \
    \                                                                            \
    \                            ^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ String and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpi5hq1p2u.scala:55:157\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m55 |\e[0m        \
    \                               "
  stdout: ''
  timestamp: 1659793959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val strList = s.toList\n        strList.foldLeft(\"\"){ (res, c) =>\n\
    \            val isLetter = c.isLetter\n            val isUpper = c.toUpper ==\
    \ c\n            val isLower = c.toLower == c\n            if (isLetter) {\n \
    \               if (isUpper) res += c.toUpperCase\n                else res +=\
    \ c.toLowerCase\n            } else if (isLower) {\n                if (isUpper)\
    \ res += c.toLowerCase\n                else res += c.toUpperCase\n          \
    \  } else {\n                res += c\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcdlqzbr7.scala:23:33 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e[0m (isUpper) res += c.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               value += is not a member of String - did you mean res.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpcdlqzbr7.scala:23:38 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e[0m (isUpper) res += c.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcdlqzbr7.scala:24:25\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33melse\e\
    [0m res += c.toLowerCase\n\e[31m\e[31m   |\e[0m                     ^^^^^^\e[0m\n\
    \e[31m   |\e[0m               value += is not a member of String - did you mean\
    \ res.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcdlqzbr7.scala:24:30\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33melse\e\
    [0m res += c.toLowerCase\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcdlqzbr7.scala:26:33\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mif\e\
    [0m (isUpper) res += c.toLowerCase\n\e[31m\e[31m   |\e[0m                    \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m               value += is not a member\
    \ of String - did you mean res.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcdlqzbr7.scala:26:38\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mif\e\
    [0m (isUpper) res += c.toLowerCase\n\e[31m\e[31m   |\e[0m                    \
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpcdlqzbr7.scala:27:25 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m                \e[33melse\e[0m res += c."
  stdout: ''
  timestamp: 1659793958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.Set[Char]()\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                chars\
    \ += s.charAt(i)\n            }\n        }\n        chars.toSeq.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptk_vfctz.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            }else if(s.charAt(i) >= 'A' && s.charAt(i) <=\
    \ 'Z'){\n                result.append((s.charAt(i) - 'A').toString)\n       \
    \     }else{\n                result.append(s.charAt(i))\n            }\n    \
    \    }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp67oaq_nn.scala:30)\n\tat Problem.main(tmp67oaq_nn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \        {\n            val c = s.charAt(i)\n            if(c.isLetter)\n    \
    \        {\n                val l = c.toUpperCase\n                val u = c.toLowerCase\n\
    \                if(result.length == 0)\n                    result.append(u)\n\
    \                else\n                {\n                    val r = result.toString\n\
    \                    val l = r.substring(0, r.length - 1)\n                  \
    \  val u = r.substring(r.length - 1)\n                    result.append(l)\n \
    \                   result.append(u)\n                }\n            }\n     \
    \       else\n                result.append(c)\n        }\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuobxji9o.scala:23:26 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36ml\e[0m = c.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpuobxji9o.scala:24:26 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mu\e[0m = c.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        value toLowerCase is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\
    \ chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptmmnju0f.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793925
