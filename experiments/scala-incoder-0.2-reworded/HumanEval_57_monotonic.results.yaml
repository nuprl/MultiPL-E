language: scala
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val sortedList = l.sorted\n        val firstValue = sortedList.head\n\
    \        val lastValue = sortedList.last\n        val isIncreasing = firstValue\
    \ < lastValue\n        val isDecreasing = firstValue > lastValue\n        isIncreasing\
    \ || isDecreasing\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcdqszifb.scala:22)\n\tat Problem.main(tmpcdqszifb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l = l.sortWith(_ < _)\n\
    \        l.head == l.last\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwgxwntcp.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortWith(_ <\
    \ _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwgxwntcp.scala:12:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l1\
    \ = l.tail.tail\n        val l2 = l.tail.tail.tail\n        val l3 = l.tail.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfphcm9uw.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val m = m.toLong\n        val n = n.toLong\n        if (m > n) true\n      \
    \  else if (m < n) false\n        else monotonic(l.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp18e9gkhk.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp18e9gkhk.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val m = l.head\n        val\
    \ n = l.last\n        val x = l.tail\n        val y = l.init\n        val z =\
    \ l.tail.init\n        val a = l.tail.tail.init\n        val b = l.tail.tail.tail.init\n\
    \        val c = l.tail.tail.tail.tail.init\n        val d = l.tail.tail.tail.tail.tail.init\n\
    \        val e = l.tail.tail.tail.tail.tail.tail.init\n        val f = l.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val g = l.tail.tail.tail.tail.tail.tail.tail.tail.init\n        val h\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n        val i = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val j = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val k = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val l = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val n = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val o = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val p = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val q = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val r = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdb3py0rn.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpdb3py0rn.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpdb3py0rn.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpdb3py0rn.scala:12:16 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdb3py0rn.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortWith(_ < _)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortWith(_ < _)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortWith(_ < _)\n        val l11 = l10.reverse\n        val l12 = l11.sortWith(_\
    \ < _)\n        val l13 = l12.reverse\n        val l14 = l13.sortWith(_ < _)\n\
    \        val l15 = l14.reverse\n        val l16 = l15.sortWith(_ < _)\n      \
    \  val l17 = l16.reverse\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.reverse\n        val l20 = l19.sortWith(_ < _)\n        val l21 = l20.reverse\n\
    \        val l22 = l21.sortWith(_ < _)\n        val l23 = l22.reverse\n      \
    \  val l24 = l23.sortWith(_ < _)\n        val l25 = l24.reverse\n        val l26\
    \ = l25.sortWith(_ < _)\n        val l27 = l26.reverse\n        val l28 = l27.sortWith(_\
    \ < _)\n        val l29 = l28.reverse\n        val l30 = l29.sortWith(_ < _)\n\
    \        val l31 = l30.reverse\n        val l32 = l31.sortWith(_ < _)\n      \
    \  val l33 = l32.reverse\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.reverse\n        val l36 = l35.sortWith(_ < _)\n        val l37 = l36.reverse\n\
    \        val l38 = l37.sortWith(_ < _)\n        val l39 = l38.reverse\n      \
    \  val l40 = l39.sortWith(_ < _)\n        val l41 = l40.reverse\n        val l42\
    \ = l41.sortWith(_ < _)\n        val l43 = l42.reverse\n        val l44 = l43.sortWith(_\
    \ < _)\n        val l45 = l44.reverse\n        val l46 = l45\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpunv3xes_.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l = l.sortBy(_)\n     \
    \   val l = l.drop(l.length-1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = l.drop(1)\n        val l = l.drop(1)\n\
    \        val l = l.drop(1)\n        val l = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp83i646sg.scala:84:15 ---------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = \n\e[31m\e[31m\
    \   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp83i646sg.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortBy(_)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined as \e\
    [33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp83i646sg.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.drop(l.length-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp83i646sg.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = l.drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp83i646sg.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.drop(\e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined\
    \ as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp83i646sg.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m  "
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l1 = l.head\n        val\
    \ l2 = l.tail.head\n        val l3 = l.tail.tail.head\n        val l4 = l.tail.tail.tail.head\n\
    \        val l5 = l.tail.tail.tail.tail.head\n        val l6 = l.tail.tail.tail.tail.tail.head\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.head\n        val l8 = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ l10 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l11 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l12 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n       \
    \ val l13 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l14 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l15 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l16 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l17 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l18 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l19 = l.tail.tail.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9cl4l6zk.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp9cl4l6zk.scala:32:5 ---------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        val m = l.head\n        val\
    \ x = l.tail\n        val d = new Array[Long](n + 1)\n        var i = 0\n    \
    \    var j = 0\n        var k = 0\n        var l = 0\n        var m1 = m\n   \
    \     var m2 = m\n        var m3 = m\n        var m4 = m\n        var m5 = m\n\
    \        var m6 = m\n        var m7 = m\n        var m8 = m\n        var m9 =\
    \ m\n        var m10 = m\n        var m11 = m\n        var m12 = m\n        var\
    \ m13 = m\n        var m14 = m\n        var m15 = m\n        var m16 = m\n   \
    \     var m17 = m\n        var m18 = m\n        var m19 = m\n        var m20 =\
    \ m\n        var m21 = m\n        var m22 = m\n        var m23 = m\n        var\
    \ m24 = m\n        var m25 = m\n        var m26 = m\n        var m27 = m\n   \
    \     var m28 = m\n        var m29 = m\n        var m30 = m\n        var m31 =\
    \ m\n        var m32 = m\n        var m33 = m\n        var m34 = m\n        var\
    \ m35 = m\n        var m36 = m\n        var m37 = m\n        var m38 = m\n   \
    \     var m39 = m\n        var m40 = m\n        var m41 = m\n        var m42 =\
    \ m\n        var m43 = m\n        var m44 = m\n        var m45 = m\n        var\
    \ m46 = m\n        var m47 = m\n        var m48 = m\n        var m49 = m\n   \
    \     var m50 = m\n        var m51 = m\n        var m52 = m\n        var m53 =\
    \ m\n        var m54 = m\n        var m55 = m\n        var m56 = m\n        var\
    \ m57 = m\n        var m58 = m\n        var m59 = m\n        var m60 = m\n   \
    \     var m61 = m\n        var m62 = m\n        var m63 = m\n        var m64 =\
    \ m\n        var m65 = m\n        var m66 = m\n        var m67 = m\n        var\
    \ m68 = m\n        var m69 = m\n        var m70 = m\n        var m71 = m\n   \
    \     var m72 = m\n        var m73 = m\n        var m74 = m\n        var m75 =\
    \ m\n        var m76 = m\n        var m77 = m\n        var m78 = m\n        var\
    \ m79 = m\n        var m80 = m\n        var m81 = m\n        var m82 = m\n   \
    \     var m83 = m\n        var m84 = m\n        var m85 = m\n        var m86 =\
    \ m\n        var m87 = m\n        var m88 = m\n        var m89 = m\n        var\
    \ m90 = m\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp457i8hj0.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = l.length\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ length is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp457i8hj0.scala:13:18\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = l.head\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value head is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp457i8hj0.scala:14:18 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = l.tail\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value tail\
    \ is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp457i8hj0.scala:110:5\
    \ --------------------\e[0m\e[0m\n\e[31m110 |\e[0m    }\n\e[31m\e[31m    |\e[0m\
    \     ^\e[0m\n\e[31m    |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required:\
    \ Boolean\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.reverse\n        val l10 = l9.toList\n        val l11 = l10.reverse\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.reverse\n        val l16 = l15.toList\n\
    \        val l17 = l16.reverse\n        val l18 = l17.toList\n        val l19\
    \ = l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.reverse\n\
    \        val l22 = l21.toList\n        val l23 = l22.reverse\n        val l24\
    \ = l23.toList\n        val l25 = l24.reverse\n        val l26 = l25.toList\n\
    \        val l27 = l26.reverse\n        val l28 = l27.toList\n        val l29\
    \ = l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n\
    \        val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34\
    \ = l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n\
    \        val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39\
    \ = l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n\
    \        val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44\
    \ = l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n\
    \        val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49\
    \ = l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n\
    \        val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54\
    \ = l53.toList\n        val l55 = \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3fhpkqzm.scala:66:17 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \e[36ml55\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3fhpkqzm.scala:67:5 ---------------------\e[0m\e[0m\n\e[31m67\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.foldLeft(0L) { (sum, e) =>\n            val\
    \ x = sum + e\n            if (x < 0) -(x) else x\n        }\n        m > 0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqdvuqo_x.scala:21)\n\tat Problem.main(tmpqdvuqo_x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        val m = l.head\n        val\
    \ l1 = l.tail\n        val l2 = l1.tail\n        val l3 = l2.tail\n        val\
    \ l4 = l3.tail\n        val l5 = l4.tail\n        val l6 = l5.tail\n        val\
    \ l7 = l6.tail\n        val l8 = l7.tail\n        val l9 = l8.tail\n        val\
    \ l10 = l9.tail\n        val l11 = l10.tail\n        val l12 = l11.tail\n    \
    \    val l13 = l12.tail\n        val l14 = l13.tail\n        val l15 = l14.tail\n\
    \        val l16 = l15.tail\n        val l17 = l16.tail\n        val l18 = l17.tail\n\
    \        val l19 = l18.tail\n        val l20 = l19.tail\n        val l21: List[Long]\
    \ = List(0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong,\
    \ 14l.toLong, 15l.toLong, 16l.toLong, 17l.toLong, 18l.toLong, 19l.toLong, 20l.toLong,\
    \ 21l.toLong, 22l.toLong, 23l.toLong, 24l.toLong, 25l.toLong, 26l.toLong, 27l.toLong,\
    \ 28l.toLong, 29l.toLong, 30l.toLong, 31l.toLong, 32l.toLong, 33l.toLong, 34l.toLong,\
    \ 35l.toLong, 36l.toLong, 37l.toLong, 38l.toLong, 39l.toLong, 40l.toLong, 41l.toLong,\
    \ 42l.toLong, 43l.toLong, 44l.toLong, 45l.toLong, 46l.toLong, 47l.toLong, 48l.toLong,\
    \ 49l.toLong, 50l.toLong, 51l.toLong, 52l.toLong, 53l.toLong, 54l.toLong, 55l.toLong,\
    \ 56l.toLong, 57l.toLong, 58l.toLong, 59l.toLong, 60l.toLong, 61l.toLong, 62l.toLong,\
    \ 63l.toLong, 64l.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqz98i8gc.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqz98i8gc.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val minValue = l.min\n        val maxValue = l.max\n\
    \        val minIndex  = l.indexWhere(x => x == minValue)\n        val maxIndex\
    \  = l.indexWhere(x => x == maxValue)\n        val minIndex2 = l.indexWhere(x\
    \ => x == minValue)\n        val maxIndex2 = l.indexWhere(x => x == maxValue)\n\
    \        val minIndex3 = l.indexWhere(x => x == minValue)\n        val maxIndex3\
    \ = l.indexWhere(x => x == maxValue)\n        val minIndex4 = l.indexWhere(x =>\
    \ x == minValue)\n        val maxIndex4 = l.indexWhere(x => x == maxValue)\n \
    \       val minIndex5 = l.indexWhere(x => x == minValue)\n        val maxIndex5\
    \ = l.indexWhere(x => x == maxValue)\n        val minIndex6 = l.indexWhere(x =>\
    \ x == minValue)\n        val maxIndex6 = l.indexWhere(x => x == maxValue)\n \
    \       val minIndex7 = l.indexWhere(x => x == minValue)\n        val maxIndex7\
    \ = l.indexWhere(x => x == maxValue)\n        val minIndex8 = l.indexWhere(x =>\
    \ x == minValue)\n        val maxIndex8 = l.indexWhere(x => x == maxValue)\n \
    \       val minIndex9 = l.indexWhere(x => x == minValue)\n        val maxIndex9\
    \ = l.indexWhere(x => x == maxValue)\n        val minIndex10 = l.indexWhere(x\
    \ => x == minValue)\n        val maxIndex10 = l.indexWhere(x => x == maxValue)\n\
    \        val minIndex11 = l.indexWhere(x => x == minValue)\n        val maxIndex11\
    \ = l.indexWhere(x => x == maxValue)\n        val minIndex12 = l.indexWhere(x\
    \ => x == minValue)\n        val maxIndex12 = l.indexWhere(x => x == maxValue)\n\
    \        val minIndex13 = l.indexWhere(x => x == minValue)\n        val maxIndex13\
    \ = l.indexWhere(x => x == maxValue)\n        val minIndex14 = l.indexWhere(x\
    \ => x == minValue)\n        val maxIndex14 = l.indexWhere(x => x == maxValue)\n\
    \        val minIndex15 = l.indexWhere(x => x == minValue)\n        val maxIndex15\
    \ = l.indexWhere(x => x == maxValue)\n        val minIndex16 = l.indexWhere(x\
    \ => x == minValue)\n        val maxIndex16 = l.indexWhere(x => x == maxValue)\n\
    \        val minIndex17 = l.indexWhere(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpb8gx0cjh.scala:46:38 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mminIndex17\e[0m = l.indexWhere(\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m                                      expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb8gx0cjh.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        l4.forall(x\
    \ => x == l1.last)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0fehjdf7.scala:19)\n\tat Problem.main(tmp0fehjdf7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val m = m.toLong\n        val n = n.toLong\n        if (m > n) true else if\
    \ (m == n) false else monotonic(l.tail)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz1hnl5rr.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz1hnl5rr.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val m = m.toLong\n        val n = n.toLong\n        if (m > n) true\n      \
    \  else if (m == n) false\n        else monotonic(l.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi6npvhdw.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi6npvhdw.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.last\n        val l\
    \ = l.tail\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n       \
    \ val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l10 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi002ixup.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpi002ixup.scala:14:16 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.tail\n\e[31m\e[31m   |\e[0m  \
    \              ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpi002ixup.scala:25:5 ---------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.size\n        if (n == 0) true\n        else\
    \ if (n == 1) false\n        else {\n            val first = l.head\n        \
    \    val last = l.last\n            val mid = l.size / 2\n            val left\
    \ = l.take(mid)\n            val right = l.drop(mid)\n            val leftIsIncreasing\
    \ = monotonic(left)\n            val rightIsIncreasing = monotonic(right)\n  \
    \          if (first < last) leftIsIncreasing || rightIsIncreasing\n         \
    \   else !leftIsIncreasing && !rightIsIncreasing\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2i16oitj.scala:28)\n\tat Problem.main(tmp2i16oitj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val m = l.head\n        val\
    \ n = l.last\n        val isIncreasing = l.tail.forall(x => x > m)\n        val\
    \ isDecreasing = l.tail.forall(x => x < n)\n        isIncreasing || isDecreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq6p1r8gd.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val min = l.head\n        val max = l.last\n        val\
    \ l1 = l.tail\n        val l2 = l1.tail\n        val l3 = l2.tail\n        val\
    \ l4 = l3.tail\n        val l5 = l4.tail\n        val l6 = l5.tail\n        val\
    \ l7 = l6.tail\n        val l8 = l7.tail\n        val l9 = l8.tail\n        val\
    \ l10 = l9.tail\n        val l11 = l10.tail\n        val l12 = l11.tail\n    \
    \    val l13 = l12.tail\n        val l14 = l13.tail\n        val l15 = l14.tail\n\
    \        val l16 = l15.tail\n        val l17 = l16.tail\n        val l18 = l17.tail\n\
    \        val l19 = l18.tail\n        val l20 = l19.tail\n        val l21 = l20.tail\n\
    \        val l22 = l21.tail\n        val l23 = l22.tail\n        val l24 = l23.tail\n\
    \        val l25 = l24.tail\n        val l26 = l25.tail\n        val l27 = l26.tail\n\
    \        val l28 = l27.tail\n        val l29 = l28.tail\n        val l30 = l29.tail\n\
    \        val l31 = l30.tail\n        val l32 = l31.tail\n        val l33 = l32.tail\n\
    \        val l34 = l33.tail\n        val l35 = l34.tail\n        val l36 = l35.tail\n\
    \        val l37 = l36.tail\n        val l38 = l37.tail\n        val l39 = l38.tail\n\
    \        val l40 = l39.tail\n        val l41 = l40.tail\n        val l42 = l41.tail\n\
    \        val l43 = l42.tail\n        val l44 = l43.tail\n        val l45 = l44.tail\n\
    \        val l46 = l45.tail\n        val l47 = l46.tail\n        val l48 = l47.tail\n\
    \        val l49 = l48.tail\n        val l50 = l49.tail\n        val l51 = l50.tail\n\
    \        val l52 = l51.tail\n        val l53 = l52.tail\n        val l54 = l53.tail\n\
    \        val l55 = l54.tail\n        val l56 = l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpew5mosxn.scala:70:5\
    \ ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l = l.sortWith(_ < _)\n\
    \        l.head == l.last\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwgxwntcp.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortWith(_ <\
    \ _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwgxwntcp.scala:12:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799707
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ if (m > n) true\n        else if (m == n) monotonic(l.tail)\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvd0r47jw.scala:19)\n\tat Problem.main(tmpvd0r47jw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortWith(_ < _)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortWith(_ < _)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortWith(_ < _)\n        val l11 = l10.reverse\n        val l12 = l11.sortWith(_\
    \ < _)\n        val l13 = l12.reverse\n        val l14 = l13.sortWith(_ < _)\n\
    \        val l15 = l14.reverse\n        val l16 = l15.sortWith(_ < _)\n      \
    \  val l17 = l16.reverse\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.reverse\n        val l20 = l19.sortWith(_ < _)\n        val l21 = l20.reverse\n\
    \        val l22 = l21.sortWith(_ < _)\n        val l23 = l22.reverse\n      \
    \  val l24 = l23.sortWith(_ < _)\n        val l25 = l24.reverse\n        val l26\
    \ = l25.sortWith(_ < _)\n        val l27 = l26.reverse\n        val l28 = l27.sortWith(_\
    \ < _)\n        val l29 = l28.reverse\n        val l30 = l29.sortWith(_ < _)\n\
    \        val l31 = l30.reverse\n        val l32 = l31.sortWith(_ < _)\n      \
    \  val l33 = l32.reverse\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.reverse\n        val l36 = l35.sortWith(_ < _)\n        val l37 = l36.reverse\n\
    \        val l38 = l37.sortWith(_ < _)\n        val l39 = l38.reverse\n      \
    \  val l40 = l39.sortWith(_ < _)\n        val l41 = l40.reverse\n        val l42\
    \ = l41.sortWith(_ < _)\n        val l43 = l42.reverse\n        val l44 = l43.sortWith(_\
    \ < _)\n        val l45 = l44.reverse\n        val l46 = l45\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpunv3xes_.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val x = l.tail.tail.head\n        val y = l.tail.tail.tail.head\n        val\
    \ z = l.tail.tail.tail.tail.head\n        val w = l.tail.tail.tail.tail.tail.head\n\
    \        val a = l.tail.tail.tail.tail.tail.tail.head\n        val b = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val c = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val d\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val e = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val f = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val g = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val h = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val i = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val j = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val k = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp308a6m2n.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp308a6m2n.scala:29:16 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp308a6m2n.scala:30:5 ---------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val n = l.size\n        val\
    \ m = l.last\n        val r = new Array[Long](n+1)\n        val d = new Array[Long](n+1)\n\
    \        val p = new Array[Long](n+1)\n        val q = new Array[Long](n+1)\n\
    \        val r = new Array[Long](n+1)\n        val d = new Array[Long](n+1)\n\
    \        val p = new Array[Long](n+1)\n        val q = new Array[Long](n+1)\n\
    \        val r = new Array[Long](n+1)\n        val d = new Array[Long](n+1)\n\
    \        val p = new Array[Long](n+1)\n        val q = new Array[Long](n+1)\n\
    \        val r = new Array[Long](n+1)\n        val d = new Array[Long](n+1)\n\
    \        val p = new Array[Long](n+1)\n        val q = new Array[Long](n+1)\n\
    \        val r = new Array[Long](n+1)\n        val d = new Array[Long](n+1)\n\
    \        val p = new Array[Long](n+1)\n        val q = new Array[Long](n+1)\n\
    \        val r = new Array[Long](n+1)\n        val d = new Array[Long](n+1)\n\
    \        val p = new Array[Long](n+1)\n        val q = new Array[Long](n+1)\n\
    \        val r = new Array[Long](n+1)\n        val d = new Array[Long](n+1)\n\
    \        val p = new Array[Long](n+1)\n        val q = new Array[Long](n+1)\n\
    \        val r = new Array[Long](n+1)\n        val d = new Array[Long](n+1)\n\
    \        val p = new Array[Long](n+1)\n        val q = new Array[Long](n+1)\n\
    \        val r = new Array[Long](n+1)\n        val d = new Array[Long](n+1)\n\
    \        val p = new Array[Long](n+1)\n        val q = new Array[Long](n+1)\n\
    \        val r = new Array[Long](n+1)\n        val d = new Array[Long](n+1)\n\
    \        val p = new Array[Long](n+1)\n        val q = new Array[Long](n+1)\n\
    \        val r = new Array[Long](n+1)\n        val d = new Array[Long](n+1)\n\
    \        val p = new Array[Long](n+1)\n        val q = new Array[Long](n+1)\n\
    \        val r = new Array[Long](n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphssrxtck.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphssrxtck.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mr\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n+\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphssrxtck.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36md\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n+\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0md is already defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphssrxtck.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mp\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n+\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mp is already defined as \e[33mvalue\e[0m \e[35mp\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphssrxtck.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mq\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n+\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mq is already defined as \e[33mvalue\e[0m \e[35mq\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphssrxtck.scala:23:12\
    \ ----------------------"
  stdout: ''
  timestamp: 1659799718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.foldLeft((l.head,l.head))((x,y) => if (x._2\
    \ < y._2) x else y)\n        m._2 < m._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1h1c0m32.scala:12:66 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.foldLeft((l.head,l.head))((\e\
    [36mx\e[0m,\e[36my\e[0m) => \e[33mif\e[0m (x._2 < y._2) x \e[33melse\e[0m y)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                        value\
    \ _2 is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1h1c0m32.scala:12:77\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mm\e\
    [0m = l.foldLeft((l.head,l.head))((\e[36mx\e[0m,\e[36my\e[0m) => \e[33mif\e[0m\
    \ (x._2 < y._2) x \e[33melse\e[0m y)\n\e[31m\e[31m   |\e[0m                  \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                  Found:    (\e[1m\e[31my\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m Long)\n\e[31m   |\e[0m                 \
    \                                 Required: (\e[1m\e[32mLong\e[0m\e[1m\e[32m,\e\
    [0m Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val l1 = l.tail\n        val l2 = l.tail.tail\n        val l3 = l.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n       \
    \ val l10 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5qljg6j4.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5qljg6j4.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val n = l.size\n        val\
    \ m = l.head\n        val r = l.tail.foldLeft(0l) { (r, e) =>\n            val\
    \ x = r + e\n            if (x < m) r else x\n        }\n        (r <= m)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpin82864l.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799714
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ if (m > n) monotonic(l.tail) else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1b3tyt99.scala:17)\n\tat Problem.main(tmp1b3tyt99.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l1 = l.tail\n        val\
    \ l2 = l.head\n        val l3 = l1.tail\n        val l4 = l2.head\n        val\
    \ l5 = l3.tail\n        val l6 = l4.head\n        val l7 = l5.tail\n        val\
    \ l8 = l6.head\n        val l9 = l7.tail\n        val l10 = l8.head\n        val\
    \ l11 = l9.tail\n        val l12 = l10.head\n        val l13 = l11.tail\n    \
    \    val l14 = l12.head\n        val l15 = l13.tail\n        val l16 = l14.head\n\
    \        val l17 = l15.tail\n        val l18 = l16.head\n        val l19 = l17.tail\n\
    \        val l20 = l18.head\n        val l21 = l19.tail\n        val l22 = l20.head\n\
    \        val l23 = l21.tail\n        val l24 = l22.head\n        val l25 = l23.tail\n\
    \        val l26 = l24.head\n        val l27 = l25.tail\n        val l28 = l26.head\n\
    \        val l29 = l27.tail\n        val l30 = l28.head\n        val l31 = l29.tail\n\
    \        val l32 = l30.head\n        val l33 = l31.tail\n        val l34 = l32.head\n\
    \        val l35 = l33.tail\n        val l36 = l34.head\n        val l37 = l35.tail\n\
    \        val l38 = l36.head\n        val l39 = l37.tail\n        val l40 = l38.head\n\
    \        val l41 = l39.tail\n        val l42 = l40.head\n        val l43 = l41.tail\n\
    \        val l44 = l42.head\n        val l45 = l43.tail\n        val l46 = l44.head\n\
    \        val l47 = l45.tail\n        val l48 = l46.head\n        val l49 = l47.tail\n\
    \        val l50 = l48.head\n        val l51 = l49.tail\n        val l52 = l50.head\n\
    \        val l53 = l51.tail\n        val l54 = l52.head\n        val l55 = l53.tail\n\
    \        val l56 = l54.head\n        val l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz2ungo2t.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpz2ungo2t.scala:12:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz2ungo2t.scala:70:5\
    \ ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val sorted = l.sorted\n   \
    \     val first = sorted.head\n        val last = sorted.last\n        val isIncreasing\
    \ = first < last\n        val isDecreasing = first > last\n        isIncreasing\
    \ || isDecreasing\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3ozgv0x_.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799718
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n == 0) true\n        else\
    \ if (n == 1) false\n        else if (n == 2) l(0) > l(1) || l(0) == l(1) && monotonic(l.tail)\n\
    \        else monotonic(l.tail) && monotonic(l.tail.reverse)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpht5v50_e.scala:19)\n\tat Problem.main(tmpht5v50_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l1\
    \ = l.tail.tail\n        val l2 = l.tail.tail.tail\n        val l3 = l.tail.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfphcm9uw.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val min = l.head\n        val\
    \ max = l.last\n        val mid = l.size / 2\n        val isIncreasing = l.tail.forall(x\
    \ => x > mid)\n        val isDecreasing = l.tail.forall(x => x < mid)\n      \
    \  (isIncreasing && isDecreasing) || (!isIncreasing && !isDecreasing)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpexldtjxz.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.foldLeft((0l, 0l)) {\n            case ((l,\
    \ r), e) => (if (e < r) e else r, l)\n        }\n        val n = l.foldLeft((0l,\
    \ 0l)) {\n            case ((l, r), e) => (if (e > r) e else r, l)\n        }\n\
    \        m == n\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1bgpglx0.scala:21)\n\tat Problem.main(tmp1bgpglx0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val m = l.head\n        val\
    \ n = l.tail\n        val l1 = l.tail\n        val l2 = l.tail\n        val l3\
    \ = l.tail\n        val l4 = l.tail\n        val l5 = l.tail\n        val l6 =\
    \ l.tail\n        val l7 = l.tail\n        val l8 = l.tail\n        val l9 = l.tail\n\
    \        val l10 = l.tail\n        val l11 = l.tail\n        val l12 = l.tail\n\
    \        val l13 = l.tail\n        val l14 = l.tail\n        val l15 = l.tail\n\
    \        val l16 = l.tail\n        val l17 = l.tail\n        val l18 = l.tail\n\
    \        val l19 = l.tail\n        val l20 = l.tail\n        val l21 = l.tail\n\
    \        val l22 = l.tail\n        val l23 = l.tail\n        val l24 = l.tail\n\
    \        val l25 = l.tail\n        val l26 = l.tail\n        val l27 = l.tail\n\
    \        val l28 = l.tail\n        val l29 = l.tail\n        val l30 = l.tail\n\
    \        val l31 = l.tail\n        val l32 = l.tail\n        val l33 = l.tail\n\
    \        val l34 = l.tail\n        val l35 = l.tail\n        val l36 = l.tail\n\
    \        val l37 = l.tail\n        val l38 = l.tail\n        val l39 = l.tail\n\
    \        val l40 = l.tail\n        val l41 = l.tail\n        val l42 = l.tail\n\
    \        val l43 = l.tail\n        val l44 = l.tail\n        val l45 = l.tail\n\
    \        val l46 = l.tail\n        val l47 = l.tail\n        val l48 = l.tail\n\
    \        val l49 = l.tail\n        val l50 = l.tail\n        val l51 = l.tail\n\
    \        val l52 = l.tail\n        val l53 = l.tail\n        val l54 = l.tail\n\
    \        val l55 = l.tail\n        val l56 = l.tail\n        val l57 = l.tail\n\
    \        val l58 = l.tail\n        val l59 = l.tail\n        val l60 = l.tail\n\
    \        val l61 = l.tail\n        val l62 = l.tail\n        val l63 = l.tail\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp87lds60v.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp87lds60v.scala:79:5 ---------------------\e[0m\e\
    [0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortBy(_)\n  \
    \      val l3 = l2.reverse\n        val l4 = l3.sortBy(_)\n        val l5 = l4.reverse\n\
    \        val l6 = l5.sortBy(_)\n        val l7 = l6.reverse\n        val l8 =\
    \ l7.sortBy(_)\n        val l9 = l8.reverse\n        val l10 = l9.sortBy(_)\n\
    \        val l11 = l10.reverse\n        val l12 = l11.sortBy(_)\n        val l13\
    \ = l12.reverse\n        val l14 = l13.sortBy(_)\n        val l15 = l14.reverse\n\
    \        val l16 = l15.sortBy(_)\n        val l17 = l16.reverse\n        val l18\
    \ = l17.sortBy(_)\n        val l19 = l18.reverse\n        val l20 = l19.sortBy(_)\n\
    \        val l21 = l20.reverse\n        val l22 = l21.sortBy(_)\n        val l23\
    \ = l22.reverse\n        val l24 = l23.sortBy(_)\n        val l25 = l24.reverse\n\
    \        val l26 = l25.sortBy(_)\n        val l27 = l26.reverse\n        val l28\
    \ = l27.sortBy(_)\n        val l29 = l28.reverse\n        val l30 = l29.sortBy(_)\n\
    \        val l31 = l30.reverse\n        val l32 = l31.sortBy(_)\n        val l33\
    \ = l32.reverse\n        val l34 = l33.sortBy(_)\n        val l35 = l34.reverse\n\
    \        val l36 = l35.sortBy(_)\n        val l37 = l36.reverse\n        val l38\
    \ = l37.sortBy(_)\n        val l39 = l38.reverse\n        val l40 = l39.sortBy(_)\n\
    \        val l41 = l40.reverse\n        val l42 = l41.sortBy(_)\n        val l43\
    \ = l42.reverse\n        val l44 = l43.sortBy(_)\n        val l45 = l44.reverse\n\
    \        val l46 = l45.sortBy(_)\n        val l47 = l46.reverse\n        val l48\
    \ = l47.sortBy(_)\n        val l49 = l48.reverse\n        val l50 = l49.\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi6i1jsl1.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpi6i1jsl1.scala:13:29\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36ml2\e[0m = l1.sortBy(_)\n\e[31m\e[31m   |\e[0m         \
    \                    ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for Any..\n\
    \e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.ordered[\e\
    [35mAny\e[0m](\n\e[31m   |\e[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type scala.math.Ordering.AsComparable[Any].\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpi6i1jsl1.scala:15:27 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ml4\e[0m = l3.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => l3.sortBy(_$2).\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpi6i1jsl1.scala:17:27 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ml6\e[0m = l5.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$3 of expanded function:\n\e[31m   |\e[0m   _$3 => l5.sortBy(_$3).\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpi6i1jsl1.scala:19:27 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36ml8\e[0m = l7.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$4 of expanded function:\n\e[31m   |\e[0m   _$4 => l7.sortBy(_$4).\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpi6i1jsl1.scala:21:28 -----------------------------\e\
    [0m\e[0m\n\e[31m21"
  stdout: ''
  timestamp: 1659799723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val min = l.min\n        val max = l.max\n        val\
    \ mid = l.size / 2\n        val midVal = l.apply(mid)\n        val midVal2 = l.apply(mid\
    \ + 1)\n        val midVal3 = l.apply(mid + 2)\n        val midVal4 = l.apply(mid\
    \ + 3)\n        val midVal5 = l.apply(mid + 4)\n        val midVal6 = l.apply(mid\
    \ + 5)\n        val midVal7 = l.apply(mid + 6)\n        val midVal8 = l.apply(mid\
    \ + 7)\n        val midVal9 = l.apply(mid + 8)\n        val midVal10 = l.apply(mid\
    \ + 9)\n        val midVal11 = l.apply(mid + 10)\n        val midVal12 = l.apply(mid\
    \ + 11)\n        val midVal13 = l.apply(mid + 12)\n        val midVal14 = l.apply(mid\
    \ + 13)\n        val midVal15 = l.apply(mid + 14)\n        val midVal16 = l.apply(mid\
    \ + 15)\n        val midVal17 = l.apply(mid + 16)\n        val midVal18 = l.apply(mid\
    \ + 17)\n        val midVal19 = l.apply(mid + 18)\n        val midVal20 = l.apply(mid\
    \ + 19)\n        val midVal21 = l.apply(mid + 20)\n        val midVal22 = l.apply(mid\
    \ + 21)\n        val midVal23 = l.apply(mid + 22)\n        val midVal24 = l.apply(mid\
    \ + 23)\n        val midVal25 = l.apply(mid + 24)\n        val midVal26 = l.apply(mid\
    \ + 25)\n        val midVal27 = l.apply(mid + 26)\n        val midVal28 = l.apply(mid\
    \ + 27)\n        val midVal29 = l.apply(mid + 28)\n        val midVal30 = l.apply(mid\
    \ + 29)\n        val midVal31 = l.apply(mid + 30)\n        val midVal32 = l.apply(mid\
    \ + 31)\n        val midVal33 = l.apply(mid + 32)\n        val midVal34 = l.apply(mid\
    \ + 33)\n        val midVal35 = l.apply(mid + 34)\n        val midVal36 = l.apply(mid\
    \ + 35)\n        val midVal37 = l.apply(mid + 36)\n        val midVal38 = l.apply(mid\
    \ + 37)\n        val midVal39 = l.apply(mid + 38)\n        val midVal40 = l.apply(mid\
    \ + 39)\n        val midVal41 = l.apply(mid + 40)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp50t7ald5.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val m = l.head\n        val\
    \ n = l.last\n        val m = m.toLong\n        val n = n.toLong\n        val\
    \ m = m.toInt\n        val n = n.toInt\n        val m = m.toDouble\n        val\
    \ n = n.toDouble\n        val m = m.toFloat\n        val n = n.toFloat\n     \
    \   val m = m.toLong\n        val n = n.toLong\n        val m = m.toInt\n    \
    \    val n = n.toInt\n        val m = m.toDouble\n        val n = n.toDouble\n\
    \        val m = m.toFloat\n        val n = n.toFloat\n        val m = m.toLong\n\
    \        val n = n.toLong\n        val m = m.toInt\n        val n = n.toInt\n\
    \        val m = m.toDouble\n        val n = n.toDouble\n        val m = m.toFloat\n\
    \        val n = n.toFloat\n        val m = m.toLong\n        val n = n.toLong\n\
    \        val m = m.toInt\n        val n = n.toInt\n        val m = m.toDouble\n\
    \        val n = n.toDouble\n        val m = m.toFloat\n        val n = n.toFloat\n\
    \        val m = m.toLong\n        val n = n.toLong\n        val m = m.toInt\n\
    \        val n = n.toInt\n        val m = m.toDouble\n        val n = n.toDouble\n\
    \        val m = m.toFloat\n        val n = n.toFloat\n        val m = m.toLong\n\
    \        val n = n.toLong\n        val m = m.toInt\n        val n = n.toInt\n\
    \        val m = m.toDouble\n        val n = n.toDouble\n        val m = m.toFloat\n\
    \        val n = n.toFloat\n        val m = m.toLong\n        val n = n.toLong\n\
    \        val m = m.toInt\n        val n = n.toInt\n        val m = m.toDouble\n\
    \        val n = n.toDouble\n        val m = m.toFloat\n        val n = n.toFloat\n\
    \        val m = m.toLong\n        val n = n.toLong\n        val m = m.toInt\n\
    \        val n = n.toInt\n        val m = m.toDouble\n        val n = n.toDouble\n\
    \        val m = m.toFloat\n        val n = n.toFloat\n        val m = m.toLong\n\
    \        val n = n.toLong\n        val m = m.toInt\n        val n = n.toInt\n\
    \        val m = m.toDouble\n        val n = n.toDouble\n        val m = \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpr7jvny_j.scala:85:15 ---------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = \n\e[31m\e[31m\
    \   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpr7jvny_j.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e\
    [0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpr7jvny_j.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr7jvny_j.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr7jvny_j.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr7jvny_j.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toDouble\n\e\
    [31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659799723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val min = l.head\n        val max = l.last\n        val\
    \ list = l.tail\n        val len = list.size\n        val isIncreasing = list.forall(x\
    \ => x > max)\n        val isDecreasing = list.forall(x => x < min)\n        (isIncreasing\
    \ || isDecreasing) && (len > 1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvacvra0u.scala:21)\n\tat Problem.main(tmpvacvra0u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val l2 = l.tail.tail\n        val l3 = l.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n \
    \       val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpknbr5twj.scala:21:5\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val n = l.size\n        val\
    \ m = l.head\n        val r = l.tail\n        val l1 = l.tail.head\n        val\
    \ l2 = l.tail.tail.head\n        val l3 = l.tail.tail.tail.head\n        val l4\
    \ = l.tail.tail.tail.tail.head\n        val l5 = l.tail.tail.tail.tail.tail.head\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.head\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l10 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l11 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l12\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l13 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l14 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l15 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l16 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l17 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l18 = l.tail.tail.tail.tail.tail.tail.tail\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpp943mt56.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpp943mt56.scala:34:5 ---------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l1 = l.tail\n        val\
    \ l2 = l.init\n        val l3 = l.tail.init\n        val l4 = l.tail.tail.init\n\
    \        val l5 = l.tail.tail.tail.init\n        val l6 = l.tail.tail.tail.tail.init\n\
    \        val l7 = l.tail.tail.tail.tail.tail.init\n        val l8 = l.tail.tail.tail.tail.tail.tail.init\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.init\n        val l10 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.init\n        val l11 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val l12 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val l13 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val l14 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val l15 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val l16 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val l17 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val l18 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val l19 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val l20 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val l21 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn7yok62p.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpn7yok62p.scala:12:16 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpn7yok62p.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val min = l.head\n        val max = l.last\n        val\
    \ l1 = l.tail\n        if (l1.isEmpty) true\n        else {\n            val l2\
    \ = l1.tail\n            if (l2.isEmpty) true\n            else {\n          \
    \      val l3 = l2.tail\n                if (l3.isEmpty) true\n              \
    \  else {\n                    val l4 = l3.tail\n                    if (l4.isEmpty)\
    \ true\n                    else {\n                        val l5 = l4.tail\n\
    \                        if (l5.isEmpty) true\n                        else {\n\
    \                            val l6 = l5.tail\n                            if\
    \ (l6.isEmpty) true\n                            else {\n                    \
    \            val l7 = l6.tail\n                                if (l7.isEmpty)\
    \ true\n                                else {\n                             \
    \       val l8 = l7.tail\n                                    if (l8.isEmpty)\
    \ true\n                                    else {\n                         \
    \               val l9 = l8.tail\n                                        if (l9.isEmpty)\
    \ true\n                                        else {\n                     \
    \                       val l10 = l9.tail\n                                  \
    \          if (l10.isEmpty) true\n                                           \
    \ else {\n                                                val l11 = l10.tail\n\
    \                                                if (l11.isEmpty) true\n     \
    \                                           else {\n                         \
    \                           val l12 = l11.tail\n                             \
    \                       if (l12.isEmpty) true\n                              \
    \                      else {\n                                              \
    \          val l13 = l12.tail\n                                              \
    \          if (l13.isEmpty) true\n                                           \
    \             else {\n                                                       \
    \     val l14 = l13.tail\n                                                   \
    \         if (l14.isEmpty) true\n                                            \
    \                else {\n                                                    \
    \            val l15 = l14.tail\n                                            \
    \                    if (l15.isEmpty) true\n                                 \
    \                               else {\n                                     \
    \                               val l16 = l15.tail\n                         \
    \                                           if (l16.isEmpty) true\n          \
    \                                                          else {\n          \
    \                                                              val l17 = l16.tail\n\
    \                                                                        if (l17.isEmpty)\
    \ true\n                                                                     \
    \   else {\n                                                                 \
    \           val l18 = l17.tail\n                                             \
    \                               if (l18.isEmpty) true\n                      \
    \                                                      else {\n              \
    \                                                                  val l19 = l18.tail\n\
    \                                                                            \
    \    if (l19.isEmpty) true\n                                                 \
    \                               else {\n                                     \
    \                                               val l20 = l19.tail\n         \
    \                                                                           if\
    \ (l20.isEmpty) true\n                                                       \
    \                             else {\n                                       \
    \                                                 val l21 = l20.tail\n       \
    \                                                                            \
    \     if (l21.isEmpty) true\n                                                \
    \                                        else {\n                            \
    \                                                                val l22 = l21.tail\n\
    \                                                                            \
    \                if (l22.isEmpty) true\n                                     \
    \                                                       else {\n             \
    \                                                                            \
    \       val l23 = l22.tail\n                                                 \
    \                                               if (l23.isEmpty) true\n      \
    \                                                                            \
    \              else {\n                                                      \
    \                                              val l24 = l23.tail\n          \
    \                                                                            \
    \              if (l24.isEmpty) true\n                                       \
    \                                                             else {\n       \
    \                                                                            \
    \                     val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpxwyb0949.scala:86:107 --------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m                                                    \
    \                                                    \e[33mval\e[0m \n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                                              pattern expected\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxwyb0949.scala:100:0 ---------------------------\e\
    [0m\e[0m\n\e[31m100 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxwyb0949.scala:99:1\
    \ ---------------------\e[0m\e[0m\n\e[31m99 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpxwyb0949.scala:88:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m88 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659799723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.last\n        val i\
    \ = l.indexOf(n)\n        val j = l.indexOf(m)\n        val k = l.indexOf(i)\n\
    \        val l = l.indexOf(0)\n        val m = l.indexOf(0)\n        val n = l.indexOf(0)\n\
    \        val i = l.indexOf(0)\n        val j = l.indexOf(0)\n        val k = l.indexOf(0)\n\
    \        val l = l.indexOf(0)\n        val m = l.indexOf(0)\n        val n = l.indexOf(0)\n\
    \        val i = l.indexOf(0)\n        val j = l.indexOf(0)\n        val k = l.indexOf(0)\n\
    \        val l = l.indexOf(0)\n        val m = l.indexOf(0)\n        val n = l.indexOf(0)\n\
    \        val i = l.indexOf(0)\n        val j = l.indexOf(0)\n        val k = l.indexOf(0)\n\
    \        val l = l.indexOf(0)\n        val m = l.indexOf(0)\n        val n = l.indexOf(0)\n\
    \        val i = l.indexOf(0)\n        val j = l.indexOf(0)\n        val k = l.indexOf(0)\n\
    \        val l = l.indexOf(0)\n        val m = l.indexOf(0)\n        val n = l.indexOf(0)\n\
    \        val i = l.indexOf(0)\n        val j = l.indexOf(0)\n        val k = l.indexOf(0)\n\
    \        val l = l.indexOf(0)\n        val m = l.indexOf(0)\n        val n = l.indexOf(0)\n\
    \        val i = l.indexOf(0)\n        val j = l.indexOf(0)\n        val k = l.indexOf(0)\n\
    \        val l = l.indexOf(0)\n        val m = l.indexOf(0)\n        val n = l.indexOf(0)\n\
    \        val i = l.indexOf(0)\n        val j = l.indexOf(0)\n        val k = l.indexOf(0)\n\
    \        val l = l.indexOf(0)\n        val m = l.indexOf(0)\n        val n = l.indexOf(0)\n\
    \        val i = l.indexOf(0)\n        val j = l.indexOf(0)\n        val k = l.indexOf(0)\n\
    \        val l = l.indexOf(0)\n        val m = l.indexOf(0)\n        val n = l.indexOf(0)\n\
    \        val i = l.indexOf(0)\n        val j = l.indexOf(0)\n        val k = l.indexOf(0)\n\
    \        val l = l.indexOf(0)\n        val m = l.indexOf(0)\n        val n = l.indexOf(0)\n\
    \        val i = l.indexOf(0)\n        val j = l.indexOf(0)\n        val k = l.indexOf(0)\n\
    \        val l = l.indexOf(0)\n        val m = l.indexOf(0)\n        val n = l.indexOf(0)\n\
    \        val i = l.indexOf(0)\n        val j = l.indexOf(0)\n        val k = l.indexOf(0)\n\
    \        val l = l.indexOf(0)\n        val m = l.indexOf(0)\n        val n = \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpp22u53tu.scala:85:15 ---------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = \n\e[31m\e[31m\
    \   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpp22u53tu.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.indexOf(\e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp22u53tu.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = l.indexOf(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn\
    \ is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp22u53tu.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mi\e[0m = l.indexOf(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mi is already defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpp22u53tu.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mj\e[0m = l.indexOf(\e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mj is already defined\
    \ as \e[33mvalue\e[0m \e[35mj\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp22u53tu.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659799723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val n = l.size\n        var\
    \ isIncreasing = true\n        var isDecreasing = true\n        var isMonotonic\
    \ = true\n        var isMonotonicIncreasing = true\n        var isMonotonicDecreasing\
    \ = true\n        var isMonotonicIncreasingOrDecreasing = true\n        var isMonotonicIncreasingOrDecreasingOrMonotonic\
    \ = true\n        var isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true\n        var isMonotonicIncreasingOrDecreasingOrMonotonicOrDecreasing\
    \ = true\n        var isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true\n        var isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true\n        var isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true\n        var isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrDecreasing\
    \ = true\n        var isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true\n        var isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true\n        var isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true\n        var isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrDecreasing\
    \ = true\n        var isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true\n        var isMon\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphekaatns.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphekaatns.scala:12:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphekaatns.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val minValue = l.min\n        val maxValue = l.max\n\
    \        val minIndex = 0\n        val maxIndex = l.size - 1\n        val isIncreasing\
    \ = true\n        val isDecreasing = true\n        val isMonotonic = true\n  \
    \      val isMonotonicIncreasing = true\n        val isMonotonicDecreasing = true\n\
    \        val isMonotonicIncreasingOrDecreasing = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonic\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecre\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9644i1ci.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9644i1ci.scala:33:5 ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        val m = l.head\n        val\
    \ i = 1 until n\n        var j = 1 until n\n        var k = 0\n        var l =\
    \ 0\n        var m1 = m\n        var m2 = m\n        var m3 = m\n        var m4\
    \ = m\n        var m5 = m\n        var m6 = m\n        var m7 = m\n        var\
    \ m8 = m\n        var m9 = m\n        var m10 = m\n        var m11 = m\n     \
    \   var m12 = m\n        var m13 = m\n        var m14 = m\n        var m15 = m\n\
    \        var m16 = m\n        var m17 = m\n        var m18 = m\n        var m19\
    \ = m\n        var m20 = m\n        var m21 = m\n        var m22 = m\n       \
    \ var m23 = m\n        var m24 = m\n        var m25 = m\n        var m26 = m\n\
    \        var m27 = m\n        var m28 = m\n        var m29 = m\n        var m30\
    \ = m\n        var m31 = m\n        var m32 = m\n        var m33 = m\n       \
    \ var m34 = m\n        var m35 = m\n        var m36 = m\n        var m37 = m\n\
    \        var m38 = m\n        var m39 = m\n        var m40 = m\n        var m41\
    \ = m\n        var m42 = m\n        var m43 = m\n        var m44 = m\n       \
    \ var m45 = m\n        var m46 = m\n        var m47 = m\n        var m48 = m\n\
    \        var m49 = m\n        var m50 = m\n        var m51 = m\n        var m52\
    \ = m\n        var m53 = m\n        var m54 = m\n        var m55 = m\n       \
    \ var m56 = m\n        var m57 = m\n        var m58 = m\n        var m59 = m\n\
    \        var m60 = m\n        var m61 = m\n        var m62 = m\n        var m63\
    \ = m\n        var m64 = m\n        var m65 = m\n        var m66 = m\n       \
    \ var m67 = m\n        var m68 = m\n        var m69 = m\n        var m70 = m\n\
    \        var m71 = m\n        var m72 = m\n        var m73 = m\n        var m74\
    \ = m\n        var m75 = m\n        var m76 = m\n        var m77 = m\n       \
    \ var m78 = m\n        var m79 = m\n        var m80 = m\n        var m81 = m\n\
    \        var m82 = m\n        var m83 = m\n        var m84 = m\n        var m85\
    \ = m\n        var m86 = m\n        var m87 = m\n        var m88 = m\n       \
    \ var m89 = m\n        var m90 = m\n        var m91 = m\n        var m92 = \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpeq4oul4_.scala:109:17 --------------------------\e\
    [0m\e[0m\n\e[31m109 |\e[0m        \e[33mvar\e[0m \e[36mm92\e[0m = \n\e[31m\e[31m\
    \    |\e[0m                 ^\e[0m\n\e[31m    |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpeq4oul4_.scala:12:18 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = l.length\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ length is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeq4oul4_.scala:13:18\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = l.head\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value head is not a member of Int\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpeq4oul4_.scala:110:5 --------------------\e[0m\e\
    [0m\n\e[31m110 |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m    |\e[0m\
    \     Found:    Unit\n\e[31m    |\e[0m     Required: Boolean\n\e[31m    |\e[0m\n\
    \e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val d = l.tail.tail.head\n        val r = l.tail.tail.tail.head\n        val\
    \ s = l.tail.tail.tail.tail.head\n        val t = l.tail.tail.tail.tail.tail.head\n\
    \        val u = l.tail.tail.tail.tail.tail.tail.head\n        val v = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val w = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val y =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n       \
    \ val z = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val a = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyl2fh7u5.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpyl2fh7u5.scala:25:5 ---------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l1 = l.tail\n        val\
    \ l2 = l.head\n        val l3 = l.tail.tail\n        val l4 = l.head.tail\n  \
    \      val l5 = l.tail.tail.tail\n        val l6 = l.head.tail.tail.tail\n   \
    \     val l7 = l.tail.tail.tail.tail.tail\n        val l8 = l.head.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail\n        val l10 = l.head.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l11 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l12 = l.head.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val l13 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val l14\
    \ = l.head.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l15 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l16 = l.head.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l17 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp111xpdr.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpp111xpdr.scala:12:16 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpp111xpdr.scala:30:5 ---------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val min = l.min\n        val max = l.max\n        val\
    \ length = l.length\n        val isIncreasing = true\n        val isDecreasing\
    \ = true\n        val isMonotonic = true\n        val isMonotonicIncreasing =\
    \ true\n        val isMonotonicDecreasing = true\n        val isMonotonicIncreasingOrDecreasing\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonic = true\n  \
    \      val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasing = true\n \
    \       val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true\n        val isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_c9a7__y.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_c9a7__y.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n == 0) true\n        else\
    \ if (n == 1) false\n        else {\n            val first = l.head\n        \
    \    val last = l.last\n            if (first < last) monotonic(l.tail)\n    \
    \        else monotonic(l.tail.reverse)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphxr3thq2.scala:23)\n\tat Problem.main(tmphxr3thq2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        val m = l.head\n        val\
    \ l2 = l.tail\n        val l3 = l2.tail\n        val l4 = l3.tail\n        val\
    \ l5 = l4.tail\n        val l6 = l5.tail\n        val l7 = l6.tail\n        val\
    \ l8 = l7.tail\n        val l9 = l8.tail\n        val l10 = l9.tail\n        val\
    \ l11 = l10.tail\n        val l12 = l11.tail\n        val l13 = l12.tail\n   \
    \     val l14 = l13.tail\n        val l15 = l14.tail\n        val l16 = l15.tail\n\
    \        val l17 = l16.tail\n        val l18 = l17.tail\n        val l19 = l18.tail\n\
    \        val l20 = l19.tail\n        val l21 = l20.tail\n        val l22 = l21.tail\n\
    \        val l23 = l22.tail\n        val l24 = l23.tail\n        val l25 = l24.tail\n\
    \        val l26 = l25.tail\n        val l27 = l26.tail\n        val l28 = l27.tail\n\
    \        val l29 = l28.tail\n        val l30 = l29.tail\n        val l31 = l30.tail\n\
    \        val l32 = l31.tail\n        val l33 = l32.tail\n        val l34 = l33.tail\n\
    \        val l35 = l34.tail\n        val l36 = l35.tail\n        val l37 = l36.tail\n\
    \        val l38 = l37.tail\n        val l39 = l38.tail\n        val l40 = l39.tail\n\
    \        val l41 = l40.tail\n        val l42 = l41.tail\n        val l43 = l42.tail\n\
    \        val l44 = l43.tail\n        val l45 = l44.tail\n        val l46 = l45.tail\n\
    \        val l47 = l46.tail\n        val l48 = l47.tail\n        val l49 = l48.tail\n\
    \        val l50 = l49.tail\n        val l51 = l50.tail\n        val l52 = l51.tail\n\
    \        val l53 = l52.tail\n        val l54 = l53.tail\n        val l55 = l54.tail\n\
    \        val l56 = l55.tail\n        val l57\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkndjd_rz.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpkndjd_rz.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.foldLeft(0L) {\n            (sum, e) => sum\
    \ + e\n        }\n        m == l.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppqmzvnaa.scala:18)\n\tat Problem.main(tmppqmzvnaa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val min = l.min\n        val\
    \ max = l.max\n        val min = l.min\n        val max = l.max\n        val min\
    \ = l.min\n        val max = l.max\n        val min = l.min\n        val max =\
    \ l.max\n        val min = l.min\n        val max = l.max\n        val min = l.min\n\
    \        val max = l.max\n        val min = l.min\n        val max = l.max\n \
    \       val min = l.min\n        val max = l.max\n        val min = l.min\n  \
    \      val max = l.max\n        val min = l.min\n        val max = l.max\n   \
    \     val min = l.min\n        val max = l.max\n        val min = l.min\n    \
    \    val max = l.max\n        val min = l.min\n        val max = l.max\n     \
    \   val min = l.min\n        val max = l.max\n        val min = l.min\n      \
    \  val max = l.max\n        val min = l.min\n        val max = l.max\n       \
    \ val min = l.min\n        val max = l.max\n        val min = l.min\n        val\
    \ max = l.max\n        val min = l.min\n        val max = l.max\n        val min\
    \ = l.min\n        val max = l.max\n        val min = l.min\n        val max =\
    \ l.max\n        val min = l.min\n        val max = l.max\n        val min = l.min\n\
    \        val max = l.max\n        val min = l.min\n        val max = l.max\n \
    \       val min = l.min\n        val max = l.max\n        val min = l.min\n  \
    \      val max = l.max\n        val min = l.min\n        val max = l.max\n   \
    \     val min = l.min\n        val max = l.max\n        val min = l.min\n    \
    \    val max = l.max\n        val min = l.min\n        val max = l.max\n     \
    \   val min = l.min\n        val max = l.max\n        val min = l.min\n      \
    \  val max = l.max\n        val min = l.min\n        val max = l.max\n       \
    \ val min = l.min\n        val max = l.max\n        val min = l.min\n        val\
    \ max = l.max\n        val min = l.min\n        val max = l.max\n        val min\
    \ = l.min\n        val max = l.max\n        val min = l.min\n        val max =\
    \ l.max\n        val min = l.min\n        val max = l.max\n        val min = l.min\n\
    \        val max = l.max\n        val min = l.min\n        val max = l.max\n \
    \       val min = l.min\n        val max = l.max\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmput50jlka.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = l.min\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmin is already defined\
    \ as \e[33mvalue\e[0m \e[35mmin\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmput50jlka.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = l.max\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax is already defined\
    \ as \e[33mvalue\e[0m \e[35mmax\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmput50jlka.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = l.min\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmin is already defined\
    \ as \e[33mvalue\e[0m \e[35mmin\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmput50jlka.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = l.max\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax is already defined\
    \ as \e[33mvalue\e[0m \e[35mmax\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmput50jlka.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = l.min\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmin is already defined\
    \ as \e[33mvalue\e[0m \e[35mmin\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmput50jlka.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[3"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val i = l.tail.tail.head\n        val j = l.tail.tail.tail.head\n        val\
    \ k = l.tail.tail.tail.tail.head\n        val l = l.tail.tail.tail.tail.tail.head\n\
    \        val m = l.tail.tail.tail.tail.tail.tail.head\n        val n = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val i = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n       \
    \ val j = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n    \
    \    val k = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8jqkt94w.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8jqkt94w.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8jqkt94w.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8jqkt94w.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mi is already defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8jqkt94w.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mj\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mj is already defined as \e[33mvalue\e[0m \e[35mj\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortWith(_ < _)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortWith(_ < _)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortWith(_ < _)\n        val l11 = l10.reverse\n        val l12 = l11.sortWith(_\
    \ < _)\n        val l13 = l12.reverse\n        val l14 = l13.sortWith(_ < _)\n\
    \        val l15 = l14.reverse\n        val l16 = l15.sortWith(_ < _)\n      \
    \  val l17 = l16.reverse\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.reverse\n        val l20 = l19.sortWith(_ < _)\n        val l21 = l20.reverse\n\
    \        val l22 = l21.sortWith(_ < _)\n        val l23 = l22.reverse\n      \
    \  val l24 = l23.sortWith(_ < _)\n        val l25 = l24.reverse\n        val l26\
    \ = l25.sortWith(_ < _)\n        val l27 = l26.reverse\n        val l28 = l27.sortWith(_\
    \ < _)\n        val l29 = l28.reverse\n        val l30 = l29.sortWith(_ < _)\n\
    \        val l31 = l30.reverse\n        val l32 = l31.sortWith(_ < _)\n      \
    \  val l33 = l32.reverse\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.reverse\n        val l36 = l35.sortWith(_ < _)\n        val l37 = l36.reverse\n\
    \        val l38 = l37.sortWith(_ < _)\n        val l39 = l38.reverse\n      \
    \  val l40 = l39.sortWith(_ < _)\n        val l41 = l40.reverse\n        val l42\
    \ = l41.sortWith(_ < _)\n        val l43 = l42.reverse\n        val l44 = l43.sortWith(_\
    \ < _)\n        val l45 = l44.reverse\n        val l46 = l45\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpunv3xes_.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val d = l.tail.tail.head\n        val r = l.tail.tail.tail.head\n        val\
    \ s = l.tail.tail.tail.tail.head\n        val t = l.tail.tail.tail.tail.tail.head\n\
    \        val u = l.tail.tail.tail.tail.tail.tail.head\n        val v = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val w = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val y =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n       \
    \ val z = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val a = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyl2fh7u5.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpyl2fh7u5.scala:25:5 ---------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val minValue = l.min\n        val maxValue = l.max\n\
    \        val minIndex = 0\n        val maxIndex = l.size - 1\n        val minIsLess\
    \ = minValue < l.head\n        val maxIsLess = maxValue < l.last\n        val\
    \ minIsGreater = minValue > l.head\n        val maxIsGreater = maxValue > l.last\n\
    \        val isMonotonic = minIsLess && maxIsLess && minIsGreater && maxIsGreater\n\
    \        if (isMonotonic) {\n            val minIndexIsLess = minIndex < l.head\n\
    \            val maxIndexIsLess = maxIndex < l.last\n            val minIndexIsGreater\
    \ = minIndex > l.head\n            val maxIndexIsGreater = maxIndex > l.last\n\
    \            val isMonotonic = minIndexIsLess && maxIndexIsLess && minIndexIsGreater\
    \ && maxIndexIsGreater\n            if (isMonotonic) {\n                val minIsLessOrEqual\
    \ = minValue <= l.head\n                val maxIsLessOrEqual = maxValue <= l.last\n\
    \                val minIsGreaterOrEqual = minValue >= l.head\n              \
    \  val maxIsGreaterOrEqual = maxValue >= l.last\n                val isMonotonic\
    \ = minIsLessOrEqual && maxIsLessOrEqual && minIsGreaterOrEqual && maxIsGreaterOrEqual\n\
    \                if (isMonotonic) {\n                    val minIsLessOrEqualOrEqual\
    \ = minValue <= l.head && minValue <= l.last\n                    val maxIsLessOrEqualOrEqual\
    \ = maxValue <= l.head && maxValue <= l.last\n                    val minIsGreaterOrEqualOrEqual\
    \ = minValue >= l.head && minValue >= l.last\n                    val maxIsGreaterOrEqualOrEqual\
    \ = maxValue >= l.head && maxValue >= l.last\n                    val isMonotonic\
    \ = minIsLessOrEqualOrEqual && maxIsLessOrEqualOrEqual && minIsGreaterOrEqualOrEqual\
    \ && maxIsGreaterOrEqualOrEqual\n                    if (isMonotonic) {\n    \
    \                    val minIsLessOrEqualOrEqualOrEqual = minValue <= l.head &&\
    \ minValue <= l.last && minValue <= l.tail\n                        val maxIsLessOrEqualOrEqualOrEqual\
    \ = maxValue <= l.head && maxValue <= l.last && maxValue <= l.tail\n         \
    \               val minIsGreaterOrEqualOr\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfz3edvd3.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfz3edvd3.scala:56:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m56 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmpfz3edvd3.scala:40:114 ----------------------------\e[0m\e[0m\n\
    \e[31m40 |\e[0m                        \e[33mval\e[0m \e[36mminIsLessOrEqualOrEqualOrEqual\e\
    [0m = minValue <= l.head && minValue <= l.last && minValue <= l.tail\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m<=\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\e[31m \
    \  |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e\
    [0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x:\
    \ Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments\
    \ ((l.tail : => List[Long @uncheckedVariance]))\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmpfz3edvd3.scala:41:114 ----------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m                        \e[33mval\e[0m \e[36mmaxIsLessOrEqualOrEqualOrEqual\e\
    [0m = maxValue <= l.head && maxValue <= l.last && maxValue <= l.tail\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m<=\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\e[31m \
    \  |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e\
    [0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x:\
    \ Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments\
    \ ((l.tail : => List[Long @uncheckedVariance]))\n\e[33m\e[33m-- Warning: /tmp/tm"
  stdout: ''
  timestamp: 1659799731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.sortWith(_ < _)\n        val l6 = l5.sortWith(_ < _)\n        val l7\
    \ = l6.sortWith(_ < _)\n        val l8 = l7.sortWith(_ < _)\n        val l9 =\
    \ l8.sortWith(_ < _)\n        val l10 = l9.sortWith(_ < _)\n        val l11 =\
    \ l10.sortWith(_ < _)\n        val l12 = l11.sortWith(_ < _)\n        val l13\
    \ = l12.sortWith(_ < _)\n        val l14 = l13.sortWith(_ < _)\n        val l15\
    \ = l14.sortWith(_ < _)\n        val l16 = l15.sortWith(_ < _)\n        val l17\
    \ = l16.sortWith(_ < _)\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.sortWith(_ < _)\n        val l20 = l19.sortWith(_ < _)\n        val l21\
    \ = l20.sortWith(_ < _)\n        val l22 = l21.sortWith(_ < _)\n        val l23\
    \ = l22.sortWith(_ < _)\n        val l24 = l23.sortWith(_ < _)\n        val l25\
    \ = l24.sortWith(_ < _)\n        val l26 = l25.sortWith(_ < _)\n        val l27\
    \ = l26.sortWith(_ < _)\n        val l28 = l27.sortWith(_ < _)\n        val l29\
    \ = l28.sortWith(_ < _)\n        val l30 = l29.sortWith(_ < _)\n        val l31\
    \ = l30.sortWith(_ < _)\n        val l32 = l31.sortWith(_ < _)\n        val l33\
    \ = l32.sortWith(_ < _)\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.sortWith(_ < _)\n        val l36 = l35.sortWith(_ < _)\n        val l37\
    \ = l36.sortWith(_ < _)\n        val l38 = l37.sortWith(_ < _)\n        val l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp9ykge7y.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp9ykge7y.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp9ykge7y.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.foldLeft((l.head,l.head))((x,y) => if (x._2\
    \ > y._2) x else y)\n        m._2 > m._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkn2m7y8e.scala:12:66 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.foldLeft((l.head,l.head))((\e\
    [36mx\e[0m,\e[36my\e[0m) => \e[33mif\e[0m (x._2 > y._2) x \e[33melse\e[0m y)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                        value\
    \ _2 is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkn2m7y8e.scala:12:77\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mm\e\
    [0m = l.foldLeft((l.head,l.head))((\e[36mx\e[0m,\e[36my\e[0m) => \e[33mif\e[0m\
    \ (x._2 > y._2) x \e[33melse\e[0m y)\n\e[31m\e[31m   |\e[0m                  \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                  Found:    (\e[1m\e[31my\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m Long)\n\e[31m   |\e[0m                 \
    \                                 Required: (\e[1m\e[32mLong\e[0m\e[1m\e[32m,\e\
    [0m Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val min = l.min\n        val max = l.max\n        val\
    \ l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n        val l3 = l2.sortWith(_\
    \ > _)\n        val l4 = l3.sortWith(_ <= _)\n        val l5 = l4.sortWith(_ >=\
    \ _)\n        l5.forall(x => x == min || x == max)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplq1yjnku.scala:22)\n\tat Problem.main(tmplq1yjnku.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        l3.forall(l1.last.lt(_))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoz5hqqlo.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        l3.forall(l1.last.lt(_))\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value lt\
    \ is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        val m = l.head\n        val\
    \ r = l.tail\n        val d = r.foldLeft((m, 0))((x, y) => if (x < y) (x, y +\
    \ 1) else (y, x))\n        val m = d._1\n        val r = d._2\n        val d =\
    \ r.foldLeft((m, 0))((x, y) => if (x < y) (x, y + 1) else (y, x))\n        val\
    \ m = d._1\n        val r = d._2\n        val d = r.foldLeft((m, 0))((x, y) =>\
    \ if (x < y) (x, y + 1) else (y, x))\n        val m = d._1\n        val r = d._2\n\
    \        val d = r.foldLeft((m, 0))((x, y) => if (x < y) (x, y + 1) else (y, x))\n\
    \        val m = d._1\n        val r = d._2\n        val d = r.foldLeft((m, 0))((x,\
    \ y) => if (x < y) (x, y + 1) else (y, x))\n        val m = d._1\n        val\
    \ r = d._2\n        val d = r.foldLeft((m, 0))((x, y) => if (x < y) (x, y + 1)\
    \ else (y, x))\n        val m = d._1\n        val r = d._2\n        val d = r.foldLeft((m,\
    \ 0))((x, y) => if (x < y) (x, y + 1) else (y, x))\n        val m = d._1\n   \
    \     val r = d._2\n        val d = r.foldLeft((m, 0))((x, y) => if (x < y) (x,\
    \ y + 1) else (y, x))\n        val m = d._1\n        val r = d._2\n        val\
    \ d = r.foldLeft((m, 0))((x, y) => if (x < y) (x, y + 1) else (y, x))\n      \
    \  val m = d._1\n        val r = d._2\n        val d = r.foldLeft((m, 0))((x,\
    \ y) => if (x < y) (x, y + 1) else (y, x))\n        val m = d._1\n        val\
    \ r = d._2\n        val d = r.foldLeft((m, 0))((x, y) => if (x < y) (x, y + 1)\
    \ else (y, x))\n        val m = d._1\n        val r = d._2\n        val d = r.foldLeft((m,\
    \ 0))((x, y) => if (x < y) (x, y + 1) else (y, x))\n        val m = d._1\n   \
    \     val r = d._2\n        val d = r.foldLeft((m, 0))((x, y) => if (x < y) (x,\
    \ y + 1) else (y, x))\n        val m = d._1\n        val r = d._2\n        val\
    \ d = r.foldLeft((m, 0))((x, y) => if (x < y) (x, y + 1) else (y, x))\n      \
    \  val m = d._1\n        val r = d._2\n        val d = r.foldLeft((m, 0))((x,\
    \ y) => if (x < y) (x, y + 1) \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv46q4pqx.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv46q4pqx.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = d._1\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv46q4pqx.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mr\e[0m = d._2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv46q4pqx.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36md\e[0m = r.foldLeft((m, \e[31m0\e[0m))((\e[36mx\e[0m, \e[36my\e[0m) =>\
    \ \e[33mif\e[0m (x < y) (x, y + \e[31m1\e[0m) \e[33melse\e[0m (y, x))\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0md is already defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv46q4pqx.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = d._1\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m\
    \ \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmpv46q4pqx.scala:20:12 ---------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = d._2\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^"
  stdout: ''
  timestamp: 1659799736
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ if (m > n) monotonic(l.tail) else !monotonic(l.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.monotonic(tmpyi2sbh5r.scala:13)\n\
    \tat Problem$.monotonic(tmpyi2sbh5r.scala:14)\n\tat Problem$.monotonic(tmpyi2sbh5r.scala:14)\n\
    \tat Problem$.monotonic(tmpyi2sbh5r.scala:14)\n\tat Problem$.main(tmpyi2sbh5r.scala:17)\n\
    \tat Problem.main(tmpyi2sbh5r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.reverse\n \
    \       val l22 = l21.toList\n        val l23 = l22.reverse\n        val l24 =\
    \ l23.toList\n        val l25 = l24.reverse\n        val l26 = l25.toList\n  \
    \      val l27 = l26.reverse\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val l\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5e_uj5n1.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5e_uj5n1.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5e_uj5n1.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l1\
    \ = l.tail.tail\n        val l2 = l.tail.tail.tail\n        val l3 = l.tail.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfphcm9uw.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortWith(_ < _)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortWith(_ < _)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortWith(_ < _)\n        val l11 = l10.reverse\n        val l12 = l11.sortWith(_\
    \ < _)\n        val l13 = l12.reverse\n        val l14 = l13.sortWith(_ < _)\n\
    \        val l15 = l14.reverse\n        val l16 = l15.sortWith(_ < _)\n      \
    \  val l17 = l16.reverse\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.reverse\n        val l20 = l19.sortWith(_ < _)\n        val l21 = l20.reverse\n\
    \        val l22 = l21.sortWith(_ < _)\n        val l23 = l22.reverse\n      \
    \  val l24 = l23.sortWith(_ < _)\n        val l25 = l24.reverse\n        val l26\
    \ = l25.sortWith(_ < _)\n        val l27 = l26.reverse\n        val l28 = l27.sortWith(_\
    \ < _)\n        val l29 = l28.reverse\n        val l30 = l29.sortWith(_ < _)\n\
    \        val l31 = l30.reverse\n        val l32 = l31.sortWith(_ < _)\n      \
    \  val l33 = l32.reverse\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.reverse\n        val l36 = l35.sortWith(_ < _)\n        val l37 = l36.reverse\n\
    \        val l38 = l37.sortWith(_ < _)\n        val l39 = l38.reverse\n      \
    \  val l40 = l39.sortWith(_ < _)\n        val l41 = l40.reverse\n        val l42\
    \ = l41.sortWith(_ < _)\n        val l43 = l42.reverse\n        val l44 = l43.sortWith(_\
    \ < _)\n        val l45 = l44.reverse\n        val l46 = l45\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpunv3xes_.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val n = l.length\n        val\
    \ m = l.head\n        val r = l.tail\n        val d = r.head\n        val r =\
    \ r.tail\n        val d = r.head\n        val r = r.tail\n        val d = r.head\n\
    \        val r = r.tail\n        val d = r.head\n        val r = r.tail\n    \
    \    val d = r.head\n        val r = r.tail\n        val d = r.head\n        val\
    \ r = r.tail\n        val d = r.head\n        val r = r.tail\n        val d =\
    \ r.head\n        val r = r.tail\n        val d = r.head\n        val r = r.tail\n\
    \        val d = r.head\n        val r = r.tail\n        val d = r.head\n    \
    \    val r = r.tail\n        val d = r.head\n        val r = r.tail\n        val\
    \ d = r.head\n        val r = r.tail\n        val d = r.head\n        val r =\
    \ r.tail\n        val d = r.head\n        val r = r.tail\n        val d = r.head\n\
    \        val r = r.tail\n        val d = r.head\n        val r = r.tail\n    \
    \    val d = r.head\n        val r = r.tail\n        val d = r.head\n        val\
    \ r = r.tail\n        val d = r.head\n        val r = r.tail\n        val d =\
    \ r.head\n        val r = r.tail\n        val d = r.head\n        val r = r.tail\n\
    \        val d = r.head\n        val r = r.tail\n        val d = r.head\n    \
    \    val r = r.tail\n        val d = r.head\n        val r = r.tail\n        val\
    \ d = r.head\n        val r = r.tail\n        val d = r.head\n        val r =\
    \ r.tail\n        val d = r.head\n        val r = r.tail\n        val d = r.head\n\
    \        val r = r.tail\n        val d = r.head\n        val r = r.tail\n    \
    \    val d = r.head\n        val r = r.tail\n        val d = r.head\n        val\
    \ r = r.tail\n        val d = r.head\n        val r = r.tail\n        val d =\
    \ r.head\n        val r = r.tail\n        val d = r.head\n        val r = r.tail\n\
    \        val d = r.head\n        val r = r.tail\n        val d = r.head\n    \
    \    val r = r.tail\n        val d = r.head\n        val r = r.tail\n        val\
    \ d = r.head\n        val r = r.tail\n        val d = r.head\n        val r =\
    \ r.tail\n        val d = r.head\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4grezw76.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.tail\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4grezw76.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = r.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0md is already defined\
    \ as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4grezw76.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.tail\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4grezw76.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = r.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0md is already defined\
    \ as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4grezw76.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.tail\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4grezw76.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = r.head\n"
  stdout: ''
  timestamp: 1659799735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val l = l.tail.tail\n        if (l.isEmpty) true\n        else if (m > n) monotonic(l)\n\
    \        else if (m < n) monotonic(l)\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2idalcp1.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.tail.tail\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.sortWith(_ < _)\n        val l6 = l5.sortWith(_ < _)\n        val l7\
    \ = l6.sortWith(_ < _)\n        val l8 = l7.sortWith(_ < _)\n        val l9 =\
    \ l8.sortWith(_ < _)\n        val l10 = l9.sortWith(_ < _)\n        val l11 =\
    \ l10.sortWith(_ < _)\n        val l12 = l11.sortWith(_ < _)\n        val l13\
    \ = l12.sortWith(_ < _)\n        val l14 = l13.sortWith(_ < _)\n        val l15\
    \ = l14.sortWith(_ < _)\n        val l16 = l15.sortWith(_ < _)\n        val l17\
    \ = l16.sortWith(_ < _)\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.sortWith(_ < _)\n        val l20 = l19.sortWith(_ < _)\n        val l21\
    \ = l20.sortWith(_ < _)\n        val l22 = l21.sortWith(_ < _)\n        val l23\
    \ = l22.sortWith(_ < _)\n        val l24 = l23.sortWith(_ < _)\n        val l25\
    \ = l24.sortWith(_ < _)\n        val l26 = l25.sortWith(_ < _)\n        val l27\
    \ = l26.sortWith(_ < _)\n        val l28 = l27.sortWith(_ < _)\n        val l29\
    \ = l28.sortWith(_ < _)\n        val l30 = l29.sortWith(_ < _)\n        val l31\
    \ = l30.sortWith(_ < _)\n        val l32 = l31.sortWith(_ < _)\n        val l33\
    \ = l32.sortWith(_ < _)\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.sortWith(_ < _)\n        val l36 = l35.sortWith(_ < _)\n        val l37\
    \ = l36.sortWith(_ < _)\n        val l38 = l37.sortWith(_ < _)\n        val l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp9ykge7y.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp9ykge7y.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp9ykge7y.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799735
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.toList\n        val l4 = l3.sortWith(_ > _)\n        val\
    \ l5 = l4.toList\n        val l6 = l5.sortWith(_ <= _)\n        val l7 = l6.toList\n\
    \        val l8 = l7.sortWith(_ >= _)\n        val l9 = l8.toList\n        val\
    \ l10 = l9.toList\n        l10.forall(x => x == l1.last)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpizqq3a1g.scala:25)\n\tat Problem.main(tmpizqq3a1g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.sortWith(_ < _)\n        val l6 = l5.sortWith(_ < _)\n        val l7\
    \ = l6.sortWith(_ < _)\n        val l8 = l7.sortWith(_ < _)\n        val l9 =\
    \ l8.sortWith(_ < _)\n        val l10 = l9.sortWith(_ < _)\n        val l11 =\
    \ l10.sortWith(_ < _)\n        val l12 = l11.sortWith(_ < _)\n        val l13\
    \ = l12.sortWith(_ < _)\n        val l14 = l13.sortWith(_ < _)\n        val l15\
    \ = l14.sortWith(_ < _)\n        val l16 = l15.sortWith(_ < _)\n        val l17\
    \ = l16.sortWith(_ < _)\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.sortWith(_ < _)\n        val l20 = l19.sortWith(_ < _)\n        val l21\
    \ = l20.sortWith(_ < _)\n        val l22 = l21.sortWith(_ < _)\n        val l23\
    \ = l22.sortWith(_ < _)\n        val l24 = l23.sortWith(_ < _)\n        val l25\
    \ = l24.sortWith(_ < _)\n        val l26 = l25.sortWith(_ < _)\n        val l27\
    \ = l26.sortWith(_ < _)\n        val l28 = l27.sortWith(_ < _)\n        val l29\
    \ = l28.sortWith(_ < _)\n        val l30 = l29.sortWith(_ < _)\n        val l31\
    \ = l30.sortWith(_ < _)\n        val l32 = l31.sortWith(_ < _)\n        val l33\
    \ = l32.sortWith(_ < _)\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.sortWith(_ < _)\n        val l36 = l35.sortWith(_ < _)\n        val l37\
    \ = l36.sortWith(_ < _)\n        val l38 = l37.sortWith(_ < _)\n        val l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp9ykge7y.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp9ykge7y.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp9ykge7y.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.last\n        val m1\
    \ = l.tail.head\n        val n1 = l.tail.last\n        val m2 = l.tail.tail.head\n\
    \        val n2 = l.tail.tail.last\n        if (m > n) monotonic(l.tail) else\
    \ (m == m1 && n < n1) && monotonic(l.tail)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprl98q546.scala:21)\n\tat Problem.main(tmprl98q546.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        val m = l.head\n        val\
    \ r = l.tail\n        val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n\
    \        val l3 = l.tail.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n       \
    \ val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps9jaqxdh.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        val m = l.head\n        var\
    \ i = 2\n        while (i < n) {\n            if (l(i) < m) {\n              \
    \  m = l(i)\n            }\n            i += 1\n        }\n        i == n\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpth100u1x.scala:17:18 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                m = l(i)\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val\
    \ m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val sorted = l.sorted\n   \
    \     val l = l.toList\n        val sorted = l.sorted\n        val l = l.toList\n\
    \        val sorted = l.sorted\n        val l = l.toList\n        val sorted =\
    \ l.sorted\n        val l = l.toList\n        val sorted = l.sorted\n        val\
    \ l = l.toList\n        val sorted = l.sorted\n        val l = l.toList\n    \
    \    val sorted = l.sorted\n        val l = l.toList\n        val sorted = l.sorted\n\
    \        val l = l.toList\n        val sorted = l.sorted\n        val l = l.toList\n\
    \        val sorted = l.sorted\n        val l = l.toList\n        val sorted =\
    \ l.sorted\n        val l = l.toList\n        val sorted = l.sorted\n        val\
    \ l = l.toList\n        val sorted = l.sorted\n        val l = l.toList\n    \
    \    val sorted = l.sorted\n        val l = l.toList\n        val sorted = l.sorted\n\
    \        val l = l.toList\n        val sorted = l.sorted\n        val l = l.toList\n\
    \        val sorted = l.sorted\n        val l = l.toList\n        val sorted =\
    \ l.sorted\n        val l = l.toList\n        val sorted = l.sorted\n        val\
    \ l = l.toList\n        val sorted = l.sorted\n        val l = l.toList\n    \
    \    val sorted = l.sorted\n        val l = l.toList\n        val sorted = l.sorted\n\
    \        val l = l.toList\n        val sorted = l.sorted\n        val l = l.toList\n\
    \        val sorted = l.sorted\n        val l = l.toList\n        val sorted =\
    \ l.sorted\n        val l = l.toList\n        val sorted = l.sorted\n        val\
    \ l = l.toList\n        val sorted = l.sorted\n        val l = l.toList\n    \
    \    val sorted = l.sorted\n        val l = l.toList\n        val sorted = l.sorted\n\
    \        val l = l.toList\n        val sorted = l.sorted\n        val l = l.toList\n\
    \        val sorted = l.sorted\n        val l = l.toList\n        val sorted =\
    \ l.sorted\n        val l = l.toList\n        val sorted = l.sorted\n        val\
    \ l = l.toList\n        val sorted = l.sorted\n        val l = l.toList\n    \
    \    val sorted = l.sorted\n        val l = l.toList\n        val sorted = l.sorted\n\
    \        val l = l.toList\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsqceqouv.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined\
    \ as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsqceqouv.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msorted\e[0m = l.sorted\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msorted\
    \ is already defined as \e[33mvalue\e[0m \e[35msorted\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsqceqouv.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsqceqouv.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36msorted\e[0m = l.sorted\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msorted is already defined\
    \ as \e[33mvalue\e[0m \e[35msorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsqceqouv.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined\
    \ as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsqceqouv.scala:19:12 ---------------------------\e\
    [0"
  stdout: ''
  timestamp: 1659799739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l1\
    \ = l.tail.tail\n        val l2 = l.tail.tail.tail\n        val l3 = l.tail.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n \
    \       val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l10 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpltjiix9t.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpltjiix9t.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        l3.forall(l1.contains)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpllww_wne.scala:20)\n\tat Problem.main(tmpllww_wne.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val minValue = l.min\n        val maxValue = l.max\n\
    \        val minIndex = 0\n        val maxIndex = 0\n        val minValueIndex\
    \ = -1\n        val maxValueIndex = -1\n        val minValueIndex2 = -1\n    \
    \    val maxValueIndex2 = -1\n        val minValueIndex3 = -1\n        val maxValueIndex3\
    \ = -1\n        val minValueIndex4 = -1\n        val maxValueIndex4 = -1\n   \
    \     val minValueIndex5 = -1\n        val maxValueIndex5 = -1\n        val minValueIndex6\
    \ = -1\n        val maxValueIndex6 = -1\n        val minValueIndex7 = -1\n   \
    \     val maxValueIndex7 = -1\n        val minValueIndex8 = -1\n        val maxValueIndex8\
    \ = -1\n        val minValueIndex9 = -1\n        val maxValueIndex9 = -1\n   \
    \     val minValueIndex10 = -1\n        val maxValueIndex10 = -1\n        val\
    \ minValueIndex11 = -1\n        val maxValueIndex11 = -1\n        val minValueIndex12\
    \ = -1\n        val maxValueIndex12 = -1\n        val minValueIndex13 = -1\n \
    \       val maxValueIndex13 = -1\n        val minValueIndex14 = -1\n        val\
    \ maxValueIndex14 = -1\n        val minValueIndex15 = -1\n        val maxValueIndex15\
    \ = -1\n        val minValueIndex16 = -1\n        val maxValueIndex16 = -1\n \
    \       val minValueIndex17 = -1\n        val maxValueIndex17 = -1\n        val\
    \ minValueIndex18 = -1\n        val maxValueIndex18 = -1\n        val minValueIndex19\
    \ = -1\n        val maxValueIndex19 = -1\n        val minValueIndex20 = -1\n \
    \       val maxValueIndex20 = -1\n        val minValueIndex21 = -1\n        val\
    \ maxValueIndex21 = -1\n        val minValueIndex22 = -1\n        val maxValueIndex22\
    \ = -1\n        val minValueIndex23 = -1\n        val maxValueIndex23 = -1\n \
    \       val minValueIndex24 = -1\n        val maxValueIndex24 = -1\n        val\
    \ minValueIndex25 = -1\n        val maxValueIndex25 = -1\n        val minValueIndex26\
    \ = -1\n        val maxValueIndex26 = -1\n        val minValueIndex27 = -1\n \
    \       val maxValueIndex27 = -1\n        val minValueIndex28 = -1\n        val\
    \ maxValueIndex28 = -1\n        val minValueIndex29 = -1\n        val maxValueIndex29\
    \ = -1\n        val minValueIndex30 = -1\n        val maxValueIndex30 = -1\n \
    \       val minValueIndex3\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc3wwnb3m.scala:77:4 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpc3wwnb3m.scala:77:5 ---------------------\e[0m\e[0m\n\e[31m77 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val m = m.toLong\n        val n = n.toLong\n        if (m > n) true else if\
    \ (m == n) false else monotonic(l.tail)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz1hnl5rr.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz1hnl5rr.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val m = l.head\n        val\
    \ n = l.last\n        val l1 = l.tail\n        val l2 = l.tail.tail\n        val\
    \ l3 = l.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail\n        val l5\
    \ = l.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail\n        val l8 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf2juj565.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpf2juj565.scala:12:16 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpf2juj565.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799740
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortBy(x => x)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortBy(x => x)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortBy(x => x)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortBy(x => x)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortBy(x => x)\n        val l11 = l10.reverse\n        val l12 = l11.sortBy(x\
    \ => x)\n        val l13 = l12.reverse\n        val l14 = l13.sortBy(x => x)\n\
    \        val l15 = l14.reverse\n        val l16 = l15.sortBy(x => x)\n       \
    \ val l17 = l16.reverse\n        val l18 = l17.sortBy(x => x)\n        val l19\
    \ = l18.reverse\n        val l20 = l19.sortBy(x => x)\n        val l21 = l20.reverse\n\
    \        val l22 = l21.sortBy(x => x)\n        val l23 = l22.reverse\n       \
    \ val l24 = l23.sortBy(x => x)\n        val l25 = l24.reverse\n        val l26\
    \ = l25.sortBy(x => x)\n        val l27 = l26.reverse\n        val l28 = l27.sortBy(x\
    \ => x)\n        val l29 = l28.reverse\n        val l30 = l29.sortBy(x => x)\n\
    \        val l31 = l30.reverse\n        val l32 = l31.sortBy(x => x)\n       \
    \ val l33 = l32.reverse\n        val l34 = l33.sortBy(x => x)\n        val l35\
    \ = l34.reverse\n        val l36 = l35.sortBy(x => x)\n        val l37 = l36.reverse\n\
    \        val l38 = l37.sortBy(x => x)\n        val l39 = l38.reverse\n       \
    \ val l40 = l39.sortBy(x => x)\n        val l41 = l40.reverse\n        val l42\
    \ = l41.sortBy(x => x)\n        val l43 = l42.reverse\n        val l44 = l43.sortBy(x\
    \ => x)\n        val l45 = l44.reverse\n        val l46 = l45.sortBy(x => x)\n\
    \        val l47 = l46.reverse\n        val l48 = l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp03u87irb.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799742
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.toList\n        val l4 = l3.sortWith(_ > _)\n        val\
    \ l5 = l4.toList\n        val l6 = l5.sortWith(_ <= _)\n        val l7 = l6.toList\n\
    \        val l8 = l7.sortWith(_ >= _)\n        l8 == l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9esfss1a.scala:23)\n\tat Problem.main(tmp9esfss1a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.foldLeft(0L) { (sum, e) =>\n            val\
    \ cur = sum + e\n            if (cur > 0L) cur else 0L\n        }\n        m >\
    \ 0L\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2tykw1n.scala:21)\n\tat Problem.main(tmpv2tykw1n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.toList\n        val l4 = l3.sortWith(_ > _)\n        val\
    \ l5 = l4.toList\n        val l6 = l5.sortWith(_ <= _)\n        val l7 = l6.toList\n\
    \        val l8 = l7.sortWith(_ >= _)\n        l8 == l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9esfss1a.scala:23)\n\tat Problem.main(tmp9esfss1a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.reverse\n \
    \       val l22 = l21.toList\n        val l23 = l22.reverse\n        val l24 =\
    \ l23.toList\n        val l25 = l24.reverse\n        val l26 = l25.toList\n  \
    \      val l27 = l26.reverse\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val l\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5e_uj5n1.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5e_uj5n1.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5e_uj5n1.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val n = l.length\n        if\
    \ (n == 0) true\n        else if (n == 1) false\n        else {\n            val\
    \ m = l.head\n            val r = l.tail\n            val l1 = monotonic(r)\n\
    \            val l2 = monotonic(l)\n            if (l1 && l2) (m > m) || (m ==\
    \ m && r.reverse.head > r.head) || (m == m && r.reverse.head == r.head && r.reverse.tail.head\
    \ > r.tail.head) || (m == m && r.reverse.head == r.head && r.reverse.tail.head\
    \ == r.tail.head && r.reverse.tail.tail.head > r.tail.tail.head) || (m == m &&\
    \ r.reverse.head == r.head && r.reverse.tail.head == r.tail.head && r.reverse.tail.tail.head\
    \ == r.tail.tail.head && r.reverse.tail.tail.tail.head > r.tail.tail.tail.tail.head)\
    \ || (m == m && r.reverse.head == r.head && r.reverse.tail.head == r.tail.head\
    \ && r.reverse.tail.tail.head == r.tail.tail.head && r.reverse.tail.tail.tail.head\
    \ == r.tail.tail.tail.head && r.reverse.tail.tail.tail.tail.head > r.tail.tail.tail.tail.tail.head)\n\
    \            else false\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgkhih67w.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val minValue = l.head\n        val maxValue = l.last\n\
    \        val minIndex = 0\n        val maxIndex = l.length - 1\n        val minChange\
    \ = maxValue - minValue\n        val maxChange = maxValue - maxValue\n       \
    \ val minChangeIndex = maxIndex\n        val maxChangeIndex = minIndex\n     \
    \   val change = minChange\n        val changeIndex = minChangeIndex\n       \
    \ val changeIndexSet = mutable.Set[Int]()\n        val changeIndexSetSize = changeIndexSet.size\n\
    \        val changeIndexSetIterator = changeIndexSet.iterator\n        val changeIndexSetIteratorSize\
    \ = changeIndexSetIterator.size\n        val changeIndexSetIteratorIterator =\
    \ changeIndexSetIterator.iterator\n        val changeIndexSetIteratorIteratorSize\
    \ = changeIndexSetIteratorIterator.size\n        val changeIndexSetIteratorIteratorIterator\
    \ = changeIndexSetIteratorIterator.iterator\n        val changeIndexSetIteratorIteratorIteratorSize\
    \ = changeIndexSetIteratorIteratorIterator.size\n        val changeIndexSetIteratorIteratorIteratorIterator\
    \ = changeIndexSetIteratorIteratorIterator.iterator\n        val changeIndexSetIteratorIteratorIteratorIteratorSize\
    \ = changeIndexSetIteratorIteratorIteratorIterator.size\n        val changeIndexSetIteratorIteratorIteratorIteratorIterator\
    \ = changeIndexSetIteratorIteratorIteratorIterator.iterator\n        val changeIndexSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = changeIndexSetIteratorIteratorIteratorIteratorIterator.size\n        val changeIndexSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = changeIndexSetIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ changeIndexSetIteratorIteratorIteratorIteratorIteratorIteratorSize = changeIndexSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val changeIndexSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = changeIndexSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val changeIndexSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = changeIndexSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val changeIndexSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = changeIndexSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val changeIndexSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = changeIndexSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val changeIndexSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = changeIndexSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val changeIndexSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = changeIndexSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val changeIndexSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = changeIndexSetIterator\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmputetz2k0.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mchangeIndexSet\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmputetz2k0.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val m = m.toLong\n        val n = n.toLong\n        if (m > n) true\n      \
    \  else if (m < n) false\n        else monotonic(l.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp18e9gkhk.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp18e9gkhk.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799707
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val sortedList = l.sorted\n        val lastElement =\
    \ sortedList.last\n        val firstElement = sortedList.head\n        val isIncreasing\
    \ = lastElement > firstElement\n        val isDecreasing = lastElement < firstElement\n\
    \        isIncreasing || isDecreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1xapai76.scala:22)\n\tat Problem.main(tmp1xapai76.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val n = l.length\n        val\
    \ m = l.head\n        val r = l.tail\n        val m = m.toLong\n        val r\
    \ = r.toLong\n        val l = r.head\n        val r = r.tail\n        val l =\
    \ l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val r\
    \ = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoiciyujs.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoiciyujs.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoiciyujs.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = r.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined\
    \ as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoiciyujs.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.tail\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoiciyujs.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined\
    \ as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoiciyujs.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e["
  stdout: ''
  timestamp: 1659799745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l1 = l.tail\n        val\
    \ l2 = l.head\n        val l3 = l.init\n        val l4 = l.last\n        val l5\
    \ = l.init\n        val l6 = l.last\n        val l7 = l.init\n        val l8 =\
    \ l.last\n        val l9 = l.init\n        val l10 = l.last\n        val l11 =\
    \ l.init\n        val l12 = l.last\n        val l13 = l.init\n        val l14\
    \ = l.last\n        val l15 = l.init\n        val l16 = l.last\n        val l17\
    \ = l.init\n        val l18 = l.last\n        val l19 = l.init\n        val l20\
    \ = l.last\n        val l21 = l.init\n        val l22 = l.last\n        val l23\
    \ = l.init\n        val l24 = l.last\n        val l25 = l.init\n        val l26\
    \ = l.last\n        val l27 = l.init\n        val l28 = l.last\n        val l29\
    \ = l.init\n        val l30 = l.last\n        val l31 = l.init\n        val l32\
    \ = l.last\n        val l33 = l.init\n        val l34 = l.last\n        val l35\
    \ = l.init\n        val l36 = l.last\n        val l37 = l.init\n        val l38\
    \ = l.last\n        val l39 = l.init\n        val l40 = l.last\n        val l41\
    \ = l.init\n        val l42 = l.last\n        val l43 = l.init\n        val l44\
    \ = l.last\n        val l45 = l.init\n        val l46 = l.last\n        val l47\
    \ = l.init\n        val l48 = l.last\n        val l49 = l.init\n        val l50\
    \ = l.last\n        val l51 = l.init\n        val l52 = l.last\n        val l53\
    \ = l.init\n        val l54 = l.last\n        val l55 = l.init\n        val l56\
    \ = l.last\n        val l57 = l.init\n        val l58 = l.last\n        val l59\
    \ = l.init\n        val l60 = l.last\n        val l61 = l.init\n        val l62\
    \ = l.last\n        val l63 = l.init\n        val l64 = l.last\n        val l65\
    \ = l.\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwrhval6p.scala:78:4 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpwrhval6p.scala:12:16 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwrhval6p.scala:78:5 ---------------------\e[0m\e[0m\n\e[31m78\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l1\
    \ = l.tail.tail\n        val l2 = l.tail.tail.tail\n        val l3 = l.tail.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l10 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm9j4fitp.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpm9j4fitp.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val minValue = l.head\n        val maxValue = l.last\n\
    \        val minIndex = l.indexOf(minValue)\n        val maxIndex = l.indexOf(maxValue)\n\
    \        val minIndex2 = l.indexOf(minValue, minIndex + 1)\n        val maxIndex2\
    \ = l.indexOf(maxValue, maxIndex + 1)\n        val minIndex3 = l.indexOf(minValue,\
    \ minIndex + 2)\n        val maxIndex3 = l.indexOf(maxValue, maxIndex + 2)\n \
    \       val minIndex4 = l.indexOf(minValue, minIndex + 3)\n        val maxIndex4\
    \ = l.indexOf(maxValue, maxIndex + 3)\n        val minIndex5 = l.indexOf(minValue,\
    \ minIndex + 4)\n        val maxIndex5 = l.indexOf(maxValue, maxIndex + 4)\n \
    \       val minIndex6 = l.indexOf(minValue, minIndex + 5)\n        val maxIndex6\
    \ = l.indexOf(maxValue, maxIndex + 5)\n        val minIndex7 = l.indexOf(minValue,\
    \ minIndex + 6)\n        val maxIndex7 = l.indexOf(maxValue, maxIndex + 6)\n \
    \       val minIndex8 = l.indexOf(minValue, minIndex + 7)\n        val maxIndex8\
    \ = l.indexOf(maxValue, maxIndex + 7)\n        val minIndex9 = l.indexOf(minValue,\
    \ minIndex + 8)\n        val maxIndex9 = l.indexOf(maxValue, maxIndex + 8)\n \
    \       val minIndex10 = l.indexOf(minValue, minIndex + 9)\n        val maxIndex10\
    \ = l.indexOf(maxValue, maxIndex + 9)\n        val minIndex11 = l.indexOf(minValue,\
    \ minIndex + 10)\n        val maxIndex11 = l.indexOf(maxValue, maxIndex + 10)\n\
    \        val minIndex12 = l.indexOf(minValue, minIndex + 11)\n        val maxIndex12\
    \ = l.indexOf(maxValue, maxIndex + 11)\n        val minIndex13 = l.indexOf(minValue,\
    \ minIndex + 12)\n        val maxIndex13 = l.indexOf(maxValue, maxIndex + 12)\n\
    \        val minIndex14 = l.indexOf(minValue, minIndex + 13)\n        val maxIndex14\
    \ = l.indexOf(maxValue, maxIndex + 13)\n        val minIndex15 = l.indexOf(minValue,\
    \ minIndex + 14)\n        val maxIndex15 = l.indexOf(maxValue, maxIndex + 14)\n\
    \        val minIndex16 = l.indexOf(minValue, minIndex + 15)\n        val maxIndex16\
    \ = l.indexOf(maxValue, maxIndex + 15)\n        val minIndex17 = l.indexOf(minValue,\
    \ minIndex + 16)\n        val maxIndex17 = l.indexOf(maxValue, maxIndex + 16)\n\
    \        val minIndex18 = l.indexOf(minValue, minIndex + 17)\n        val maxIndex18\
    \ = l.indexOf(max\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb2xhr3vq.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpb2xhr3vq.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val n = l.size\n        val\
    \ m = l.head\n        val r = l.tail\n        val s = r.head\n        val t =\
    \ r.tail\n        val u = r.reverse\n        val v = l.reverse\n        val w\
    \ = l.tail.reverse\n        val x = l.head.reverse\n        val y = l.tail.reverse.reverse\n\
    \        val z = l.tail.reverse.reverse.reverse\n        val a = l.tail.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1lm7x8g0.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp1lm7x8g0.scala:25:5 ---------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortBy(-_)\n \
    \       val l3 = l2.reverse\n        val l4 = l3.sortBy(-_)\n        val l5 =\
    \ l4.toList\n        val l6 = l5.sortBy(-_)\n        val l7 = l6.sortBy(-_)\n\
    \        val l8 = l7.sortBy(-_)\n        val l9 = l8.sortBy(-_)\n        val l10\
    \ = l9.sortBy(-_)\n        val l11 = l10.sortBy(-_)\n        val l12 = l11.sortBy(-_)\n\
    \        val l13 = l12.sortBy(-_)\n        val l14 = l13.sortBy(-_)\n        val\
    \ l15 = l14.sortBy(-_)\n        val l16 = l15.sortBy(-_)\n        val l17 = l16.sortBy(-_)\n\
    \        val l18 = l17.sortBy(-_)\n        val l19 = l18.sortBy(-_)\n        val\
    \ l20 = l19.sortBy(-_)\n        val l21 = l20.sortBy(-_)\n        val l22 = l21.sortBy(-_)\n\
    \        val l23 = l22.sortBy(-_)\n        val l24 = l23.sortBy(-_)\n        val\
    \ l25 = l24.sortBy(-_)\n        val l26 = l25.sortBy(-_)\n        val l27 = l26.sortBy(-_)\n\
    \        val l28 = l27.sortBy(-_)\n        val l29 = l28.sortBy(-_)\n        val\
    \ l30 = l29.sortBy(-_)\n        val l31 = l30.sortBy(-_)\n        val l32 = l31.sortBy(-_)\n\
    \        val l33 = l32.sortBy(-_)\n        val l34 = l33.sortBy(-_)\n        val\
    \ l35 = l34.sortBy(-_)\n        val l36 = l35.sortBy(-_)\n        val l37 = l36.sortBy(-_)\n\
    \        val l38 = l37.sortBy(-_)\n        val l39 = l38.sortBy(-_)\n        val\
    \ l40 = l39.sortBy(-_)\n        val l41 = l40.sortBy(-_)\n        \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdrf2l7qt.scala:54:5\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.foldLeft(0l)( (acc, x) => if (acc < x) acc\
    \ else x)\n        m == l.last\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf09ke987.scala:16)\n\tat Problem.main(tmpf09ke987.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.reverse\n \
    \       val l22 = l21.toList\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.toList\n        val l34 =\
    \ l33.reverse\n        val l35 = l34.toList\n        val l36 = l35.reverse\n \
    \       val l37 = l36.toList\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.toList\n        val l44 =\
    \ l43.reverse\n        val l45 = l44.toList\n        val l46 = l45.reverse\n \
    \       val l47 = l46.toList\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.toList\n        val l54 =\
    \ l53.reverse\n\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjc0nhvab.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val m = l.head\n        val\
    \ n = l.tail\n        val l1 = l.tail.head\n        val l2 = l.tail.tail.head\n\
    \        val l3 = l.tail.tail.tail.head\n        val l4 = l.tail.tail.tail.tail.head\n\
    \        val l5 = l.tail.tail.tail.tail.tail.head\n        val l6 = l.tail.tail.tail.tail.tail.tail.head\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.head\n        val l8 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l10 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l11 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l12 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l13 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l14 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l15 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l16 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l17 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l18 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3u0f2r27.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp3u0f2r27.scala:33:5 ---------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val minValue = l.min\n        val maxValue = l.max\n\
    \        val minIndex = 0\n        val maxIndex = 0\n        var isIncreasing\
    \ = true\n        var isDecreasing = true\n        for(i <- 0 until l.length)\
    \ {\n            val currentValue = l(i)\n            if(currentValue < minValue)\
    \ {\n                minIndex = i\n                minValue = currentValue\n \
    \           }\n            if(currentValue > maxValue) {\n                maxIndex\
    \ = i\n                maxValue = currentValue\n            }\n            if(currentValue\
    \ < minValue && currentValue > maxValue) {\n                isDecreasing = false\n\
    \            }\n            if(currentValue > minValue && currentValue < maxValue)\
    \ {\n                isIncreasing = false\n            }\n        }\n        if(isIncreasing\
    \ && isDecreasing) {\n            true\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpxolbcq_o.scala:21:25 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                minIndex = i\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val minIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpxolbcq_o.scala:22:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                minValue\
    \ = currentValue\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val minValue\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpxolbcq_o.scala:25:25 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                maxIndex = i\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpxolbcq_o.scala:26:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                maxValue\
    \ = currentValue\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val maxValue\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val l = l.tail.tail\n        val l2 = l.tail.tail.tail\n        val l3 = l.tail.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l10 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjzdjo3pt.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.tail.tail\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjzdjo3pt.scala:24:5 ---------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val minValue = l.min\n        val maxValue = l.max\n\
    \        val minIndex = 0\n        val maxIndex = 0\n        val minIndexValue\
    \ = l(minIndex)\n        val maxIndexValue = l(maxIndex)\n        if (minIndexValue\
    \ < minValue && maxIndexValue > maxValue) {\n            return true\n       \
    \ }\n        if (minIndexValue > minValue && maxIndexValue < maxValue) {\n   \
    \         return true\n        }\n        if (minIndexValue < minValue && maxIndexValue\
    \ > maxValue) {\n            return true\n        }\n        if (minIndexValue\
    \ > minValue && maxIndexValue < maxValue) {\n            return true\n       \
    \ }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgpmumes5.scala:33)\n\tat Problem.main(tmpgpmumes5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val m\
    \ = m.toLong\n        val n = n.toLong\n        if (m > n) true\n        else\
    \ if (m < n) false\n        else monotonic(n.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8h2aplqj.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8h2aplqj.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmp8h2aplqj.scala:16:14 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (m > n) \e[31mtrue\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m>\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Boolean\n\e[31m   |\e[0m (x: Float): Boolean\n\e\
    [31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\e[31m  \
    \ |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x: Short): Boolean\n\e[31m   |\e\
    [0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments ((n : List[Long]))\n\e\
    [31m\e[31m-- [E134] Type Error: /tmp/tmp8h2aplqj.scala:17:19 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (m < n) \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m<\e[0m in \e[33mclass\e[0m\
    \ \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\e[31m   |\e\
    [0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e[0m (x:\
    \ Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x: Short):\
    \ Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments\
    \ ((n : List[Long]))\n4 errors found\n"
  stdout: ''
  timestamp: 1659799747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l1\
    \ = l.tail.drop(1)\n        val l2 = l.tail.dropRight(1)\n        val l3 = l.tail.dropRight(2)\n\
    \        val l4 = l.tail.dropRight(3)\n        val l5 = l.tail.dropRight(4)\n\
    \        val l6 = l.tail.dropRight(5)\n        val l7 = l.tail.dropRight(6)\n\
    \        val l8 = l.tail.dropRight(7)\n        val l9 = l.tail.dropRight(8)\n\
    \        val l10 = l.tail.dropRight(9)\n        val l11 = l.tail.dropRight(10)\n\
    \        val l12 = l.tail.dropRight(11)\n        val l13 = l.tail.dropRight(12)\n\
    \        val l14 = l.tail.dropRight(13)\n        val l15 = l.tail.dropRight(14)\n\
    \        val l16 = l.tail.dropRight(15)\n        val l17 = l.tail.dropRight(16)\n\
    \        val l18 = l.tail.dropRight(17)\n        val l19 = l.tail.dropRight(18)\n\
    \        val l20 = l.tail.dropRight(19)\n        val l21 = l.tail.dropRight(20)\n\
    \        val l22 = l.tail.dropRight(21)\n        val l23 = l.tail.dropRight(22)\n\
    \        val l24 = l.tail.dropRight(23)\n        val l25 = l.tail.dropRight(24)\n\
    \        val l26 = l.tail.dropRight(25)\n        val l27 = l.tail.dropRight(26)\n\
    \        val l28 = l.tail.dropRight(27)\n        val l29 = l.tail.dropRight(28)\n\
    \        val l30 = l.tail.dropRight(29)\n        val l31 = l.tail.dropRight(30)\n\
    \        val l32 = l.tail.dropRight(31)\n        val l33 = l.tail.dropRight(32)\n\
    \        val l34 = l.tail.dropRight(33)\n        val l35 = l.tail.dropRight(34)\n\
    \        val l36 = l.tail.dropRight(35)\n        val l37 = l.tail.dropRight(36)\n\
    \        val l38 = l.tail.dropRight(37)\n        val l39 = l.tail.dropRight(38)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprd1mgitk.scala:54:5\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799750
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val m1 = l.tail.tail.head\n        val n1 = l.tail.tail.tail.head\n        val\
    \ m2 = l.tail.tail.tail.tail.head\n        val n2 = l.tail.tail.tail.tail.tail.head\n\
    \        val m3 = l.tail.tail.tail.tail.tail.tail.head\n        val n3 = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m4 = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ n4 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val m5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m9 = l.tail.tail.tail.tail.tail.tail.tail.tail\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppm3j5i4z.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799750
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l1\
    \ = l.tail.head\n        val l2 = l.tail.tail.head\n        val l3 = l.tail.tail.tail.head\n\
    \        val l4 = l.tail.tail.tail.tail.head\n        val l5 = l.tail.tail.tail.tail.tail.head\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.head\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l10 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l11 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n       \
    \ val l12 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l13 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l14 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l15 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l16 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l17 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l18 = l.tail.tail.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu458lw5h.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpu458lw5h.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799750
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l1 = l.head\n        val\
    \ l2 = l.tail.head\n        val l3 = l.tail.tail.head\n        val l4 = l.tail.tail.tail.head\n\
    \        val l5 = l.tail.tail.tail.tail.head\n        val l6 = l.tail.tail.tail.tail.tail.head\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.head\n        val l8 = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ l10 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l11 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l12 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n       \
    \ val l13 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l14 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l15 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l16 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l17 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l18 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l19 = l.tail\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfiu5f824.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpfiu5f824.scala:32:5 ---------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799750
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val m = m.toLong\n        val n = n.toLong\n        if (m > n) true\n      \
    \  else if (m < n) false\n        else monotonic(l.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp18e9gkhk.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp18e9gkhk.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val m = m.toLong\n        val n = n.toLong\n        if (m > n) true\n      \
    \  else if (m == n) false\n        else monotonic(l.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi6npvhdw.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi6npvhdw.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val m = m.toLong\n        val n = n.toLong\n        if (m > n) true\n      \
    \  else if (m < n) false\n        else monotonic(l.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp18e9gkhk.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp18e9gkhk.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799707
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        l4.forall(x\
    \ => x == l1.last)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0fehjdf7.scala:19)\n\tat Problem.main(tmp0fehjdf7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.reverse\n \
    \       val l22 = l21.toList\n        val l23 = l22.reverse\n        val l24 =\
    \ l23.toList\n        val l25 = l24.reverse\n        val l26 = l25.toList\n  \
    \      val l27 = l26.reverse\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val l\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5e_uj5n1.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5e_uj5n1.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5e_uj5n1.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799735
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        if (m.toLong\
    \ < n.head.toLong)\n            monotonic(l)\n        else if (m.toLong > n.head.toLong)\n\
    \            monotonic(l)\n        else if (m.toLong == n.head.toLong)\n     \
    \       monotonic(l)\n        else\n            monotonic(l)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659799757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l1\
    \ = l.tail.tail\n        val l2 = l.tail.tail.tail\n        val l3 = l.tail.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfphcm9uw.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        l4.forall(l1.last.lt(l2.last))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplm7woqzh.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        l4.forall(l1.last.lt(l2.last))\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \ value lt is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659799754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        if (m.toLong\
    \ < n.head.asInstanceOf[Long]) {\n            monotonic(m)\n        } else if\
    \ (m.toLong > n.last.asInstanceOf[Long]) {\n            monotonic(n)\n       \
    \ } else {\n            monotonic(l, m, n)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4g1j5osa.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            monotonic(m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (m : Long)\n\e[31m   |\e[0m                      Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4g1j5osa.scala:19:22\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            monotonic(l, m, n)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Found:    (List[Long], Long, List[Long])\n\e[31m   |\e[0m  \
    \                    Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val m = l.head\n        val\
    \ n = l.tail\n        val m = m.toLong\n        val n = n.toLong\n        val\
    \ m = m.toInt\n        val n = n.toInt\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val m = m.toInt\n        val n = n.toInt\n        val\
    \ m = m.toLong\n        val n = n.toLong\n        val m = m.toInt\n        val\
    \ n = n.toInt\n        val m = m.toLong\n        val n = n.toLong\n        val\
    \ m = m.toInt\n        val n = n.toInt\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val m = m.toInt\n        val n = n.toInt\n        val\
    \ m = m.toLong\n        val n = n.toLong\n        val m = m.toInt\n        val\
    \ n = n.toInt\n        val m = m.toLong\n        val n = n.toLong\n        val\
    \ m = m.toInt\n        val n = n.toInt\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val m = m.toInt\n        val n = n.toInt\n        val\
    \ m = m.toLong\n        val n = n.toLong\n        val m = m.toInt\n        val\
    \ n = n.toInt\n        val m = m.toLong\n        val n = n.toLong\n        val\
    \ m = m.toInt\n        val n = n.toInt\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val m = m.toInt\n        val n = n.toInt\n        val\
    \ m = m.toLong\n        val n = n.toLong\n        val m = m.toInt\n        val\
    \ n = n.toInt\n        val m = m.toLong\n        val n = n.toLong\n        val\
    \ m = m.toInt\n        val n = n.toInt\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val m = m.toInt\n        val n = n.toInt\n        val\
    \ m = m.toLong\n        val n = n.toLong\n        val m = m.toInt\n        val\
    \ n = n.toInt\n        val m = m.toLong\n        val n = n.toLong\n        val\
    \ m = m.toInt\n        val n = n.toInt\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val m = m.toInt\n        val n = n.toInt\n        val\
    \ m = m.toLong\n        val n = n.toLong\n        val m = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxv3w7v47.scala:85:15 ---------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = \n\e[31m\e[31m\
    \   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxv3w7v47.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e\
    [0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpxv3w7v47.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxv3w7v47.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxv3w7v47.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxv3w7v47.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m  "
  stdout: ''
  timestamp: 1659799755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.last\n        val m\
    \ = m.toLong\n        val n = n.toLong\n        if (m > n) true\n        else\
    \ if (m == n) false\n        else monotonic(l.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplzecq_7g.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplzecq_7g.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799752
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val m = m.toLong\n        val n = n.toLong\n        if (m > n) true\n      \
    \  else if (m == n) monotonic(l.tail)\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8_ii8wbc.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8_ii8wbc.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799752
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.reverse\n \
    \       val l22 = l21.toList\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.toList\n        val l34 =\
    \ l33.reverse\n        val l35 = l34.toList\n        val l36 = l35.reverse\n \
    \       val l37 = l36.toList\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.toList\n        val l44 =\
    \ l43.reverse\n        val l45 = l44.toList\n        val l46 = l45.reverse\n \
    \       val l47 = l46.toList\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.toList\n        val l54 =\
    \ l53.reverse\n\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjc0nhvab.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe5w5plo1.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5w5plo1.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        l4.forall(l3.last)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpme7vo9rb.scala:16:21\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        l4.forall(l3.last)\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    Long\n\e[31m   |\e[0m                  Required: Long => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val m1 = l.tail.tail.head\n        val n1 = l.tail.tail.tail.head\n        val\
    \ m2 = l.tail.tail.tail.tail.head\n        val n2 = l.tail.tail.tail.tail.tail.head\n\
    \        val m3 = l.tail.tail.tail.tail.tail.tail.head\n        val n3 = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m4 = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ n4 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val m5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m9 = l.tail.tail.tail.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi_3m76mc.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        if (m.toLong\
    \ > n.toLong)\n            monotonic(l)\n        else if (m.toLong < n.toLong)\n\
    \            monotonic(l)\n        else\n            monotonic(l.tail)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5kp0g0nw.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (m.toLong > n.toLong)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp5kp0g0nw.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (m.toLong < n.toLong)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toLong is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659799756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val min = l.head\n        val max = l.last\n        val\
    \ mid = l.size / 2\n        val isIncreasing = true\n        val isDecreasing\
    \ = true\n        val isMonotonic = true\n        val isIncreasing2 = true\n \
    \       val isDecreasing2 = true\n        val isMonotonic2 = true\n        val\
    \ isIncreasing3 = true\n        val isDecreasing3 = true\n        val isMonotonic3\
    \ = true\n        val isIncreasing4 = true\n        val isDecreasing4 = true\n\
    \        val isMonotonic4 = true\n        val isIncreasing5 = true\n        val\
    \ isDecreasing5 = true\n        val isMonotonic5 = true\n        val isIncreasing6\
    \ = true\n        val isDecreasing6 = true\n        val isMonotonic6 = true\n\
    \        val isIncreasing7 = true\n        val isDecreasing7 = true\n        val\
    \ isMonotonic7 = true\n        val isIncreasing8 = true\n        val isDecreasing8\
    \ = true\n        val isMonotonic8 = true\n        val isIncreasing9 = true\n\
    \        val isDecreasing9 = true\n        val isMonotonic9 = true\n        val\
    \ isIncreasing10 = true\n        val isDecreasing10 = true\n        val isMonotonic10\
    \ = true\n        val isIncreasing11 = true\n        val isDecreasing11 = true\n\
    \        val isMonotonic11 = true\n        val isIncreasing12 = true\n       \
    \ val isDecreasing12 = true\n        val isMonotonic12 = true\n        val isIncreasing13\
    \ = true\n        val isDecreasing13 = true\n        val isMonotonic13 = true\n\
    \        val isIncreasing14 = true\n        val isDecreasing14 = true\n      \
    \  val isMonotonic14 = true\n        val isIncreasing15 = true\n        val isDecreasing15\
    \ = true\n        val isMonotonic15 = true\n        val isIncreasing16 = true\n\
    \        val isDecreasing16 = true\n        val isMonotonic16 = true\n       \
    \ val isIncreasing17 = true\n        val isDecreasing17 = true\n        val isMonotonic17\
    \ = true\n        val isIncreasing18 = true\n        val isDecreasing18 = true\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi30dzf5x.scala:69:5\
    \ ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799755
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        l4.head\
    \ == l1.head && l4.tail == l1.tail\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmj691dhr.scala:22)\n\tat Problem.main(tmpmj691dhr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val n = l.length\n        val\
    \ m = l.head\n        val r = l.tail\n        val l1 = l.tail\n        val l2\
    \ = l.tail\n        val l3 = l.tail\n        val l4 = l.tail\n        val l5 =\
    \ l.tail\n        val l6 = l.tail\n        val l7 = l.tail\n        val l8 = l.tail\n\
    \        val l9 = l.tail\n        val l10 = l.tail\n        val l11 = l.tail\n\
    \        val l12 = l.tail\n        val l13 = l.tail\n        val l14 = l.tail\n\
    \        val l15 = l.tail\n        val l16 = l.tail\n        val l17 = l.tail\n\
    \        val l18 = l.tail\n        val l19 = l.tail\n        val l20 = l.tail\n\
    \        val l21 = l.tail\n        val l22 = l.tail\n        val l23 = l.tail\n\
    \        val l24 = l.tail\n        val l25 = l.tail\n        val l26 = l.tail\n\
    \        val l27 = l.tail\n        val l28 = l.tail\n        val l29 = l.tail\n\
    \        val l30 = l.tail\n        val l31 = l.tail\n        val l32 = l.tail\n\
    \        val l33 = l.tail\n        val l34 = l.tail\n        val l35 = l.tail\n\
    \        val l36 = l.tail\n        val l37 = l.tail\n        val l38 = l.tail\n\
    \        val l39 = l.tail\n        val l40 = l.tail\n        val l41 = l.tail\n\
    \        val l42 = l.tail\n        val l43 = l.tail\n        val l44 = l.tail\n\
    \        val l45 = l.tail\n        val l46 = l.tail\n        val l47 = l.tail\n\
    \        val l48 = l.tail\n        val l49 = l.tail\n        val l50 = l.tail\n\
    \        val l51 = l.tail\n        val l52 = l.tail\n        val l53 = l.tail\n\
    \        val l54 = l.tail\n        val l55 = l.tail\n        val l56 = l.tail\n\
    \        val l57 = l.tail\n        val l58 = l.tail\n        val l59 = l.tail\n\
    \        val l60 = l.tail\n        val l61 = l.tail\n        val l62 = l.tail\n\
    \        val l\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpntgczx_0.scala:79:4 ----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpntgczx_0.scala:12:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpntgczx_0.scala:79:5\
    \ ---------------------\e[0m\e[0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l2\
    \ = l.toList\n        val l3 = l2.toList\n        val l4 = l3.toList\n       \
    \ val l5 = l4.toList\n        val l6 = l5.toList\n        val l7 = l6.toList\n\
    \        val l8 = l7.toList\n        val l9 = l8.toList\n        val l10 = l9.toList\n\
    \        val l11 = l10.toList\n        val l12 = l11.toList\n        val l13 =\
    \ l12.toList\n        val l14 = l13.toList\n        val l15 = l14.toList\n   \
    \     val l16 = l15.toList\n        val l17 = l16.toList\n        val l18 = l17.toList\n\
    \        val l19 = l18.toList\n        val l20 = l19.toList\n        val l21 =\
    \ l20.toList\n        val l22 = l21.toList\n        val l23 = l22.toList\n   \
    \     val l24 = l23.toList\n        val l25 = l24.toList\n        val l26 = l25.toList\n\
    \        val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.toList\n        val l30 = l29.toList\n        val l31 = l30.toList\n   \
    \     val l32 = l31.toList\n        val l33 = l32.toList\n        val l34 = l33.toList\n\
    \        val l35 = l34.toList\n        val l36 = l35.toList\n        val l37 =\
    \ l36.toList\n        val l38 = l37.toList\n        val l39 = l38.toList\n   \
    \     val l40 = l39.toList\n        val l41 = l40.toList\n        val l42 = l41.toList\n\
    \        val l43 = l42.toList\n        val l44 = l43.toList\n        val l45 =\
    \ l44.toList\n        val l46 = l45.toList\n        val l47 = l46.toList\n   \
    \     val l48 = l47.toList\n        val l49 = l48.toList\n        val l50 = l49.toList\n\
    \        val l51 = l50.toList\n        val l52 = l51.to\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi7cj9uui.scala:65:5\
    \ ---------------------\e[0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val l1 = l.tail\n        val l2 = l.tail.tail\n        val l3 = l.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val l10\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcgxu5y56.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcgxu5y56.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val d = l.tail.tail.head\n        val r = l.tail.tail.tail.head\n        val\
    \ s = l.tail.tail.tail.tail.head\n        val t = l.tail.tail.tail.tail.tail.head\n\
    \        val u = l.tail.tail.tail.tail.tail.tail.head\n        val v = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val w = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val y =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n       \
    \ val z = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfyrttqdj.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfyrttqdj.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        l4.forall(l3.last.lt(l3.head))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplzjuliy2.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        l4.forall(l3.last.lt(l3.head))\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \ value lt is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659799756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val n = l.size\n        val\
    \ m = l.head\n        val r = l.tail\n        val m = m.toLong\n        val r\
    \ = r.toLong\n        val r = r.drop(1).dropRight(1)\n        val m = m - m\n\
    \        val r = r - r\n        val r = r.drop(1).dropRight(1)\n        val m\
    \ = m - m\n        val r = r - r\n        val r = r.drop(1).dropRight(1)\n   \
    \     val m = m - m\n        val r = r - r\n        val r = r.drop(1).dropRight(1)\n\
    \        val m = m - m\n        val r = r - r\n        val r = r.drop(1).dropRight(1)\n\
    \        val m = m - m\n        val r = r - r\n        val r = r.drop(1).dropRight(1)\n\
    \        val m = m - m\n        val r = r - r\n        val r = r.drop(1).dropRight(1)\n\
    \        val m = m - m\n        val r = r - r\n        val r = r.drop(1).dropRight(1)\n\
    \        val m = m - m\n        val r = r - r\n        val r = r.drop(1).dropRight(1)\n\
    \        val m = m - m\n        val r = r - r\n        val r = r.drop(1).dropRight(1)\n\
    \        val m = m - m\n        val r = r - r\n        val r = r.drop(1).dropRight(1)\n\
    \        val m = m - m\n        val r = r - r\n        val r = r.drop(1).dropRight(1)\n\
    \        val m = m - m\n        val r = r - r\n        val r = r.drop(1).dropRight(1)\n\
    \        val m = m - m\n        val r = r - r\n        val r = r.drop(1).dropRight(1)\n\
    \        val m = m - m\n        val r = r - r\n        val r = r.drop(1).dropRight(1)\n\
    \        val m = m - m\n        val r = r - r\n        val r = r.drop(1).dropRight(1)\n\
    \        val m = m - m\n        val r = r - r\n        val r = r.drop(1).dropRight(1)\n\
    \        val m = m - m\n        val r = r - r\n        val r = r.drop(1).dropRight(1)\n\
    \        val m = m - m\n        val r = r - r\n        val r = r.drop(1).dropRight(1)\n\
    \        val m = m - m\n        val r = r - r\n        val r = r.drop(1).dropRight(1)\n\
    \        val m = m - m\n\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc7d33snz.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc7d33snz.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc7d33snz.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.drop(\e[31m1\e\
    [0m).dropRight(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpc7d33snz.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e\
    [0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpc7d33snz.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r - r\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc7d33snz.scala:21:12 ---------------------------\e\
    [0m\e[0m\n"
  stdout: ''
  timestamp: 1659799757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        l4.head\
    \ == l1.head && l4.tail == l1.tail\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmj691dhr.scala:22)\n\tat Problem.main(tmpmj691dhr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val n = l.size\n        val\
    \ m = l.head\n        val r = l.tail\n        val l1 = l.tail\n        val l2\
    \ = l.tail\n        val l3 = l.tail\n        val l4 = l.tail\n        val l5 =\
    \ l.tail\n        val l6 = l.tail\n        val l7 = l.tail\n        val l8 = l.tail\n\
    \        val l9 = l.tail\n        val l10 = l.tail\n        val l11 = l.tail\n\
    \        val l12 = l.tail\n        val l13 = l.tail\n        val l14 = l.tail\n\
    \        val l15 = l.tail\n        val l16 = l.tail\n        val l17 = l.tail\n\
    \        val l18 = l.tail\n        val l19 = l.tail\n        val l20 = l.tail\n\
    \        val l21 = l.tail\n        val l22 = l.tail\n        val l23 = l.tail\n\
    \        val l24 = l.tail\n        val l25 = l.tail\n        val l26 = l.tail\n\
    \        val l27 = l.tail\n        val l28 = l.tail\n        val l29 = l.tail\n\
    \        val l30 = l.tail\n        val l31 = l.tail\n        val l32 = l.tail\n\
    \        val l33 = l.tail\n        val l34 = l.tail\n        val l35 = l.tail\n\
    \        val l36 = l.tail\n        val l37 = l.tail\n        val l38 = l.tail\n\
    \        val l39 = l.tail\n        val l40 = l.tail\n        val l41 = l.tail\n\
    \        val l42 = l.tail\n        val l43 = l.tail\n        val l44 = l.tail\n\
    \        val l45 = l.tail\n        val l46 = l.tail\n        val l47 = l.tail\n\
    \        val l48 = l.tail\n        val l49 = l.tail\n        val l50 = l.tail\n\
    \        val l51 = l.tail\n        val l52 = l.tail\n        val l53 = l.tail\n\
    \        val l54 = l.tail\n        val l55 = l.tail\n        val l56 = l.tail\n\
    \        val l57 = l.tail\n        val l58 = l.tail\n        val l59 = l.tail\n\
    \        val l60 = l.tail\n        val l61 = l.tail\n        val l62 = l.tail\n\
    \        val l\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp4lf04ci.scala:79:4 ----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpp4lf04ci.scala:12:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp4lf04ci.scala:79:5\
    \ ---------------------\e[0m\e[0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps8vipoes.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps8vipoes.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l1 = l.tail\n        val\
    \ l2 = l.head\n        val l3 = l.tail.tail\n        val l4 = l.tail.head\n  \
    \      val l5 = l.tail.tail.tail\n        val l6 = l.tail.tail.head\n        val\
    \ l7 = l.tail.tail.tail.tail\n        val l8 = l.tail.tail.tail.head\n       \
    \ val l9 = l.tail.tail.tail.tail.tail\n        val l10 = l.tail.tail.tail.tail.head\n\
    \        val l11 = l.tail.tail.tail.tail.tail.tail\n        val l12 = l.tail.tail.tail.tail.tail.head\n\
    \        val l13 = l.tail.tail.tail.tail.tail.tail.tail\n        val l14 = l.tail.tail.tail.tail.tail.tail.head\n\
    \        val l15 = l.tail.tail.tail.tail.tail.tail.tail.tail\n        val l16\
    \ = l.tail.tail.tail.tail.tail.tail.tail.head\n        val l17 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l18 = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ l19 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val l20 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l21 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l22 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l23 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l24 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l25 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l26 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp_phwxcu.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpp_phwxcu.scala:12:16 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpp_phwxcu.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799757
