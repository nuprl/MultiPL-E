language: scala
name: HumanEval_47_median
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.toArray\n        val sorted = m.sortWith(_ < _)\n        val mid\
    \ = sorted.length / 2\n        val median = if (n % 2 == 0) sorted((mid + mid)\
    \ / 2) else sorted((mid - mid) / 2)\n        median.toFloat\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplx3tf4fq.scala:18)\n\tat Problem.main(tmplx3tf4fq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = (sorted take mid) match\
    \ {\n            case Nil => 0.0f\n            case x :: xs => xs.sum / xs.length\n\
    \        }\n        median\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpadnylkbg.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        median\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (median : AnyVal)\n\
    \e[31m   |\e[0m        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.last\n\
    \        else sorted.last.toFloat + sorted.last.toFloat / 2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpedejsxo4.scala:16)\n\tat Problem.main(tmpedejsxo4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqx87r4q_.scala:16)\n\tat Problem.main(tmpqx87r4q_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n == 0) 0f\n        else {\n            val half = n / 2\n            val\
    \ left = l.take(half)\n            val right = l.drop(half)\n            val median\
    \ = left.median + right.median\n            if (median == 0) 0f\n            else\
    \ median.toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoc1kw9r3.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = left.median\
    \ + right.median\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value median is not a member of List[Long]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = median(left) + median(right)\n            val diff = (median * 2.0f) - (median\
    \ * 1.0f)\n            if (diff > 0.0f) median else 0.0f\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7rrsj0qb.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792513
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val left = sorted.drop(mid)\n        val right = sorted.takeRight(mid)\n\
    \        val medianLeft = median(left)\n        val medianRight = median(right)\n\
    \        val medianMedian = median(List(medianLeft, medianRight))\n        val\
    \ medianMedianFloat = medianMedian.toFloat\n        val medianMedianInt = medianMedianFloat.toInt\n\
    \        val medianMedianLong = medianMedianInt.toLong\n        val medianMedianDouble\
    \ = medianMedianLong.toDouble\n        val medianMedianFloatInt = medianMedianDouble.toInt\n\
    \        val medianMedianFloatLong = medianMedianFloatInt.toLong\n        val\
    \ medianMedianFloatDouble = medianMedianFloatLong.toDouble\n        val medianMedianFloatFloat\
    \ = medianMedianFloatDouble.toFloat\n        val medianMedianFloatFloatInt = medianMedianFloatFloat.toInt\n\
    \        val medianMedianFloatFloatLong = medianMedianFloatFloatInt.toLong\n \
    \       val medianMedianFloatFloatDouble = medianMedianFloatFloatLong.toDouble\n\
    \        val medianMedianFloatFloatFloat = medianMedianFloatFloatDouble.toFloat\n\
    \        val medianMedianFloatFloatFloatInt = medianMedianFloatFloatFloat.toInt\n\
    \        val medianMedianFloatFloatFloatLong = medianMedianFloatFloatFloatInt.toLong\n\
    \        val medianMedianFloatFloatFloatDouble = medianMedianFloatFloatFloatLong.toDouble\n\
    \        val medianMedianFloatFloatFloatFloat = medianMedianFloatFloatFloatDouble.toFloat\n\
    \        val medianMedianFloatFloatFloatFloatInt = medianMedianFloatFloatFloatFloat.toInt\n\
    \        val medianMedianFloatFloatFloatFloatLong = medianMedianFloatFloatFloatFloatInt.toLong\n\
    \        val medianMedianFloatFloatFloatFloatDouble = medianMedianFloatFloatFloatFloatLong.toDouble\n\
    \        val medianMedianFloatFloatFloatFloatFloat = medianMedianFloatFloatFloatFloatDouble.toFloat\n\
    \        val medianMedianFloatFloatFloatFloatFloatInt = medianMedianFloatFloatFloatFloatFloat.toInt\n\
    \        val medianMedianFloatFloatFloatFloatFloatLong = medianMedianFloatFloatFloatFloatFloatFloatInt.toLong\n\
    \        val medianMedianFloatFloatFloatFloatFloatDouble = medianMedianFloatFloatFloatFloatFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpnrgb7qdz.scala:15:25 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedianLeft\e[0m = median(left)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                      \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpnrgb7qdz.scala:16:26 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmedianRight\e[0m = median(right)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpnrgb7qdz.scala:17:27 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmedianMedian\e[0m = median(List(medianLeft,\
    \ medianRight))\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           \e[33mvalue\e[0m \e[35mmedian\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnrgb7qdz.scala:39:56\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mmedianMedianFloatFloatFloatFloatFloatLong\e[0m = medianMedianFloatFloatFloatFloatFloatFloatInt.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: medianMedianFloatFloatFloatFloatFloatFloatInt\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnrgb7qdz.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation ava"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = (sorted take mid) match\
    \ {\n            case Nil => 0.0f\n            case x :: xs => xs.sum / xs.length\n\
    \        }\n        median\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpadnylkbg.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        median\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (median : AnyVal)\n\
    \e[31m   |\e[0m        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = median(left)\n            val median2 = median(right)\n           \
    \ val median3 = median(left.zip(right))\n            val median4 = median(left.zip(right.zip(left)))\n\
    \            val median5 = median(left.zip(right.zip(left.zip(right))))\n    \
    \        val median6 = median(left.zip(right.zip(left.zip(right.zip(left)))))\n\
    \            val median7 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right)))))\n\
    \            val median8 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left)))))\n\
    \            val median9 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right)))))\n\
    \            val median10 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left)))))\n\
    \            val median11 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left)))))\n\
    \            val median12 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left))))))))\n\
    \            val median13 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left)))))))))))\n\
    \            val median14 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left)))))))))))\n\
    \            val median15 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left)))))))))))\n\
    \            val median16 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left)))))))))))\n\
    \            val median17 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left)))))))))))\n\
    \            val median18 = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left)))))))))))\n\
    \            val median19 = median(left.zip(right.zip(left.zip(right.zip(left.zip(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpog7inh0v.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mmedian8\e[0m = median(left.zip(right.zip(left.zip(right.zip(left.zip(right.zip(left)))))\n\
    \e[31m\e[31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            ')' expected,\
    \ but 'val' found\n\e[31m\e[31m-- Error: /tmp/tmpog7inh0v.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpog7inh0v.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpog7inh0v.scala:44:1\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Float\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n <= 1) 0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val leftMedian\
    \ = median(left)\n            val rightMedian = median(right)\n            val\
    \ median = (leftMedian + rightMedian) / 2\n            if (leftMedian < rightMedian)\
    \ median\n            else rightMedian\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpr4sx1ful.scala:18:26 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (leftMedian\
    \ + rightMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \   ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m\
    \ \e[35mleftMedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792513
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9ow_p8_1.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        median\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (median : AnyVal)\n\
    \e[31m   |\e[0m        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = l.length / 2\n     \
    \       val m1 = l.slice(0, mid)\n            val m2 = l.slice(mid)\n        \
    \    val m = (m1 + m2).sortWith(_ < _)\n            val midVal = m.last\n    \
    \        val m1 = m.drop(mid)\n            val m2 = m.take(mid)\n            val\
    \ m = (m1 + m2).sortWith(_ < _)\n            val midVal2 = m.last\n          \
    \  val m1 = m.drop(mid)\n            val m2 = m.take(mid)\n            val m =\
    \ (m1 + m2).sortWith(_ < _)\n            val midVal3 = m.last\n            val\
    \ m1 = m.drop(mid)\n            val m2 = m.take(mid)\n            val m = (m1\
    \ + m2).sortWith(_ < _)\n            val midVal4 = m.last\n            val m1\
    \ = m.drop(mid)\n            val m2 = m.take(mid)\n            val m = (m1 + m2).sortWith(_\
    \ < _)\n            val midVal5 = m.last\n            val m1 = m.drop(mid)\n \
    \           val m2 = m.take(mid)\n            val m = (m1 + m2).sortWith(_ < _)\n\
    \            val midVal6 = m.last\n            val m1 = m.drop(mid)\n        \
    \    val m2 = m.take(mid)\n            val m = (m1 + m2).sortWith(_ < _)\n   \
    \         val midVal7 = m.last\n            val m1 = m.drop(mid)\n           \
    \ val m2 = m.take(mid)\n            val m = (m1 + m2).sortWith(_ < _)\n      \
    \      val midVal8 = m.last\n            val m1 = m.drop(mid)\n            val\
    \ m2 = m.take(mid)\n            val m = (m1 + m2).sortWith(_ < _)\n          \
    \  val midVal9 = m.last\n            val m1 = m.drop(mid)\n            val m2\
    \ = m.take(mid)\n            val m = (m1 + m2).sortWith(_ < _)\n            val\
    \ midVal10 = m.last\n            val m1 = m.drop(mid)\n            val m2 = m.take(mid)\n\
    \            val m = (m1 + m2).sortWith(_ < _)\n            val midVal11 = m.last\n\
    \            val m1 = m.drop(mid)\n            val m2 = m.take(mid\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnodlc5tf.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnodlc5tf.scala:70:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnodlc5tf.scala:18:16 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m            \e[33mval\e[0m \e[36mm1\e[0m = m.drop(mid)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm1 is already\
    \ defined as \e[33mvalue\e[0m \e[35mm1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnodlc5tf.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mm2\e[0m = m.take(mid)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm2\
    \ is already defined as \e[33mvalue\e[0m \e[35mm2\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnodlc5tf.scala:20:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e\
    [0m \e[36mm\e[0m = (m1 + m2).sortWith(_ < _)\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnodlc5tf.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mm1\e[0m = m.drop(mid)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm1\
    \ is already defined as \e[33mvalue\e[0m \e[35mm1\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnodlc5tf."
  stdout: ''
  timestamp: 1659792514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.toArray\n        val sorted = m.sortWith(_ < _)\n        val half\
    \ = n / 2\n        if (n % 2 == 0) sorted.last else (sorted take half).last /\
    \ 2\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg1hkgqcn.scala:17)\n\tat Problem.main(tmpg1hkgqcn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = l.length / 2\n     \
    \       val left = l.slice(0, mid)\n            val right = l.slice(mid)\n   \
    \         val leftMedian = median(left)\n            val rightMedian = median(right)\n\
    \            val median = (leftMedian + rightMedian) / 2\n            if (n ==\
    \ 1) median\n            else median\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpc958kfrz.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpc958kfrz.scala:18:26 ---------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (leftMedian\
    \ + rightMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \   ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m\
    \ \e[35mleftMedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792513
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sortWith(_\
    \ < _)\n        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftMedian = sorted.take(mid)\n        val rightMedian = sorted.drop(mid)\n\
    \        val leftMedianMedian = leftMedian.last\n        val rightMedianMedian\
    \ = rightMedian.last\n        val leftMedianMedianMedian = leftMedianMedian.last\n\
    \        val rightMedianMedianMedian = rightMedianMedian.last\n        val leftMedianMedianMedianMedian\
    \ = leftMedianMedianMedian.last\n        val rightMedianMedianMedianMedian = rightMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedian = leftMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedian = rightMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedian = leftMedianMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedianMedian = rightMedianMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedianMedian = leftMedianMedianMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedianMedian = rightMedianMedianMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedianMedian = leftMedianMedianMedianMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedianMedianMedian = rightMedianMedianMedianMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedianMedian = leftMedianMedianMedianMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedianMedianMedian = rightMedianMedianMedianMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedianMedian = leftMedianMe\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvyjh9uce.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mrightMedianMedianMedianMedianMedianMedian\e\
    [0m = rightMedianMedianMedianMedianMedianMedian.last\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrightMedianMedianMedianMedianMedianMedian is already defined\
    \ as \e[33mvalue\e[0m \e[35mrightMedianMedianMedianMedianMedianMedian\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvyjh9uce.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mleftMedianMedianMedianMedianMedianMedianMedian\e\
    [0m = leftMedianMedianMedianMedianMedianMedianMedian.last\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mleftMedianMedianMedianMedianMedianMedianMedian is already\
    \ defined as \e[33mvalue\e[0m \e[35mleftMedianMedianMedianMedianMedianMedianMedian\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvyjh9uce.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mleftMedianMedianMedianMedianMedianMedianMedian\e\
    [0m = leftMedianMedianMedianMedianMedianMedianMedian.last\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mleftMedianMedianMedianMedianMedianMedianMedian is already\
    \ defined as \e[33mvalue\e[0m \e[35mleftMedianMedianMedianMedianMedianMedianMedian\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvyjh9uce.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9ow_p8_1.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        median\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (median : AnyVal)\n\
    \e[31m   |\e[0m        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqx87r4q_.scala:16)\n\tat Problem.main(tmpqx87r4q_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val midVal = left.reduce((x, y) => x + y)\n        val leftMedian = midVal\
    \ / left.length\n        val rightMedian = midVal / right.length\n        math.max(leftMedian,\
    \ rightMedian)\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd3h0w4gm.scala:20)\n\tat Problem.main(tmpd3h0w4gm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sortWith(_\
    \ < _)\n        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuipq8amj.scala:16)\n\tat Problem.main(tmpuipq8amj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else sorted.apply(mid - 1)\n        val lower = sorted.take(mid)\n\
    \        val upper = sorted.drop(mid)\n        val medianOfLower = median(lower)\n\
    \        val medianOfUpper = median(upper)\n        val medianOfBoth = median(sorted\
    \ ++ List(medianOfLower, medianOfUpper))\n        medianOfBoth\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpeyyfwj04.scala:15:28 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedianOfLower\e[0m = median(lower)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            \e[33mvalue\e[0m \e[35mmedian\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpeyyfwj04.scala:16:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e\
    [0m \e[36mmedianOfUpper\e[0m = median(upper)\n\e[31m\e[31m   |\e[0m          \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0m                            \e\
    [33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpeyyfwj04.scala:17:27 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmedianOfBoth\e[0m = median(sorted\
    \ ++ List(medianOfLower, medianOfUpper))\n\e[31m\e[31m   |\e[0m              \
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m                           \e[33mvalue\e\
    [0m \e[35mmedian\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659792513
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftHalf = sorted.drop(mid)\n        val rightHalf = sorted.takeRight(mid)\n\
    \        val medianOfLeftHalf = median(leftHalf)\n        val medianOfRightHalf\
    \ = median(rightHalf)\n        val medianOfBothHalfs = median(leftHalf ++ rightHalf)\n\
    \        val medianOfBothHalfsIfBothHalfsAreEven = if (medianOfLeftHalf == medianOfRightHalf)\
    \ medianOfBothHalfs else medianOfBothHalfs\n        val medianOfBothHalfsIfLeftHalfIsEven\
    \ = if (medianOfLeftHalf == medianOfBothHalfs) medianOfLeftHalf else medianOfBothHalfs\n\
    \        val medianOfBothHalfsIfRightHalfIsEven = if (medianOfRightHalf == medianOfBothHalfs)\
    \ medianOfRightHalf else medianOfBothHalfs\n        val medianOfBothHalfsIfBothHalfsAreOdd\
    \ = if (medianOfLeftHalf == medianOfRightHalf) medianOfBothHalfsIfBothHalfsAreEven\
    \ else medianOfBothHalfsIfLeftHalfIsEven\n        val medianOfBothHalfsIfLeftHalfIsOdd\
    \ = if (medianOfLeftHalf == medianOfBothHalfsIfBothHalfsAreEven) medianOfLeftHalf\
    \ else medianOfBothHalfsIfRightHalfIsEven\n        val medianOfBothHalfsIfRightHalfIsOdd\
    \ = if (medianOfRightHalf == medianOfBothHalfsIfBothHalfsAreEven) medianOfRightHalf\
    \ else medianOfBothHalfsIfLeftHalfIsEven\n        val medianOfBothHalfsIfBothHalfsAreEven\
    \ = if (medianOfLeftHalf == medianOfRightHalf) medianOfBothHalfsIfBothHalfsAreOdd\
    \ else medianOfBothHalfsIfLeftHalfIsOdd\n        val medianOfBothHalfsIfLeftHalfIsEven\
    \ = if (medianOfLeftHalf == medianOfBothHalfsIfBothHalfsAreOdd) medianOfLeftHalf\
    \ else medianOfBothHalfsIfRightHalfIsOdd\n        val medianOfBothHalfsIfRightHalfIsEven\
    \ = if (medianOfRightHalf == medianOfBothHalfsIfBothHalfsAreOdd) medianOfRightHalf\
    \ else medianOfBothHalfsIfLeftHalfIsOdd\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt8mjind2.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmedianOfBothHalfsIfBothHalfsAreEven\e\
    [0m = \e[33mif\e[0m (medianOfLeftHalf == medianOfRightHalf) medianOfBothHalfsIfBothHalfsAreOdd\
    \ \e[33melse\e[0m medianOfBothHalfsIfLeftHalfIsOdd\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedianOfBothHalfsIfBothHalfsAreEven is already defined as\
    \ \e[33mvalue\e[0m \e[35mmedianOfBothHalfsIfBothHalfsAreEven\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt8mjind2.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmedianOfBothHalfsIfLeftHalfIsEven\e[0m = \e[33mif\e[0m (medianOfLeftHalf\
    \ == medianOfBothHalfsIfBothHalfsAreOdd) medianOfLeftHalf \e[33melse\e[0m medianOfBothHalfsIfRightHalfIsOdd\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedianOfBothHalfsIfLeftHalfIsEven is already defined as \e\
    [33mvalue\e[0m \e[35mmedianOfBothHalfsIfLeftHalfIsEven\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt8mjind2.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmedianOfBothHalfsIfRightHalfIsEven\e[0m = \e[33mif\e[0m (medianOfRightHalf\
    \ == medianOfBothHalfsIfBothHalfsAreOdd) medianOfRightHalf \e[33melse\e[0m medianOfBothHalfsIfLeftHalfIsOdd\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedianOfBothHalfsIfRightHalfIsEven is a"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n <= 1) 0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = median(left) + median(right)\n            median.toFloat\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmput__eewm.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792513
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ncxa0_8.scala:16)\n\tat Problem.main(tmp7ncxa0_8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left  = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = median(left) + median(right)\n            median\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9bmc4xwa.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792513
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0f\n        else l.sorted\n            .take((n+1)/2)\n        \
    \    .last\n            .init\n            .last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcpgmgskg.scala:15:13 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m l.sorted\n\e[31m13 |\e[0m   \
    \         .take((n+\e[31m1\e[0m)/\e[31m2\e[0m)\n\e[31m14 |\e[0m            .last\n\
    \e[31m15 |\e[0m            .init\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e\
    [31m   |\e[0m             value init is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left + right).sortWith(_ < _).last\n        median.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdy_brrji.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sortWith(_\
    \ < _).last\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue + is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.foldLeft(0f){\n            case (acc, x) => if (x < 0) acc + x else\
    \ acc + x\n        }\n        m / n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp26_emguj.scala:18)\n\tat Problem.main(tmp26_emguj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqx87r4q_.scala:16)\n\tat Problem.main(tmpqx87r4q_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = (left + right).sortWith(_ < _).last\n            median.toFloat\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptlerb1jh.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmptlerb1jh.scala:16:31 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sortWith(_\
    \ < _).last\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue + is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = l.length / 2\n     \
    \       val left = l.slice(0, mid)\n            val right = l.slice(mid)\n   \
    \         val median = median(left) + median(right)\n            val medianFloat\
    \ = median.toFloat\n            val medianInt = medianFloat.toInt\n          \
    \  if (medianInt == 0) 0.0f\n            else medianFloat\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxwm56g99.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpxwm56g99.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.toArray\n        val sorted = m.sortWith(_ < _)\n        val mid\
    \ = sorted.length / 2\n        val median = if (sorted.length % 2 == 0) sorted[mid]\
    \ else (sorted[mid-1] + sorted[mid]) / 2\n        median.toFloat\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpro90uxpy.scala:14:56 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (sorted.length % \e[31m2\e[0m == \e[31m0\e[0m) sorted[\e[35mmid\e[0m] \e[33melse\e\
    [0m (sorted[\e[35mmid-\e[31m1\e[0m] + sorted[\e[35mmid\e[0m]) / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^\e\
    [0m\n\e[31m   |\e[0m                                                     Not found:\
    \ type mid\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpro90uxpy.scala:14:77\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mmedian\e[0m = \e[33mif\e[0m (sorted.length % \e[31m2\e[0m == \e[31m0\e[0m)\
    \ sorted[\e[35mmid\e[0m] \e[33melse\e[0m (sorted[\e[35mmid-\e[31m1\e[0m] + sorted[\e\
    [35mmid\e[0m]) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \                                                    ^\e[0m\n\e[31m   |\e[0m \
    \                                                      Not found: type -\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659792515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftMedian = sorted.drop(mid).last\n        val rightMedian = sorted.take(mid).last\n\
    \        val leftMedianInt = leftMedian.toInt\n        val rightMedianInt = rightMedian.toInt\n\
    \        val medianInt = median.toInt\n        val leftMedianFloat = leftMedian.toFloat\n\
    \        val rightMedianFloat = rightMedian.toFloat\n        val medianFloat =\
    \ median.toFloat\n        val leftMedianDouble = leftMedian.toDouble\n       \
    \ val rightMedianDouble = rightMedian.toDouble\n        val medianDouble = median.toDouble\n\
    \        val leftMedianLong = leftMedian.toLong\n        val rightMedianLong =\
    \ rightMedian.toLong\n        val medianLong = median.toLong\n        val leftMedianInt\
    \ = leftMedian.toInt\n        val rightMedianInt = rightMedian.toInt\n       \
    \ val medianInt = median.toInt\n        val leftMedianFloat = leftMedian.toFloat\n\
    \        val rightMedianFloat = rightMedian.toFloat\n        val medianFloat =\
    \ median.toFloat\n        val leftMedianDouble = leftMedian.toDouble\n       \
    \ val rightMedianDouble = rightMedian.toDouble\n        val medianDouble = median.toDouble\n\
    \        val leftMedianLong = leftMedian.toLong\n        val rightMedianLong =\
    \ rightMedian.toLong\n        val medianLong = median.toLong\n        val leftMedianInt\
    \ = leftMedian.toInt\n        val rightMedianInt = rightMedian.toInt\n       \
    \ val medianInt = median.toInt\n        val leftMedianFloat = leftMedian.toFloat\n\
    \        val rightMedianFloat = rightMedian.toFloat\n        val medianFloat =\
    \ median.toFloat\n        val leftMedianDouble = leftMedian.toDouble\n       \
    \ val rightMedianDouble = rightMedian.toDouble\n        val medianDouble = median.toDouble\n\
    \        val leftMedianLong = leftMedian.toLong\n        val rightMedianLong =\
    \ rightMedian.toLong\n        val medianLong = median.toLong\n        val leftMedianInt\
    \ = leftMedian.toInt\n        val rightMedianInt = rightMedian.toInt\n       \
    \ val medianInt = median.toInt\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf9aonuhj.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mleftMedianInt\e[0m = leftMedian.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mleftMedianInt is already defined as \e[33mvalue\e[0m \e[35mleftMedianInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf9aonuhj.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mrightMedianInt\e[0m = rightMedian.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mrightMedianInt is already defined as \e[33mvalue\e[0m \e[35mrightMedianInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf9aonuhj.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmedianInt\e[0m = median.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmedianInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mmedianInt\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf9aonuhj.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mleftMedianFloat\e[0m = leftMedian.toFloat\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mleftMedianFloat\
    \ is already defined as \e[33mvalue\e[0m \e[35mleftMedianFloat\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf9aonuhj.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mrightMedianFloat\e[0m = rightMedian.toFloat\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659792516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftMedian = sorted.drop(mid)\n        val rightMedian = sorted.takeRight(mid)\n\
    \        val leftMedianMedian = leftMedian.last\n        val rightMedianMedian\
    \ = rightMedian.last\n        val leftMedianLeftMedian = leftMedian.drop(mid)\n\
    \        val rightMedianRightMedian = rightMedian.takeRight(mid)\n        val\
    \ leftMedianLeftMedianMedian = leftMedianLeftMedian.last\n        val rightMedianRightMedianMedian\
    \ = rightMedianRightMedian.last\n        val leftMedianLeftMedianLeftMedian =\
    \ leftMedianLeftMedian.drop(mid)\n        val rightMedianRightMedianLeftMedian\
    \ = rightMedianRightMedian.takeRight(mid)\n        val leftMedianLeftMedianLeftMedianMedian\
    \ = leftMedianLeftMedianLeftMedian.last\n        val rightMedianRightMedianLeftMedianMedian\
    \ = rightMedianRightMedianLeftMedian.last\n        val leftMedianLeftMedianLeftMedianMedianMedian\
    \ = leftMedianLeftMedianLeftMedianMedian.drop(mid)\n        val rightMedianRightMedianLeftMedianMedianMedian\
    \ = rightMedianRightMedianLeftMedianMedian.takeRight(mid)\n        val leftMedianLeftMedianLeftMedianMedianMedianMedian\
    \ = leftMedianLeftMedianLeftMedianMedianMedian.last\n        val rightMedianRightMedianLeftMedianMedianMedianMedian\
    \ = rightMedianRightMedianLeftMedianMedianMedian.last\n        val leftMedianLeftMedianLeftMedianMedianMedianMedianMedian\
    \ = leftMedianLeftMedianLeftMedianMedianMedianMedian.drop(mid)\n        val rightMedianRightMedianLeftMedianMedianMedianMedianMedian\
    \ = rightMedianRightMedianLeftMedianMedianMedianMedian.takeRight(mid)\n      \
    \  val leftMedianLeftMedianLeftMedianMedianMedianMedianMedianMedian = leftMedianLeftMedianLeftMedianMe\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj2p2wmsp.scala:25:94 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mleftMedianLeftMedianLeftMedianMedianMedian\e\
    [0m = leftMedianLeftMedianLeftMedianMedian.drop(mid)\n\e[31m\e[31m   |\e[0m  \
    \                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value drop is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj2p2wmsp.scala:26:98\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mrightMedianRightMedianLeftMedianMedianMedian\e[0m = rightMedianRightMedianLeftMedianMedian.takeRight(mid)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                              value takeRight is not a member of Long\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpj2p2wmsp.scala:31:75 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mleftMedianLeftMedianLeftMedianMedianMedianMedianMedianMedian\e\
    [0m = leftMedianLeftMedianLeftMedianMe\n\e[31m\e[31m   |\e[0m                \
    \                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: leftMedianLeftMedianLeftMedianMe\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj2p2wmsp.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659792517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        System.arraycopy(l, 0, left, 0, mid)\n            System.arraycopy(l,\
    \ mid, right, 0, n - mid)\n            val leftMedian = median(left)\n       \
    \     val rightMedian = median(right)\n            val median = (leftMedian +\
    \ rightMedian) / 2\n            median\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1f19_px6.scala:20:26 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (leftMedian\
    \ + rightMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \   ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m\
    \ \e[35mleftMedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val left = sorted.drop(mid)\n        val right = sorted.takeRight(mid)\n\
    \        if (left.isEmpty) median\n        else if (right.isEmpty) median\n  \
    \      else median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphc5kwhse.scala:20)\n\tat Problem.main(tmphc5kwhse.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left + right).sortWith(_ < _).last\n        median.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdy_brrji.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sortWith(_\
    \ < _).last\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue + is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.apply(mid)\
    \ else (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnxmd5wh4.scala:15)\n\tat Problem.main(tmpnxmd5wh4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = (sorted take mid).sum\
    \ / mid\n        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyyhqi92c.scala:16)\n\tat Problem.main(tmpyyhqi92c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val m1 = sorted.take(mid)\n     \
    \   val m2 = sorted.drop(mid)\n        val median = (m1.sum + m2.sum) / 2\n  \
    \      median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp19sgx3jv.scala:18)\n\tat Problem.main(tmp19sgx3jv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftMedian = sorted.drop(mid).last\n        val rightMedian = sorted.take(mid).last\n\
    \        val medianOfLeftAndRight = leftMedian + rightMedian\n        val medianOfLeft\
    \ = leftMedian\n        val medianOfRight = rightMedian\n        val medianOfLeftAndRightAndMedian\
    \ = medianOfLeftAndRight + medianOfLeft + medianOfRight\n        medianOfLeftAndRightAndMedian\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvvvg23xk.scala:22)\n\tat Problem.main(tmpvvvg23xk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.max\n        val median = (m + (n - 1) / 2.0).toFloat\n        val\
    \ sum = 0.0\n        for (i <- 0 until n) {\n            sum += l(i)\n       \
    \ }\n        sum / n\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpet3wp3vr.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            sum += l(i)\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Double\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpet3wp3vr.scala:17:8\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m        sum / n\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Double\n\e[31m\
    \   |\e[0m        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.foldLeft(0l){\n            (sum, e) => if (sum < e) sum else e\n\
    \        }\n        val half = n / 2\n        val m1 = l.take(half)\n        val\
    \ m2 = l.drop(half)\n        val m = (m1 + m2).sortWith(_ < _)\n        val m1\
    \ = m.head\n        val m2 = m.last\n        val m = (m1 + m2).sortWith(_ < _)\n\
    \        val m1 = m.head\n        val m2 = m.last\n        val m = (m1 + m2).sortWith(_\
    \ < _)\n        val m1 = m.head\n        val m2 = m.last\n        val m = (m1\
    \ + m2).sortWith(_ < _)\n        val m1 = m.head\n        val m2 = m.last\n  \
    \      val m = (m1 + m2).sortWith(_ < _)\n        val m1 = m.head\n        val\
    \ m2 = m.last\n        val m = (m1 + m2).sortWith(_ < _)\n        val m1 = m.head\n\
    \        val m2 = m.last\n        val m = (m1 + m2).sortWith(_ < _)\n        val\
    \ m1 = m.head\n        val m2 = m.last\n        val m = (m1 + m2).sortWith(_ <\
    \ _)\n        val m1 = m.head\n        val m2 = m.last\n        val m = (m1 +\
    \ m2).sortWith(_ < _)\n        val m1 = m.head\n        val m2 = m.last\n    \
    \    val m = (m1 + m2).sortWith(_ < _)\n        val m1 = m.head\n        val m2\
    \ = m.last\n        val m = (m1 + m2).sortWith(_ < _)\n        val m1 = m.head\n\
    \        val m2 = m.last\n        val m = (m1 + m2).sortWith(_ < _)\n        val\
    \ m1 = m.head\n        val m2 = m.last\n        val m = (m1 + m2).sortWith(_ <\
    \ _)\n        val m1 = m.head\n        val m2 = m.last\n        val m = (m1 +\
    \ m2).sortWith(_ < _)\n        val m1 = m.head\n        val m2 = m.last\n    \
    \    val m = (m1 + m2).sortWith(_ < _)\n        val m1 = m.head\n        val m2\
    \ = m.last\n        val m = (m1 + m2).sortWith(_ < _)\n        val \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpiqhllpg7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpiqhllpg7.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = (m1 + m2).sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiqhllpg7.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm1\e[0m = m.head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mm1 is already defined as \e[33mvalue\e[0m \e[35mm1\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpiqhllpg7.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mm2\e[0m = m.last\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm2 is already defined as \e[33mvalue\e\
    [0m \e[35mm2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpiqhllpg7.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = (m1 + m2).sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiqhllpg7.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm1\e[0m = m.h"
  stdout: ''
  timestamp: 1659792517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = (left + right).sortWith(_ < _).last\n            median.toFloat\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptlerb1jh.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmptlerb1jh.scala:16:31 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sortWith(_\
    \ < _).last\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue + is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.max\n        val median = (m + n) / 2\n        l.filter(_ < median).sum\
    \ / n\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpklltxpn0.scala:16)\n\tat Problem.main(tmpklltxpn0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = median(left) + median(right)\n            median.toFloat\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplba9d52e.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n == 0) 0.0f\n        else {\n            val mid = n / 2\n           \
    \ val m1 = l.take(mid)\n            val m2 = l.drop(mid)\n            val m =\
    \ (m1 + m2).sort\n            val m3 = m.length / 2\n            val m4 = m.take(m3)\n\
    \            val m5 = m.drop(m3)\n            val m6 = (m4 + m5).sort\n      \
    \      val m7 = m6.length / 2\n            val m8 = m6.take(m7)\n            val\
    \ m9 = m6.drop(m7)\n            val m10 = (m8 + m9).sort\n            val m11\
    \ = m10.length / 2\n            val m12 = m10.take(m11)\n            val m13 =\
    \ m10.drop(m11)\n            val m14 = (m12 + m13).sort\n            val m15 =\
    \ m14.length / 2\n            val m16 = m14.take(m15)\n            val m17 = m14.drop(m15)\n\
    \            val m18 = (m16 + m17).sort\n            val m19 = m18.length / 2\n\
    \            val m20 = m18.take(m19)\n            val m21 = m18.drop(m19)\n  \
    \          val m22 = (m20 + m21).sort\n            val m23 = m22.length / 2\n\
    \            val m24 = m22.take(m23)\n            val m25 = m22.drop(m23)\n  \
    \          val m26 = (m24 + m25).sort\n            val m27 = m26.length / 2\n\
    \            val m28 = m26.take(m27)\n            val m29 = m26.drop(m27)\n  \
    \          val m30 = (m28 + m29).sort\n            val m31 = m30.length / 2\n\
    \            val m32 = m30.take(m31)\n            val m33 = m30.drop(m31)\n  \
    \          val m34 = (m32 + m33).sort\n            val m35 = m34.length / 2\n\
    \            val m36 = m34.take(m35)\n            val m37 = m34.drop(m35)\n  \
    \          val m38 = (m36 + m37).sort\n            val m39 = m38.length / 2\n\
    \            val m40 = m38.take(m39)\n            val m41 = m38.drop(m39)\n  \
    \          val m42 = (m40 + m41).sort\n            val m43 = m42.length / 2\n\
    \            val m44 = m42.take(m4\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7f56omcl.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7f56omcl.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp7f56omcl.scala:16:24 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            \e[33mval\e[0m \e[36mm\e[0m = (m1 + m2).sort\n\e[31m\e\
    [31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of List[Long], but could be made available as an extension method.\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp7f56omcl.scala:68:1 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmp7f56omcl.scala:60:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m60 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659792518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.last\n\
    \        else sorted.last.toFloat + sorted.last.toFloat / 2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpedejsxo4.scala:16)\n\tat Problem.main(tmpedejsxo4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n == 0) 0.0f\n        else {\n            val sorted = l.sortWith(_ < _)\n\
    \            val mid = n / 2\n            val median = if (n % 2 == 0) sorted.head\
    \ + sorted.last else sorted.last\n            val lower = sorted.take(mid)\n \
    \           val upper = sorted.drop(mid)\n            val medianOfLower = median(lower)\n\
    \            val medianOfUpper = median(upper)\n            val medianOfBoth =\
    \ median(lower ++ upper)\n            val medianOfBothInt = medianOfBoth.asInstanceOf[Int]\n\
    \            val medianOfBothFloat = medianOfBoth.asInstanceOf[Float]\n      \
    \      val medianOfBothLong = medianOfBoth.asInstanceOf[Long]\n            val\
    \ medianOfBothDouble = medianOfBoth.asInstanceOf[Double]\n            val medianOfBothString\
    \ = medianOfBoth.asInstanceOf[String]\n            val medianOfBothBoolean = medianOfBoth.asInstanceOf[Boolean]\n\
    \            val medianOfBothChar = medianOfBoth.asInstanceOf[Char]\n        \
    \    val medianOfBothAny = medianOfBoth.asInstanceOf[Any]\n            val medianOfBothUnit\
    \ = medianOfBoth.asInstanceOf[Unit]\n            val medianOfBothNull = medianOfBoth.asInstanceOf[Null]\n\
    \            val medianOfBothUnitNull = medianOfBoth.asInstanceOf[Unit]\n    \
    \        val medianOfBothNullUnitNull = medianOfBoth.asInstanceOf[Null]\n    \
    \        val medianOfBothNullUnit = medianOfBoth.asInstanceOf[Unit]\n        \
    \    val medianOfBothNullUnitNullUnitNull = medianOfBoth.asInstanceOf[Null]\n\
    \            val medianOfBothNullUnitNullUnit = medianOfBoth.asInstanceOf[Unit]\n\
    \            val medianOfBothNullUnitNullUnitNullUnitNull = medianOfBoth.asInstanceOf[Null]\n\
    \            val medianOfBothNullUnitNullUnitNullUnitNullUnitNull = medianOfBoth.asInstanceOf[Null]\n\
    \            val medianOfBothNullUnitNullUnitNullUnitNullUnitNullUnitNull = medianOfBoth.asInstanceOf[Null]\n\
    \            val medianOfBothNullUnitNullUnitNullUnitNullUnitNullUnitNullUnitNull\
    \ = medianOfBoth.asInstanceOf[Null]\n            val medianOfBothNullUnitNullUnitNullUnitNullUnit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm2tjk0bd.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm2tjk0bd.scala:51:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmpm2tjk0bd.scala:18:32 -----------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedianOfLower\e[0m = median(lower)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                \e[33mvalue\e[0m \e[35mmedian\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpm2tjk0bd.scala:19:32\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e\
    [0m \e[36mmedianOfUpper\e[0m = median(upper)\n\e[31m\e[31m   |\e[0m          \
    \                      ^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \      \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpm2tjk0bd.scala:20:31 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mmedianOfBoth\e[0m =\
    \ median(lower ++ upper)\n\e[31m\e[31m   |\e[0m                              \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m                               \e[33mvalue\e[0m\
    \ \e[35mmedian\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpm2tjk0bd.scala:50:1 ---------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpm2tjk0bd.scala:42:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m42 |\e"
  stdout: ''
  timestamp: 1659792518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9ow_p8_1.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        median\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (median : AnyVal)\n\
    \e[31m   |\e[0m        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = (sorted take mid).last\
    \ + sorted take mid.last\n        median.toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmphcuptj0r.scala:12:44 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (sorted take\
    \ mid).last + sorted take mid.last\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0m (x: String): String\n\e[31m   |\e[0mmatch arguments ((sorted :\
    \ List[Long]))\n1 error found\n"
  stdout: ''
  timestamp: 1659792517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n == 0) 0.0f\n        else if (n % 2 == 0) (l.last + l.dropRight(1).last)\
    \ / 2l\n        else (l.last + l.dropRight(1).last) /2.0f\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3syi3dx4.scala:16)\n\tat Problem.main(tmp3syi3dx4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = median(left) + median(right)\n            median\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptg4e296w.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ncxa0_8.scala:16)\n\tat Problem.main(tmp7ncxa0_8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val half = n / 2\n           \
    \ val left = l.take(half)\n            val right = l.drop(half)\n            val\
    \ mid = left.length / 2\n            val median = if (left.length % 2 == 0) left.get(mid)\
    \ else right.get(mid)\n            val medianFloat = median.toFloat\n        \
    \    val diff = (n - half) * medianFloat\n            diff + medianFloat\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt6knmp1z.scala:17:56 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (left.length % \e[31m2\e[0m == \e[31m0\e[0m) left.get(mid) \e[33melse\e[0m\
    \ right.get(mid)\n\e[31m\e[31m   |\e[0m                                      \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0m        value get is not a member\
    \ of List[Long] - did you mean left.seq?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpt6knmp1z.scala:17:76 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e[0m (left.length %\
    \ \e[31m2\e[0m == \e[31m0\e[0m) left.get(mid) \e[33melse\e[0m right.get(mid)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue get is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val middle = sorted.length / 2\n        val median = sorted.take(middle).last\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg9iy9h7l.scala:16)\n\tat Problem.main(tmpg9iy9h7l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.max\n        val q = l.min\n        val r = l.sum / n\n        val\
    \ s = l.sum\n        val t = l.sum / n\n        val u = (r + s) / 2\n        val\
    \ v = (r - s) / 2\n        val w = v - u\n        val x = u + w\n        val y\
    \ = v + w\n        val z = v - w\n        val a = x - y\n        val b = z - x\n\
    \        val c = y - z\n        val d = b * b - 4 * a * c\n        if (d < 0)\n\
    \            throw new ArithmeticException(\"Negative discriminant\")\n      \
    \  if (d == 0)\n            return x\n        if (d > 0)\n            return y\n\
    \        if (d == -1)\n            return z\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1p74l5zf.scala:32:8\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mif\e[0m (d ==\
    \ -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m       \
    \ Found:    Unit\n\e[31m   |\e[0m        Required: Float\n\e[31m   |\e[0m    \
    \    Maybe you are missing an else part for the conditional?\n\e[31m33 |\e[0m\
    \            \e[33mreturn\e[0m z\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.toArray\n        val sorted = m.sortWith(_ < _)\n        val half\
    \ = n / 2\n        if (n % 2 == 0) sorted.last else (sorted take half).last +\
    \ sorted.last\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcb9qyswp.scala:17)\n\tat Problem.main(tmpcb9qyswp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val left = sorted.drop(mid)\n        val right = sorted.takeRight(mid)\n\
    \        val medianLeft = median(left)\n        val medianRight = median(right)\n\
    \        val medianMedian = median(sorted.take(mid))\n        val medianMedianLeft\
    \ = median(left.take(mid))\n        val medianMedianRight = median(right.take(mid))\n\
    \        val medianMedianMedian = median(sorted.takeRight(mid))\n        val medianMedianMedianLeft\
    \ = median(left.takeRight(mid))\n        val medianMedianMedianRight = median(right.takeRight(mid))\n\
    \        val medianMedianMedianMedian = median(sorted.drop(mid))\n        val\
    \ medianMedianMedianMedianLeft = median(left.drop(mid))\n        val medianMedianMedianMedianRight\
    \ = median(right.drop(mid))\n        val medianMedianMedianMedianMedian = median(sorted.take(mid))\n\
    \        val medianMedianMedianMedianLeft = median(left.take(mid))\n        val\
    \ medianMedianMedianMedianRight = median(right.take(mid))\n        val medianMedianMedianMedianMedian\
    \ = median(sorted.takeRight(mid))\n        val medianMedianMedianMedianLeft =\
    \ median(left.takeRight(mid))\n        val medianMedianMedianMedianRight = median(right.takeRight(mid))\n\
    \        val medianMedianMedianMedianMedian = median(sorted.drop(mid))\n     \
    \   val medianMedianMedianMedianLeft = median(left.drop(mid))\n        val medianMedianMedianMedianRight\
    \ = median(right.drop(mid))\n        val medianMedianMedianMedianMedian = median(sorted.take(mid))\n\
    \        val medianMedianMedianMedianLeft = median(left.take(mid))\n        val\
    \ medianMedianMedianMedianRight = median(right.take(mid))\n        val medianMedianMedianMedianMedian\
    \ = median(sorted.takeRight(mid))\n        val medianMedianMedianMedianLeft =\
    \ median(left.takeRight(mid))\n        val medianMedianMedianMedianRight = median(right.takeRight\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwqdfaoba.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwqdfaoba.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmedianMedianMedianMedianLeft\e[0m = median(left.take(mid))\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedianMedianMedianMedianLeft is already defined as \e[33mvalue\e\
    [0m \e[35mmedianMedianMedianMedianLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwqdfaoba.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmedianMedianMedianMedianRight\e\
    [0m = median(right.take(mid))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedianMedianMedianMedianRight is already defined as \e[33mvalue\e\
    [0m \e[35mmedianMedianMedianMedianRight\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwqdfaoba.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmedianMedianMedianMedianMedian\e\
    [0m = median(sorted.takeRight(mid))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedianMedianMedianMedianMedian is already defined as \e[33mvalue\e\
    [0m \e[35mmedianMedianMedianMedianMedian\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwqdfaoba.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmedianMedianMedianMedianLeft\e\
    [0m = median(left.takeRight(mid))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659792519
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ncxa0_8.scala:16)\n\tat Problem.main(tmp7ncxa0_8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left + right).sorted\n        val medianIndex = median.indexWhere(_\
    \ > median(mid))\n        median(medianIndex)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6ae1c4gz.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        for (i <- 0 until n) {\n                left(i) = l(i)\n            \
    \    right(i) = (i + 1) % n\n            }\n            val midVal = median(left)\n\
    \            val rightVal = median(right)\n            val leftMedian = median(left).asInstanceOf[Float]\n\
    \            val rightMedian = median(right).asInstanceOf[Float]\n           \
    \ val median = midVal + rightVal - leftMedian\n            median\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9atabknv.scala:24:25 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = midVal\
    \ + rightVal - leftMedian\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\
    \e[31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmidVal\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        if (n < 2) 0.0f\n        else {\n            val\
    \ m1 = l.slice(0, half)\n            val m2 = l.slice(half, half)\n          \
    \  val m3 = l.slice(half + 1, n)\n            val m4 = l.slice(0, half + 1)\n\
    \            val m5 = l.slice(half + 1, half + 1)\n            val m6 = l.slice(n\
    \ - 1, n - 1)\n            val m7 = l.slice(0, n - 1)\n            val m8 = l.slice(n\
    \ - 1, n)\n            val m9 = l.slice(0, half)\n            val m10 = l.slice(half,\
    \ half)\n            val m11 = l.slice(half + 1, n)\n            val m12 = l.slice(0,\
    \ half + 1)\n            val m13 = l.slice(half + 1, half + 1)\n            val\
    \ m14 = l.slice(n - 1, n - 1)\n            val m15 = l.slice(0, n - 1)\n     \
    \       val m16 = l.slice(n - 1, n)\n            val m17 = l.slice(0, half)\n\
    \            val m18 = l.slice(half, half)\n            val m19 = l.slice(half\
    \ + 1, n)\n            val m20 = l.slice(0, half + 1)\n            val m21 = l.slice(half\
    \ + 1, half + 1)\n            val m22 = l.slice(n - 1, n - 1)\n            val\
    \ m23 = l.slice(0, n - 1)\n            val m24 = l.slice(n - 1, n)\n         \
    \   val m25 = l.slice(0, half)\n            val m26 = l.slice(half, half)\n  \
    \          val m27 = l.slice(half + 1, n)\n            val m28 = l.slice(0, half\
    \ + 1)\n            val m29 = l.slice(half + 1, half + 1)\n            val m30\
    \ = l.slice(n - 1, n - 1)\n            val m31 = l.slice(0, n - 1)\n         \
    \   val m32 = l.slice(n - 1, n)\n            val m33 = l.slice(0, half)\n    \
    \        val m34 = l.slice(half, half)\n            val m35 = l.slice(half + 1,\
    \ n)\n            val m36 = l.slice(0, half + 1)\n            val m37 = l.slice(half\
    \ + 1, half + 1)\n            val m38 = l.slice(n - 1, n - 1)\n            val\
    \ m39 = l.slice(0, n - 1)\n            val m40 = l.slice(n - 1, n)\n         \
    \   val m41 = l.slice(0, half)\n            val m42 = l.slice(half, half)\n  \
    \          val m43 = l.slice(half + 1, n)\n            val m44 = l.slice(0, half\
    \ + 1)\n            val m45 = l.slice(half + 1, half + 1)\n            val m46\
    \ = l.slice(n - 1, \n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph5w3pes7.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph5w3pes7.scala:70:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmph5w3pes7.scala:59:29\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m59 |\e[0m       \
    \     \e[33mval\e[0m \e[36mm46\e[0m = l.slice(n - \e[31m1\e[0m, \n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument\
    \ for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e[0m\
    \ \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmph5w3pes7.scala:69:1 ---------------------\e[0m\e\
    [0m\n\e[31m69 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:  \
    \  Unit\n\e[31m   |\e[0m Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmph5w3pes7.scala:61:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m61 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftHalf = sorted.drop(mid)\n        val rightHalf = sorted.takeRight(mid)\n\
    \        val medianOfLeftHalf = median(leftHalf)\n        val medianOfRightHalf\
    \ = median(rightHalf)\n        val medianOfBothHalfs = median(leftHalf ++ rightHalf)\n\
    \        val medianOfBothHalfsIfBothHalfsAreEven = medianOfBothHalfs match {\n\
    \            case 0 => medianOfLeftHalf\n            case 1 => medianOfRightHalf\n\
    \            case 2 => medianOfBothHalfs\n            case _ => medianOfBothHalfsIfBothHalfsAreEven\n\
    \        }\n        val medianOfBothHalfsIfBothHalfsAreOdd = medianOfBothHalfs\
    \ match {\n            case 0 => medianOfRightHalf\n            case 1 => medianOfLeftHalf\n\
    \            case 2 => medianOfBothHalfs\n            case _ => medianOfBothHalfsIfBothHalfsAreOdd\n\
    \        }\n        val medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOdd =\
    \ medianOfBothHalfs match {\n            case 0 => medianOfLeftHalf\n        \
    \    case 1 => medianOfRightHalf\n            case 2 => medianOfBothHalfs\n  \
    \          case _ => medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOdd\n  \
    \      }\n        val medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreEven =\
    \ medianOfBothHalfs match {\n            case 0 => medianOfLeftHalf\n        \
    \    case 1 => medianOfRightHalf\n            case 2 => medianOfBothHalfs\n  \
    \          case _ => medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreEven\n \
    \       }\n        val medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreEvenIfBothHalfsAreOdd\
    \ = medianOfBothHalfs match {\n            case 0 => medianOfLeftHalf\n      \
    \      case 1 => medianOfRightHalf\n            case 2 => medianOfBothHalfs\n\
    \            case _ => medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreEvenIfBothHalfsAreOdd\n\
    \        }\n        val medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreEvenIfBothHalfsAreEven\
    \ = medianOfBothHalfs match {\n            case 0 => medianOfLeftHalf\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm_p_yexn.scala:60:0 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpm_p_yexn.scala:15:31\
    \ -----------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e\
    [0m \e[36mmedianOfLeftHalf\e[0m = median(leftHalf)\n\e[31m\e[31m   |\e[0m    \
    \                           ^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpm_p_yexn.scala:16:32 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmedianOfRightHalf\e[0m =\
    \ median(rightHalf)\n\e[31m\e[31m   |\e[0m                                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                \e[33mvalue\e[0m \e[35mmedian\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpm_p_yexn.scala:17:32 -----------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mmedianOfBothHalfs\e[0m = median(leftHalf\
    \ ++ rightHalf)\n\e[31m\e[31m   |\e[0m                                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                \e[33mvalue\e[0m \e[35mmedian\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpm_p_yexn.scala:22:22 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            \e[33mcase\e[0m _ => medianOfBothHalfsIfBothHalfsAreEven\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m          Recursive\
    \ \e[33mvalue\e[0m \e[35mmedianOfBothHalfsIfBothHalfsAreEven\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm_p_yexn.scala:28:22\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mcase\e\
    [0m _ => medianOfBoth"
  stdout: ''
  timestamp: 1659792520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val left = sorted.take(mid)\n   \
    \     val right = sorted.drop(mid)\n        val median = (left.length + right.length)\
    \ / 2\n        val medianValue = if (median == 0) 0 else (left.sum + right.sum)\
    \ / median\n        medianValue.toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp77jzmpe3.scala:19)\n\tat Problem.main(tmp77jzmpe3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ncxa0_8.scala:16)\n\tat Problem.main(tmp7ncxa0_8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n <= 1) l.head\n        else {\n            val mid = n / 2\n         \
    \   val left = l.slice(0, mid)\n            val right = l.slice(mid)\n       \
    \     val median = median(left) + median(right)\n            if (n % 2 == 0) median\n\
    \            else (median + l.last) / 2\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprgi_i7ah.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmprgi_i7ah.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792519
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ncxa0_8.scala:16)\n\tat Problem.main(tmp7ncxa0_8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left + right).sorted.last\n        median.toFloat\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeqlwju0e.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted.last\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.toArray\n        val sorted = m.sortWith(_ < _)\n        val half\
    \ = n / 2\n        if (n % 2 == 0) sorted.last else (sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted sorted\
    \ sorted sorted sorted \n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp05bkb2cx.scala:15:4 ----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\nException in thread \"main\" java.lang.StackOverflowError\n\
    \tat dotty.tools.dotc.core.TypeComparer.isSubType(TypeComparer.scala:191)\n\t\
    at dotty.tools.dotc.core.TypeComparer.isSubType(TypeComparer.scala:199)\n\tat\
    \ dotty.tools.dotc.core.TypeComparer.topLevelSubType(TypeComparer.scala:126)\n\
    \tat dotty.tools.dotc.core.TypeComparer$.topLevelSubType(TypeComparer.scala:2734)\n\
    \tat dotty.tools.dotc.core.Types$Type.$less$colon$less(Types.scala:1038)\n\tat\
    \ dotty.tools.dotc.core.Types$Type.relaxed_$less$colon$less(Types.scala:1070)\n\
    \tat dotty.tools.dotc.typer.ProtoTypes$Compatibility.isCompatible(ProtoTypes.scala:38)\n\
    \tat dotty.tools.dotc.typer.ProtoTypes$Compatibility.isCompatible$(ProtoTypes.scala:25)\n\
    \tat dotty.tools.dotc.typer.ProtoTypes$NoViewsAllowed$.isCompatible(ProtoTypes.scala:119)\n\
    \tat dotty.tools.dotc.typer.Implicits$ImplicitRefs.candidateKind$1(Implicits.scala:237)\n\
    \tat dotty.tools.dotc.typer.Implicits$ImplicitRefs.tryCandidate$1(Implicits.scala:251)\n\
    \tat dotty.tools.dotc.typer.Implicits$ImplicitRefs.filterMatching$$anonfun$2(Implicits.scala:260)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.typer.Implicits$ImplicitRefs.filterMatching(Implicits.scala:260)\n\
    \tat dotty.tools.dotc.typer.Implicits$ContextualImplicits.computeEligible(Implicits.scala:365)\n\
    \tat dotty.tools.dotc.typer.Implicits$ContextualImplicits.eligible(Implicits.scala:357)\n\
    \tat dotty.tools.dotc.typer.Implicits$ImplicitSearch.searchImplicit(Implicits.scala:1468)\n\
    \tat dotty.tools.dotc.typer.Implicits$ImplicitSearch.bestImplicit(Implicits.scala:1503)\n\
    \tat dotty.tools.dotc.typer.Implicits.inferImplicit(Implicits.scala:997)\n\tat\
    \ dotty.tools.dotc.typer.Implicits.inferImplicit$(Implicits.scala:785)\n\tat dotty.tools.dotc.typer.Type"
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmp05bkb2cx.scala

    '
  timestamp: 1659792520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = median(left) + median(right)\n            median.toFloat\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp58umtwse.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp58umtwse.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val sorted = l.sorted\n        val half = n / 2\n        if (n < 2) 0.0f\n\
    \        else if (n == 2) sorted.head\n        else sorted.head + half * (sorted.last\
    \ - sorted.head)\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3og8dx8s.scala:18)\n\tat Problem.main(tmp3og8dx8s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = (left + right).sortWith(_ < _).last\n            median.toFloat\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptlerb1jh.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmptlerb1jh.scala:16:31 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sortWith(_\
    \ < _).last\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue + is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val left  = sorted.drop(mid)\n        val right = sorted.takeRight(mid)\n\
    \        val leftMedian = median(left)\n        val rightMedian = median(right)\n\
    \        val medianOfMedians = leftMedian + rightMedian\n        if (medianOfMedians\
    \ == 0.0f) 0.0f else medianOfMedians\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp2s_mq3c0.scala:15:25 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mleftMedian\e[0m = median(left)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                      \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp2s_mq3c0.scala:16:26 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrightMedian\e[0m = median(right)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.toArray\n        val sorted = m.sortWith(_ < _)\n        val half\
    \ = n / 2\n        val median = if (n % 2 == 0) sorted.last else sorted.last.last\n\
    \        val lower = sorted.take(half)\n        val upper = sorted.drop(half)\n\
    \        val mid = if (n / 2 == 0) lower else upper\n        val medianOfMiddle\
    \ = if (n / 2 == 0) mid else mid.last\n        val medianOfAll = if (n / 2 ==\
    \ 0) lower else upper.last\n        val medianOfAllAndMiddle = if (n / 2 == 0)\
    \ lower else upper.last.last\n        val medianOfAllAndMiddleAndLower = if (n\
    \ / 2 == 0) lower else upper.last.last.last\n        val medianOfAllAndMiddleAndLowerAndLower\
    \ = if (n / 2 == 0) lower else upper.last.last.last.last\n        val medianOfAllAndMiddleAndLowerAndLowerAndLower\
    \ = if (n / 2 == 0) lower else upper.last.last.last.last.last\n        val medianOfAllAndMiddleAndLowerAndLowerAndLowerAndLower\
    \ = if (n / 2 == 0) lower else upper.last.last.last.last.last.last\n        val\
    \ medianOfAllAndMiddleAndLowerAndLowerAndLowerAndLowerAndLower = if (n / 2 ==\
    \ 0) lower else upper.last.last.last.last.last.last.last\n        val medianOfAllAndMiddleAndLowerAndLowerAndLowerAndLowerAndLowerAndLower\
    \ = if (n / 2 == 0) lower else upper.last.last.last.last.last.last.last.last\n\
    \        val medianOfAllAndMiddleAndLowerAndLowerAndLowerAndLowerAndLowerAndLowerAndLower\
    \ = if (n / 2 == 0) lower else upper.last.last.last.last.last.last.last.last.last\n\
    \        val medianOfAllAndMiddleAndLowerAndLowerAndLowerAndLowerAndLowerAndLowerAndLowerAndLower\
    \ = if (n / 2 == 0) lower else upper.last.last.last.last.last.last.last.last.last.last\n\
    \        val medianOfAllAndMiddleAndLowerAndLowerAndLowerAndLowerAndLowerAndLowerAndLowerAndLowerAndLower\
    \ = if (n / 2 == 0) lower else upper.last.last.last.last.last.last.last.last.last.last.last\n\
    \        val median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg6hagrv4.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg6hagrv4.scala:14:66\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mmedian\e[0m = \e[33mif\e[0m (n % \e[31m2\e[0m == \e[31m0\e[0m) sorted.last\
    \ \e[33melse\e[0m sorted.last.last\n\e[31m\e[31m   |\e[0m                    \
    \                                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                  value last is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpg6hagrv4.scala:20:73 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmedianOfAllAndMiddle\e[0m\
    \ = \e[33mif\e[0m (n / \e[31m2\e[0m == \e[31m0\e[0m) lower \e[33melse\e[0m upper.last.last\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \     value last is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpg6hagrv4.scala:21:81 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mmedianOfAllAndMiddleAndLower\e[0m = \e[33mif\e\
    [0m (n / \e[31m2\e[0m == \e[31m0\e[0m) lower \e[33melse\e[0m upper.last.last.last\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \             value last is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpg6hagrv4.scala:22:89 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mmedianOfAllAndMiddleAndLowerAndLower\e[0m\
    \ = \e[33mif\e[0m (n / \e[31m2\e[0m == \e[31m0\e[0m) lower \e[33melse\e[0m upper.last.last.last.last\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                     value last is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpg6hagrv4.scala:23:97 ----------------------"
  stdout: ''
  timestamp: 1659792522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.toList.sortWith(_ < _).length\n        if (m % 2 == 0) l.toList.sortWith(_\
    \ < _).last.toFloat / 2\n        else l.toList.sortWith(_ < _).last.toFloat /\
    \ 2 + l.toList.sortWith(_ < _).last.toFloat / 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb70n2ojx.scala:16)\n\tat Problem.main(tmpb70n2ojx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = l.length / 2\n     \
    \       val left = l.slice(0, mid)\n            val right = l.slice(mid)\n   \
    \         val m1 = median(left)\n            val m2 = median(right)\n        \
    \    (m1 + m2) / 2\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwa7h4sbe.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n == 0) 0.0f\n        else {\n            val mid = n / 2\n           \
    \ val left = l.slice(0, mid)\n            val right = l.slice(mid)\n         \
    \   val median = median(left) + median(right)\n            val medianFloat = median.toFloat\n\
    \            medianFloat\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpebj2tipr.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpebj2tipr.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9ow_p8_1.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        median\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (median : AnyVal)\n\
    \e[31m   |\e[0m        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n == 0) 0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = median(left) + median(right)\n            median\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwhi3_ass.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpwhi3_ass.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val left = sorted.drop(mid)\n        val right = sorted.take(mid)\n \
    \       val medianLeft = median(left)\n        val medianRight = median(right)\n\
    \        if (median < medianLeft) median\n        else if (median > medianRight)\
    \ median\n        else (median + medianLeft) / 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpmr_7p8k5.scala:15:25 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedianLeft\e[0m = median(left)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                      \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpmr_7p8k5.scala:16:26 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmedianRight\e[0m = median(right)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val half = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.last\n\
    \        else sorted.last.toFloat + sorted.last.toFloat / 2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmzdvc5so.scala:16)\n\tat Problem.main(tmpmzdvc5so.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ m1 = l.slice(0, mid)\n            val m2 = l.slice(mid)\n            val m =\
    \ (m1 + m2).sortWith(_ < _)\n            val m3 = m.last\n            val m4 =\
    \ m.init\n            (m3 + m4) / 2\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpouyehz49.scala:15:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mm2\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpouyehz49.scala:16:24 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mm\e[0m = (m1 + m2).sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = median(left) + median(right)\n            median.toFloat\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplba9d52e.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = l.length / 2\n     \
    \       val l1 = l.take(mid)\n            val l2 = l.drop(mid)\n            val\
    \ m1 = median(l1)\n            val m2 = median(l2)\n            (m1 + m2) / 2\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp50om14ga.scala:22)\n\tat Problem.main(tmp50om14ga.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = median(left) + median(right)\n            median\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2gzk8w1k.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp2gzk8w1k.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.min\n        val median = (m + n) / 2\n        val half = n / 2\n\
    \        val left = (0 until half).map(i => l(i)).sum\n        val right = (half\
    \ until n).map(i => l(i)).sum\n        val median1 = (left + right) / 2\n    \
    \    val median2 = if (n == 1) (l.head + l.last) else (l.head + l.last + l.drop(1).sum)\
    \ / 2\n        val median3 = if (n == 1) (l.head + l.last) else (l.head + l.last\
    \ + l.drop(2).sum) / 2\n        val median4 = if (n == 1) (l.head + l.last) else\
    \ (l.head + l.last + l.drop(3).sum) / 2\n        val median5 = if (n == 1) (l.head\
    \ + l.last) else (l.head + l.last + l.drop(4).sum) / 2\n        val median6 =\
    \ if (n == 1) (l.head + l.last) else (l.head + l.last + l.drop(5).sum) / 2\n \
    \       val median7 = if (n == 1) (l.head + l.last) else (l.head + l.last + l.drop(6).sum)\
    \ / 2\n        val median8 = if (n == 1) (l.head + l.last) else (l.head + l.last\
    \ + l.drop(7).sum) / 2\n        val median9 = if (n == 1) (l.head + l.last) else\
    \ (l.head + l.last + l.drop(8).sum) / 2\n        val median10 = if (n == 1) (l.head\
    \ + l.last) else (l.head + l.last + l.drop(9).sum) / 2\n        val median11 =\
    \ if (n == 1) (l.head + l.last) else (l.head + l.last + l.drop(10).sum) / 2\n\
    \        val median12 = if (n == 1) (l.head + l.last) else (l.head + l.last +\
    \ l.drop(11).sum) / 2\n        val median13 = if (n == 1) (l.head + l.last) else\
    \ (l.head + l.last + l.drop(12).sum) / 2\n        val median14 = if (n == 1) (l.head\
    \ + l.last) else (l.head + l.last + l.drop(13).sum) / 2\n        val median15\
    \ = if (n == 1) (l.head + l.last) else (l.head + l.last + l.drop(14).sum) / 2\n\
    \        val median16 = if (n == 1) (l.head + l.last) else (l.head + l.last +\
    \ l.drop(15).sum) / 2\n        val median17 = if (n == 1) \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph9zzv42e.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmph9zzv42e.scala:33:5 ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        if (n < 2) 0f\n        else {\n            val median\
    \ = l.sortWith(_ < _).last\n            val lower = l.take(half)\n           \
    \ val upper = l.drop(half)\n            val lowerMedian = median(lower)\n    \
    \        val upperMedian = median(upper)\n            val lowerMedianAbs = Math.abs(lowerMedian)\n\
    \            val upperMedianAbs = Math.abs(upperMedian)\n            val lowerMedianAbsMedian\
    \ = lowerMedianAbs / upperMedianAbs\n            val lowerMedianAbsMedianAbs =\
    \ lowerMedianAbsMedian * lowerMedianAbs\n            val medianAbs = Math.abs(median)\n\
    \            val medianAbsMedian = medianAbs / lowerMedianAbsMedianAbs\n     \
    \       val medianAbsMedianAbs = medianAbsMedian * medianAbsMedian\n         \
    \   val medianAbsMedianAbsMedian = medianAbsMedianAbs / upperMedianAbsMedianAbs\n\
    \            val medianAbsMedianAbsMedianAbs = medianAbsMedianAbsMedian * medianAbsMedianAbsMedian\n\
    \            val medianAbsMedianAbsMedianAbsMedian = medianAbsMedianAbsMedianAbs\
    \ / lowerMedianAbsMedianAbsMedianAbs\n            val medianAbsMedianAbsMedianAbsMedianAbs\
    \ = medianAbsMedianAbsMedianAbsMedian * medianAbsMedianAbsMedianAbsMedian\n  \
    \          val medianAbsMedianAbsMedianAbsMedianAbsMedian = medianAbsMedianAbsMedianAbsMedianAbs\
    \ / upperMedianAbsMedianAbsMedianAbsMedianAbs\n            val medianAbsMedianAbsMedianAbsMedianAbsMedianAbs\
    \ = medianAbsMedianAbsMedianAbsMedianAbsMedian * medianAbsMedianAbsMedianAbsMedianAbsMedian\n\
    \            val medianAbsMedianAbsMedianAbsMedianAbsMedianAbsMedian = medianAbsMedianAbsMedianAbsMedianAbsMedianAbsMedian\
    \ * medianAbsMedianAbsMedianAb\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjailcn_a.scala:43:0 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpjailcn_a.scala:17:30\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e\
    [0m \e[36mlowerMedian\e[0m = median(lower)\n\e[31m\e[31m   |\e[0m            \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0m                              \e\
    [33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpjailcn_a.scala:18:30 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mupperMedian\e[0m = median(upper)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              \e[33mvalue\e[0m \e[35mmedian\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjailcn_a.scala:32:70\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e\
    [0m \e[36mmedianAbsMedianAbsMedianAbsMedianAbsMedianAbsMedian\e[0m = medianAbsMedianAbsMedianAbsMedianAbsMedianAbsMedian\
    \ * medianAbsMedianAbsMedianAb\n\e[31m\e[31m   |\e[0m                        \
    \                                              ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35mmedianAbsMedianAbsMedianAbsMedianAbsMedianAbsMedian\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjailcn_a.scala:42:1\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Float\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpjailcn_a.scala:34:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m34 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.groupBy(x => x).mapValues(_.length).max\n        val half = m / 2\n\
    \        val m1 = l.take(half)\n        val m2 = l.drop(half)\n        val m3\
    \ = m1.zip(m2).map { case (x, y) => x + y }\n        val m4 = m3.sum / half\n\
    \        val m5 = m3.max / half\n        val m6 = m4.toFloat / m5\n        m6\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg210vj6m.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mhalf\e[0m = m / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                   ^^^\e[0m\n\e[31m   |\e[0mvalue /\
    \ is not a member of (Long, Int), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792523
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftMedian = sorted.drop(mid).last\n        val rightMedian = sorted.take(mid).last\n\
    \        val leftMedianInt = leftMedian.toInt\n        val rightMedianInt = rightMedian.toInt\n\
    \        if (leftMedianInt < rightMedianInt) {\n            median\n        }\
    \ else {\n            rightMedian\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpru_dfzc7.scala:24)\n\tat Problem.main(tmpru_dfzc7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.foldLeft(0l){ (sum, e) => sum + e / n }\n        val m1 = l.foldLeft(0l){\
    \ (sum, e) => sum + e / n }\n        val m2 = l.foldLeft(0l){ (sum, e) => sum\
    \ + e / n }\n        val m3 = l.foldLeft(0l){ (sum, e) => sum + e / n }\n    \
    \    val m4 = l.foldLeft(0l){ (sum, e) => sum + e / n }\n        val m5 = l.foldLeft(0l){\
    \ (sum, e) => sum + e / n }\n        val m6 = l.foldLeft(0l){ (sum, e) => sum\
    \ + e / n }\n        val m7 = l.foldLeft(0l){ (sum, e) => sum + e / n }\n    \
    \    val m8 = l.foldLeft(0l){ (sum, e) => sum + e / n }\n        val m9 = l.foldLeft(0l){\
    \ (sum, e) => sum + e / n }\n        val m10 = l.foldLeft(0l){ (sum, e) => sum\
    \ + e / n }\n        val m11 = l.foldLeft(0l){ (sum, e) => sum + e / n }\n   \
    \     val m12 = l.foldLeft(0l){ (sum, e) => sum + e / n }\n        val m13 = l.foldLeft(0l){\
    \ (sum, e) => sum + e / n }\n        val m14 = l.foldLeft(0l){ (sum, e) => sum\
    \ + e / n }\n        val m15 = l.foldLeft(0l){ (sum, e) => sum + e / n }\n   \
    \     val m16 = l.foldLeft(0l){ (sum, e) => sum + e / n }\n        val m17 = l.foldLeft(0l){\
    \ (sum, e) => sum + e / n }\n        val m18 = l.foldLeft(0l){ (sum, e) => sum\
    \ + e / n }\n        val m19 = l.foldLeft(0l){ (sum, e) => sum + e / n }\n   \
    \     val m20 = l.foldLeft(0l){ (sum, e) => sum + \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6ro4o2je.scala:31:51 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mm20\e[0m = l.foldLeft(\e\
    [31m0l\e[0m){ (\e[36msum\e[0m, \e[36me\e[0m) => sum + \n\e[31m\e[31m   |\e[0m\
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                     expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6ro4o2je.scala:42:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m42 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp6ro4o2je.scala:41:1 ---------------------\e[0m\e[0m\n\
    \e[31m41 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp6ro4o2je.scala:33:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m33 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659792523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.toArray\n        val sorted = m.sortWith(_ < _)\n        val half\
    \ = n / 2\n        if (n < 2) 0.0f\n        else if (n == 1) sorted[half]\n  \
    \      else (sorted take half).last + sorted take half sum / 2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp33y25nd6.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m (sorted take half).last + sorted\
    \ take half sum / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \      end of statement expected but integer literal found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp33y25nd6.scala:15:32 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (n == \e[31m1\e[0m)\
    \ sorted[half]\n\e[31m\e[31m   |\e[0m                                ^^^^\e[0m\n\
    \e[31m   |\e[0m                                Not found: type half\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmp33y25nd6.scala:16:37 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m (sorted take half).last + sorted\
    \ take half sum / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m\
    \   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0m\
    \ (x: String): String\n\e[31m   |\e[0mmatch arguments ((sorted : Array[Long]))\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).sum\
    \ / mid\n        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp3s929jv.scala:16)\n\tat Problem.main(tmpp3s929jv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.toList.sortWith(_ < _).length\n        val mid = m / 2\n        val\
    \ m1 = l.toList.sortWith(_ < _).take(mid).toList\n        val m2 = l.toList.sortWith(_\
    \ < _).drop(mid).toList\n        val m3 = l.toList.sortWith(_ < _).take(mid).toList\n\
    \        val m4 = l.toList.sortWith(_ < _).drop(mid).toList\n        val m5 =\
    \ l.toList.sortWith(_ < _).take(mid).toList\n        val m6 = l.toList.sortWith(_\
    \ < _).drop(mid).toList\n        val m7 = l.toList.sortWith(_ < _).take(mid).toList\n\
    \        val m8 = l.toList.sortWith(_ < _).drop(mid).toList\n        val m9 =\
    \ l.toList.sortWith(_ < _).take(mid).toList\n        val m10 = l.toList.sortWith(_\
    \ < _).drop(mid).toList\n        val m11 = l.toList.sortWith(_ < _).take(mid).toList\n\
    \        val m12 = l.toList.sortWith(_ < _).drop(mid).toList\n        val m13\
    \ = l.toList.sortWith(_ < _).take(mid).toList\n        val m14 = l.toList.sortWith(_\
    \ < _).drop(mid).toList\n        val m15 = l.toList.sortWith(_ < _).take(mid).toList\n\
    \        val m16 = l.toList.sortWith(_ < _).drop(mid).toList\n        val m17\
    \ = l.toList.sortWith(_ < _).take(mid).toList\n        val m18 = l.toList.sortWith(_\
    \ < _).drop(mid).toList\n        val m19 = l.toList.sortWith(_ < _).take(mid).toList\n\
    \        val m20 = l.toList.sortWith(_ < _).drop(mid).toList\n        val m21\
    \ = l.toList.sortWith(_ < _).take(mid).toList\n        val m22 = l.toList.sortWith(_\
    \ < _).drop(mid).toList\n        val m23 = l.toList.sortWith(_ < _).take(mid).toList\n\
    \        val m24 = l.toList.sortWith(_ < _).drop(mid).toList\n        val m25\
    \ = l.toList.sortWith(_ < _).take(mid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdus3pyts.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpdus3pyts.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792523
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.slice(0, half)\n        val right =\
    \ l.slice(half, n)\n        val median = (left ++ right).sortWith(_ < _).last\n\
    \        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprm829mfl.scala:18)\n\tat Problem.main(tmprm829mfl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.max\n        val median = (m + n) / 2\n        val half = n / 2\n\
    \        val left = l.take(half)\n        val right = l.drop(half)\n        val\
    \ leftMedian = median(left)\n        val rightMedian = median(right)\n       \
    \ if (leftMedian > rightMedian)\n            median\n        else\n          \
    \  leftMedian\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpcdv0dy_9.scala:16:25 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mleftMedian\e[0m = median(left)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                      \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpcdv0dy_9.scala:17:26 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mrightMedian\e[0m = median(right)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        if (n < 1) throw new IllegalArgumentException(\"\
    List must have at least two elements\")\n        if (n == 1) return l(0)\n   \
    \     if (n == 2) return (l(1) + l(2))/2\n        if (n % 2 == 0) return median(l(half,\
    \ half+1))\n        else return median(l(half, half-1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvvpfoizr.scala:15:40\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (n % \e\
    [31m2\e[0m == \e[31m0\e[0m) \e[33mreturn\e[0m median(l(half, half+\e[31m1\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                        Found:    (Int, Int)\n\e\
    [31m   |\e[0m                                        Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvvpfoizr.scala:16:29 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m \e[33mreturn\e[0m median(l(half,\
    \ half-\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Found:    (Int, Int)\n\e[31m\
    \   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = median(left) + median(right)\n            median\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptg4e296w.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.groupBy(x => x).mapValues(_.length).max\n        val half = m / 2\n\
    \        val low = l.take(half)\n        val high = l.drop(half)\n        val\
    \ mid = high.zip(low).map { case (h, l) => l }\n        val median = mid.foldLeft(0f)\
    \ { (sum, v) => sum + v }\n        median.toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0lcs1p9r.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mhalf\e[0m = m / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                   ^^^\e[0m\n\e[31m   |\e[0mvalue /\
    \ is not a member of (Long, Int), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        l.foreach(x => if (x < mid) left(x) else right(x))\n            val m1\
    \ = median(left)\n            val m2 = median(right)\n            val m = (m1\
    \ + m2) / 2\n            if (m1 < m) m1 else m2\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpznckngzz.scala:16:45\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            l.foreach(\e[36mx\e\
    [0m => \e[33mif\e[0m (x < mid) left(x) \e[33melse\e[0m right(x))\n\e[31m\e[31m\
    \   |\e[0m                                             ^\e[0m\n\e[31m   |\e[0m\
    \                                             Found:    (x : Long)\n\e[31m   |\e\
    [0m                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpznckngzz.scala:16:59 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            l.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ < mid) left(x) \e[33melse\e[0m right(x))\n\e[31m\e[31m   |\e[0m            \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                              Found:    (x : Long)\n\e[31m  \
    \ |\e[0m                                                    Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpznckngzz.scala:17:28\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e\
    [36mm1\e[0m = median(left)\n\e[31m\e[31m   |\e[0m                            ^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (left : Array[Long])\n\
    \e[31m   |\e[0m                            Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpznckngzz.scala:18:28 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mm2\e[0m = median(right)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (right : Array[Long])\n\e[31m   |\e[0m \
    \                           Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659792524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = (left + right).sorted\n        median.last\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8u7lqq1.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val m1 = l.take(half)\n        val m2 = l.drop(half)\n\
    \        val m = (m1.length + m2.length) / 2\n        if (m1.length < m2.length)\
    \ m1 else m2\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx7_cmhs8.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (m1.length\
    \ < m2.length) m1 \e[33melse\e[0m m2\n\e[31m\e[31m   |\e[0m                  \
    \                 ^^\e[0m\n\e[31m   |\e[0m                                   Found:\
    \    (m1 : List[Long])\n\e[31m   |\e[0m                                   Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx7_cmhs8.scala:15:43\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (m1.length\
    \ < m2.length) m1 \e[33melse\e[0m m2\n\e[31m\e[31m   |\e[0m                  \
    \                         ^^\e[0m\n\e[31m   |\e[0m                           \
    \                Found:    (m2 : List[Long])\n\e[31m   |\e[0m                \
    \                           Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = l.length / 2\n     \
    \       val left = l.slice(0, mid)\n            val right = l.slice(mid)\n   \
    \         val median = median(left)\n            val median2 = median(right)\n\
    \            val median3 = median(left.toList ++ right.toList)\n            val\
    \ median4 = median(left.toList ++ right.toList ++ left.toList ++ right.toList)\n\
    \            val median5 = median(left.toList ++ right.toList ++ left.toList ++\
    \ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++\
    \ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++\
    \ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++\
    \ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++\
    \ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++\
    \ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++\
    \ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++\
    \ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++\
    \ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++\
    \ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++\
    \ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++\
    \ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++\
    \ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++\
    \ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++\
    \ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++\
    \ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++\
    \ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++\
    \ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++\
    \ right.toList ++ left.toList ++ right.toList ++ left.toList ++ right.toList ++\
    \ left.toList ++ right.toList ++ left.toList ++ right.toList ++ left.toList ++\
    \ right.toList \n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_c4qdw76.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_c4qdw76.scala:31:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m31 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmp_c4qdw76.scala:15:31\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \     \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\e[31m\e[31m   |\e[0m  \
    \                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for\
    \ parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e[0m \e\
    [35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp_c4qdw76.scala:16:25 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_c4qdw76.scala:30:1 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmp_c4qdw76.scala:22:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m22 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659792524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val midVal\
    \ = median(left)\n            val rightVal = median(right)\n            val median\
    \ = midVal + rightVal\n            median.toFloat\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp998p1j0q.scala:18:25 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = midVal\
    \ + rightVal\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35mmidVal\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid, n)\n          \
    \  val lMedian = median(left)\n            val rMedian = median(right)\n     \
    \       val median = (lMedian + rMedian) / 2\n            median\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpiozz_ucv.scala:18:26 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (lMedian\
    \ + rMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m \e[35mlMedian\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = new Array[Long](half)\n        val right\
    \ = new Array[Long](half)\n        val mid = n / 2\n        var i = 0\n      \
    \  var j = 0\n        var k = 0\n        var m = 0\n        while (i < half &&\
    \ j < half) {\n            val x = l(i)\n            val y = l(j)\n          \
    \  if (x < y) {\n                left(k) = x\n                i += 1\n       \
    \     } else {\n                right(k) = y\n                j += 1\n       \
    \     }\n            k += 1\n        }\n        if (i == half) {\n           \
    \ m = right(mid)\n        } else if (j == half) {\n            m = left(mid)\n\
    \        } else {\n            m = ((right(mid) + left(mid)) / 2).toFloat\n  \
    \      }\n        m\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1eskjgww.scala:32:21\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m            m = right(mid)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      Found:    Long\n\e[31m   |\e[0m                Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1eskjgww.scala:34:20 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            m = left(mid)\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:    Long\n\e\
    [31m   |\e[0m                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp1eskjgww.scala:36:47 --------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m            m = ((right(mid) + left(mid)) / \e[31m2\e[0m).toFloat\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    Float\n\e[31m   |\e[0m         \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659792525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left  = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = (left + right).sorted.last\n            median\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm471bbsl.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left\
    \ + right).sorted.last\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792525
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid, n)\n          \
    \  val lMedian = median(left)\n            val rMedian = median(right)\n     \
    \       (lMedian + rMedian) / 2\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp37gg1bfm.scala:22)\n\tat Problem.main(tmp37gg1bfm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = l.length / 2\n     \
    \       val left = l.slice(0, mid)\n            val right = l.slice(mid)\n   \
    \         val median = median(left)\n            val leftMedian = median(left)\n\
    \            val rightMedian = median(right)\n            val medianDiff = leftMedian\
    \ - rightMedian\n            val leftDiff = leftMedian - median\n            val\
    \ rightDiff = rightMedian - median\n            val medianDiffAbs = Math.abs(medianDiff)\n\
    \            val leftDiffAbs = Math.abs(leftDiff)\n            val rightDiffAbs\
    \ = Math.abs(rightDiff)\n            val medianDiffAbsMin = if (medianDiffAbs\
    \ < 0.0f) 0.0f else medianDiffAbs\n            val leftDiffAbsMin = if (leftDiffAbs\
    \ < 0.0f) 0.0f else leftDiffAbs\n            val rightDiffAbsMin = if (rightDiffAbs\
    \ < 0.0f) 0.0f else rightDiffAbs\n            val medianDiffAbsMax = if (medianDiffAbs\
    \ < 0.0f) 0.0f else medianDiffAbs\n            val leftDiffAbsMax = if (leftDiffAbs\
    \ < 0.0f) 0.0f else leftDiffAbs\n            val rightDiffAbsMax = if (rightDiffAbs\
    \ < 0.0f) 0.0f else rightDiffAbs\n            val medianDiffAbsMaxMin = if (medianDiffAbs\
    \ < 0.0f) 0.0f else medianDiffAbs\n            val leftDiffAbsMaxMin = if (leftDiffAbs\
    \ < 0.0f) 0.0f else leftDiffAbs\n            val rightDiffAbsMaxMin = if (rightDiffAbs\
    \ < 0.0f) 0.0f else rightDiffAbs\n            val medianDiffAbsMaxMinMax = if\
    \ (medianDiffAbs < 0.0f) 0.0f else medianDiffAbs\n            val leftDiffAbsMaxMinMax\
    \ = if (leftDiffAbs < 0.0f) 0.0f else leftDiffAbs\n            val rightDiffAbsMaxMinMax\
    \ = if (rightDiffAbs < 0.0f) 0.0f else rightDiffAbs\n            val medianDiffAbsMaxMinMaxMin\
    \ = if (medianDiffAbs < 0.0f) 0.0f else medianDiffAbs\n            val leftDiffAbsMaxMinMaxMin\
    \ = if (leftDiffAbs < 0.0f) 0.0f else leftDiffAbs\n            val rightDiffAbsMaxMinMaxMin\
    \ = if (rightDiffAbs < 0.0f) 0.0f else rightDiffAbs\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2oqklj9t.scala:50:0 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmp2oqklj9t.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp2oqklj9t.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2oqklj9t.scala:49:1\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Float\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmp2oqklj9t.scala:41:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m41 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659792525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ m1 = l.slice(0, mid)\n            val m2 = l.slice(mid)\n            val m =\
    \ (m1 + m2).sortWith(_ < _)\n            val m1 = m.head\n            val m2 =\
    \ m.last\n            val m = (m1 + m2).sortWith(_ < _)\n            val m1 =\
    \ m.head\n            val m2 = m.last\n            val m = (m1 + m2).sortWith(_\
    \ < _)\n            val m1 = m.head\n            val m2 = m.last\n           \
    \ val m = (m1 + m2).sortWith(_ < _)\n            val m1 = m.head\n           \
    \ val m2 = m.last\n            val m = (m1 + m2).sortWith(_ < _)\n           \
    \ val m1 = m.head\n            val m2 = m.last\n            val m = (m1 + m2).sortWith(_\
    \ < _)\n            val m1 = m.head\n            val m2 = m.last\n           \
    \ val m = (m1 + m2).sortWith(_ < _)\n            val m1 = m.head\n           \
    \ val m2 = m.last\n            val m = (m1 + m2).sortWith(_ < _)\n           \
    \ val m1 = m.head\n            val m2 = m.last\n            val m = (m1 + m2).sortWith(_\
    \ < _)\n            val m1 = m.head\n            val m2 = m.last\n           \
    \ val m = (m1 + m2).sortWith(_ < _)\n            val m1 = m.head\n           \
    \ val m2 = m.last\n            val m = (m1 + m2).sortWith(_ < _)\n           \
    \ val m1 = m.head\n            val m2 = m.last\n            val m = (m1 + m2).sortWith(_\
    \ < _)\n            val m1 = m.head\n            val m2 = m.last\n           \
    \ val m = (m1 + m2).sortWith(_ < _)\n            val m1 = m.head\n           \
    \ val m2 = m.last\n            val m = (m1 + m2).sortWith(_ < _)\n           \
    \ val m1 = m.head\n            val m2 = m.last\n            val m = (m1 + m2).sortWith(_\
    \ < _)\n            val m1 = m.head\n            val m2 = m.last\n           \
    \ val m = (m1 + m2).sortWith(_ < _)\n            val m1 = m.head\n           \
    \ val m2 = m.last\n            val m = (m1 + m2).\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfezf608t.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpfezf608t.scala:75:0 ----------------------------\e[0m\e[0m\n\e[31m75\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfezf608t.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mm1\e[0m = m.head\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm1 is already\
    \ defined as \e[33mvalue\e[0m \e[35mm1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfezf608t.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mm2\e[0m = m.last\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm2 is already\
    \ defined as \e[33mvalue\e[0m \e[35mm2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfezf608t.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mm\e[0m = (m1 + m2).sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpfezf608t.scala:20:16 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            \e[33mval\e[0m \e[36mm1\e[0m = m.head\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm1 is already defined as \e\
    [33mvalue\e[0m \e[35mm1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfezf608t.scala:21:16 --------"
  stdout: ''
  timestamp: 1659792526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = median(left) + median(right)\n            val medianFloat = median.toFloat\n\
    \            if (medianFloat == 0.0f) 0.0f\n            else medianFloat\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpx7jo00et.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpx7jo00et.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = left.sorted match {\n            case Nil => right(0)\n\
    \            case x :: xs => xs.sorted match {\n                case Nil => x(0)\n\
    \                case y :: ys => if (y > x(0)) y else x(0)\n            }\n  \
    \      }\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpex36us2i.scala:17:28 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m Nil => x(\e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       \e[33mvalue\e[0m \e[35mx\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpex36us2i.scala:18:40 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m y :: ys => \e[33mif\e\
    [0m (y > x(\e[31m0\e[0m)) y \e[33melse\e[0m x(\e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                        ^\e[0m\n\e[31m   |\e[0m           \
    \                             \e[33mvalue\e[0m \e[35mx\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpex36us2i.scala:18:53 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m y :: ys => \e[33mif\e\
    [0m (y > x(\e[31m0\e[0m)) y \e[33melse\e[0m x(\e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                        \e[33mvalue\e[0m \e[35mx\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659792525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.toSeq.sortBy(_).take(n / 2).length\n        val median = (l.toSeq.sortBy(_).take(m\
    \ / 2).sum / m).toFloat\n        median\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpf2_d9jjw.scala:11:31 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.toSeq.sortBy(_).take(n\
    \ / \e[31m2\e[0m).length\n\e[31m\e[31m   |\e[0m                              \
    \ ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m   I could not infer the type of the parameter _$1 of expanded function:\n\
    \e[31m   |\e[0m   _$1 => l.toSeq.sortBy(_$1).take(n / 2).length.\n\e[31m\e[31m--\
    \ Error: /tmp/tmpf2_d9jjw.scala:11:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.toSeq.sortBy(_).take(n\
    \ / \e[31m2\e[0m).length\n\e[31m\e[31m   |\e[0m                              \
    \   ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e\
    [35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e\
    [35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m\
    \ \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpf2_d9jjw.scala:12:37\
    \ -----------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e\
    [0m \e[36mmedian\e[0m = (l.toSeq.sortBy(_).take(m / \e[31m2\e[0m).sum / m).toFloat\n\
    \e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$2 of expanded function:\n\e[31m   |\e[0m   _$2 =>\
    \ l.toSeq.sortBy(_$2).take(m / 2).sum / m.\n\e[31m\e[31m-- Error: /tmp/tmpf2_d9jjw.scala:12:39\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m12 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmedian\e[0m = (l.toSeq.sortBy(_).take(m / \e[31m2\e[0m).sum\
    \ / m).toFloat\n\e[31m\e[31m   |\e[0m                                       ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mInt\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659792525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.slice(0, half)\n        val right =\
    \ l.slice(half, n)\n        val median = (left + right).sorted.last\n        median.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3pb9_qql.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted.last\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.toArray\n        val half = n / 2\n        val left = m.slice(0,\
    \ half)\n        val right = m.slice(half, n)\n        val mid = math.floor(half)\n\
    \        val median = (left.sum + right.sum) / 2.0\n        val leftMedian = left.sum\
    \ / 2.0\n        val rightMedian = right.sum / 2.0\n        val medianDiff = leftMedian\
    \ - rightMedian\n        if (medianDiff < 0)\n            median\n        else\n\
    \            leftMedian\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3nkuy3_h.scala:21:12\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            median\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (median\
    \ : Double)\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp3nkuy3_h.scala:23:12 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            leftMedian\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (leftMedian : Double)\n\
    \e[31m   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val left = sorted.take(mid)\n   \
    \     val right = sorted.drop(mid)\n        val median = (left ++ right).sum /\
    \ 2\n        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0vk4vnz1.scala:18)\n\tat Problem.main(tmp0vk4vnz1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792527
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.toSet.size\n        val half = m / 2\n        if (half == 0) l.toSet.head\n\
    \        else if (half == 1) l.toSet.last\n        else l.toSet.take(half).last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd96moxh4.scala:18)\n\tat Problem.main(tmpd96moxh4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = (left + right).sorted\n        median.last\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8u7lqq1.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val m =\
    \ (left + right).sortBy(_).reverse.head\n            val median = (m + right).sortBy(_).reverse.head\n\
    \            median.toFloat\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpkwghvajl.scala:16:42 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mm\e[0m = (left + right).sortBy(_).reverse.head\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$1 of expanded function:\n\e[31m   |\e\
    [0m   _$1 => (left + right).sortBy(_$1).reverse.head.\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpkwghvajl.scala:16:26 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            \e[33mval\e[0m \e[36mm\e[0m = (left + right).sortBy(_).reverse.head\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpkwghvajl.scala:17:44 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (m + right).sortBy(_).reverse.head\n\
    \e[31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$2 of expanded function:\n\e[31m   |\e\
    [0m   _$2 => (m + right).sortBy(_$2).reverse.head.\n3 errors found\n"
  stdout: ''
  timestamp: 1659792527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftMedian = sorted.drop(mid).last\n        val rightMedian = sorted.take(mid).last\n\
    \        val leftMedianInt = leftMedian.toInt\n        val rightMedianInt = rightMedian.toInt\n\
    \        val leftMedianFloat = leftMedian.toFloat\n        val rightMedianFloat\
    \ = rightMedian.toFloat\n        val leftMedianLong = leftMedian.toLong\n    \
    \    val rightMedianLong = rightMedian.toLong\n        val leftMedianDouble =\
    \ leftMedian.toDouble\n        val rightMedianDouble = rightMedian.toDouble\n\
    \        val leftMedianString = leftMedian.toString\n        val rightMedianString\
    \ = rightMedian.toString\n        val leftMedianBigInt = leftMedian.toBigInt\n\
    \        val rightMedianBigInt = rightMedian.toBigInt\n        val leftMedianBigDecimal\
    \ = leftMedian.toBigDecimal\n        val rightMedianBigDecimal = rightMedian.toBigDecimal\n\
    \        val leftMedianBigDecimal = leftMedian.toBigDecimal\n        val rightMedianBigDecimal\
    \ = rightMedian.toBigDecimal\n        val leftMedianBigDecimal = leftMedian.toBigDecimal\n\
    \        val rightMedianBigDecimal = rightMedian.toBigDecimal\n        val leftMedianBigDecimal\
    \ = leftMedian.toBigDecimal\n        val rightMedianBigDecimal = rightMedian.toBigDecimal\n\
    \        val leftMedianBigDecimal = leftMedian.toBigDecimal\n        val rightMedianBigDecimal\
    \ = rightMedian.toBigDecimal\n        val leftMedianBigDecimal = leftMedian.toBigDecimal\n\
    \        val rightMedianBigDecimal = rightMedian.toBigDecimal\n        val leftMedianBigDecimal\
    \ = leftMedian.toBigDecimal\n        val rightMedianBigDecimal = rightMedian.toBigDecimal\n\
    \        val leftMedianBigDecimal = leftMedian.toBigDecimal\n        val rightMedianBigDecimal\
    \ = rightMedian.toBigDecimal\n        val leftMedianBigDecimal = leftMedian.toBigDecimal\n\
    \        val rightMedianBigDecimal = rightMedian.toBigDecimal\n        val leftMedianBigDecimal\
    \ = leftMedian.toBigDecimal\n        val rightMedianBigDecimal = rightMedian.toBigDecimal\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6skls4j5.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mleftMedianBigDecimal\e[0m\
    \ = leftMedian.toBigDecimal\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mleftMedianBigDecimal is already defined as \e[33mvalue\e[0m\
    \ \e[35mleftMedianBigDecimal\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6skls4j5.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mrightMedianBigDecimal\e\
    [0m = rightMedian.toBigDecimal\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrightMedianBigDecimal is already defined as \e[33mvalue\e\
    [0m \e[35mrightMedianBigDecimal\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6skls4j5.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mleftMedianBigDecimal\e[0m\
    \ = leftMedian.toBigDecimal\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mleftMedianBigDecimal is already defined as \e[33mvalue\e[0m\
    \ \e[35mleftMedianBigDecimal\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6skls4j5.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mrightMedianBigDecimal\e\
    [0m = rightMedian.toBigDecimal\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrightMedianBigDecimal is already defined as \e[33mvalue\e\
    [0m \e[35mrightMedianBigDecimal\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6skls4j5.scala:33:12 -----------------"
  stdout: ''
  timestamp: 1659792527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.head\n        val h = (n - 1) / 2\n        val i = h + 1\n      \
    \  val j = n - 1\n        val m1 = if (i < j) l.apply(i) else l.apply(j)\n   \
    \     val m2 = if (i < j) l.apply(j) else l.apply(i)\n        val m3 = if (i <\
    \ j) l.apply(i) else l.apply(j)\n        val m4 = if (i < j) l.apply(j) else l.apply(i)\n\
    \        val m5 = if (i < j) l.apply(j) else l.apply(i)\n        val m6 = if (i\
    \ < j) l.apply(j) else l.apply(i)\n        val m7 = if (i < j) l.apply(j) else\
    \ l.apply(i)\n        val m8 = if (i < j) l.apply(j) else l.apply(i)\n       \
    \ val m9 = if (i < j) l.apply(j) else l.apply(i)\n        val m10 = if (i < j)\
    \ l.apply(j) else l.apply(i)\n        val m11 = if (i < j) l.apply(j) else l.apply(i)\n\
    \        val m12 = if (i < j) l.apply(j) else l.apply(i)\n        val m13 = if\
    \ (i < j) l.apply(j) else l.apply(i)\n        val m14 = if (i < j) l.apply(j)\
    \ else l.apply(i)\n        val m15 = if (i < j) l.apply(j) else l.apply(i)\n \
    \       val m16 = if (i < j) l.apply(j) else l.apply(i)\n        val m17 = if\
    \ (i < j) l.apply(j) else l.apply(i)\n        val m18 = if (i < j) l.apply(j)\
    \ else l.apply(i)\n        val m19 = if (i < j) l.apply(j) else l.apply(i)\n \
    \       val m20 = if (i < j) l.apply(j) else l.apply(i)\n        val m21 = if\
    \ (i < j) l.apply(j) else l.apply(i)\n        val m22 = if (i < j) l.apply(j)\
    \ else l.apply(i)\n        val m23 = if (i < j) l.apply(j) else l.apply(i)\n \
    \       val m24 = if (i < j) l.apply(j) else l.apply(i)\n        val m25 = if\
    \ (i < j) l.apply(j) else l.apply(i)\n        val m26 = if (i < j) l.apply(j)\
    \ else l.apply(i)\n        val m27 = if (i < j) l.apply(j) else l.apply(i)\n \
    \       val m28 = if (i < j) l.apply(j) else l.apply(i)\n        val m29 = if\
    \ (i < j) l.apply(j) else l.apply(i)\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp633ialb.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.toSeq.sortBy(_).take(n / 2)\n        val m1 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m2 = l.toSeq.sortBy(_).take(n / 2)\n        val m3 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m4 = l.toSeq.sortBy(_).take(n / 2)\n        val m5 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m6 = l.toSeq.sortBy(_).take(n / 2)\n        val m7 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m8 = l.toSeq.sortBy(_).take(n / 2)\n        val m9 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m10 = l.toSeq.sortBy(_).take(n / 2)\n        val m11 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m12 = l.toSeq.sortBy(_).take(n / 2)\n        val m13 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m14 = l.toSeq.sortBy(_).take(n / 2)\n        val m15 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m16 = l.toSeq.sortBy(_).take(n / 2)\n        val m17 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m18 = l.toSeq.sortBy(_).take(n / 2)\n        val m19 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m20 = l.toSeq.sortBy(_).take(n / 2)\n        val m21 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m22 = l.toSeq.sortBy(_).take(n / 2)\n        val m23 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m24 = l.toSeq.sortBy(_).take(n / 2)\n        val m25 = l.toSeq.sortBy(_).drop(n\
    \ / 2)\n        val m26 = l.toSeq.sortBy(_).take(n / 2)\n        val m27 = l.toSeq\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpeyjbnzgv.scala:11:31 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.toSeq.sortBy(_).take(n\
    \ / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$1 of expanded function:\n\e[31m\
    \   |\e[0m   _$1 => l.toSeq.sortBy(_$1).take(n / 2).\n\e[31m\e[31m-- Error: /tmp/tmpeyjbnzgv.scala:11:33\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m11 |\e[0m       \
    \ \e[33mval\e[0m \e[36mm\e[0m = l.toSeq.sortBy(_).take(n / \e[31m2\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmpeyjbnzgv.scala:12:32 -----------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mm1\e[0m = l.toSeq.sortBy(_).drop(n\
    \ / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$2 of expanded function:\n\e[31m\
    \   |\e[0m   _$2 => l.toSeq.sortBy(_$2).drop(n / 2).\n\e[31m\e[31m-- Error: /tmp/tmpeyjbnzgv.scala:12:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m12 |\e[0m       \
    \ \e[33mval\e[0m \e[36mm1\e[0m = l.toSeq.sortBy(_).drop(n / \e[31m2\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmpeyjbnzgv.scala:13:32 -----------------------------\e[0m\e\
    [0m\n\e[31m13"
  stdout: ''
  timestamp: 1659792527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.head\n        val median = (m + n) / 2\n        val half = n / 2\n\
    \        val left = new Array[Long](half)\n        val right = new Array[Long](half)\n\
    \        val leftSum = 0\n        val rightSum = 0\n        val leftCount = 0\n\
    \        val rightCount = 0\n        l.foreach { x =>\n            if (x < median)\
    \ {\n                leftCount += 1\n                leftSum += x\n          \
    \  } else {\n                rightCount += 1\n                rightSum += x\n\
    \            }\n        }\n        if (leftCount > rightCount) {\n           \
    \ median\n        } else {\n            (median + leftSum + rightSum) / 3\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9wrc6hav.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                leftCount += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean leftCount.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp9wrc6hav.scala:23:24 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                leftSum += x\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value += is not a member\
    \ of Int - did you mean leftSum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9wrc6hav.scala:25:27\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                rightCount\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m           value += is not a member of Int - did you mean rightCount.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9wrc6hav.scala:26:25 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                rightSum += x\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value += is not\
    \ a member of Int - did you mean rightSum.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659792527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftHalf = sorted.drop(mid)\n        val rightHalf = sorted.takeRight(mid)\n\
    \        val medianOfLeftHalf = median(leftHalf)\n        val medianOfRightHalf\
    \ = median(rightHalf)\n        val medianOfBothHalfs = median(leftHalf ++ rightHalf)\n\
    \        val medianOfBothHalfsIfBothHalfsAreEven = if (medianOfLeftHalf == medianOfRightHalf)\
    \ medianOfBothHalfs else if (medianOfLeftHalf == medianOfBothHalfs) medianOfLeftHalf\
    \ else medianOfBothHalfs\n        val medianOfBothHalfsIfBothHalfsAreOdd = if\
    \ (medianOfLeftHalf == medianOfBothHalfs) medianOfRightHalf else medianOfBothHalfs\n\
    \        val medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOdd = if (medianOfLeftHalf\
    \ == medianOfBothHalfs) medianOfBothHalfsIfBothHalfsAreEven else if (medianOfLeftHalf\
    \ == medianOfRightHalf) medianOfBothHalfsIfBothHalfsAreOdd else medianOfBothHalfs\n\
    \        val medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOddIfBothHalfsAreEven\
    \ = if (medianOfLeftHalf == medianOfBothHalfsIfBothHalfsAreEven) medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOdd\
    \ else if (medianOfLeftHalf == medianOfBothHalfsIfBothHalfsAreOdd) medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOdd\
    \ else medianOfBothHalfsIfBothHalfsAreEven\n        val medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOddIfBothHalfsAreEvenIfBothHalfsAreOdd\
    \ = if (medianOfLeftHalf == medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOdd)\
    \ medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOddIfBothHalfsAreEven else\
    \ if (medianOfLeftHalf == medianOfBothHalfsIfBothHalfsAreOddIfBothHalfsAreEven)\
    \ medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOddIfBothHalf\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpkdd5bml5.scala:15:31 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedianOfLeftHalf\e[0m =\
    \ median(leftHalf)\n\e[31m\e[31m   |\e[0m                               ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               \e[33mvalue\e[0m \e[35mmedian\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpkdd5bml5.scala:16:32 -----------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mmedianOfRightHalf\e[0m = median(rightHalf)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                \e[33mvalue\e[0m \e[35mmedian\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpkdd5bml5.scala:17:32\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e\
    [0m \e[36mmedianOfBothHalfs\e[0m = median(leftHalf ++ rightHalf)\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                         \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkdd5bml5.scala:22:334\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmedianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOddIfBothHalfsAreEvenIfBothHalfsAreOdd\e\
    [0m = \e[33mif\e[0m (medianOfLeftHalf == medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOdd)\
    \ medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOddIfBothHalfsAreEven \e[33melse\e\
    [0m \e[33mif\e[0m (medianOfLeftHalf == medianOfBothHalfsIfBothHalfsAreOddIfBothHalfsAreEven)\
    \ medianOfBothHalfsIfBothHalfsAreEvenIfBothHalfsAreOddIfBothHalf\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                            \
    \                                   "
  stdout: ''
  timestamp: 1659792527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val midVal\
    \ = median(left)\n            val rightVal = median(right)\n            val median\
    \ = midVal + rightVal\n            median.toFloat\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp998p1j0q.scala:18:25 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = midVal\
    \ + rightVal\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35mmidVal\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ m1 = l.take(mid)\n            val m2 = l.drop(mid)\n            val m = (m1\
    \ + m2).sortWith(_ < _)\n            val m1 = m.head\n            val m2 = m.last\n\
    \            (m1 + m2) / 2.0f\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp__ndrmip.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mm1\e[0m = m.head\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm1 is already\
    \ defined as \e[33mvalue\e[0m \e[35mm1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp__ndrmip.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mm2\e[0m = m.last\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm2 is already\
    \ defined as \e[33mvalue\e[0m \e[35mm2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp__ndrmip.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mm\e[0m = (m1 + m2).sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp__ndrmip.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            (m1 + m2) / \e\
    [31m2.0f\e[0m\n\e[31m\e[31m   |\e[0m             ^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0"
  stdout: ''
  timestamp: 1659792528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val left = sorted.drop(mid)\n        val right = sorted.take(mid)\n \
    \       val medianLeft = median(left)\n        val medianRight = median(right)\n\
    \        val medianMedian = median(List(medianLeft, medianRight))\n        val\
    \ medianMedianFloat = medianMedian.toFloat\n        val medianMedianInt = medianMedianFloat.toInt\n\
    \        val medianMedianLong = medianMedianInt.toLong\n        val medianMedianDouble\
    \ = medianMedianLong.toDouble\n        val medianMedianString = medianMedianDouble.toString\n\
    \        val medianMedianBoolean = medianMedianString.toBoolean\n        val medianMedianNull\
    \ = medianMedianBoolean.asInstanceOf[Null]\n        medianMedianNull\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmps65d63_k.scala:15:25 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedianLeft\e[0m = median(left)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                      \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmps65d63_k.scala:16:26 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmedianRight\e[0m = median(right)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmps65d63_k.scala:17:27 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmedianMedian\e[0m = median(List(medianLeft,\
    \ medianRight))\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           \e[33mvalue\e[0m \e[35mmedian\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659792526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = median(left) + median(right)\n            median.toFloat\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp58umtwse.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp58umtwse.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).sum\
    \ / mid\n        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp3s929jv.scala:16)\n\tat Problem.main(tmpp3s929jv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftHalf = sorted.drop(mid)\n        val rightHalf = sorted.takeRight(mid)\n\
    \        val medianOfLeftHalf = median(leftHalf)\n        val medianOfRightHalf\
    \ = median(rightHalf)\n        val medianOfBothHalfs = median(leftHalf ++ rightHalf)\n\
    \        val medianOfBothHalfsIfBothHalfsAreInOrder = if (leftHalf.last < rightHalf.last)\
    \ medianOfBothHalfs else medianOfBothHalfs\n        val medianOfBothHalfsIfLeftHalfIsInOrder\
    \ = if (leftHalf.last < medianOfLeftHalf) medianOfBothHalfs else medianOfBothHalfs\n\
    \        val medianOfBothHalfsIfRightHalfIsInOrder = if (rightHalf.last < medianOfRightHalf)\
    \ medianOfBothHalfs else medianOfBothHalfs\n        val medianOfBothHalfsIfBothHalfsAreInOrderIfLeftHalfIsInOrder\
    \ = if (leftHalf.last < medianOfLeftHalf && rightHalf.last < medianOfRightHalf)\
    \ medianOfBothHalfsIfBothHalfsAreInOrder else medianOfBothHalfsIfLeftHalfIsInOrder\n\
    \        val medianOfBothHalfsIfBothHalfsAreInOrderIfRightHalfIsInOrder = if (rightHalf.last\
    \ < medianOfRightHalf && leftHalf.last < medianOfLeftHalf) medianOfBothHalfsIfBothHalfsAreInOrder\
    \ else medianOfBothHalfsIfRightHalfIsInOrder\n        val medianOfBothHalfsIfBothHalfsAreInOrderIfBothHalfsAreInOrder\
    \ = if (leftHalf.last < medianOfLeftHalf && rightHalf.last < medianOfRightHalf\
    \ && medianOfBothHalfsIfBothHalfsAreInOrder != medianOfBothHalfs) medianOfBothHalfsIfBothHalfsAreInOrder\
    \ else medianOfBothHalfsIfBothHalfsAreInOrderIfLeftHalfIsInOrder\n        val\
    \ medianOfBothHalfsIfBothHalfsAreInOrderIfBothHalfsAreInOrderIfRightHalfIsInOrder\
    \ = if (rightHalf.last < medianOfRightHalf && leftHalf.last < medianOfLeftHalf\
    \ && medianOfBothHalfsIfBothHalfsAreInOrder != medianOfBothHalfs) medianOfBothHalfsIf\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmppbogyaty.scala:15:31 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedianOfLeftHalf\e[0m =\
    \ median(leftHalf)\n\e[31m\e[31m   |\e[0m                               ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               \e[33mvalue\e[0m \e[35mmedian\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmppbogyaty.scala:16:32 -----------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mmedianOfRightHalf\e[0m = median(rightHalf)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                \e[33mvalue\e[0m \e[35mmedian\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmppbogyaty.scala:17:32\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e\
    [0m \e[36mmedianOfBothHalfs\e[0m = median(leftHalf ++ rightHalf)\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                         \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppbogyaty.scala:24:233\
    \ -----------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mmedianOfBothHalfsIfBothHalfsAreInOrderIfBothHalfsAreInOrderIfRightHalfIsInOrder\e\
    [0m = \e[33mif\e[0m (rightHalf.last < medianOfRightHalf && leftHalf.last < medianOfLeftHalf\
    \ && medianOfBothHalfsIfBothHalfsAreInOrder != medianOfBothHalfs) medianOfBothHalfsIf\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                         ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                                Not found: medianOfBothHalfs"
  stdout: ''
  timestamp: 1659792527
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val m1 = sorted.take(mid)\n     \
    \   val m2 = sorted.drop(mid)\n        val median = (m1.sum + m2.sum) / 2\n  \
    \      median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn_2heno7.scala:18)\n\tat Problem.main(tmpn_2heno7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.min\n        val h = l.max\n        val mid = (m + h) / 2\n     \
    \   val m1 = l.filter(_ < mid)\n        val m2 = l.filter(_ >= mid)\n        val\
    \ m3 = l.filter(_ == mid)\n        val m4 = l.filter(_ > mid)\n        val m5\
    \ = l.filter(_ < h)\n        val m6 = l.filter(_ >= h)\n        val m7 = l.filter(_\
    \ == h)\n        val m8 = l.filter(_ > h)\n        val m9 = l.filter(_ < n)\n\
    \        val m10 = l.filter(_ >= n)\n        val m11 = l.filter(_ == n)\n    \
    \    val m12 = l.filter(_ > n)\n        val m13 = l.filter(_ < m)\n        val\
    \ m14 = l.filter(_ >= m)\n        val m15 = l.filter(_ == m)\n        val m16\
    \ = l.filter(_ > m)\n        val m17 = l.filter(_ < mid)\n        val m18 = l.filter(_\
    \ >= mid)\n        val m19 = l.filter(_ == mid)\n        val m20 = l.filter(_\
    \ > mid)\n        val m21 = l.filter(_ < h)\n        val m22 = l.filter(_ >= h)\n\
    \        val m23 = l.filter(_ == h)\n        val m24 = l.filter(_ > h)\n     \
    \   val m25 = l.filter(_ < n)\n        val m26 = l.filter(_ >= n)\n        val\
    \ m27 = l.filter(_ == n)\n        val m28 = l.filter(_ > n)\n        val m29 =\
    \ l.filter(_ < m)\n        val m30 = l.filter(_ >= m)\n        val m31 = l.filter(_\
    \ == m)\n        val m32 = l.filter(_ > m)\n        val m33 = l.filter(_ < mid)\n\
    \        val m34 = l.filter(_ >= mid)\n        val m35 = l.filter(_ == mid)\n\
    \        val m36 = l.filter(_ > mid)\n        val m37 = l.filter(_ < h)\n    \
    \    val m38 = l.filter(_ >= h)\n        val m39 = l.filter(_ == h)\n        val\
    \ m40 = l.filter(_ > h)\n        val m41 = l.filter(_ < n)\n        val m42 =\
    \ l.filter(_ >= n)\n        val m43 = l.filter(_ == n)\n        val m44 = l.filter(_\
    \ > n)\n        val m45\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5fz_gnv3.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5fz_gnv3.scala:59:5 ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792528
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val half = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.last\n\
    \        else (sorted take half).last + (sorted drop half).last\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcjnejph3.scala:16)\n\tat Problem.main(tmpcjnejph3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792528
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.max\n        val median = (m + n) / 2\n        val lower = l.filter(_\
    \ < median).length\n        val upper = l.filter(_ > median).length\n        if\
    \ (lower + upper == 0) median else (median + median) / 2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxtbbg95v.scala:18)\n\tat Problem.main(tmpxtbbg95v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left + right).sortWith(_ < _).last\n        median.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdy_brrji.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sortWith(_\
    \ < _).last\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue + is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        if (n < 2) 0f\n        else {\n            val lower\
    \ = l.take(half)\n            val upper = l.drop(half)\n            val median\
    \ = (lower + upper) / 2\n            median.toFloat\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdp7u0a0a.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (lower\
    \ + upper) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = (left + right).sorted\n            val medianIndex = median.indexOf(0)\n \
    \           median(medianIndex)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpommgu7bn.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left\
    \ + right).sorted\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        if (n < 3) {\n            l.head\n        } else\
    \ if (n % 2 == 0) {\n            l.head\n        } else {\n            val m =\
    \ (l.head + l.last) / 2\n            val left = l.take(half)\n            val\
    \ right = l.drop(half)\n            val m1 = median(left)\n            val m2\
    \ = median(right)\n            if (m1 < m) m1 else m2\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphomt9xa1.scala:27)\n\tat Problem.main(tmphomt9xa1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.min\n        val r = l.max\n        val mid = (m + r) / 2\n     \
    \   val m1 = l.filter(_ < mid).length\n        val m2 = l.filter(_ >= mid).length\n\
    \        if (m1 < m) m1 else m2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeps36y0m.scala:20)\n\tat Problem.main(tmpeps36y0m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqx87r4q_.scala:16)\n\tat Problem.main(tmpqx87r4q_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = median(left) + median(right)\n            val medianFloat = median.toFloat\n\
    \            medianFloat\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp4xt6bsfm.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp4xt6bsfm.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = median(left) + median(right)\n            val medianFloat = median.toFloat\n\
    \            if (medianFloat == 0.0f) 0.0f\n            else medianFloat\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpx7jo00et.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpx7jo00et.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = new Array[Long](n)\n        val right =\
    \ new Array[Long](n)\n        var i = 0\n        var j = 0\n        while (i <\
    \ n) {\n            while (j < n) {\n                if (j == mid) {\n       \
    \             right(j) = l(j)\n                    j += 1\n                } else\
    \ {\n                    left(i) = l(j)\n                    i += 1\n        \
    \        }\n            }\n            val leftMedian = median(left)\n       \
    \     val rightMedian = median(right)\n            if (leftMedian > rightMedian)\
    \ {\n                return leftMedian\n            } else {\n               \
    \ return rightMedian\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpei6w6d4l.scala:26:36\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e\
    [36mleftMedian\e[0m = median(left)\n\e[31m\e[31m   |\e[0m                    \
    \                ^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \  Found:    (left : Array[Long])\n\e[31m   |\e[0m                           \
    \         Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpei6w6d4l.scala:27:37 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m            \e[33mval\e[0m \e[36mrightMedian\e[0m = median(right)\n\e\
    [31m\e[31m   |\e[0m                                     ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                     Found:    (right : Array[Long])\n\e[31m\
    \   |\e[0m                                     Required: List[Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659792529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val m1 = sorted.take(mid)\n     \
    \   val m2 = sorted.drop(mid)\n        val median = (m1.sum + m2.sum) / 2\n  \
    \      median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp19sgx3jv.scala:18)\n\tat Problem.main(tmp19sgx3jv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.toList.sortWith(_ < _).length / 2\n        if (m == 0) 0f else l.toList.sortWith(_\
    \ < _).last\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv9tb74uh.scala:15)\n\tat Problem.main(tmpv9tb74uh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqx87r4q_.scala:16)\n\tat Problem.main(tmpqx87r4q_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.slice(0, half)\n        val right =\
    \ l.slice(half, n)\n        val median = (left ++ right).sortWith(_ < _).head\n\
    \        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb754hsww.scala:18)\n\tat Problem.main(tmpb754hsww.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ m1 = l.take(mid)\n            val m2 = l.drop(mid)\n            val m = (m1\
    \ + m2).sorted\n            val midPoint = m.length / 2\n            val median\
    \ = m.take(midPoint)\n            median.toFloat\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxn6vbkwy.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mm\e[0m = (m1 + m2).sorted\n\
    \e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0mvalue + is\
    \ not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.max\n        val m1 = l.min\n        val m2 = l.sum / n\n       \
    \ val m3 = l.sum / n\n        val m4 = l.sum / n\n        val m5 = l.sum / n\n\
    \        val m6 = l.sum / n\n        val m7 = l.sum / n\n        val m8 = l.sum\
    \ / n\n        val m9 = l.sum / n\n        val m10 = l.sum / n\n        val m11\
    \ = l.sum / n\n        val m12 = l.sum / n\n        val m13 = l.sum / n\n    \
    \    val m14 = l.sum / n\n        val m15 = l.sum / n\n        val m16 = l.sum\
    \ / n\n        val m17 = l.sum / n\n        val m18 = l.sum / n\n        val m19\
    \ = l.sum / n\n        val m20 = l.sum / n\n        val m21 = l.sum / n\n    \
    \    val m22 = l.sum / n\n        val m23 = l.sum / n\n        val m24 = l.sum\
    \ / n\n        val m25 = l.sum / n\n        val m26 = l.sum / n\n        val m27\
    \ = l.sum / n\n        val m28 = l.sum / n\n        val m29 = l.sum / n\n    \
    \    val m30 = l.sum / n\n        val m31 = l.sum / n\n        val m32 = l.sum\
    \ / n\n        val m33 = l.sum / n\n        val m34 = l.sum / n\n        val m35\
    \ = l.sum / n\n        val m36 = l.sum / n\n        val m37 = l.sum / n\n    \
    \    val m38 = l.sum / n\n        val m39 = l.sum / n\n        val m40 = l.sum\
    \ / n\n        val m41 = l.sum / n\n        val m42 = l.sum / n\n        val m43\
    \ = l.sum / n\n        val m44 = l.sum / n\n        val m45 = l.sum / n\n    \
    \    val m46 = l.sum / n\n        val m47 = l.sum / n\n        val m48 = l.sum\
    \ / n\n        val m49 = l.sum / n\n        val m50 = l.sum / n\n        val m51\
    \ = l.sum / n\n        val m52 = l.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdj26vfpn.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdj26vfpn.scala:64:5 ---------------------\e[0m\e[0m\n\e[31m64\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val mid = left.length / 2\n        val median = if (left.length == 0)\
    \ 0f else left.take(mid).sum / mid\n        val median2 = if (right.length ==\
    \ 0) 0f else right.take(mid).sum / mid\n        val median3 = if (left.length\
    \ == 0 || right.length == 0) 0f else (left + right).take(mid).sum / mid\n    \
    \    val median4 = if (left.length == 0 || right.length == 0) 0f else (left +\
    \ right).take(half).sum / half\n        val median5 = if (left.length == 0 ||\
    \ right.length == 0) 0f else (left + right).take(n / 2).sum / n\n        val median6\
    \ = if (left.length == 0 || right.length == 0) 0f else (left + right).take(n /\
    \ 4).sum / n\n        val median7 = if (left.length == 0 || right.length == 0)\
    \ 0f else (left + right).take(n / 8).sum / n\n        val median8 = if (left.length\
    \ == 0 || right.length == 0) 0f else (left + right).take(n / 16).sum / n\n   \
    \     val median9 = if (left.length == 0 || right.length == 0) 0f else (left +\
    \ right).take(n / 32).sum / n\n        val median10 = if (left.length == 0 ||\
    \ right.length == 0) 0f else (left + right).take(n / 64).sum / n\n        val\
    \ median11 = if (left.length == 0 || right.length == 0) 0f else (left + right).take(n\
    \ / 128).sum / n\n        val median12 = if (left.length == 0 || right.length\
    \ == 0) 0f else (left + right).take(n / 256).sum / n\n        val median13 = if\
    \ (left.length == 0 || right.length == 0) 0f else (left + right).take(n / 512).sum\
    \ / n\n        val median14 = if (left.length == 0 || right.length == 0) 0f else\
    \ (left + right).take(n / 1024).sum / n\n        val median15 = if (left.length\
    \ == 0 || right.length == 0) 0f else (left + right).take(n / 2048).sum / n\n \
    \       val median16 = if (left.length == 0 || right.length == 0) 0f else (left\
    \ + right).take(n / 4096).sum / n\n        val median17 = if (left.length == 0\
    \ || right.length == \n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyvubouh0.scala:31:62 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmedian17\e[0m = \e[33mif\e\
    [0m (left.length == \e[31m0\e[0m || right.length == \n\e[31m\e[31m   |\e[0m  \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyvubouh0.scala:17:79\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mmedian3\e[0m = \e[33mif\e[0m (left.length == \e[31m0\e[0m || right.length\
    \ == \e[31m0\e[0m) \e[31m0f\e[0m \e[33melse\e[0m (left + right).take(mid).sum\
    \ / mid\n\e[31m\e[31m   |\e[0m                                               \
    \                           ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of List[Long], but could be made available as an extension method.\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpyvubouh0.scala:18:79 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmedian4\e[0m = \e[33mif\e\
    [0m (left.length == \e[31m0\e[0m || right.length == \e[31m0\e[0m) \e[31m0f\e[0m\
    \ \e[33melse\e[0m (left + right).take(half).sum / half\n\e[31m\e[31m   |\e[0m\
    \                                                                          ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1659792532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val half = sorted.length / 2\n        if (sorted.length % 2 == 0) {\n\
    \            val median = (sorted take half).sum / 2\n            val left = (sorted\
    \ drop half).sum / 2\n            val right = (sorted drop half).sum / 2\n   \
    \         val median2 = left + right\n            val median3 = left + right\n\
    \            val median4 = left + right\n            val median5 = left + right\n\
    \            val median6 = left + right\n            val median7 = left + right\n\
    \            val median8 = left + right\n            val median9 = left + right\n\
    \            val median10 = left + right\n            val median11 = left + right\n\
    \            val median12 = left + right\n            val median13 = left + right\n\
    \            val median14 = left + right\n            val median15 = left + right\n\
    \            val median16 = left + right\n            val median17 = left + right\n\
    \            val median18 = left + right\n            val median19 = left + right\n\
    \            val median20 = left + right\n            val median21 = left + right\n\
    \            val median22 = left + right\n            val median23 = left + right\n\
    \            val median24 = left + right\n            val median25 = left + right\n\
    \            val median26 = left + right\n            val median27 = left + right\n\
    \            val median28 = left + right\n            val median29 = left + right\n\
    \            val median30 = left + right\n            val median31 = left + right\n\
    \            val median32 = left + right\n            val median33 = left + right\n\
    \            val median34 = left + right\n            val median35 = left + right\n\
    \            val median36 = left + right\n            val median37 = left + right\n\
    \            val median38 = left + right\n            val median39 = left + right\n\
    \            val median40 = left + right\n            val median41 = left + right\n\
    \            val median42 = left + right\n            val median43 = left + right\n\
    \            val median44 = left + right\n            val median45 = left + right\n\
    \            val median46 = left + right\n            val median47 = left + right\n\
    \            val median48 = left + right\n            val median49 = left + right\n\
    \            val median50 = left + right\n            val median51 = left + right\n\
    \            val median52 = left + right\n            val median53 = left + right\n\
    \            val median54 = left + right\n            val median55 = left + right\n\
    \            val median56 = left + right\n            val median57 = left + right\n\
    \            val median58 = left + right\n            val median59 = left + \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_4703qyo.scala:73:33 ---------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m            \e[33mval\e[0m \e[36mmedian59\e[0m = left\
    \ + \n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e\
    [0m                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_4703qyo.scala:84:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m84 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp_4703qyo.scala:83:1 ---------------------\e[0m\e[0m\n\
    \e[31m83 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp_4703qyo.scala:75:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m75 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.toList.sortWith(_ < _).length\n        val half = m / 2\n       \
    \ if (half == 0) l.toList.sortWith(_ < _).head\n        else if (half == 1) l.toList.sortWith(_\
    \ < _).last\n        else l.toList.sortWith(_ < _).span(_ < l.toList.sortWith(_\
    \ < _).head).last\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa23we89l.scala:15:13\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m l.toList.sortWith(_\
    \ < _).span(_ < l.toList.sortWith(_ < _).head).last\n\e[31m\e[31m   |\e[0m   \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Tuple.Last[(List[Long], List[Long])]\n\
    \e[31m   |\e[0m             Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val m1 = sorted.take(mid)\n     \
    \   val m2 = sorted.drop(mid)\n        val median = (m1.sum + m2.sum) / 2\n  \
    \      median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp19sgx3jv.scala:18)\n\tat Problem.main(tmp19sgx3jv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val middle = sorted.length / 2\n        val median = sorted.take(middle).last\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg9iy9h7l.scala:16)\n\tat Problem.main(tmpg9iy9h7l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else sorted.apply(mid - 1)\n        val low = sorted.take(mid)\n\
    \        val high = sorted.drop(mid)\n        val medianOfHigh = median(high)\n\
    \        val medianOfLow = median(low)\n        val medianOfBoth = median(sorted\
    \ ++ List(medianOfLow, medianOfHigh))\n        medianOfBoth\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpnhakxvgh.scala:15:27 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedianOfHigh\e[0m = median(high)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                          \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpnhakxvgh.scala:16:26 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmedianOfLow\e[0m = median(low)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpnhakxvgh.scala:17:27 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmedianOfBoth\e[0m = median(sorted\
    \ ++ List(medianOfLow, medianOfHigh))\n\e[31m\e[31m   |\e[0m                 \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m                           \e[33mvalue\e\
    [0m \e[35mmedian\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid, n)\n          \
    \  val m = (left + right).sortWith(_ < _)\n            val median = m.length /\
    \ 2\n            val medianValue = m.last\n            medianValue\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn2mnlb5c.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mm\e[0m = (left + right).sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                     ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = l.length / 2\n     \
    \       val left = l.take(mid)\n            val right = l.drop(mid)\n        \
    \    val midVal = median(right)\n            val leftVal = median(left)\n    \
    \        val median = midVal + leftVal\n            median\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5lnriic6.scala:18:25 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = midVal\
    \ + leftVal\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35mmidVal\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val left = sorted.drop(mid)\n        val right = sorted.takeRight(mid)\n\
    \        if (left.isEmpty) median\n        else if (right.isEmpty) median\n  \
    \      else if (left.last > median) median\n        else median\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyc2xgfho.scala:21)\n\tat Problem.main(tmpyc2xgfho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = median(left) + median(right)\n            val midPoint = median(left)\
    \ + median(right)\n            val medianPoint = median(l)\n            if (midPoint\
    \ < medianPoint) mid\n            else median\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxrykgp26.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpxrykgp26.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftMedian = sorted.drop(mid)\n        val rightMedian = sorted.takeRight(mid)\n\
    \        val leftMedianMedian = leftMedian.last\n        val rightMedianMedian\
    \ = rightMedian.last\n        val leftMedianMedianMedian = leftMedianMedian.last\n\
    \        val rightMedianMedianMedian = rightMedianMedian.last\n        val leftMedianMedianMedianMedian\
    \ = leftMedianMedianMedian.last\n        val rightMedianMedianMedianMedian = rightMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedian = leftMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedian = rightMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedian = leftMedianMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedianMedian = rightMedianMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedianMedian = leftMedianMedianMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedianMedian = rightMedianMedianMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedianMedian = leftMedianMedianMedianMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedianMedianMedian = rightMedianMedianMedianMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedianMedian = leftMedianMedianMedianMedianMedianMedianMedian.last\n\
    \        val rightMedianMedianMedianMedianMedianMedianMedian = rightMedianMedianMedianMedianMedianMedianMedian.last\n\
    \        val leftMedianMedianMedianMedianMedianMedianMedian = leftMedianMedianMedianMe\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgpzkumiz.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mrightMedianMedianMedianMedianMedianMedian\e\
    [0m = rightMedianMedianMedianMedianMedianMedian.last\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrightMedianMedianMedianMedianMedianMedian is already defined\
    \ as \e[33mvalue\e[0m \e[35mrightMedianMedianMedianMedianMedianMedian\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgpzkumiz.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mleftMedianMedianMedianMedianMedianMedianMedian\e\
    [0m = leftMedianMedianMedianMedianMedianMedianMedian.last\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mleftMedianMedianMedianMedianMedianMedianMedian is already\
    \ defined as \e[33mvalue\e[0m \e[35mleftMedianMedianMedianMedianMedianMedianMedian\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgpzkumiz.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mleftMedianMedianMedianMedianMedianMedianMedian\e\
    [0m = leftMedianMedianMedianMedianMedianMedianMedian.last\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mleftMedianMedianMedianMedianMedianMedianMedian is already\
    \ defined as \e[33mvalue\e[0m \e[35mleftMedianMedianMedianMedianMedianMedianMedian\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgpzkumiz.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0"
  stdout: ''
  timestamp: 1659792531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sortWith(_\
    \ < _)\n        val mid = sorted.length / 2\n        if (sorted.length % 2 ==\
    \ 0) sorted.last\n        else sorted.last.toFloat + sorted.last.toFloat / 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj0q9z91b.scala:16)\n\tat Problem.main(tmpj0q9z91b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = median(left) + median(right)\n            median\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptg4e296w.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n <= 1) 0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ midVal = median(left)\n            val rightVal = median(right)\n          \
    \  val median = midVal + rightVal\n            median\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8gawjb4k.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp8gawjb4k.scala:18:25 ---------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = midVal + rightVal\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mmidVal\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = median(left) + median(right)\n            val diff = median(left) - median(right)\n\
    \            if (diff < 0.0) median\n            else median + diff\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzprxwv8n.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.max\n        val median = (m + n) / 2\n        val half = if (n %\
    \ 2 == 0) n / 2 else n / 2 - 1\n        val median2 = if (half == 0) m else (m\
    \ + n) / 2 - 1\n        val median3 = if (half == 0) m else (m + n) / 2 - 1\n\
    \        val median4 = if (half == 0) m else (m + n) / 2 - 1\n        val median5\
    \ = if (half == 0) m else (m + n) / 2 - 1\n        val median6 = if (half == 0)\
    \ m else (m + n) / 2 - 1\n        val median7 = if (half == 0) m else (m + n)\
    \ / 2 - 1\n        val median8 = if (half == 0) m else (m + n) / 2 - 1\n     \
    \   val median9 = if (half == 0) m else (m + n) / 2 - 1\n        val median10\
    \ = if (half == 0) m else (m + n) / 2 - 1\n        val median11 = if (half ==\
    \ 0) m else (m + n) / 2 - 1\n        val median12 = if (half == 0) m else (m +\
    \ n) / 2 - 1\n        val median13 = if (half == 0) m else (m + n) / 2 - 1\n \
    \       val median14 = if (half == 0) m else (m + n) / 2 - 1\n        val median15\
    \ = if (half == 0) m else (m + n) / 2 - 1\n        val median16 = if (half ==\
    \ 0) m else (m + n) / 2 - 1\n        val median17 = if (half == 0) m else (m +\
    \ n) / 2 - 1\n        val median18 = if (half == 0) m else (m + n) / 2 - 1\n \
    \       val median19 = if (half == 0) m else (m + n) / 2 - 1\n        val median20\
    \ = if (half == 0) m else (m + n) / 2 - 1\n        val median21 = if (half ==\
    \ 0) m else (m + n) / 2 - 1\n        val median22 = if (half == 0) m else (m +\
    \ n) / 2 - 1\n        val median23 = if (half == 0) m else (m + n) / 2 - 1\n \
    \       val median24 = if (half == 0) m else (m + n) / 2 - 1\n        val median25\
    \ = if (half == 0) m else (m + n) / 2 - 1\n        val median26 = if (half ==\
    \ 0) m else (m + n) / 2 - 1\n        val median27 = if (half == 0) m else (m +\
    \ n) / 2 - 1\n        val median28 = if (half == 0) m else (m + n) / 2 - 1\n \
    \       \n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmgg4ugvc.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792531
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = (left + right).sorted.last\n            median.toFloat\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwixah90z.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpwixah90z.scala:16:31 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted.last\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = (sorted.head + sorted.last)\
    \ / 2.0\n        val medianIndex = sorted.indexOf(median)\n        if (medianIndex\
    \ == 0) median else (sorted.take(medianIndex).last + sorted.last) / 2.0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_c6wzld9.scala:14:30\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (medianIndex\
    \ == \e[31m0\e[0m) median \e[33melse\e[0m (sorted.take(medianIndex).last + sorted.last)\
    \ / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m                              ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    (median : Double)\n\
    \e[31m   |\e[0m                              Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_c6wzld9.scala:14:42 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (medianIndex == \e[31m0\e[0m) median\
    \ \e[33melse\e[0m (sorted.take(medianIndex).last + sorted.last) / \e[31m2.0\e\
    [0m\n\e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Found:    Double\n\
    \e[31m   |\e[0m                                          Required: Float\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659792532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = (left + right).sorted\n            val midPoint = (left + right).length /\
    \ 2\n            median(midPoint)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkqq9imba.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left\
    \ + right).sorted\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpkqq9imba.scala:17:33 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mmidPoint\e[0m = (left + right).length\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                            ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ m1 = l.slice(0, mid)\n            val m2 = l.slice(mid)\n            val m =\
    \ (m1 + m2).sortWith(_ < _)\n            val midPoint = m.length / 2\n       \
    \     val median = m.slice(0, midPoint)\n            val medianIndex = m.length\
    \ - 1\n            val medianValue = median(medianIndex)\n            val medianIndexValue\
    \ = medianIndex(medianValue)\n            val medianIndexValueFloat = medianIndexValue.toFloat\n\
    \            val medianIndexValueInt = medianIndexValueFloat.toInt\n         \
    \   val medianIndexValueLong = medianIndexValueFloat.toLong\n            val medianIndexValueDouble\
    \ = medianIndexValueFloat.toDouble\n            val medianIndexValueFloat = medianIndexValueFloat.toFloat\n\
    \            val medianIndexValueInt = medianIndexValueFloat.toInt\n         \
    \   val medianIndexValueLong = medianIndexValueFloat.toLong\n            val medianIndexValueDouble\
    \ = medianIndexValueFloat.toDouble\n            val medianIndexValueFloat = medianIndexValueFloat.toFloat\n\
    \            val medianIndexValueInt = medianIndexValueFloat.toInt\n         \
    \   val medianIndexValueLong = medianIndexValueFloat.toLong\n            val medianIndexValueDouble\
    \ = medianIndexValueFloat.toDouble\n            val medianIndexValueFloat = medianIndexValueFloat.toFloat\n\
    \            val medianIndexValueInt = medianIndexValueFloat.toInt\n         \
    \   val medianIndexValueLong = medianIndexValueFloat.toLong\n            val medianIndexValueDouble\
    \ = medianIndexValueFloat.toDouble\n            val medianIndexValueFloat = medianIndexValueFloat.toFloat\n\
    \            val medianIndexValueInt = medianIndexValueFloat.toInt\n         \
    \   val medianIndexValueLong = medianIndexValueFloat.toLong\n            val medianIndexValueDouble\
    \ = medianIndexValueFloat.toDouble\n            val medianIndexValueFloat = medianIndexValueFloat.toFloat\n\
    \            val medianIndexValueInt = medianIndexValueFloat.toInt\n         \
    \   val medianIndexValueLong = medianIndexValueFloat.toLong\n            val medianIndexValueDouble\
    \ = medianIndexValueFloat.toDouble\n            val medianIndexValueFloat = medianIndexValueFloat.toFloat\n\
    \            val medianIndexValueInt = medianIndexValueFloat.toInt\n         \
    \   val medianIndexValueLong = medianIndexValueFloat.toLong\n            val medianIndexValueDouble\
    \ = medianIndexValueFloat.toDouble\n            val medianIndexValueFloat = medianIndexValueFloat.toFloat\n\
    \            val medianIndexValue\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp44a91loy.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp44a91loy.scala:62:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m62 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp44a91loy.scala:26:16 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m            \e[33mval\e[0m \e[36mmedianIndexValueFloat\e[0m = medianIndexValueFloat.toFloat\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedianIndexValueFloat is already defined as \e[33mvalue\e\
    [0m \e[35mmedianIndexValueFloat\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44a91loy.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mmedianIndexValueInt\e\
    [0m = medianIndexValueFloat.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedianIndexValueInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mmedianIndexValueInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp44a91loy.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mmedianIndexValueLong\e\
    [0m = medianIndexValueFloat.toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedianIndexValueLong is already defined as \e[33mvalue\e[0m\
    \ \e[35mmedianIndexValueLong\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp44a91loy.scala:29:16 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mmedianIndexValue"
  stdout: ''
  timestamp: 1659792533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n <= 1) l.head\n        else {\n            val mid = n / 2\n         \
    \   val m1 = l.slice(0, mid)\n            val m2 = l.slice(mid)\n            val\
    \ m = (m1 + m2).sortWith(_ < _)\n            val m1 = m.head\n            val\
    \ m2 = m.last\n            (m1 + m2) / 2\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuy34ysaa.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mm1\e[0m = m.head\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm1 is already\
    \ defined as \e[33mvalue\e[0m \e[35mm1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuy34ysaa.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mm2\e[0m = m.last\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm2 is already\
    \ defined as \e[33mvalue\e[0m \e[35mm2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- Error: /tmp/tmpuy34ysaa.scala:15:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mm2\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpuy34ysaa.scala:16:24 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mm\e[0m = (m1 + m2).sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuy34ysaa.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            (m1 + m2) / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m             ^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but"
  stdout: ''
  timestamp: 1659792533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = (left + right).sortWith(_ < _).last\n            median.toFloat\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptlerb1jh.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmptlerb1jh.scala:16:31 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sortWith(_\
    \ < _).last\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue + is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659792516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left.sum + right.sum) / 2\n        median.toFloat\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjsxtjc2.scala:18)\n\tat Problem.main(tmpxjsxtjc2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = (0 until mid).map(l(_)).toList\n            val right = (mid until n).map(l(_)).toList\n\
    \            val m = (left + right).sortWith(_ < _).head\n            val m1 =\
    \ (left + right).sortWith(_ < _).last\n            val m2 = (left + right).sortWith(_\
    \ > _).last\n            val m3 = (left + right).sortWith(_ > _).head\n      \
    \      val m4 = (left + right).sortWith(_ < _).head\n            val m5 = (left\
    \ + right).sortWith(_ < _).last\n            val m6 = (left + right).sortWith(_\
    \ > _).last\n            val m7 = (left + right).sortWith(_ > _).head\n      \
    \      val m8 = (left + right).sortWith(_ < _).last\n            val m9 = (left\
    \ + right).sortWith(_ > _).last\n            val m10 = (left + right).sortWith(_\
    \ > _).head\n            val m11 = (left + right).sortWith(_ < _).last\n     \
    \       val m12 = (left + right).sortWith(_ > _).last\n            val m13 = (left\
    \ + right).sortWith(_ > _).head\n            val m14 = (left + right).sortWith(_\
    \ < _).last\n            val m15 = (left + right).sortWith(_ > _).last\n     \
    \       val m16 = (left + right).sortWith(_ > _).head\n            val m17 = (left\
    \ + right).sortWith(_ < _).last\n            val m18 = (left + right).sortWith(_\
    \ > _).last\n            val m19 = (left + right).sortWith(_ > _).head\n     \
    \       val m20 = (left + right).sortWith(_ < _).last\n            val m21 = (left\
    \ + right).sortWith(_ > _).last\n            val m22 = (left + right).sortWith(_\
    \ > _).head\n            val m23 = (left + right).sortWith(_ < _).last\n     \
    \       val m24 = (left + right).sortWith(_ > _).last\n            val m25 = (left\
    \ + right).sortWith(_ > _).head\n            val m26 = (left + right).sortWith(_\
    \ < _).last\n            val m27 = (left + right).sortWith(_ > _).last\n     \
    \       val m28 = (left + right).sortWith(_ > _\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp31pgnh57.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp31pgnh57.scala:55:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m55 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp31pgnh57.scala:16:26 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            \e[33mval\e[0m \e[36mm\e[0m = (left + right).sortWith(_\
    \ < _).head\n\e[31m\e[31m   |\e[0m                     ^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp31pgnh57.scala:17:27\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m\
    \ \e[36mm1\e[0m = (left + right).sortWith(_ < _).last\n\e[31m\e[31m   |\e[0m \
    \                     ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp31pgnh57.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mm2\e[0m = (left + right).sortWith(_\
    \ > _).last\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue + is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |"
  stdout: ''
  timestamp: 1659792535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ m1 = median(left)\n            val m2 = median(right)\n            val m = (m1\
    \ + m2) / 2\n            if (m1 < m) m1 else m2\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxxroc7xx.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1659792532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.toArray\n        val sorted = m.sortWith(_ < _)\n        val half\
    \ = n / 2\n        if (n % 2 == 0) sorted.last else (sorted take half).last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxtsg_ofx.scala:17)\n\tat Problem.main(tmpxtsg_ofx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left + right).sortWith(_ < _).head\n        median.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkkciw5ml.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sortWith(_\
    \ < _).head\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue + is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = (left.length + right.length) / 2\n        if (median.isEven)\
    \ {\n            val mid = left.length / 2\n            val leftMedian = left.take(mid)\n\
    \            val rightMedian = right.take(mid)\n            val leftMedianMedian\
    \ = leftMedian.zip(rightMedian).map {\n                case (l, r) => math.min(l,\
    \ r)\n            }.sum / 2\n            math.min(leftMedianMedian, rightMedianMedian)\n\
    \        } else {\n            math.min(left.sum / 2, right.sum / 2)\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxcm27x3u.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (median.isEven) {\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value isEven\
    \ is not a member of Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxcm27x3u.scala:22:39\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            math.min(leftMedianMedian,\
    \ rightMedianMedian)\n\e[31m\e[31m   |\e[0m                                  \
    \     ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \       Not found: rightMedianMedian\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = (left + right).sortBy(_).last\n            median.toFloat\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpy_yyu2nv.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmpy_yyu2nv.scala:16:47 -----------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sortBy(_).last\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$1 of expanded function:\n\e[31m   |\e\
    [0m   _$1 => (left + right).sortBy(_$1).last.\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpy_yyu2nv.scala:16:31 ------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sortBy(_).last\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659792534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val median = left.median + right.median\n        median.toFloat\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4b91veaf.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = left.median\
    \ + right.median\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     value median is not a member of List[Long]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.toList.sortWith(_ < _).length / 2\n        val median = l.toList.sortWith(_\
    \ < _).take(m).toList\n        val medianValue = median.sum / n\n        medianValue\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpynwshtyc.scala:17)\n\tat Problem.main(tmpynwshtyc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        if (n < 2) 0.0f\n        else if (n == 1) l.head\n\
    \        else (l.head + l.last) / 2.0f\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyt25hukt.scala:17)\n\tat Problem.main(tmpyt25hukt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n == 0) 0.0f\n        else {\n            val mid = n / 2\n           \
    \ val left = l.slice(0, mid)\n            val right = l.slice(mid)\n         \
    \   val median = (left.sum + right.sum) / 2\n            median\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6ynjse2s.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1659792533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = median(left) + median(right)\n            median.toFloat\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp58umtwse.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp58umtwse.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.toList.sortWith(_ < _).length / 2\n        if (m == 0) l.head\n \
    \       else l.toList.sortWith(_ < _).length / 2 * l.toList.sortWith(_ < _).head\
    \ + l.toList.sortWith(_ < _).last\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf022835q.scala:16)\n\tat Problem.main(tmpf022835q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val midVal\
    \ = median(left)\n            val leftVal = median(right)\n            val median\
    \ = midVal + leftVal\n            if (median < 0.0f) 0.0f\n            else median\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpr75c9rd0.scala:18:25 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = midVal\
    \ + leftVal\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35mmidVal\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.head\n        val sorted = l.sortWith(_ < m)\n        val half =\
    \ n / 2\n        if (n < 2) m\n        else if (n == 2) sorted((sorted.head +\
    \ sorted.last) / 2)\n        else if (n % 2 == 0) sorted((sorted.head + sorted.last)\
    \ / 2)\n        else sorted((sorted.head + sorted.last) / 2 + sorted((sorted.last\
    \ - sorted.head) / 2))\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpeb1z4bn2.scala:12:32 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36msorted\e[0m = l.sortWith(_\
    \ < m)\n\e[31m\e[31m   |\e[0m                                ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Wrong number of parameters, expected:\
    \ 2\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeb1z4bn2.scala:15:32 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (n == \e[31m2\e\
    [0m) sorted((sorted.head + sorted.last) / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Found:    Long\n\e[31m   |\e[0m    \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpeb1z4bn2.scala:16:36 --------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) sorted((sorted.head + sorted.last) / \e[31m2\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    Long\n\e[31m\
    \   |\e[0m                                    Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeb1z4bn2.scala:17:61 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m sorted((sorted.head + sorted.last)\
    \ / \e[31m2\e[0m + sorted((sorted.last - sorted.head) / \e[31m2\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659792535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = (0 until mid).map(l => l.toFloat).sum\n            val right = (mid until\
    \ n).map(l => l.toFloat).sum\n            left + (right - left) / 2\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9uqxoroh.scala:20)\n\tat Problem.main(tmp9uqxoroh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n\
    \        val mid = math.floor(half)\n        val median = if (n == 1) left else\
    \ (left + right) / 2\n        val medianIndex = math.floor(half)\n        val\
    \ medianValue = if (n == 1) left else (left + right) / 2\n        val medianIndexValue\
    \ = if (n == 1) left else (left + right) / 2\n        val medianValueIndex = if\
    \ (n == 1) left else (left + right) / 2\n        val medianIndexValueIndex = if\
    \ (n == 1) left else (left + right) / 2\n        val medianValueIndexValue = if\
    \ (n == 1) left else (left + right) / 2\n        val medianIndexValueIndexValue\
    \ = if (n == 1) left else (left + right) / 2\n        val medianIndexValueIndexValueIndex\
    \ = if (n == 1) left else (left + right) / 2\n        val medianValueIndexValueIndexValue\
    \ = if (n == 1) left else (left + right) / 2\n        val medianIndexValueIndexValueIndexValue\
    \ = if (n == 1) left else (left + right) / 2\n        val medianValueIndexValueIndexValueIndex\
    \ = if (n == 1) left else (left + right) / 2\n        val medianValueIndexValueIndexValueIndexValue\
    \ = if (n == 1) left else (left + right) / 2\n        val medianIndexValueIndexValueIndexValueIndex\
    \ = if (n == 1) left else (left + right) / 2\n        val medianValueIndexValueIndexValueIndexValueIndex\
    \ = if (n == 1) left else (left + right) / 2\n        val medianIndexValueIndexValueIndexValueIndexValue\
    \ = if (n == 1) left else (left + right) / 2\n        val medianIndexValueIndexValueIndexValueIndexValue\
    \ = if (n == 1) left else (left + right) / 2\n        val medianIndexValueIndexValueIndexValueIndexValueIndex\
    \ = if (n == 1) left else (left + right) / 2\n        val medianValueIndexValueIndexValueIndexValueIndexValue\
    \ = if (n == 1) left else (left + right) / 2\n        val medianIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = if (n == 1) left else (left + right) / 2\n        val medianIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = if (n == 1) left else (left + right) / 2\n        val medianIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = if (n == 1) left else (left + right) / 2\n        val medianIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = if (n == 1) left else (left + right) / 2\n        val medianValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = if (n == 1) left else (left + right) / 2\n        val medianIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = if (n == 1) left \n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3xbgbdnf.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmedianIndexValueIndexValueIndexValueIndexValue\e\
    [0m = \e[33mif\e[0m (n == \e[31m1\e[0m) left \e[33melse\e[0m (left + right) /\
    \ \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedianIndexValueIndexValueIndexValueIndexValue is already\
    \ defined as \e[33mvalue\e[0m \e[35mmedianIndexValueIndexValueIndexValueIndexValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3xbgbdnf.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mmedianIndexValueIndexValueIndexValueIndexValueIndexValue\e\
    [0m = \e[33mif\e[0m (n == \e[31m1\e[0m) left \e[33melse\e[0m (left + right) /\
    \ \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedianIndexValueIndexValueIndexValueIndexValueIndexValue is\
    \ already defined as \e[33mvalue\e[0m \e[35mmedianIndexValueIndexValueIndexValueIndexValueIndexValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3xbgbdnf.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mmedianIndexValueIndexValueIndexValueIndexValueIndexValue\e\
    [0m = \e[33mif\e[0m (n == \e[31m1\e[0m) left \e[33melse\e[0m (left + right) /\
    \ \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedianIndexValueIndexValueIndexValueIndexValueIndexValue is\
    \ already defined as \e[33mvalue\e[0m \e[35mmedianIndexValueIndexValueIndexValueIndexValueIndexValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of "
  stdout: ''
  timestamp: 1659792536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        System.arraycopy(l, 0, left, 0, mid)\n            System.arraycopy(l,\
    \ mid, right, 0, n - mid)\n            val leftMedian = median(left)\n       \
    \     val rightMedian = median(right)\n            val median = (leftMedian +\
    \ rightMedian) / 2\n            median\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1f19_px6.scala:20:26 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (leftMedian\
    \ + rightMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \   ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m\
    \ \e[35mleftMedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.min\n        val median = l.sortWith(_ < m).take(n/2).last\n    \
    \    median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpk00hitny.scala:12:32 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = l.sortWith(_\
    \ < m).take(n/\e[31m2\e[0m).last\n\e[31m\e[31m   |\e[0m                      \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                                Wrong number\
    \ of parameters, expected: 2\n1 error found\n"
  stdout: ''
  timestamp: 1659792534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        val leftSum = 0.0f\n            val rightSum = 0.0f\n            val\
    \ leftCount = 0.0f\n            val rightCount = 0.0f\n            val leftMax\
    \ = 0.0f\n            val rightMax = 0.0f\n            val leftMin = 0.0f\n  \
    \          val rightMin = 0.0f\n            val leftMedian = 0.0f\n          \
    \  val rightMedian = 0.0f\n            val leftMedianIndex = 0\n            val\
    \ rightMedianIndex = 0\n            val leftMedianValue = 0.0f\n            val\
    \ rightMedianValue = 0.0f\n            val leftMedianIndexValue = 0.0f\n     \
    \       val rightMedianIndexValue = 0.0f\n            val leftMedianIndexCount\
    \ = 0.0f\n            val rightMedianIndexCount = 0.0f\n            val leftMedianIndexCountValue\
    \ = 0.0f\n            val rightMedianIndexCountValue = 0.0f\n            val leftMedianIndexCountValue2\
    \ = 0.0f\n            val rightMedianIndexCountValue2 = 0.0f\n            val\
    \ leftMedianIndexCountValue3 = 0.0f\n            val rightMedianIndexCountValue3\
    \ = 0.0f\n            val leftMedianIndexCountValue4 = 0.0f\n            val rightMedianIndexCountValue4\
    \ = 0.0f\n            val leftMedianIndexCountValue5 = 0.0f\n            val rightMedianIndexCountValue5\
    \ = 0.0f\n            val leftMedianIndexCountValue6 = 0.0f\n            val rightMedianIndexCountValue6\
    \ = 0.0f\n            val leftMedianIndexCountValue7 = 0.0f\n            val rightMedianIndexCountValue7\
    \ = 0.0f\n            val leftMedianIndexCountValue8 = 0.0f\n            val rightMedianIndexCountValue8\
    \ = 0.0f\n            val leftMedianIndexCountValue9 = 0.0f\n            val rightMedianIndexCountValue9\
    \ = 0.0f\n            val leftMedianIndexCountValue10 = 0.0f\n            val\
    \ rightMedianIndexCountValue10 = 0.0f\n            val leftMedianIndexCountValue11\
    \ = 0.0f\n            val rightMedianIndexCountValue11 = 0.0f\n            val\
    \ leftMedianIndexCountValue12 = 0.0f\n            val rightMedianIndexCountValue12\
    \ = 0.0f\n            val leftMedianIndexCountValue13 = 0.0f\n            val\
    \ rightMedianIndexCountValue13 = 0.0f\n            val leftMedianIndexCountValue14\
    \ = 0.0f\n            val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpiwu7yes4.scala:61:15 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiwu7yes4.scala:72:0 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiwu7yes4.scala:71:1\
    \ ---------------------\e[0m\e[0m\n\e[31m71 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Float\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpiwu7yes4.scala:63:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m63 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659792535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = median(left) + median(right)\n            val medianFloat = median.toFloat\n\
    \            medianFloat\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpx3_choni.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpx3_choni.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        if (n < 2) 0.0f\n        else {\n            val\
    \ median = l.sortWith(_ < _).reverse.head\n            val lower = l.take(half)\n\
    \            val upper = l.drop(half)\n            val mid = median\n        \
    \    val lowerMedian = median(lower)\n            val upperMedian = median(upper)\n\
    \            val lowerMedianDiff = lowerMedian - median\n            val upperMedianDiff\
    \ = upperMedian - median\n            val lowerMedianDiffAbs = Math.abs(lowerMedianDiff)\n\
    \            val upperMedianDiffAbs = Math.abs(upperMedianDiff)\n            val\
    \ medianDiffAbs = lowerMedianDiffAbs + upperMedianDiffAbs\n            val medianDiff\
    \ = lowerMedian + upperMedian - median\n            val medianDiffAbs = Math.abs(medianDiff)\n\
    \            val medianDiffAbsDiff = medianDiffAbs - median\n            val medianDiffAbsDiffAbs\
    \ = Math.abs(medianDiffAbsDiff)\n            val medianDiffAbsDiffAbsDiff = medianDiffAbsDiffAbs\
    \ - median\n            val medianDiffAbsDiffAbsDiffAbs = Math.abs(medianDiffAbsDiffAbsDiff)\n\
    \            val medianDiffAbsDiffAbsDiffAbsDiff = medianDiffAbsDiffAbsDiffAbs\
    \ - median\n            val medianDiffAbsDiffAbsDiffAbsDiffAbs = Math.abs(medianDiffAbsDiffAbsDiffAbsDiff)\n\
    \            val medianDiffAbsDiffAbsDiffAbsDiffAbsDiff = medianDiffAbsDiffAbsDiffAbsDiffAbs\
    \ - median\n            val medianDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = Math.abs(medianDiffAbsDiffAbsDiffAbsDiffAbsDiff)\n\
    \            val medianDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = medianDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs\
    \ - median\n            val medianDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ = medianDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs - median\n       \
    \     val medianDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = Math.abs(medianDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8brjrasd.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8brjrasd.scala:48:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m48 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8brjrasd.scala:26:16 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m            \e[33mval\e[0m \e[36mmedianDiffAbs\e[0m = Math.abs(medianDiff)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmedianDiffAbs is already defined as \e[33mvalue\e[0m \e[35mmedianDiffAbs\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmp8brjrasd.scala:18:30 -----------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m            \e[33mval\e[0m \e[36mlowerMedian\e[0m = median(lower)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              \e[33mvalue\e[0m \e[35mmedian\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp8brjrasd.scala:19:30\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e\
    [0m \e[36mupperMedian\e[0m = median(upper)\n\e[31m\e[31m   |\e[0m            \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0m                              \e\
    [33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8brjrasd.scala:35:64 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            \e[33mval\e[0m \e[36mmedianDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff\e\
    [0m = medianDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs - median\n\e[31m\e[31m\
    \   |\e[0m                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659792535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val midVal\
    \ = median(left)\n            val rightVal = median(right)\n            val median\
    \ = (midVal + rightVal) / 2\n            median\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptul5pm35.scala:18:26 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (midVal\
    \ + rightVal) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m \e[35mmidVal\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = median(left) + median(right)\n            median\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2gzk8w1k.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp2gzk8w1k.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.min\n        val median = (m + n) / 2\n        val half = n / 2\n\
    \        val left = (0 until half).map(i => l(i)).toList\n        val right =\
    \ (half until n).map(i => l(i)).toList\n        val medianLeft = median(left)\n\
    \        val medianRight = median(right)\n        val medianMedian = (medianLeft\
    \ + medianRight) / 2\n        val medianMedianAbs = Math.abs(medianMedian)\n \
    \       if (medianMedianAbs < 1.0e-10) {\n            medianMedianAbs\n      \
    \  } else {\n            medianMedian\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpss7psppa.scala:16:25 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmedianLeft\e[0m = median(left)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                      \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpss7psppa.scala:17:26 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmedianRight\e[0m = median(right)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.slice(0, mid)\n        val right = l.slice(mid,\
    \ n)\n        val median = (left.sum + right.sum) / 2\n        median\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0jfdl0n3.scala:18)\n\tat Problem.main(tmp0jfdl0n3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ midVal = median(left)\n            val rightVal = median(right)\n          \
    \  (midVal + rightVal) / 2\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfh51y5xj.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1659792535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = l.length / 2\n     \
    \       val lower = l drop mid\n            val upper = l drop mid+1\n       \
    \     val median = (lower min upper).sum / 2\n            median\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbgckva26.scala:16:36\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e\
    [36mmedian\e[0m = (lower min upper).sum / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                       Found:    (upper : List[Long])\n\e[31m   |\e[0m      \
    \                              Required: Ordering[Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659792536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0f\n        else {\n            val mid = n / 2\n            val\
    \ left = new Array[Long](n)\n            val right = new Array[Long](n)\n    \
    \        System.arraycopy(l, 0, left, 0, mid)\n            System.arraycopy(l,\
    \ mid, right, 0, n - mid)\n            val leftMedian = median(left)\n       \
    \     val rightMedian = median(right)\n            (leftMedian + rightMedian)\
    \ / 2\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplp2_ldsu.scala:18:36\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e\
    [36mleftMedian\e[0m = median(left)\n\e[31m\e[31m   |\e[0m                    \
    \                ^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \  Found:    (left : Array[Long])\n\e[31m   |\e[0m                           \
    \         Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplp2_ldsu.scala:19:37 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            \e[33mval\e[0m \e[36mrightMedian\e[0m = median(right)\n\e\
    [31m\e[31m   |\e[0m                                     ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                     Found:    (right : Array[Long])\n\e[31m\
    \   |\e[0m                                     Required: List[Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659792536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = median(left) + median(right)\n            val midPoint = (left + right).length\
    \ / 2\n            val medianIndex = midPoint - mid\n            val medianValue\
    \ = l.apply(medianIndex)\n            medianValue\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0_8nrm8t.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp0_8nrm8t.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0_8nrm8t.scala:17:33\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmidPoint\e[0m = (left + right).length / \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of List[Long], but could be made available as an extension method.\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792536
