name: HumanEval_111_histogram
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string representing a space separated lowercase letters, return\
  \ a map\n    // of the letter with the most repetition and containing the corresponding\
  \ count.\n    // If several letters have the same occurrence, return all of them.\n\
  \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
  a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n   \
  \ // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"a b c\
  \ a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
  b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>> histogram((\"\"\
  ))\n    // (Map[String,Long]())\n    def histogram(test : String) : Map[String,Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b\
  \ b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"\
  d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
  r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"\
  b\" -> 4l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\"\
  \ -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
  \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\
  \n}\n"
completions: ["        val letters = test.split(\" \").toList\n        val map = letters.foldLeft(Map[String,Long]())((m,c)\
    \ => m.updated(c, m.getOrElse(c,0L) + 1))\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts.toMap",
  "        val map = test.split(\" \").toList.groupBy(x => x).mapValues(_.size).toMap\n\
    \        val maxCount = map.values.max\n        val maxKey = map.keys.max\n  \
    \      val maxValues = map.values.filter(x => x == maxCount).map(x => maxCount.toString)\n\
    \        val maxKeyValues = map.keys.filter(x => x == maxCount).map(x => maxCount.toString)\n\
    \        val maxKeyValuesAndCount = map.keys.filter(x => x == maxCount).map(x\
    \ => (x,maxCount))\n        val maxKeyValuesAndCountList = maxKeyValuesAndCount.toList\n\
    \        val maxKeyValuesAndCountListString = maxKeyValuesAndCountList.map(x =>\
    \ x._1 + \" \" + x._2.toString)\n        val maxKeyValuesAndCountListString =\
    \ maxKeyValuesAndCountListString.mkString(\" \")\n        val maxKeyValuesAndCountListString\
    \ = maxKeyValuesAndCountListString.replaceAll(\"\\\\(|\\\\)\", \"\")\n       \
    \ val maxKeyValuesAndCountListString = maxKeyValuesAndCountListString.replaceAll(\"\
    \\\\[\", \"\")\n        val maxKeyValuesAndCountListString = maxKeyValuesAndCountListString.replaceAll(\"\
    \\\\]\", \"\")\n        val maxKeyValuesAndCountListString = maxKeyValuesAndCountListString.replaceAll(\"\
    \\\\{\", \"\")\n        val maxKeyValuesAndCountListString = maxKeyValuesAndCountListString.replaceAll(\"\
    \\\\}\", \"\")\n        val maxKeyValuesAndCountListString = maxKeyValuesAndCountListString.replaceAll(\"\
    \\\\,\", \"\")\n        val maxKeyValuesAndCountListString = maxKeyValuesAndCountListString.replaceAll(\"\
    \\\\ \", \"\")\n        val maxKeyValuesAndCountListString = maxKeyValuesAndCountListString.replaceAll(\"\
    \\\\ \", \"\")\n        val maxKeyValuesAndCountListString = maxKeyValuesAndCountListString.replaceAll(\"\
    \\\\ \", \"\")\n        val maxKeyValuesAndCountListString = maxKeyValuesAndCountListString.replaceAll(\"\
    \\\\ \", \"\")\n        val maxKeyValuesAndCountListString = maxKeyValuesAndCountListString.replaceAll(\"\
    \\\\ \", \"\")\n        val maxKeyValuesAndCountListString = maxKeyValuesAndCountListString.replaceAll(\"\
    \\\\ \", \"\")\n        val maxKeyValuesAndCountListString = maxKeyValuesAndCountListString.replaceAll(\"\
    \\\\ \", \"\")\n        val maxKeyValuesAndCountListString = maxKeyValuesAndCountListString.replaceAll(\"\
    \\\\ \", \"\")\n        val maxKeyValuesAndCountListString = maxKeyValuesAndCountListString.replace",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => map.put(letter,map.getOrElse(letter,0L)+1))\n\
    \        map", "        val map = mutable.Map[String,Long]()\n        test.split(\"\
    \ \").foreach(x => {\n            val count = map.getOrElse(x,0L)\n          \
    \  map += x -> count + 1\n        })\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => {\n            map.put(letter, map.getOrElse(letter,\
    \ 0L) + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            counts(letter) += letters.length\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> count + 1)\n        }\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += letter -> (count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            if (count > counts.contains(letter)) {\n              \
    \  counts += letter -> count\n            }\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            val count = map.get(letter).getOrElse(0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.update(letter, map.getOrElse(letter,\
    \ 0L) + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            map.update(letter, map.getOrElse(letter, 0L) + 1)\n      \
    \  })\n        map.toMap", "        val letters = test.split(\" \").toList\n \
    \       val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += letter\
    \ -> (count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            counts += letter -> (letters.count(_ == letter))\n\
    \        }\n        counts.toMap", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0L)\n            map +=\
    \ (letter -> count + 1)\n        })\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += letter -> (count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            if (count > counts.contains(letter)) {\n              \
    \  counts += letter -> count\n            }\n        }\n        counts.toMap",
  "        val map = mutable.Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => map.updated(x, map.getOrElse(x, 0L) + 1))\n        map.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = letters.map(letter\
    \ => (letter, letters.count(letter ==)))\n        val maxCount = counts.maxBy(_._2)._2\n\
    \        val maxLetters = counts.filter(_._2 == maxCount).map(_._1)\n        val\
    \ maxLettersCount = maxLetters.map(letter => (letter, maxLetters.count(letter\
    \ ==)))\n        val maxLettersCountMap = maxLettersCount.toMap\n        val maxLettersCountMapWithMaxCount\
    \ = maxLettersCountMap + (maxLetters.maxBy(_._2)._1 -> maxCount)\n        maxLettersCountMapWithMaxCount",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count+1)\n        })\n        map.toMap", "   \
    \     val letters = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            map.update(letter, map.getOrElse(letter,\
    \ 0L) + 1L)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxCount = letterCounts.maxBy(_._2)._2\n        letterCounts.filter(_._2\
    \ == maxCount).map(_._1)", "        val map = mutable.Map[String,Long]()\n   \
    \     test.split(\" \").foreach(x => map.updated(x, map.getOrElse(x, 0L) + 1))\n\
    \        map.toMap", "        val letters = test.split(\" \").toList\n       \
    \ val map = mutable.Map[String,Long]()\n        letters.foreach(letter => {\n\
    \            val count = map.getOrElse(letter,0L)\n            map += letter ->\
    \ (count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = letters.count(_ == letter)\n        \
    \    counts += letter -> count\n        }\n        counts.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size).filter(_._2 > 1).mapValues(_.toLong)\n        letterCounts.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts(letter) = count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        })\n        map", "       \
    \ val letters = test.split(\" \").toList\n        val counts = letters.groupBy(x\
    \ => x).mapValues(_.size).toMap\n        letters.map(x => (x,counts.getOrElse(x,0l)))",
  "        val letters = test.split(\" \").toList\n        val map = letters.foldLeft(Map[String,Long]())((map,\
    \ letter) => {\n            val count = map.getOrElse(letter,0L)\n           \
    \ map += (letter -> (count + 1))\n            map\n        })\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            counts(letter) += 1\n        }\n\
    \        counts.toMap", "        val letters = test.split(\" \").toList\n    \
    \    val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count+1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = scala.collection.mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += letter -> (count + 1)\n        }\n        map.toMap", "  \
    \      val letters = test.split(\" \").toList\n        val map = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = map.maxBy(_._2)._1\n       \
    \ val maxLetters = map.filter(_._2 == maxCount).map(_._1)\n        val result\
    \ = maxLetters.map(x => (x, map.get(x)))\n        result.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._2\n\
    \        val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n  \
    \      val maxLetterCounts = letterCounts.filter(_._2 == maxCount)\n        val\
    \ maxLetterCountMap : Map[String,Long] = maxLetterCounts.map{case (letter,count)\
    \ => (letter,count)}\n        val maxLetterMap : Map[String,Long] = maxLetters.map{case\
    \ letter => (letter,letterCounts(letter)._2)}\n        val maxLetterMapWithCounts\
    \ : Map[String,Long] = maxLetterMap + maxLetterCounts\n        val maxLetterMapWithCountsWithCounts\
    \ : Map[String,Long] = maxLetterMapWithCounts + letterCounts\n        val maxLetterMapWithCountsWithCountsWithCounts\
    \ : Map[String,Long] = maxLetterMapWithCountsWithCounts + letterCounts\n     \
    \   val maxLetterMapWithCountsWithCountsWithCountsWithCounts : Map[String,Long]\
    \ = maxLetterMapWithCountsWithCountsWithCountsWithCounts + letterCounts\n    \
    \    val maxLetterMapWithCountsWithCountsWithCountsWithCountsWithCounts : Map[String,Long]\
    \ = maxLetterMapWithCountsWithCountsWithCountsWithCountsWithCounts + letterCounts\n\
    \        val maxLetterMapWithCountsWithCountsWithCountsWithCountsWithCountsWithCounts\
    \ : Map[String,Long] = maxLetterMapWithCountsWithCountsWithCountsWithCountsWithCountsWithCounts\
    \ + letterCounts\n        val maxLetterMapWithCountsWithCountsWithCountsWithCountsWithCountsWithCountsWithCounts\
    \ : Map[String,Long] = maxLetterMapWithCountsWithCountsWithCountsWithCountsWithCountsWithCountsWithCounts\
    \ + letterCounts\n        val maxLetterMapWithCountsWithCountsWithCountsWithCountsWithCountsWithCountsWithCountsWithCounts\
    \ : Map[String,Long] = maxLetterMapWithCountsWithCountsWithCountsWithCountsWithCountsWithCountsWithCountsWithCounts\
    \ + letterCounts\n        val maxLetterMapWithCountsWithCountsWithCountsWithCountsWithCountsWithCountsWithCountsWithCountsWithCounts\
    \ : Map[String,Long] = maxLetterMapWith", "        val letters = test.split(\"\
    \ \").toList\n        val map = letters.groupBy(x => x).mapValues(_.size)\n  \
    \      val maxCount = map.maxBy(_._2)._1\n        val maxLetter = map.maxBy(_._2)._1._1\n\
    \        val maxLetterCount = map.maxBy(_._2)._1\n        val maxLetterCountMap\
    \ = map.maxBy(_._2)._2\n        val maxLetterCountMap2 = map.maxBy(_._2)._2\n\
    \        val maxLetterCountMap3 = map.maxBy(_._2)._2\n        val maxLetterCountMap4\
    \ = map.maxBy(_._2)._2\n        val maxLetterCountMap5 = map.maxBy(_._2)._2\n\
    \        val maxLetterCountMap6 = map.maxBy(_._2)._2\n        val maxLetterCountMap7\
    \ = map.maxBy(_._2)._2\n        val maxLetterCountMap8 = map.maxBy(_._2)._2\n\
    \        val maxLetterCountMap9 = map.maxBy(_._2)._2\n        val maxLetterCountMap10\
    \ = map.maxBy(_._2)._2\n        val maxLetterCountMap11 = map.maxBy(_._2)._2\n\
    \        val maxLetterCountMap12 = map.maxBy(_._2)._2\n        val maxLetterCountMap13\
    \ = map.maxBy(_._2)._2\n        val maxLetterCountMap14 = map.maxBy(_._2)._2\n\
    \        val maxLetterCountMap15 = map.maxBy(_._2)._2\n        val maxLetterCountMap16\
    \ = map.maxBy(_._2)._2\n        val maxLetterCountMap17 = map.maxBy(_._2)._2\n\
    \        val maxLetterCountMap18 = map.maxBy(_._2)._2\n        val maxLetterCountMap19\
    \ = map.maxBy(_._2)._2\n        val maxLetterCountMap20 = map.maxBy(_._2)._2\n\
    \        val maxLetterCountMap21 = map.maxBy(_._2)._2\n        val maxLetterCountMap22\
    \ = map.maxBy(_._2)._2\n        val maxLetterCountMap23 = map.maxBy(_._2)._2\n\
    \        val maxLetterCountMap24 = map.maxBy(_._2)._2\n        val maxLetterCountMap25\
    \ = map.maxBy(_._2)._2\n        val maxLetterCountMap26 = map.maxBy(_._2)._2\n\
    \        val maxLetterCountMap27 = map.maxBy(_._2)._2\n        val maxLetterCountMap28\
    \ = map.maxBy(_._2)._2\n        val maxLetterCountMap29 = map.maxBy(_._", "  \
    \      val letters = test.split(\" \").toList\n        val counts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = counts.max\n        val maxLetter\
    \ = counts.maxBy(_._2)\n        val maxLetterCount = maxLetter._2\n        val\
    \ maxLetters = maxLetter._1\n        val maxLettersCount = maxLetters.size\n \
    \       val maxLettersMap = (maxLettersCount -> maxLetters).toMap\n        val\
    \ maxLettersMapWithMaxCount = maxLettersMap + (maxCount -> maxLettersCount)\n\
    \        val maxLettersMapWithMaxCountWithMaxLetter = maxLettersMapWithMaxCount\
    \ + (maxLetterCount -> maxLetter)\n        val maxLettersMapWithMaxCountWithMaxLetterAndMaxCount\
    \ = maxLettersMapWithMaxCountWithMaxLetter + (maxCount -> maxLettersCount)\n \
    \       val maxLettersMapWithMaxCountWithMaxLetterAndMaxCountWithMaxLetter = maxLettersMapWithMaxCountWithMaxLetterAndMaxCount\
    \ + (maxLetterCount -> maxLetter)\n        val maxLettersMapWithMaxCountWithMaxLetterAndMaxCountWithMaxLetterAndMaxCount\
    \ = maxLettersMapWithMaxCountWithMaxLetterAndMaxCountWithMaxLetter + (maxCount\
    \ -> maxLettersCount)\n        val maxLettersMapWithMaxCountWithMaxLetterAndMaxCountWithMaxLetterAndMaxCountWithMaxLetter\
    \ = maxLettersMapWithMaxCountWithMaxLetterAndMaxCountWithMaxLetterAndMaxCount\
    \ + (maxLetterCount -> maxLetter)\n        val maxLettersMapWithMaxCountWithMaxLetterAndMaxCountWithMaxLetterAndMaxCountWithMaxLetterAndMaxCount\
    \ = maxLettersMapWithMaxCountWithMaxLetterAndMaxCountWithMaxLetterAndMaxCountWithMaxLetter\
    \ + (maxCount -> maxLettersCount)\n        val maxLettersMapWithMaxCountWithMaxLetterAndMaxCountWithMaxLetterAndMaxCountWithMaxLetterAndMaxCountWithMaxLetter\
    \ = maxLettersMapWithMaxCountWithMaxLetterAndMaxCountWithMaxLetterAndMaxCountWithMaxLetterAndMaxCount\
    \ + (maxLetterCount -> maxLetter)\n        val maxLettersMapWithMaxCountWithMaxLetterAndMaxCountWithMaxLetterAndMaxCountWithMaxLetterAndMaxCountWithMaxLetterAndMaxCount\
    \ = maxLettersMapWithMaxCountWithMaxLetterAndMaxCountWithMaxLetterAndMaxCountWithMaxLetterAndMaxCountWithMaxLetter\
    \ + (maxCount ", "        val letters = test.split(\" \").toList\n        val\
    \ map = mutable.Map[String,Long]()\n        letters.foreach(letter => {\n    \
    \        val count = map.getOrElse(letter,0L)\n            map += (letter -> count\
    \ + 1)\n        })\n        map.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += letter\
    \ -> (count+1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map.empty[String,Long]\n        for (letter\
    \ <- letters) {\n            val count = map.getOrElse(letter, 0L)\n         \
    \   map += (letter -> count + 1)\n        }\n        map.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.update(letter, map.getOrElse(letter,0L)\
    \ + 1)\n        })\n        map", "        val letters = test.split(\" \").toList\n\
    \        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(x => x == letter)\n            counts\
    \ += letter -> count\n        })\n        counts.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val letterMap = new mutable.HashMap[String,Long]()\n\
    \        letters.foreach(letter => {\n            letterMap += letter -> (letterMap.getOrElse(letter,0L)\
    \ + 1)\n        })\n        letterMap.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxCount = letterCounts.maxBy(_._2)._1\n        val maxLetters =\
    \ letterCounts.filter(_._2 == maxCount).map(_._1)\n        val maxLetterCounts\
    \ = letterCounts.filter(_._2 == maxCount)\n        val maxLetterCountMaps = maxLetterCounts.map(_._1)\n\
    \        val maxLetterCountMap: Map[String,Long] = maxLetterCountMaps.foldLeft(Map[String,Long]())((acc,\
    \ letter) => {\n            val letterCounts = letterCounts.filter(_._1 != letter)\n\
    \            val letterCountMaps = letterCounts.map(_._1)\n            val letterCountMap:\
    \ Map[String,Long] = letterCountMaps.foldLeft(Map[String,Long]())((acc, letter)\
    \ => {\n                val letterCounts = letterCounts.filter(_._1 != letter)\n\
    \                val letterCountMaps = letterCounts.map(_._1)\n              \
    \  val letterCountMap: Map[String,Long] = letterCountMaps.foldLeft(Map[String,Long]())((acc,\
    \ letter) => {\n                    val letterCounts = letterCounts.filter(_._1\
    \ != letter)\n                    val letterCountMaps = letterCounts.map(_._1)\n\
    \                    val letterCountMap: Map[String,Long] = letterCountMaps.foldLeft(Map[String,Long]())((acc,\
    \ letter) => {\n                        val letterCounts = letterCounts.filter(_._1\
    \ != letter)\n                        val letterCountMaps = letterCounts.map(_._1)\n\
    \                        val letterCountMap: Map[String,Long] = letterCountMaps.foldLeft(Map[String,Long]())((acc,\
    \ letter) => {\n                            val letterCounts = letterCounts.filter(_._1\
    \ != letter)\n                            val letterCountMaps = letterCounts.map(_._1)\n\
    \                            val letterCountMap: Map[String,Long] = letterCountMaps.foldLeft(Map[String,Long]())((acc,\
    \ letter) => {\n                                val letterCounts = letterCounts.filter(_._1\
    \ != letter)\n                                val letterCountMaps = letterCounts.map(_._1)\n\
    \                                val letterCountMap: Map[String,Long] = letterCountMaps.foldLeft(Map[String,Long]())((acc,\
    \ letter) => {\n                                    val letterCounts = letterCounts.filter(_._1\
    \ != letter)\n                                    val letterCountMaps = letterCounts.map(_._1)\n\
    \                                    val letterCountMap: Map[String,Long] = letterCountMaps.foldLeft(",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = map.maxBy(_._2)._1\n       \
    \ val maxLetters = map.filter(_._2 == maxCount).map(_._1)\n        val maxLettersCount\
    \ = maxLetters.map(x => x -> map.get(x))\n        val maxLettersCount = maxLettersCount.toMap\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1)\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.toMap\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1)\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.toMap\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1)\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.toMap\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1)\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.toMap\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1)\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.toMap\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1)\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.toMap\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1)\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.toMap\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1)\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.toMap\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1)\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLetter", "   \
    \     val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += letter -> (count+1)\n        }\n        map.toMap", "    \
    \    val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> count + 1)\n        })\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        })\n        map", "       \
    \ val letters = test.split(\" \").toList\n        val counts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = counts.max\n        val maxLetter\
    \ = counts.maxBy(_._2)._1\n        val maxCount = counts.maxBy(_._2)._1\n    \
    \    val maxLetters = counts.filter(x => x._2 == maxCount).map(x => x._1)\n  \
    \      val maxLettersCount = maxLetters.map(x => (x, counts(x)))\n        val\
    \ maxLettersCountSorted = maxLettersCounted.sortBy(_._1)\n        val maxLettersCountSortedWithMax\
    \ = maxLettersCountSorted.take(maxLettersCountSorted.length - 1)\n        val\
    \ maxLettersCountSortedWithMaxWithMax = maxLettersCountSortedWithMax.takeWhile(_._2\
    \ > maxCount)\n        val maxLettersCountSortedWithMaxWithMaxWithMax = maxLettersCountSortedWithMaxWithMax.takeWhile(_._2\
    \ > maxCount)\n        val maxLettersCountSortedWithMaxWithMaxWithMaxWithMax =\
    \ maxLettersCountSortedWithMaxWithMaxWithMax.takeWhile(_._2 > maxCount)\n    \
    \    val maxLettersCountSortedWithMaxWithMaxWithMaxWithMaxWithMax = maxLettersCountSortedWithMaxWithMaxWithMaxWithMax.takeWhile(_._2\
    \ > maxCount)\n        val maxLettersCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLettersCountSortedWithMaxWithMaxWithMaxWithMaxWithMax.takeWhile(_._2 >\
    \ maxCount)\n        val maxLettersCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLettersCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.takeWhile(_._2\
    \ > maxCount)\n        val maxLettersCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLettersCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.takeWhile(_._2\
    \ > maxCount)\n        val maxLettersCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLettersCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.takeWhile(_._2\
    \ > maxCount)\n        val maxLettersCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = counts.getOrElse(letter,0L)\n\
    \            counts += letter -> (count + 1)\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = Map()\n     \
    \   letters.foreach(letter => {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> count + 1)\n        })\n        map", "  \
    \      val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._2\n\
    \        val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n  \
    \      val maxLetterCounts = maxLetters.groupBy(x => x).mapValues(_.size)\n  \
    \      val maxLetterCountMap = maxLetterCounts.maxBy(_._2)._2\n        val maxLetterCountMapKeys\
    \ = maxLetterCountMap.keys\n        val maxLetterCountMapValues = maxLetterCountMap.values\n\
    \        val maxLetterCountMapKeysAndValues = maxLetterCountMapKeys.zip(maxLetterCountMapValues)\n\
    \        val maxLetterCountMapKeysAndValuesSortedByValue = maxLetterCountMapKeysAndValues.sortBy(_._2)\n\
    \        val maxLetterCountMapKeysAndValuesSortedByKey = maxLetterCountMapKeysAndValuesSortedByValue.sortBy(_._1)\n\
    \        val maxLetterCountMapKeysAndValuesSortedByKeyAndValue = maxLetterCountMapKeysAndValuesSortedByKey.sortBy(_._2)\n\
    \        val maxLetterCountMapKeysAndValuesSortedByKeyAndValueAndCount = maxLetterCountMapKeysAndValuesSortedByKeyAndValue.sortBy(_._3)\n\
    \        val maxLetterCountMapKeysAndValuesSortedByKeyAndValueAndCountReversed\
    \ = maxLetterCountMapKeysAndValuesSortedByKeyAndValueAndCount.reverse\n      \
    \  val maxLetterCountMapKeysAndValuesSortedByKeyAndValueAndCountReversedSortedByValue\
    \ = maxLetterCountMapKeysAndValuesSortedByKeyAndValueAndCountReversed.sortBy(_._2)\n\
    \        val maxLetterCountMapKeysAndValuesSortedByKeyAndValueAndCountReversedSortedByKey\
    \ = maxLetterCountMapKeysAndValuesSortedByKeyAndValueAndCountReversedSortedByValue.sortBy(_._1)\n\
    \        val maxLetterCountMapKeysAndValuesSortedByKeyAndValueAndCountReversedSortedByKeyAndValue\
    \ = maxLetterCountMapKeysAndValuesSortedByKeyAndValueAndCountReversedSortedByKey.sortBy(_._2)\n\
    \        val maxLetterCountMapKeysAndValuesSortedByKeyAndValueAndCountReversedSortedByKeyAndValueAndCount\
    \ = maxLetterCountMapKeysAndValuesSortedByKeyAndValueAndCountReversedSortedByKeyAndValue.sortBy(_._3)\n\
    \        val maxLetterCountMapKeysAndValuesSortedByKeyAndValueAndCountReversedSortedByKeyAndValue",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += letter -> (count + 1)\n        }\n        map.toMap", "  \
    \      val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._2\n\
    \        val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n  \
    \      val maxLetterCounts = letterCounts.filter(_._2 == maxCount)\n        val\
    \ maxLetterCountMap = maxLetterCounts.map(_._1).groupBy(x => x).mapValues(_.size)\n\
    \        val maxLetterCountMapWithMax = maxLetterCountMap + (maxLetters -> maxCount)\n\
    \        val maxLetterCountMapWithMaxAndMax = maxLetterCountMapWithMax + (maxLetters.max\
    \ -> maxCount)\n        val maxLetterCountMapWithMaxAndMaxAndMax = maxLetterCountMapWithMaxAndMax\
    \ + (maxLetters.max -> maxCount)\n        val maxLetterCountMapWithMaxAndMaxAndMaxAndMax\
    \ = maxLetterCountMapWithMaxAndMaxAndMax + (maxLetters.max -> maxCount)\n    \
    \    val maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMax = maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMax\
    \ + (maxLetters.max -> maxCount)\n        val maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMax + (maxLetters.max ->\
    \ maxCount)\n        val maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax + (maxLetters.max\
    \ -> maxCount)\n        val maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax + (maxLetters.max\
    \ -> maxCount)\n        val maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax +\
    \ (maxLetters.max -> maxCount)\n        val maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax ",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.put(letter, map.getOrElse(letter,\
    \ 0L) + 1)\n        })\n        map", "        val letters = test.split(\" \"\
    ).toList\n        val counts = letters.groupBy(x => x).mapValues(_.size)\n   \
    \     val maxCount = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n\
    \        val maxCount = counts.maxBy(_._2)._1\n        val maxLetterCount = counts.maxBy(_._2)._2\n\
    \        val maxLetter = counts.maxBy(_._2)._1\n        val maxCount = counts.maxBy(_._2)._1\n\
    \        val maxLetterCount = counts.maxBy(_._2)._2\n        val maxLetter = counts.maxBy(_._2)._1\n\
    \        val maxCount = counts.maxBy(_._2)._1\n        val maxLetterCount = counts.maxBy(_._2)._2\n\
    \        val maxLetter = counts.maxBy(_._2)._1\n        val maxCount = counts.maxBy(_._2)._1\n\
    \        val maxLetterCount = counts.maxBy(_._2)._2\n        val maxLetter = counts.maxBy(_._2)._1\n\
    \        val maxCount = counts.maxBy(_._2)._1\n        val maxLetterCount = counts.maxBy(_._2)._2\n\
    \        val maxLetter = counts.maxBy(_._2)._1\n        val maxCount = counts.maxBy(_._2)._1\n\
    \        val maxLetterCount = counts.maxBy(_._2)._2\n        val maxLetter = counts.maxBy(_._2)._1\n\
    \        val maxCount = counts.maxBy(_._2)._1\n        val maxLetterCount = counts.maxBy(_._2)._2\n\
    \        val maxLetter = counts.maxBy(_._2)._1\n        val maxCount = counts.maxBy(_._2)._1\n\
    \        val maxLetterCount = counts.maxBy(_._2)._2\n        val maxLetter = counts.maxBy(_._2)._1\n\
    \        val maxCount = counts.maxBy(_._2)._1\n        val maxLetterCount = counts.maxBy(_._2)._2\n\
    \        val maxLetter = counts.maxBy(_._2)._1\n        val maxCount = counts.maxBy(_._2)._1\n\
    \        val maxLetterCount = counts.maxBy(_._2)._2\n        val maxLetter = counts.maxBy(_._2)._1\n\
    \        val maxCount = counts.maxBy(_._2)._1\n        val maxLetterCount = counts.maxBy(_._2)._2\n\
    \        val maxLetter = counts.maxBy(_._2)._1\n        val maxCount = counts.maxBy(_._2)._1\n\
    \        val maxLetterCount = counts.maxBy(_._2)._2\n        val maxLetter = counts.maxBy(_._2)._1\n\
    \        val maxCount = counts.maxBy(_._2)._1", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => map.put(letter,map.getOrElse(letter,0L)+1))\n        map", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count+1)\n        })\n        map.toMap", "   \
    \     val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            counts(letter) += letter.length\n\
    \        }\n        counts.toMap", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(_ == letter)\n            if (count\
    \ > counts.contains(letter)) {\n                counts += letter -> count\n  \
    \          }\n        })\n        counts", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            counts(letter) += 1\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._2\n\
    \        val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n  \
    \      val maxLetterCounts = maxLetters.groupBy(x => x).mapValues(_.size)\n  \
    \      val maxLetterCountMap : Map[String,Long] = maxLetterCounts.maxBy(_._2)._2\n\
    \        val maxLetterMap : Map[String,Long] = maxLetterCounts.filter(_._2 ==\
    \ maxCount).map(_._1)\n        val maxLetterMapWithCount : Map[String,Long] =\
    \ maxLetterMap.map{ case (k, v) => (k,v) }\n        val maxLetterMapWithCountWithRepetition\
    \ : Map[String,Long] = maxLetterMapWithCount.map{ case (k, v) => (k,v) }\n   \
    \     val maxLetterMapWithCountWithRepetitionWithRepetition : Map[String,Long]\
    \ = maxLetterMapWithCountWithRepetition.map{ case (k, v) => (k,v) }\n        val\
    \ maxLetterMapWithCountWithRepetitionWithRepetitionWithRepetition : Map[String,Long]\
    \ = maxLetterMapWithCountWithRepetitionWithRepetition.map{ case (k, v) => (k,v)\
    \ }\n        val maxLetterMapWithCountWithRepetitionWithRepetitionWithRepetitionWithRepetition\
    \ : Map[String,Long] = maxLetterMapWithCountWithRepetitionWithRepetitionWithRepetition.map{\
    \ case (k, v) => (k,v) }\n        val maxLetterMapWithCountWithRepetitionWithRepetitionWithRepetitionWithRepetitionWithRepetition\
    \ : Map[String,Long] = maxLetterMapWithCountWithRepetitionWithRepetitionWithRepetitionWithRepetition.map{\
    \ case (k, v) => (k,v) }\n        val maxLetterMapWithCountWithRepetitionWithRepetitionWithRepetitionWithRepetitionWithRepetitionWithRepetition\
    \ : Map[String,Long] = maxLetterMapWithCountWithRepetitionWithRepetitionWithRepetitionWithRepetitionWithRepetition.map{\
    \ case (k, v) => (k,v) }\n        val maxLetterMapWithCountWithRepetitionWithRepetitionWithRepetitionWithRepetitionWithRepetitionWithRepetitionWithRepeti",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.put(letter,map.getOrElse(letter,0L)+1L)\n\
    \        })\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val counts = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = letters.count(_ == letter)\n            counts +=\
    \ letter -> count\n        }\n        counts.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = letters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxCount = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n\
    \        val maxCount = counts.maxBy(_._2)._1\n        val maxLetters = counts.filter(x\
    \ => x._2 == maxCount).map(_._1)\n        val maxLettersCount = maxLetters.map(x\
    \ => x -> counts.filter(y => y._1 == x).map(y => y._2))\n        val maxLettersCount\
    \ = maxLettersCount.toMap\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1)\n        val maxLettersCount = maxLettersCount.map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.toMap\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1)\n        val maxLettersCount = maxLettersCount.map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.toMap\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1)\n        val maxLettersCount = maxLettersCount.map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.toMap\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1)\n        val maxLettersCount = maxLettersCount.map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.toMap\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1)\n        val maxLettersCount = maxLettersCount.map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.toMap\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1)\n        val maxLettersCount = maxLettersCount.map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.toMap\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1)\n        val maxLettersCount = maxLettersCount.map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.toMap\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1)\n        val maxLettersCount = maxLettersCount.map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.toMap\n        val maxLettersCount = maxLetter", "       \
    \ val letters = test.split(\" \").toList\n        val counts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = counts.max\n        val maxLetter\
    \ = counts.maxBy(_._2)._1\n        val maxCount = counts.maxBy(_._2)._1\n    \
    \    val maxLetters = counts.filter(_._2 == maxCount).map(_._1)\n        val maxLettersCount\
    \ = maxLetters.map(x => (x, counts.get(x)))\n        val maxLettersCount = maxLettersCount.sortBy(_._1).reverse\n\
    \        val maxLettersCount = maxLettersCount.take(maxLettersCount.length-1)\n\
    \        val maxLettersCount = maxLettersCount.map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.toMap\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1)\n        val maxLettersCount = maxLettersCount.map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.toMap\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1)\n        val maxLettersCount = maxLettersCount.map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.toMap\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1)\n        val maxLettersCount = maxLettersCount.map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.toMap\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1)\n        val maxLettersCount = maxLettersCount.map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.toMap\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1)\n        val maxLettersCount = maxLettersCount.map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.toMap\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1)\n        val maxLettersCount = maxLettersCount.map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.toMap\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1)\n        val maxLettersCount = maxLettersCount.map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.toMap\n        val maxLettersCount = maxLettersCount.filter(_._2 ",
  "        val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._2\n\
    \        letterCounts.filter(_._2 == maxCount).map(_._1).toMap", "        val\
    \ map = mutable.Map.empty[String,Long]\n        test.split(\" \").foreach(x =>\
    \ {\n            val count = map.getOrElse(x,0L)\n            map += x -> count\
    \ + 1\n        })\n        map.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val map = mutable.Map[String,Long]()\n        for (letter <-\
    \ letters) {\n            val count = map.getOrElse(letter,0)\n            map\
    \ += (letter -> count+1)\n        }\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = counts.getOrElse(letter,0)\n\
    \            counts += letter -> count+1\n        })\n        counts.toMap", " \
    \       val map = test.split(\" \").map(x => (x, 1)).toMap\n        val maxCount\
    \ = map.values.max\n        val maxKey = map.keys.max\n        map map {\n   \
    \         case (k, v) => (k, maxCount - v)\n        }.filter(_._2 > 0).map(_._1)",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts(letter) = count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = counts.max\n        val maxLetter\
    \ = counts.maxBy(_._2)._1\n        val maxCount = counts.maxBy(_._2)._1\n    \
    \    val maxLetters = counts.filter(x => x._2 == maxCount).map(x => x._1)\n  \
    \      val maxLettersCount = maxLetters.map(x => (x,counts(x)))\n        val maxLettersCount\
    \ = maxLettersCount.sortBy(_._1).reverse\n        val maxLettersCount = maxLettersCount.take(maxLettersCount.length-1)\n\
    \        val maxLettersCount = maxLettersCount.map(_._1).distinct\n        val\
    \ maxLettersCount = maxLettersCount.map(x => (x,counts(x)))\n        val maxLettersCount\
    \ = maxLettersCount.sortBy(_._1).reverse\n        val maxLettersCount = maxLettersCount.take(maxLettersCount.length-1)\n\
    \        val maxLettersCount = maxLettersCount.map(_._1).distinct\n        val\
    \ maxLettersCount = maxLettersCount.map(x => (x,counts(x)))\n        val maxLettersCount\
    \ = maxLettersCount.sortBy(_._1).reverse\n        val maxLettersCount = maxLettersCount.take(maxLettersCount.length-1)\n\
    \        val maxLettersCount = maxLettersCount.map(_._1).distinct\n        val\
    \ maxLettersCount = maxLettersCount.map(x => (x,counts(x)))\n        val maxLettersCount\
    \ = maxLettersCount.sortBy(_._1).reverse\n        val maxLettersCount = maxLettersCount.take(maxLettersCount.length-1)\n\
    \        val maxLettersCount = maxLettersCount.map(_._1).distinct\n        val\
    \ maxLettersCount = maxLettersCount.map(x => (x,counts(x)))\n        val maxLettersCount\
    \ = maxLettersCount.sortBy(_._1).reverse\n        val maxLettersCount = maxLettersCount.take(maxLettersCount.length-1)\n\
    \        val maxLettersCount = maxLettersCount.map(_._1).distinct\n        val\
    \ maxLettersCount = maxLettersCount.map(x => (x,counts(x)))\n        val maxLettersCount\
    \ = maxLettersCount.sortBy(_._1).reverse\n        val maxLettersCount = maxLettersCount.take(maxLettersCoun",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val map = mutable.Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => {\n            val count = map.getOrElse(x,0L)\n            map += x -> count\
    \ + 1\n        })\n        map.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val map = mutable.Map.empty[String,Long]\n        for (letter\
    \ <- letters) {\n            val count = map.getOrElse(letter, 0)\n          \
    \  map += (letter -> count + 1)\n        }\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = scala.collection.mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.update(letter, map.getOrElse(letter,\
    \ 0l) + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = letters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxCount = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n\
    \        val maxLetterCount = counts.maxBy(_._2)._2\n        val maxLetterCounts\
    \ = counts.filter(x => x._2 == maxLetterCount).map(x => x._1)\n        val maxLetterCountMap\
    \ = new scala.collection.mutable.HashMap[String,Long]()\n        maxLetterCounts.foreach(x\
    \ => maxLetterCountMap += x -> 1)\n        val maxLetterCountMap2 = new scala.collection.mutable.HashMap[String,Long]()\n\
    \        maxLetterCounts.foreach(x => maxLetterCountMap2 += x -> 1)\n        val\
    \ maxLetterCountMap3 = new scala.collection.mutable.HashMap[String,Long]()\n \
    \       maxLetterCounts.foreach(x => maxLetterCountMap3 += x -> 1)\n        val\
    \ maxLetterCountMap4 = new scala.collection.mutable.HashMap[String,Long]()\n \
    \       maxLetterCounts.foreach(x => maxLetterCountMap4 += x -> 1)\n        val\
    \ maxLetterCountMap5 = new scala.collection.mutable.HashMap[String,Long]()\n \
    \       maxLetterCounts.foreach(x => maxLetterCountMap5 += x -> 1)\n        val\
    \ maxLetterCountMap6 = new scala.collection.mutable.HashMap[String,Long]()\n \
    \       maxLetterCounts.foreach(x => maxLetterCountMap6 += x -> 1)\n        val\
    \ maxLetterCountMap7 = new scala.collection.mutable.HashMap[String,Long]()\n \
    \       maxLetterCounts.foreach(x => maxLetterCountMap7 += x -> 1)\n        val\
    \ maxLetterCountMap8 = new scala.collection.mutable.HashMap[String,Long]()\n \
    \       maxLetterCounts.foreach(x => maxLetterCountMap8 += x -> 1)\n        val\
    \ maxLetterCountMap9 = new scala.collection.mutable.HashMap[String,Long]()\n \
    \       maxLetterCounts.foreach(x => maxLetterCountMap9 += x -> 1)\n        val\
    \ maxLetterCountMap10 = new scala.collection.mutable.HashMap[String,Long]()\n\
    \        maxLetterCounts.foreach(x => maxLetterCountMap10 += x -> 1)\n       \
    \ val maxLetterCountMap11 = new scala.collection.mutable.HashMap[String,Long]()\n\
    \        maxLetterCounts.foreach(x => maxLetterCountMap11 += x -> 1)\n       \
    \ val maxLetterCountMap12 = new scala.collection.mutable.Hash", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = letters.groupBy(identity).mapValues(_.size)\n\
    \        val maxCount = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n\
    \        val maxLetterCount = counts.maxBy(_._2)._2\n        val maxLetterCountMap\
    \ = counts.filter(_._2 == maxLetterCount).map(_._1)\n        val maxLetterCountMapWithMax\
    \ = maxLetterCountMap.toMap\n        val maxLetterCountMapWithMaxAndMax = maxLetterCountMapWithMax.filter(_._1\
    \ == maxLetter)\n        val maxLetterCountMapWithMaxAndMaxAndMax = maxLetterCountMapWithMaxAndMax.filter(_._1\
    \ == maxLetter)\n        val maxLetterCountMapWithMaxAndMaxAndMaxAndMax = maxLetterCountMapWithMaxAndMaxAndMax.filter(_._1\
    \ == maxLetter)\n        val maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMax\
    \ = maxLetterCountMapWithMaxAndMaxAndMaxAndMax.filter(_._1 == maxLetter)\n   \
    \     val maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMax = maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMax.filter(_._1\
    \ == maxLetter)\n        val maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax.filter(_._1 ==\
    \ maxLetter)\n        val maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax.filter(_._1\
    \ == maxLetter)\n        val maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax.filter(_._1\
    \ == maxLetter)\n        val maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax.filter(_._1\
    \ == maxLetter)\n        val maxLetterCountMapWithMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = maxLetterCountMapWithMaxAndMaxAndMax", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            map.updated(letter, map.getOrElse(letter, 0l) + 1)\n     \
    \   })\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = letters.count(_ == letter)\n        \
    \    counts += letter -> count\n        }\n        counts.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.put(letter, map.getOrElse(letter,\
    \ 0L) + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val letterMap = new mutable.HashMap[String,Long]()\n   \
    \     letters.foreach(letter => {\n            letterMap += letter -> (letterMap.getOrElse(letter,0L)\
    \ + 1)\n        })\n        letterMap.mapValues(_.toLong)", "        val letters\
    \ = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            counts += letter -> (letters.count(_\
    \ == letter))\n        }\n        counts.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(_ == letter)\n            counts\
    \ += letter -> count\n        })\n        counts.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = map.maxBy(_._2)._1\n       \
    \ val maxLetters = map.filter(_._2 == maxCount).map(_._1)\n        val result\
    \ = maxLetters.map((_,1))\n        val map = letters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxCount = map.maxBy(_._2)._1\n        val maxLetters = map.filter(_._2\
    \ == maxCount).map(_._1)\n        val result = maxLetters.map((_,1))\n       \
    \ result", "        val letters = test.split(\" \").toList\n        val map =\
    \ mutable.Map[String,Long]()\n        letters.foreach(letter => {\n          \
    \  val count = map.getOrElse(letter,0)\n            map += letter -> (count+1)\n\
    \        })\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = counts.getOrElse(letter,0L)\n            counts\
    \ += letter -> count + 1\n        })\n        counts.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = letters.groupBy(x\
    \ => x).mapValues(_.size).toMap\n        val maxCount = map.values.max\n     \
    \   val maxLetters = map.filter(_._2 == maxCount).map(_._1)\n        val maxLettersCount\
    \ = maxLetters.map(x => x -> map.get(x))\n        val maxLettersCountSorted =\
    \ maxLettersCounted.sortBy(_._1)\n        val maxLettersCountSortedMap = new scala.collection.immutable.HashMap[String,Long]()\n\
    \        maxLettersCountSorted.foreach(x => maxLettersCountSortedMap += x._1 ->\
    \ x._2)\n        maxLettersCountSortedMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => map.update(letter, map.getOrElse(letter, 0L) + 1))\n        map", "     \
    \   val letters = test.split(\" \").toList\n        val counts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = counts.max\n        val maxLetter\
    \ = counts.maxBy(_._2)._1\n        val maxCount = counts.maxBy(_._2)._1\n    \
    \    val maxLetterCount = counts.maxBy(_._2)._2\n        val maxLetterCounts =\
    \ counts.maxBy(_._2)._2\n        val maxLetterCounts = counts.maxBy(_._2)._2\n\
    \        val maxLetterCounts = counts.maxBy(_._2)._2\n        val maxLetterCounts\
    \ = counts.maxBy(_._2)._2\n        val maxLetterCounts = counts.maxBy(_._2)._2\n\
    \        val maxLetterCounts = counts.maxBy(_._2)._2\n        val maxLetterCounts\
    \ = counts.maxBy(_._2)._2\n        val maxLetterCounts = counts.maxBy(_._2)._2\n\
    \        val maxLetterCounts = counts.maxBy(_._2)._2\n        val maxLetterCounts\
    \ = counts.maxBy(_._2)._2\n        val maxLetterCounts = counts.maxBy(_._2)._2\n\
    \        val maxLetterCounts = counts.maxBy(_._2)._2\n        val maxLetterCounts\
    \ = counts.maxBy(_._2)._2\n        val maxLetterCounts = counts.maxBy(_._2)._2\n\
    \        val maxLetterCounts = counts.maxBy(_._2)._2\n        val maxLetterCounts\
    \ = counts.maxBy(_._2)._2\n        val maxLetterCounts = counts.maxBy(_._2)._2\n\
    \        val maxLetterCounts = counts.maxBy(_._2)._2\n        val maxLetterCounts\
    \ = counts.maxBy(_._2)._2\n        val maxLetterCounts = counts.maxBy(_._2)._2\n\
    \        val maxLetterCounts = counts.maxBy(_._2)._2\n        val maxLetterCounts\
    \ = counts.maxBy(_._2)._2\n        val maxLetterCounts = counts.maxBy(_._2)._2\n\
    \        val maxLetterCounts = counts.maxBy(_._2)._2\n        val maxLetterCounts\
    \ = counts.maxBy(_._2)._2\n        val maxLetterCounts = counts.maxBy(_._2)._2\n\
    \        val maxLetterCounts = counts.maxBy(_._2)._2\n        val maxLetterCounts\
    \ = counts.maxBy(_._2)._2\n        val maxLetterCounts = counts.maxBy(_._2)._2\n\
    \        val maxLetterCounts = counts.maxBy(_._2)._2\n        val maxLetterCounts\
    \ = counts.maxBy(_._2)._2\n        val maxLetterCounts = counts.max", "      \
    \  val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.put(letter, map.getOrElse(letter,\
    \ 0L) + 1L)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += letter\
    \ -> count + 1\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            counts(letter) += letters.length\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val letterCounts = letters.map(letter\
    \ => letter -> letters.count(_ == letter)).toMap\n        letterCounts.maxBy(_._2)._1",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += letter -> count + 1\n        })\n        map.toMap", "   \
    \     val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => map.updated(letter, map.getOrElse(letter,0L)\
    \ + 1))\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            counts(letter) += letter.length\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> count + 1)\n        })\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            if (count > counts.contains(letter)) {\n              \
    \  counts += letter -> count\n            }\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> count + 1)\n        }\n        map.toMap",
  "        val map = mutable.HashMap.empty[String,Long]\n        test.split(\" \"\
    ).foreach(x => {\n            val count = map.getOrElse(x,0L)\n            map\
    \ += x -> count + 1\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = letters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxCount = counts.max\n        val maxLetter = counts.maxBy(_._2)\n\
    \        val maxLetterCount = maxLetter._2\n        val maxLetterOccurrence =\
    \ maxLetter._1\n        val maxLetters = maxLetterOccurrence.map(x => x._2).mkString(\"\
    \ \")\n        val maxLetterCount = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetterOccurrence = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetters = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetterCount = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetterOccurrence = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetters = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetterCount = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetterOccurrence = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetters = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetterCount = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetterOccurrence = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetters = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetterCount = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetterOccurrence = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetters = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetterCount = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetterOccurrence = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetters = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetterCount = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetterOccurrence = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetters = maxLetterOccurrence.map(x => x._1).mkString(\"\
    \ \")\n        val maxLetterCount = maxLetterOccurrence.map(x => x._", "     \
    \   val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => map += letter -> (letters.count(_ == letter)\
    \ + 1))\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = letters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxCount = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n\
    \        val maxCount = counts.maxBy(_._2)._1\n        val maxLetters = counts.filter(x\
    \ => x._2 == maxCount).map(_._1)\n        val maxLettersCount = maxLetters.map(x\
    \ => x -> maxCount)\n        val maxLettersCount = maxLettersCount.toMap\n   \
    \     letters.map(x => (x,maxLettersCount.get(x)))", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0L)\n            map +=\
    \ letter -> (count + 1)\n        })\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => {\n            map.put(letter, map.getOrElse(letter,\
    \ 0l) + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxCount = letterCounts.maxBy(_._2)._1\n        val maxLetters =\
    \ letterCounts.filter(_._2 == maxCount).map(_._1)\n        val maxLetterCounts\
    \ = letterCounts.filter(_._2 == maxCount).map(_._2)\n        val maxLetterCountMap\
    \ = new mutable.HashMap[String,Long]()\n        for (letter <- maxLetters) {\n\
    \            maxLetterCountMap(letter) = maxLetterCountMap(letter) + 1\n     \
    \   }\n        maxLetterCountMap", "        val letters = test.split(\" \").toList\n\
    \        val counts = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = letters.count(_ == letter)\n            counts +=\
    \ letter -> count\n        }\n        counts.toMap", "        val map = mutable.Map[String,Long]()\n\
    \        test.split(\" \").foreach(x => {\n            val count = map.getOrElse(x,0L)\n\
    \            map += x -> count + 1\n        })\n        map.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val map = Map()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(_ == letter)\n            map +=\
    \ (letter -> count)\n        })\n        map", "        val letters = test.split(\"\
    \ \").toList\n        val map = letters.groupBy(x => x).mapValues(_.size).toMap\n\
    \        val maxCount = map.values.max\n        val maxLetter = map.values.maxBy(x\
    \ => x)\n        val maxLetterCount = map.get(maxLetter)\n        val maxLetterCountMap\
    \ = (maxLetterCount match {\n            case Some(x) => x.toLong\n          \
    \  case None => 0l\n        }).toMap\n        val maxLetterCountMapWithMaxCount\
    \ = maxLetterCountMap + (maxCount -> maxLetterCountMap.getOrElse(maxLetter, 0l))\n\
    \        val maxLetterCountMapWithMaxCountWithMaxLetter = maxLetterCountMapWithMaxCount.filter(_._2\
    \ > maxLetterCountMapWithMaxCount.getOrElse(maxLetter, 0l))\n        val maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCount\
    \ = maxLetterCountMapWithMaxCountWithMaxLetter.filter(_._2 > maxLetterCountMapWithMaxCountWithMaxLetter.getOrElse(maxLetter,\
    \ 0l))\n        val maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetter\
    \ = maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCount.filter(_._2 > maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCount.getOrElse(maxLetter,\
    \ 0l))\n        val maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCount\
    \ = maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetter.filter(_._2\
    \ > maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetter.getOrElse(maxLetter,\
    \ 0l))\n        val maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetter\
    \ = maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCount.filter(_._2\
    \ > maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetter.getOrElse(maxLetter,\
    \ 0l))\n        val maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCount\
    \ = maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetter.filter(_._2\
    \ > maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetter.getOrElse(maxLetter,\
    \ 0l", "        val letters = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> count + 1)\n        })\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts.toMap",
  "        val map = mutable.Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => map.updated(x, map.getOrElse(x, 0L) + 1))\n        map.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            counts(letter) += letters.length\n\
    \        }\n        counts.toMap", "        val letters = test.split(\" \").toList\n\
    \        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(_ == letter)\n            counts\
    \ += letter -> count\n        })\n        counts", "        val letters = test.split(\"\
    \ \").toList\n        val map = letters.groupBy(x => x).mapValues(_.size)\n  \
    \      val maxCount = map.maxBy(_._2)._2\n        val maxLetters = map.filter(_._2\
    \ == maxCount).map(_._1)\n        val result = maxLetters.map(x => (x, map.get(x)))\n\
    \        result.toMap", "        val letters = test.split(\" \").toList\n    \
    \    val map = mutable.Map[String,Long]()\n        letters.foreach(letter => {\n\
    \            map.update(letter, map.getOrElse(letter, 0L) + 1)\n        })\n \
    \       map", "        val letters = test.split(\" \").toList\n        val map\
    \ = mutable.Map[String,Long]()\n        letters.foreach(letter => {\n        \
    \    val count = map.getOrElse(letter,0L)\n            map += (letter -> count\
    \ + 1)\n        })\n        map.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val map = letters.groupBy(x => x).mapValues(_.size)\n      \
    \  val maxCount = map.maxBy(_._2)._1\n        val maxLetters = map.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLettersCount = maxLetters.map(x => (x,\
    \ map.get(x)))\n        val maxLettersCountMap = maxLettersCount.toMap\n     \
    \   val maxLettersCountMapSorted = maxLettersCountMap.sortBy(_._2._1)\n      \
    \  val maxLettersCountMapSortedReversed = maxLettersCountMapSorted.reverse\n \
    \       val maxLettersCountMapSortedReversedMap = maxLettersCountMapSortedReversed.toMap\n\
    \        val maxLettersCountMapSortedReversedMapSorted = maxLettersCountMapSortedReversedMap.sortBy(_._2._1)\n\
    \        val maxLettersCountMapSortedReversedMapSortedReversed = maxLettersCountMapSortedReversedMapSorted.reverse\n\
    \        val maxLettersCountMapSortedReversedMapSortedReversedMap = maxLettersCountMapSortedReversedMapSortedReversed.toMap\n\
    \        val maxLettersCountMapSortedReversedMapSortedReversedMapSorted = maxLettersCountMapSortedReversedMapSortedReversedMap.sortBy(_._2._1)\n\
    \        val maxLettersCountMapSortedReversedMapSortedReversedMapSortedReversed\
    \ = maxLettersCountMapSortedReversedMapSortedReversedMapSorted.reverse\n     \
    \   val maxLettersCountMapSortedReversedMapSortedReversedMapSortedReversedMap\
    \ = maxLettersCountMapSortedReversedMapSortedReversedMapSortedReversed.toMap\n\
    \        val maxLettersCountMapSortedReversedMapSortedReversedMapSortedReversedMapSorted\
    \ = maxLettersCountMapSortedReversedMapSortedReversedMapSortedReversedMap.sortBy(_._2._1)\n\
    \        val maxLettersCountMapSortedReversedMapSortedReversedMapSortedReversedMapSortedReversed\
    \ = maxLettersCountMapSortedReversedMapSortedReversedMapSortedReversedMapSortedReversed.reverse\n\
    \        val maxLettersCountMapSortedReversedMapSortedReversedMapSortedReversedMapSortedReversedMap\
    \ = maxLettersCountMapSortedReversedMapSortedReversedMapSortedReversedMapSortedReversedMapSorted.toMap\n\
    \        val maxLettersCountMapSortedReversedMapSortedReversedMapSortedReversedMapSortedReversedMapSorted\
    \ = max", "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.updated(letter, map.getOrElse(letter,\
    \ 0L) + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val letterCounts = letters.map(letter => (letter, letters.count(letter\
    \ => letter == letter)))\n        val letterCountMap : Map[String,Long] = letterCounts.groupBy(_._1).mapValues(_.size)\n\
    \        val letterCountMapWithMax = letterCountMap.maxBy(_._2)\n        letterCountMapWithMax.map(_._1).map(letter\
    \ => (letter, letterCountMapWithMax._2))", "        val letters = test.split(\"\
    \ \").toList\n        val counts = letters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxCount = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n\
    \        val maxCount = counts.maxBy(_._2)._1\n        val maxLetters = counts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLettersCount = maxLetters.map(x => x\
    \ -> counts(x))\n        val maxLettersCount = maxLettersCount.toMap\n       \
    \ val maxLettersCount = maxLettersCount.filter(_._2 > 1)\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.toMap\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1)\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.toMap\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1)\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.toMap\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1)\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.toMap\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1)\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.toMap\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1)\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.toMap\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1)\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.toMap\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1)\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.toMap\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1)\n        val max",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(x\
    \ => x == letter)\n            counts += letter -> count\n        })\n       \
    \ counts.toMap", "        val letters = test.split(\" \").toList\n        val\
    \ letterCounts = letters.map(letter => (letter, letters.count(letter => letter\
    \ == letter)))\n        val letterCountMap = letterCounts.groupBy(_._1).mapValues(_.size)\n\
    \        letterCountMap.maxBy(_._2)._1", "        val letters = test.split(\"\
    \ \").toList\n        val map = letters.groupBy(x => x).mapValues(_.size)\n  \
    \      val maxCount = map.maxBy(_._2)._1\n        val maxLetters = map.filter(_._2\
    \ == maxCount).map(_._1)\n        val result = maxLetters.map(x => (x, map.get(x)))\n\
    \        result.toMap", "        val letters = test.split(\" \").toList\n    \
    \    val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n        val\
    \ maxCount = letterCounts.maxBy(_._2)._2\n        val maxLetters = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLetterCounts = letterCounts.filter(_._2\
    \ == maxCount)\n        val maxLetterCountMap : Map[String,Long] = maxLetterCounts.map{case\
    \ (letter,count) => (letter,count)}\n        val maxLetterCountMapWithDuplicates\
    \ : Map[String,Long] = maxLetterCountMap.toMap\n        val maxLetterCountMapWithDuplicatesMap\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicates.toMap\n        val maxLetterCountMapWithDuplicatesMapWithDuplicates\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesMap.toMap\n        val maxLetterCountMapWithDuplicatesMapWithDuplicatesMap\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesMapWithDuplicates.toMap\n\
    \        val maxLetterCountMapWithDuplicatesMapWithDuplicatesMapWithDuplicates\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesMapWithDuplicatesMap.toMap\n\
    \        val maxLetterCountMapWithDuplicatesMapWithDuplicatesMapWithDuplicatesMap\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesMapWithDuplicatesMapWithDuplicates.toMap\n\
    \        val maxLetterCountMapWithDuplicatesMapWithDuplicatesMapWithDuplicatesMapWithDuplicates\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesMapWithDuplicatesMapWithDuplicatesMap.toMap\n\
    \        val maxLetterCountMapWithDuplicatesMapWithDuplicatesMapWithDuplicatesMapWithDuplicatesMap\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesMapWithDuplicatesMapWithDuplicatesMapWithDuplicates.toMap\n\
    \        val maxLetterCountMapWithDuplicatesMapWithDuplicatesMapWithDuplicatesMapWithDuplicatesMapWithDuplicates\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesMapWithDuplicatesMapWithDuplicatesMapWithDuplicatesMap.toMap\n\
    \        val maxLetterCountMapWithDuplicatesMapWithDuplicatesMapWithDuplicatesMapWithDuplicatesMapWithDuplicatesMapWithDuplicates\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesMapWithDuplicatesMapWithDuplicatesMapWithDuplicatesMapWithDuplicatesMap.toMap\n\
    \        val maxLetterCountMapWithDuplicatesMapWithDuplicatesMapWithDuplicatesMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            counts += letter -> (letters.count(_\
    \ == letter) + 1)\n        }\n        counts.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0L)\n            map +=\
    \ (letter -> count + 1)\n        })\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(x\
    \ => x == letter)\n            counts += letter -> count\n        })\n       \
    \ counts.toMap", "        val letters = test.split(\" \").toList\n        val\
    \ map = mutable.Map[String,Long]()\n        letters.foreach(letter => {\n    \
    \        val count = map.getOrElse(letter, 0)\n            map += (letter -> count\
    \ + 1)\n        })\n        map.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            map.update(letter,map.getOrElse(letter,0l)+1l)\n        })\n\
    \        map", "        val letters = test.split(\" \").toList\n        val map\
    \ = scala.collection.mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            map.update(letter,map.getOrElse(letter,0L) + 1)\n        })\n\
    \        map.toMap", "        val letters = test.split(\" \").toList\n       \
    \ val counts = mutable.Map[String,Long]()\n        letters.foreach(letter => {\n\
    \            val count = letters.count(_ == letter)\n            counts += letter\
    \ -> count\n        })\n        counts.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = map.getOrElse(letter,0)\n           \
    \ map += letter -> (count+1)\n        }\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            counts(letter) += letters.length\n\
    \        }\n        counts.toMap", "        val letters = test.split(\" \").toList\n\
    \        val counts = letters.groupBy(x => x).mapValues(_.size)\n        val maxCount\
    \ = counts.max\n        val maxLetter = counts.maxBy(_._2)\n        val maxLetterCount\
    \ = maxLetter._2\n        val maxLetters = maxLetter._1\n        val maxLetterCounts\
    \ = maxLetters.map(x => (x,maxLetterCount))\n        val maxLetterCountMap = new\
    \ scala.collection.mutable.HashMap[String,Long]()\n        maxLetterCounts.foreach(x\
    \ => maxLetterCountMap += x)\n        val maxLetterCountMapKeys = maxLetterCountMap.keys\n\
    \        val maxLetterCountMapValues = maxLetterCountMap.values\n        val maxLetterCountMapKeysAndValues\
    \ = maxLetterCountMapKeys.zip(maxLetterCountMapValues)\n        val maxLetterCountMapKeysAndValuesSorted\
    \ = maxLetterCountMapKeysAndValues.sortBy(_._1).reverse\n        val maxLetterCountMapKeysAndValuesSortedWithMax\
    \ = maxLetterCountMapKeysAndValuesSorted.take(maxLetterCountMapKeysAndValuesSorted.size\
    \ - 1)\n        val maxLetterCountMapKeysAndValuesSortedWithMaxWithMax = maxLetterCountMapKeysAndValuesSortedWithMax.take(1)\n\
    \        val maxLetterCountMapKeysAndValuesSortedWithMaxWithMaxWithMax = maxLetterCountMapKeysAndValuesSortedWithMaxWithMax.take(1)\n\
    \        val maxLetterCountMapKeysAndValuesSortedWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountMapKeysAndValuesSortedWithMaxWithMaxWithMax.take(1)\n      \
    \  val maxLetterCountMapKeysAndValuesSortedWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountMapKeysAndValuesSortedWithMaxWithMaxWithMaxWithMax.take(1)\n\
    \        val maxLetterCountMapKeysAndValuesSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountMapKeysAndValuesSortedWithMaxWithMaxWithMaxWithMaxWithMax.take(1)\n\
    \        val maxLetterCountMapKeysAndValuesSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountMapKeysAndValuesSortedWithMaxWithMaxWithMaxWithMaxWithMax.take(1)\n\
    \        val maxLetterCountMapKeysAndValuesSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountMapKeysAndValuesSortedWithMaxWithMaxWithMaxWithMaxWithMax.take(1)\n\
    \        val maxLetterCountMapKeysAnd", "        val letters = test.split(\" \"\
    ).toList\n        val counts = letters.groupBy(x => x).mapValues(_.size)\n   \
    \     val maxCount = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n\
    \        val maxCount = counts.maxBy(_._2)._1\n        val maxLetters = counts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLettersCount = maxLetters.map(x => (x,counts.get(x)))\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n  \
    \      val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n    \
    \    val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n      \
    \  val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val\
    \ maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount =\
    \ maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 >\
    \ 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n  \
    \      val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n    \
    \    val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n      \
    \  val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val\
    \ maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount =\
    \ maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 >\
    \ 1).map(_._1)\n        val ", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => counts(letter) += 1)\n        counts.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0L)\n            map +=\
    \ letter -> (count + 1)\n        })\n        map", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = scala.collection.mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        }\n        map.toMap", "  \
    \      val letters = test.split(\" \").toList\n        val map = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = map.maxBy(_._2)._1\n       \
    \ val maxLetters = map.filter(_._2 == maxCount).map(_._1)\n        val maxLettersCount\
    \ = maxLetters.map(x => (x, map.get(x)))\n        val maxLettersCount = maxLettersCount.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val maxLettersCount = maxLettersCount.maxBy(_._2)._1\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val maxLettersCount = maxLettersCount.maxBy(_._2)._1\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val maxLettersCount = maxLettersCount.maxBy(_._2)._1\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val maxLettersCount = maxLettersCount.maxBy(_._2)._1\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val maxLettersCount = maxLettersCount.maxBy(_._2)._1\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val maxLettersCount = maxLettersCount.maxBy(_._2)._1\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val maxLettersCount = maxLettersCount.maxBy(_._2)._1\n        val maxLettersCount\
    \ = maxLettersCount.map(_._1)\n        val maxLettersCount = maxLettersCount.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val maxLettersCount = maxLettersCount.", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = counts.getOrElse(letter,0)\n            counts\
    \ += letter -> (count+1)\n        })\n        counts.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       for (letter <- letters) {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        }\n        map", "        val\
    \ map = mutable.Map[String,Long]()\n        test.split(\" \").foreach(x => map.updated(x,\
    \ map.getOrElse(x, 0L) + 1))\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = counts.getOrElse(letter,0L)\n       \
    \     counts += letter -> count + 1\n        }\n        counts.toMap", "     \
    \   val letters = test.split(\" \").toList\n        val counts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = counts.max\n        val maxLetter\
    \ = counts.maxBy(_._2)._1\n        val maxCount = counts.maxBy(_._2)._1\n    \
    \    val maxLetters = counts.filter(_._2 == maxCount).map(_._1)\n        val maxLettersCount\
    \ = maxLetters.map(x => (x,counts.get(x)))\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 >\
    \ 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n  \
    \      val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n    \
    \    val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n      \
    \  val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val\
    \ maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount =\
    \ maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 >\
    \ 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n  \
    \      val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n    \
    \    val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n      \
    \  val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val\
    \ maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val ", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count+1)\n        })\n        map.toMap", "   \
    \     val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> count + 1)\n        })\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += letter -> (count+1)\n        })\n        map.toMap", "   \
    \     val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> count + 1)\n        })\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = counts.max\n        val maxLetter\
    \ = counts.maxBy(_._2)\n        val maxLetterCount = maxLetter._2\n        val\
    \ maxLetterOccurrences = maxLetter._1\n        val maxLetters = letters.filter(x\
    \ => x == maxLetter)\n        val maxLettersCount = maxLetters.size\n        val\
    \ maxLetterOccurrencesCount = maxLetterOccurrences.size\n        val maxLettersOccurrencesCount\
    \ = maxLettersCount + maxLetterOccurrencesCount\n        val maxLettersOccurrencesCountMap\
    \ : Map[String,Long] = maxLettersOccurrencesCount match {\n            case 0\
    \ => Map.empty[String,Long]\n            case _ => maxLettersOccurrencesCount\
    \ -> maxLettersOccurrencesCount\n        }\n        val maxLettersMap : Map[String,Long]\
    \ = maxLettersCount match {\n            case 0 => Map.empty[String,Long]\n  \
    \          case _ => maxLettersCount -> maxLettersCount\n        }\n        val\
    \ maxLettersOccurrencesCountMap : Map[String,Long] = maxLettersOccurrencesCount\
    \ match {\n            case 0 => Map.empty[String,Long]\n            case _ =>\
    \ maxLettersOccurrencesCount -> maxLettersOccurrencesCount\n        }\n      \
    \  val maxLettersMap : Map[String,Long] = maxLettersCount match {\n          \
    \  case 0 => Map.empty[String,Long]\n            case _ => maxLettersCount ->\
    \ maxLettersCount\n        }\n        val maxLettersMap : Map[String,Long] = maxLettersCount\
    \ match {\n            case 0 => Map.empty[String,Long]\n            case _ =>\
    \ maxLettersCount -> maxLettersCount\n        }\n        val maxLettersMap : Map[String,Long]\
    \ = maxLettersCount match {\n            case 0 => Map.empty[String,Long]\n  \
    \          case _ => maxLettersCount -> maxLettersCount\n        }\n        val\
    \ maxLettersMap : Map[String,Long] = maxLettersCount match {\n            case\
    \ 0 => Map.empty[String,Long]\n            case _ => maxLettersCount -> maxLettersCount\n\
    \        }\n        val maxLettersMap : Map[String,Long] = maxLettersCount match\
    \ {\n            case 0 => Map.empty[String,Long]\n            case _ => maxLettersCount\
    \ -> maxLettersCount\n        }\n        val maxLettersMap : Map[String,Long]\
    \ = maxLettersCount match {\n            case 0 => Map.empty[String,Long]", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count+1)\n        })\n        map"]
stop_tokens:
- "\n    }\n"
