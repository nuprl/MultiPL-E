language: scala
name: HumanEval_56_correct_bracketing
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = bracketsArray.filter(_ == '<')\n        val closingBrackets = bracketsArray.filter(_\
    \ == '>')\n        openingBrackets.size == closingBrackets.size\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp368hop7w.scala:26)\n\tat Problem.main(tmp368hop7w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsArray = new Array[Int](bracketsArrayLength)\n\
    \        val closingBracketsArray = new Array[Int](bracketsArrayLength)\n    \
    \    var openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n    \
    \    var openingBracketsCount = 0\n        var closingBracketsCount = 0\n    \
    \    var openingBracketsCount2 = 0\n        var closingBracketsCount2 = 0\n  \
    \      var openingBracketsCount3 = 0\n        var closingBracketsCount3 = 0\n\
    \        var openingBracketsCount4 = 0\n        var closingBracketsCount4 = 0\n\
    \        var openingBracketsCount5 = 0\n        var closingBracketsCount5 = 0\n\
    \        var openingBracketsCount6 = 0\n        var closingBracketsCount6 = 0\n\
    \        var openingBracketsCount7 = 0\n        var closingBracketsCount7 = 0\n\
    \        var openingBracketsCount8 = 0\n        var closingBracketsCount8 = 0\n\
    \        var openingBracketsCount9 = 0\n        var closingBracketsCount9 = 0\n\
    \        var openingBracketsCount10 = 0\n        var closingBracketsCount10 =\
    \ 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBrackets\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9id3if2v.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9id3if2v.scala:67:5 ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsArray = Array[Int](bracketsArrayLength)\n\
    \        val closingBracketsArray = Array[Int](bracketsArrayLength)\n        var\
    \ openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n        var\
    \ openingBracketsCount = 0\n        var closingBracketsCount = 0\n        var\
    \ currentOpeningBracket = 0\n        var currentClosingBracket = 0\n        var\
    \ currentOpeningBracketCount = 0\n        var currentClosingBracketCount = 0\n\
    \        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var current\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmped3ntc1j.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmped3ntc1j.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentOpeningBracketCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentOpeningBracketCount\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentOpeningBracketCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmped3ntc1j.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mvar\e[0m \e[36mcurrentClosingBracketCount\e[0m = \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentClosingBracketCount is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentClosingBracketCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmped3ntc1j.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m \e[36mcurrentOpeningBracketCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentOpeningBracketCount is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentOpeningBracketCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmped3ntc1j.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m \e[36mcurrentClosingBracketCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentClosingBracketCount is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentClosingBracketCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded met"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.subsetOf(closingBrackets)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0sblzqs.scala:20)\n\tat Problem.main(tmpo0sblzqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = bracketsArray.filter(c => c == '<')\n        val closingBracketsArray = bracketsArray.filter(c\
    \ => c == '>')\n        openingBracketsArray.forall(c => closingBracketsArray.contains(c))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp383zhlks.scala:21)\n\tat Problem.main(tmp383zhlks.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketCount = 0\n        var closingBracketCount\
    \ = 0\n        var openingBracketIndex = 0\n        var closingBracketIndex =\
    \ 0\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracket = bracketsArray(0)\n        var closingBracket\
    \ = bracketsArray(0)\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var opening\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu6yqbyjr.scala:82:4 ----------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu6yqbyjr.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mopeningBracketFound\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mopeningBracketFound\
    \ is already defined as \e[33mvariable\e[0m \e[35mopeningBracketFound\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu6yqbyjr.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mvar\e[0m \e[36mclosingBracketFound\e[0m = \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mclosingBracketFound is already defined as \e[33mvariable\e[0m \e[35mclosingBracketFound\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu6yqbyjr.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mvar\e[0m \e[36mopeningBracketFound\e[0m = \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mopeningBracketFound is already defined as \e[33mvariable\e[0m \e[35mopeningBracketFound\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu6yqbyjr.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mvar\e[0m \e[36mclosingBracketFound\e[0m = \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mclosingBracketFound is already defined as \e[33mvariable\e[0m \e[35mclosingBracketFound\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- "
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpztnm0jh3.scala:24)\n\tat Problem.main(tmpztnm0jh3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsCount = bracketsArray.count(_\
    \ == '<')\n        val closingBracketsCount = bracketsArray.count(_ == '>')\n\
    \        openingBracketsCount != closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpol4twq2e.scala:22)\n\tat Problem.main(tmpol4twq2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"<\")\n        val closingBracketsArray = Array(\">\")\n        val\
    \ openingBracketsCount = openingBracketsArray.length\n        val closingBracketsCount\
    \ = closingBracketsArray.length\n        val openingBracketsIndex = 0\n      \
    \  val closingBracketsIndex = 0\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArrayIterator = openingBracketsArray.iterator\n        val\
    \ closingBracketsArrayIterator = closingBracketsArray.iterator\n        val openingBracketsArrayIteratorIndex\
    \ = openingBracketsArray.length\n        val closingBracketsArrayIteratorIndex\
    \ = closingBracketsArray.length\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val opening\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd4xb_iv1.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd4xb_iv1.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopeningBracketsArrayIteratorIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mopeningBracketsArrayIteratorIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mopeningBracketsArrayIteratorIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd4xb_iv1.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayIteratorIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayIteratorIndex is already defined as \e\
    [33mvalue\e[0m \e[35mclosingBracketsArrayIteratorIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd4xb_iv1.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopeningBracketsArrayIteratorIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mopeningBracketsArrayIteratorIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mopeningBracketsArrayIteratorIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd4xb_iv1.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayIteratorIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayIteratorIndex is already defined as \e\
    [33mvalu"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.count(_ > 0)\n        val closingBracketsCount = closingBrackets.count(_\
    \ > 0)\n        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp2igudz0x.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmp2igudz0x.scala:15)\n\
    \tat Problem$.main(tmp2igudz0x.scala:22)\n\tat Problem.main(tmp2igudz0x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpztnm0jh3.scala:24)\n\tat Problem.main(tmpztnm0jh3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentChar = bracketsArray(0)\n        var currentCharIsClosingBracket\
    \ = false\n        var currentCharIsOpeningBracket = false\n        var currentCharIsOpeningBracketOrClosingBracket\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqual = false\n\
    \        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrComma = false\n\
    \        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColon\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOrSemicolon\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOrSemicolonOrComma\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOrSemicolonOrCommaOrEqual\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOrSemicolonOrCommaOrEqualOrComma\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOrSemicolonOrCommaOrEqualOrCommaOrColon\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOrSemicolonOrCommaOrEqualOrCommaOrColonOrSemicolon\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOrSemicolonOrCommaOrEqualOrCommaOrColonOrSemicolonOrComma\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOrSemicolonOrCommaOrEqualOrCommaOrColonOrSemicolonOrCommaOrEqual\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOrSemicolonOrCommaOrEqualOrCommaOrColonOrSemicolonOrCommaOrEqualOrComma\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOr\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_n19o9b_.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_n19o9b_.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5vqai9nj.scala:22)\n\tat Problem.main(tmp5vqai9nj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"<\", \">\")\n        val closingBracketsArray = Array(\"<\", \">\"\
    )\n        val openingBracketsCount = openingBracketsArray.length\n        val\
    \ closingBracketsCount = closingBracketsArray.length\n        val openingBracketsArrayIndex\
    \ = 0\n        val closingBracketsArrayIndex = 0\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val opening\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz1khj8q4.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz1khj8q4.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopeningBracketsArrayLength\e[0m = openingBracketsArray.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz1khj8q4.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayLength\e\
    [0m = closingBracketsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mclosingBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz1khj8q4.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArrayLength\e\
    [0m = openingBracketsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz1khj8q4.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayLength\e\
    [0m = closingBracketsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsSet\
    \ = Set(openingBrackets)\n        val closingBracketsSet = Set(closingBrackets)\n\
    \        openingBracketsSet.subsetOf(closingBracketsSet)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpzqw4tz9v.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpzqw4tz9v.scala:15)\n\
    \tat Problem$.main(tmpzqw4tz9v.scala:22)\n\tat Problem.main(tmpzqw4tz9v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toList\n        val openingBrackets\
    \ = bracketsArray.filter(_.isLetter)\n        val closingBrackets = bracketsArray.filter(_.isLetter)\n\
    \        val openingBracketsCount = openingBrackets.size\n        val closingBracketsCount\
    \ = closingBrackets.size\n        openingBracketsCount == closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmagbr2fm.scala:27)\n\tat Problem.main(tmpmagbr2fm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.toSet.size\n        val closingBracketsCount = closingBrackets.toSet.size\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmprq6znd3f.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmprq6znd3f.scala:15)\n\
    \tat Problem$.main(tmprq6znd3f.scala:22)\n\tat Problem.main(tmprq6znd3f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsArray = Array.fill(\n   \
    \         bracketsArrayLength\n        ){\n            false\n        }\n    \
    \    val closingBracketsArray = Array.fill(\n            bracketsArrayLength\n\
    \        ){\n            false\n        }\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracketsArrayLength = closingBracketsArrayLength\n        val openingBracketsArrayLength\
    \ = openingBracketsArrayLength\n        val closingBracketsArrayLength = closingBracketsArrayLength\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracketsArrayLength = closingBracketsArrayLength\n        val openingBracketsArrayLength\
    \ = openingBracketsArrayLength\n        val closingBracketsArrayLength = closingBracketsArrayLength\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracketsArrayLength = closingBracketsArrayLength\n        val openingBracketsArrayLength\
    \ = openingBracketsArrayLength\n        val closingBracketsArrayLength = closingBracketsArrayLength\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracketsArrayLength = closingBracketsArrayLength\n        val openingBracketsArrayLength\
    \ = openingBracketsArrayLength\n        val closingBracketsArrayLength = closingBracketsArrayLength\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracketsArrayLength = closingBracketsArrayLength\n        val openingBracketsArrayLength\
    \ = openingBracketsArrayLength\n        val closingBracketsArrayLength = closingBracketsArrayLength\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracketsArrayLength = closingBracketsArrayLength\n        val openingBracketsArrayLength\
    \ = openingBracketsArrayLength\n        val closingBracketsArrayLength = closingBracketsArrayLength\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracket\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpknpo7j4_.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpknpo7j4_.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopeningBracketsArrayLength\e[0m = openingBracketsArrayLength\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpknpo7j4_.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayLength\e\
    [0m = closingBracketsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mclosingBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpknpo7j4_.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArrayLength\e\
    [0m = openingBracketsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpknpo7j4_.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayLength\e\
    [0m = closingBracketsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659799894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ = 0\n        var closingBrackets = 0\n        var currentChar = 0\n        var\
    \ currentCharIsOpeningBracket = false\n        var currentCharIsClosingBracket\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracket = false\n \
    \       var currentCharIsClosingBracketOrOpeningBracket = false\n        var currentCharIsOpeningBracketOrClosingBracketOrOpeningBracket\
    \ = false\n        var currentCharIsClosingBracketOrOpeningBracketOrClosingBracket\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracket\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracket\
    \ = false\n        var currentCharIsClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracket\
    \ = false\n        var currentCharIsClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracket\
    \ = false\n        var currentCharIsClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracket\
    \ = false\n        var currentCharIsClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracket\
    \ = false\n        var currentCharIsClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracket\
    \ = false\n        var currentCharIsClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracket\
    \ = false\n        var currentCharIsClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBra\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnw4i8tgs.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnw4i8tgs.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentCharIsClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracket\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentCharIsClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracket\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  currentCharIsClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracket\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpnw4i8tgs.scala:34:5 ---------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ = 0\n        var closingBrackets = 0\n        for(i <- 0 until bracketsArray.length){\n\
    \            if(bracketsArray(i) == '<'){\n                openingBrackets +=\
    \ 1\n            }\n            if(bracketsArray(i) == '>'){\n               \
    \ closingBrackets += 1\n            }\n        }\n        openingBrackets == closingBrackets\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa84y9737.scala:34)\n\tat Problem.main(tmpa84y9737.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '<')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == '>')\n        openingBracketsCount == closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz4nydo9q.scala:26)\n\tat Problem.main(tmpz4nydo9q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '<')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == '>')\n        openingBracketsCount == closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz4nydo9q.scala:26)\n\tat Problem.main(tmpz4nydo9q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.foldLeft(0)(_ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_\
    \ + _)\n        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpxedn1f9t.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpxedn1f9t.scala:15)\n\
    \tat Problem$.main(tmpxedn1f9t.scala:22)\n\tat Problem.main(tmpxedn1f9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.foldLeft(0)(_ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_\
    \ + _)\n        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpxedn1f9t.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpxedn1f9t.scala:15)\n\
    \tat Problem$.main(tmpxedn1f9t.scala:22)\n\tat Problem.main(tmpxedn1f9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.foldLeft(0)(_ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_\
    \ + _)\n        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpxedn1f9t.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpxedn1f9t.scala:15)\n\
    \tat Problem$.main(tmpxedn1f9t.scala:22)\n\tat Problem.main(tmpxedn1f9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketCount = 0\n        var closingBracketCount\
    \ = 0\n        var currentChar = bracketsArray(0)\n        var currentCharCount\
    \ = 0\n        var isOpeningBracket = true\n        var isClosingBracket = false\n\
    \        var isCurrentCharOpeningBracket = false\n        var isCurrentCharClosingBracket\
    \ = false\n        var isCurrentCharInsideBracket = false\n        var isCurrentCharInsideBrackets\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInside\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcx5kopru.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcx5kopru.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m\
    \ \e[36misCurrentCharInsideBracketsArray\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0misCurrentCharInsideBracketsArray is already defined as \e[33mvariable\e\
    [0m \e[35misCurrentCharInsideBracketsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcx5kopru.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m\
    \ \e[36misCurrentCharInsideBracketsArray\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0misCurrentCharInsideBracketsArray is already defined as \e[33mvariable\e\
    [0m \e[35misCurrentCharInsideBracketsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcx5kopru.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m\
    \ \e[36misCurrentCharInsideBracketsArray\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0misCurrentCharInsideBracketsArray is already defined as \e[33mvariable\e\
    [0m \e[35misCurrentCharInsideBracketsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcx5kopru.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m\
    \ \e[36misCurrentCharInsideBracketsArray\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0misCurrentCharInsideBracketsArray is al"
  stdout: ''
  timestamp: 1659799894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCountInCurrentBracket = 0\n        var closingBracketsCountInCurrentBracket\
    \ = 0\n        var currentBracket = bracketsArray(0)\n        var currentBracketCount\
    \ = 0\n        var currentBracketCountInCurrentBracket = 0\n        var currentBracketCountInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrent\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7ki_tqee.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7ki_tqee.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp7ki_tqee.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\n\
    \e[3"
  stdout: ''
  timestamp: 1659799893
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.size == closingBracketsSet.size && openingBracketsSet.size\
    \ == openingBracketsCount + closingBracketsCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeuji_le2.scala:24)\n\tat Problem.main(tmpeuji_le2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsMap\
    \ = mutable.Map[String, Int]()\n        val closingBracketsMap = mutable.Map[String,\
    \ Int]()\n        openingBrackets.foreach(openingBracket => {\n            val\
    \ closingBracket = closingBrackets(openingBracketsCount - openingBracketsMap.getOrElse(openingBracket,\
    \ 0))\n            openingBracketsMap += (openingBracket -> 1)\n            closingBracketsMap\
    \ += (closingBracket -> 1)\n        })\n        closingBracketsCount match {\n\
    \            case 0 => true\n            case _ => openingBracketsMap.toSeq ==\
    \ closingBracketsMap.toSeq\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsjqv7vhu.scala:19:33 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpsjqv7vhu.scala:20:33 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799900
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.subsetOf(closingBrackets)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0sblzqs.scala:20)\n\tat Problem.main(tmpo0sblzqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5vqai9nj.scala:22)\n\tat Problem.main(tmp5vqai9nj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ : List[Char] = Nil\n        var closingBrackets : List[Char] = Nil\n       \
    \ var openingBracketsCount : Int = 0\n        var closingBracketsCount : Int =\
    \ 0\n        for(i <- 0 until bracketsArray.length){\n            if(bracketsArray(i)\
    \ == '<'){\n                openingBrackets = openingBrackets :+ bracketsArray(i)\n\
    \                openingBracketsCount += 1\n            }\n            if(bracketsArray(i)\
    \ == '>'){\n                closingBrackets = closingBrackets :+ bracketsArray(i)\n\
    \                closingBracketsCount += 1\n            }\n        }\n       \
    \ if(openingBracketsCount == closingBracketsCount){\n            true\n      \
    \  }else{\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwv0cpo6c.scala:42)\n\tat Problem.main(tmpwv0cpo6c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        var openingBracketsCountArray\
    \ = new Array[Int](bracketsArray.length)\n        var closingBracketsCountArray\
    \ = new Array[Int](bracketsArray.length)\n        var openingBracketsCountArrayIndex\
    \ = 0\n        var closingBracketsCountArrayIndex = 0\n        var openingBracketsCountArrayIndex2\
    \ = 0\n        var closingBracketsCountArrayIndex2 = 0\n        var openingBracketsCountArrayIndex3\
    \ = 0\n        var closingBracketsCountArrayIndex3 = 0\n        var openingBracketsCountArrayIndex4\
    \ = 0\n        var closingBracketsCountArrayIndex4 = 0\n        var openingBracketsCountArrayIndex5\
    \ = 0\n        var closingBracketsCountArrayIndex5 = 0\n        var openingBracketsCountArrayIndex6\
    \ = 0\n        var closingBracketsCountArrayIndex6 = 0\n        var openingBracketsCountArrayIndex7\
    \ = 0\n        var closingBracketsCountArrayIndex7 = 0\n        var openingBracketsCountArrayIndex8\
    \ = 0\n        var closingBracketsCountArrayIndex8 = 0\n        var openingBracketsCountArrayIndex9\
    \ = 0\n        var closingBracketsCountArrayIndex9 = 0\n        var openingBracketsCountArrayIndex10\
    \ = 0\n        var closingBracketsCountArrayIndex10 = 0\n        var openingBracketsCountArrayIndex11\
    \ = 0\n        var closingBracketsCountArrayIndex11 = 0\n        var openingBracketsCountArrayIndex12\
    \ = 0\n        var closingBracketsCountArrayIndex12 = 0\n        var openingBracketsCountArrayIndex13\
    \ = 0\n        var closingBracketsCountArrayIndex13 = 0\n        var openingBracketsCountArrayIndex14\
    \ = 0\n        var closingBracketsCountArrayIndex14 = 0\n        var openingBracketsCountArrayIndex15\
    \ = 0\n        var closingBracketsCountArrayIndex15 = 0\n        var openingBracketsCountArrayIndex16\
    \ = 0\n        var closingBracketsCountArrayIndex16 = 0\n        var openingBracketsCountArrayIndex17\
    \ = 0\n        var closingBracketsCountArrayIndex17 = 0\n        var openingBracketsCountArrayIndex18\
    \ = 0\n        var closingBracketsCountArrayIndex18 = 0\n        var openingBracketsCountArrayIndex19\
    \ = 0\n        var closingBracketsCountArrayIndex19 = 0\n        var openingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpchflx_f0.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpchflx_f0.scala:59:5 ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentBracketsCount = 0\n        var currentBracketsCount2\
    \ = 0\n        var currentBracketsCount3 = 0\n        var currentBracketsCount4\
    \ = 0\n        var currentBracketsCount5 = 0\n        var currentBracketsCount6\
    \ = 0\n        var currentBracketsCount7 = 0\n        var currentBracketsCount8\
    \ = 0\n        var currentBracketsCount9 = 0\n        var currentBracketsCount10\
    \ = 0\n        var currentBracketsCount11 = 0\n        var currentBracketsCount12\
    \ = 0\n        var currentBracketsCount13 = 0\n        var currentBracketsCount14\
    \ = 0\n        var currentBracketsCount15 = 0\n        var currentBracketsCount16\
    \ = 0\n        var currentBracketsCount17 = 0\n        var currentBracketsCount18\
    \ = 0\n        var currentBracketsCount19 = 0\n        var currentBracketsCount20\
    \ = 0\n        var currentBracketsCount21 = 0\n        var currentBracketsCount22\
    \ = 0\n        var currentBracketsCount23 = 0\n        var currentBracketsCount24\
    \ = 0\n        var currentBracketsCount25 = 0\n        var currentBracketsCount26\
    \ = 0\n        var currentBracketsCount27 = 0\n        var currentBracketsCount28\
    \ = 0\n        var currentBracketsCount29 = 0\n        var currentBracketsCount30\
    \ = 0\n        var currentBracketsCount31 = 0\n        var currentBracketsCount32\
    \ = 0\n        var currentBracketsCount33 = 0\n        var currentBracketsCount34\
    \ = 0\n        var currentBracketsCount35 = 0\n        var currentBracketsCount36\
    \ = 0\n        var currentBracketsCount37 = 0\n        var currentBracketsCount38\
    \ = 0\n        var currentBracketsCount39 = 0\n        var currentBracketsCount40\
    \ = 0\n        var currentBracketsCount41 = 0\n        var currentBracketsCount42\
    \ = 0\n        var currentBracketsCount43 = 0\n        var currentBracketsCount44\
    \ = 0\n        var currentBracketsCount45 = 0\n        var currentBracketsCount46\
    \ = 0\n        var currentBracketsCount47 = 0\n        var currentBracketsCount48\
    \ = 0\n        var currentBracketsCount49 = 0\n        var currentBracketsCount50\
    \ = 0\n        var currentBracketsCount51 = 0\n        var currentBracketsCount52\
    \ = 0\n        var currentBrackets\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvk9y9l1k.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpvk9y9l1k.scala:72:5 ---------------------\e[0m\e[0m\n\e[31m72 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentChar = 0\n        var nextChar = 0\n        var currentBracket\
    \ = 0\n        var nextBracket = 0\n        var currentBracketIndex = 0\n    \
    \    var nextBracketIndex = 0\n        var currentBracketChar = 0\n        var\
    \ nextBracketChar = 0\n        var currentBracketCharIndex = 0\n        var nextBracketCharIndex\
    \ = 0\n        var currentBracketCharIndex = 0\n        var nextBracketCharIndex\
    \ = 0\n        var currentCharIndex = 0\n        var nextCharIndex = 0\n     \
    \   var currentCharIndex = 0\n        var nextCharIndex = 0\n        var currentCharIndex\
    \ = 0\n        var nextCharIndex = 0\n        var currentCharIndex = 0\n     \
    \   var nextCharIndex = 0\n        var currentCharIndex = 0\n        var nextCharIndex\
    \ = 0\n        var currentCharIndex = 0\n        var nextCharIndex = 0\n     \
    \   var currentCharIndex = 0\n        var nextCharIndex = 0\n        var currentCharIndex\
    \ = 0\n        var nextCharIndex = 0\n        var currentCharIndex = 0\n     \
    \   var nextCharIndex = 0\n        var currentCharIndex = 0\n        var nextCharIndex\
    \ = 0\n        var currentCharIndex = 0\n        var nextCharIndex = 0\n     \
    \   var currentCharIndex = 0\n        var nextCharIndex = 0\n        var currentCharIndex\
    \ = 0\n        var nextCharIndex = 0\n        var currentCharIndex = 0\n     \
    \   var nextCharIndex = 0\n        var currentCharIndex = 0\n        var nextCharIndex\
    \ = 0\n        var currentCharIndex = 0\n        var nextCharIndex = 0\n     \
    \   var currentCharIndex = 0\n        var nextCharIndex = 0\n        var currentCharIndex\
    \ = 0\n        var nextCharIndex = 0\n        var currentCharIndex = 0\n     \
    \   var nextCharIndex = 0\n        var currentCharIndex = 0\n        var nextCharIndex\
    \ = 0\n        var currentCharIndex = 0\n        var nextCharIndex = 0\n     \
    \   var currentCharIndex = 0\n        var nextCharIndex = 0\n        var currentCharIndex\
    \ = 0\n        var nextCharIndex = 0\n        var currentCharIndex = 0\n     \
    \   var nextCharIndex = 0\n        var currentCharIndex = 0\n        var nextCharIndex\
    \ = 0\n        var currentCharIndex = 0\n        var nextCharIndex = 0\n     \
    \   var currentCharIndex = 0\n        var nextCharIndex = 0\n        var currentCharIndex\
    \ = 0\n        var nextCharIndex = 0\n        var currentCharIndex = 0\n     \
    \   var nextCharIndex = 0\n        var currentCharIndex = 0\n        var nextCharIndex\
    \ = 0\n        var currentCharIndex = 0\n        var nextCharIndex = 0\n     \
    \   var currentCharIndex = 0\n        var nextCharIndex = 0\n        var currentCharIndex\
    \ = 0\n\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl22kck3b.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketCharIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketCharIndex is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentBracketCharIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl22kck3b.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m \e[36mnextBracketCharIndex\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextBracketCharIndex is already defined as \e[33mvariable\e\
    [0m \e[35mnextBracketCharIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl22kck3b.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m \e[36mcurrentCharIndex\e[0m =\
    \ \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mcurrentCharIndex is already defined as \e[33mvariable\e[0m \e[35mcurrentCharIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl22kck3b.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mvar\e[0m \e[36mnextCharIndex\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnextCharIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mnextCharIndex\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpl22kck3b.scala:35:12 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentCharIndex\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentCharI"
  stdout: ''
  timestamp: 1659799903
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = bracketsArray.filter(x => x == '<')\n        val closingBrackets = bracketsArray.filter(x\
    \ => x == '>')\n        openingBrackets.size == closingBrackets.size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpanl77ry6.scala:26)\n\tat Problem.main(tmpanl77ry6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"<\")\n        val closingBracketsArray = Array(\">\")\n        val\
    \ openingBracketsCount = openingBracketsArray.length\n        val closingBracketsCount\
    \ = closingBracketsArray.length\n        val openingBracketsIndex = 0\n      \
    \  val closingBracketsIndex = 0\n        var openingBracketsCountInCurrentBracket\
    \ = 0\n        var closingBracketsCountInCurrentBracket = 0\n        var currentBracket\
    \ = openingBracketsArray(0)\n        var currentBracketCount = 0\n        var\
    \ currentBracketCountInCurrentBracket = 0\n        var currentBracketIndex = openingBracketsIndex\n\
    \        var currentBracketIndexInCurrentBracket = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4hi904es.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4hi904es.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4hi904es.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799903
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.count(_ > 0)\n        val closingBracketsCount = closingBrackets.count(_\
    \ > 0)\n        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp2igudz0x.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmp2igudz0x.scala:15)\n\
    \tat Problem$.main(tmp2igudz0x.scala:22)\n\tat Problem.main(tmp2igudz0x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = mutable.HashSet[Char]()\n        val closingBrackets = mutable.HashSet[Char]()\n\
    \        var openingBracketsCount = 0\n        var closingBracketsCount = 0\n\
    \        for (i <- 0 until bracketsArray.length) {\n            if (bracketsArray(i)\
    \ == '<') {\n                openingBrackets += bracketsArray(i).toChar\n    \
    \            openingBracketsCount += 1\n            } else if (bracketsArray(i)\
    \ == '>') {\n                closingBrackets += bracketsArray(i).toChar\n    \
    \            closingBracketsCount += 1\n            }\n        }\n        if (openingBracketsCount\
    \ != closingBracketsCount) {\n            return false\n        }\n        for\
    \ (i <- 0 until openingBrackets.size) {\n            if (!closingBrackets.contains(openingBrackets(i)))\
    \ {\n                return false\n            }\n        }\n        true\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptiaedype.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptiaedype.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799901
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.toSet.size // number of opening brackets\n        val closingBracketsCount\
    \ = closingBrackets.toSet.size // number of closing brackets\n        openingBracketsCount\
    \ == closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp9j_cpmoa.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmp9j_cpmoa.scala:15)\n\
    \tat Problem$.main(tmp9j_cpmoa.scala:22)\n\tat Problem.main(tmp9j_cpmoa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799906
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '<')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == '>')\n        openingBracketsCount == closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz4nydo9q.scala:26)\n\tat Problem.main(tmpz4nydo9q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = bracketsArray.filter(c => c == '<')\n        val closingBracketsArray = bracketsArray.filter(c\
    \ => c == '>')\n        openingBracketsArray.forall(c => closingBracketsArray.contains(c))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp383zhlks.scala:21)\n\tat Problem.main(tmp383zhlks.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        var openingBracketsCountArray\
    \ = new Array[Int](bracketsArray.length)\n        var closingBracketsCountArray\
    \ = new Array[Int](bracketsArray.length)\n        var openingBracketsCountArrayIndex\
    \ = 0\n        var closingBracketsCountArrayIndex = 0\n        var openingBracketsCountArrayIndex2\
    \ = 0\n        var closingBracketsCountArrayIndex2 = 0\n        var openingBracketsCountArrayIndex3\
    \ = 0\n        var closingBracketsCountArrayIndex3 = 0\n        var openingBracketsCountArrayIndex4\
    \ = 0\n        var closingBracketsCountArrayIndex4 = 0\n        var openingBracketsCountArrayIndex5\
    \ = 0\n        var closingBracketsCountArrayIndex5 = 0\n        var openingBracketsCountArrayIndex6\
    \ = 0\n        var closingBracketsCountArrayIndex6 = 0\n        var openingBracketsCountArrayIndex7\
    \ = 0\n        var closingBracketsCountArrayIndex7 = 0\n        var openingBracketsCountArrayIndex8\
    \ = 0\n        var closingBracketsCountArrayIndex8 = 0\n        var openingBracketsCountArrayIndex9\
    \ = 0\n        var closingBracketsCountArrayIndex9 = 0\n        var openingBracketsCountArrayIndex10\
    \ = 0\n        var closingBracketsCountArrayIndex10 = 0\n        var openingBracketsCountArrayIndex11\
    \ = 0\n        var closingBracketsCountArrayIndex11 = 0\n        var openingBracketsCountArrayIndex12\
    \ = 0\n        var closingBracketsCountArrayIndex12 = 0\n        var openingBracketsCountArrayIndex13\
    \ = 0\n        var closingBracketsCountArrayIndex13 = 0\n        var openingBracketsCountArrayIndex14\
    \ = 0\n        var closingBracketsCountArrayIndex14 = 0\n        var openingBracketsCountArrayIndex15\
    \ = 0\n        var closingBracketsCountArrayIndex15 = 0\n        var openingBracketsCountArrayIndex16\
    \ = 0\n        var closingBracketsCountArrayIndex16 = 0\n        var openingBracketsCountArrayIndex17\
    \ = 0\n        var closingBracketsCountArrayIndex17 = 0\n        var openingBracketsCountArrayIndex18\
    \ = 0\n        var closingBracketsCountArrayIndex18 = 0\n        var openingBracketsCountArrayIndex19\
    \ = 0\n        var closingBracketsCountArrayIndex19 = 0\n        var openingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpchflx_f0.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpchflx_f0.scala:59:5 ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = mutable.HashSet[Char]()\n        val closingBrackets = mutable.HashSet[Char]()\n\
    \        val openingBracketsCount = mutable.HashMap[Char, Int]()\n        val\
    \ closingBracketsCount = mutable.HashMap[Char, Int]()\n        val openingBracketsCountArray\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closingBracketsCountArray = mutable.ArrayBuffer.empty[Int]\n\
    \        val openingBracketsCountArray2 = mutable.ArrayBuffer.empty[Int]\n   \
    \     val closingBracketsCountArray2 = mutable.ArrayBuffer.empty[Int]\n      \
    \  val openingBracketsCountArray3 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closingBracketsCountArray3 = mutable.ArrayBuffer.empty[Int]\n        val openingBracketsCountArray4\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closingBracketsCountArray4 = mutable.ArrayBuffer.empty[Int]\n\
    \        val openingBracketsCountArray5 = mutable.ArrayBuffer.empty[Int]\n   \
    \     val closingBracketsCountArray5 = mutable.ArrayBuffer.empty[Int]\n      \
    \  val openingBracketsCountArray6 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closingBracketsCountArray6 = mutable.ArrayBuffer.empty[Int]\n        val openingBracketsCountArray7\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closingBracketsCountArray7 = mutable.ArrayBuffer.empty[Int]\n\
    \        val openingBracketsCountArray8 = mutable.ArrayBuffer.empty[Int]\n   \
    \     val closingBracketsCountArray8 = mutable.ArrayBuffer.empty[Int]\n      \
    \  val openingBracketsCountArray9 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closingBracketsCountArray9 = mutable.ArrayBuffer.empty[Int]\n        val openingBracketsCountArray10\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closingBracketsCountArray10 =\
    \ mutable.ArrayBuffer.empty[Int]\n        val openingBracketsCountArray11 = mutable.ArrayBuffer.empty[Int]\n\
    \        val closingBracketsCountArray11 = mutable.ArrayBuffer.empty[Int]\n  \
    \      val openingBracketsCountArray12 = mutable.ArrayBuffer.empty[Int]\n    \
    \    val closingBracketsCountArray\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcigo8o5_.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcigo8o5_.scala:16:30\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mopeningBrackets\e[0m = mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcigo8o5_.scala:17:30 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcigo8o5_.scala:18:35 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsCount\e[0m\
    \ = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcigo8o5_.scala:19:35 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsCount\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcigo8o5_.scala:20:40\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mopeningBracketsCountArray\e[0m = mutable.ArrayBuff"
  stdout: ''
  timestamp: 1659799904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentChar = 0\n        var currentCharValue = 0\n       \
    \ var currentCharValue2 = 0\n        var currentCharValue3 = 0\n        var currentCharValue4\
    \ = 0\n        var currentCharValue5 = 0\n        var currentCharValue6 = 0\n\
    \        var currentCharValue7 = 0\n        var currentCharValue8 = 0\n      \
    \  var currentCharValue9 = 0\n        var currentCharValue10 = 0\n        var\
    \ currentCharValue11 = 0\n        var currentCharValue12 = 0\n        var currentCharValue13\
    \ = 0\n        var currentCharValue14 = 0\n        var currentCharValue15 = 0\n\
    \        var currentCharValue16 = 0\n        var currentCharValue17 = 0\n    \
    \    var currentCharValue18 = 0\n        var currentCharValue19 = 0\n        var\
    \ currentCharValue20 = 0\n        var currentCharValue21 = 0\n        var currentCharValue22\
    \ = 0\n        var currentCharValue23 = 0\n        var currentCharValue24 = 0\n\
    \        var currentCharValue25 = 0\n        var currentCharValue26 = 0\n    \
    \    var currentCharValue27 = 0\n        var currentCharValue28 = 0\n        var\
    \ currentCharValue29 = 0\n        var currentCharValue30 = 0\n        var currentCharValue31\
    \ = 0\n        var currentCharValue32 = 0\n        var currentCharValue33 = 0\n\
    \        var currentCharValue34 = 0\n        var currentCharValue35 = 0\n    \
    \    var currentCharValue36 = 0\n        var currentCharValue37 = 0\n        var\
    \ currentCharValue38 = 0\n        var currentCharValue39 = 0\n        var currentCharValue40\
    \ = 0\n        var currentCharValue41 = 0\n        var currentCharValue42 = 0\n\
    \        var currentCharValue43 = 0\n        var currentCharValue44 = 0\n    \
    \    var currentCharValue45 = 0\n        var currentCharValue46 = 0\n        var\
    \ currentCharValue47 = 0\n        var currentCharValue48 = 0\n        var currentCharValue49\
    \ = 0\n        var currentCharValue50 = 0\n        var currentCharValue51 = 0\n\
    \        var currentCharValue52 = 0\n        var currentCharValue53 = 0\n    \
    \    var currentCharValue54 = 0\n        var currentCharValue55 = 0\n        var\
    \ currentCharValue56 = 0\n        var currentCharValue57 = 0\n        var currentCharValue58\
    \ = 0\n        var currentCharValue59 = 0\n        var currentCharValue60 = 0\n\
    \        var currentCharValue61 = 0\n        var currentCharValue62 = 0\n    \
    \    var currentCharValue63 = 0\n        var currentCharValue64 = 0\n        var\
    \ currentCharValue65 = 0\n        var currentCharValue66 = 0\n        var currentCharValue67\
    \ = 0\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2906e1j8.scala:87:5\
    \ ---------------------\e[0m\e[0m\n\e[31m87 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"<\", \">\")\n        val closingBracketsArray = Array(\"<\", \">\"\
    )\n        val openingBracketsCount = openingBracketsArray.length\n        val\
    \ closingBracketsCount = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArray = openingBracketsArray.drop(openingBracketsArrayLength\
    \ - 1)\n        val closingBracketsArray = closingBracketsArray.drop(closingBracketsArrayLength\
    \ - 1)\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArray = openingBracketsArray.drop(openingBracketsArrayLength\
    \ - 1)\n        val closingBracketsArray = closingBracketsArray.drop(closingBracketsArrayLength\
    \ - 1)\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArray = openingBracketsArray.drop(openingBracketsArrayLength\
    \ - 1)\n        val closingBracketsArray = closingBracketsArray.drop(closingBracketsArrayLength\
    \ - 1)\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArray = openingBracketsArray.drop(openingBracketsArrayLength\
    \ - 1)\n        val closingBracketsArray = closingBracketsArray.drop(closingBracketsArrayLength\
    \ - 1)\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArray = openingBracketsArray.drop(openingBracketsArrayLength\
    \ - 1)\n        val closingBracketsArray = closingBracketsArray.drop(closingBracketsArrayLength\
    \ - 1)\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val opening\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc32crhft.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc32crhft.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopeningBracketsArray\e[0m = openingBracketsArray.drop(openingBracketsArrayLength\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArray is already defined as \e[33mvalue\e[0m\
    \ \e[35mopeningBracketsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc32crhft.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArray\e[0m\
    \ = closingBracketsArray.drop(closingBracketsArrayLength - \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArray is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosingBracketsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc32crhft.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArrayLength\e\
    [0m = openingBracketsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc32crhft.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayLength\e\
    [0m = closingBracketsArray.length\n\e[31m"
  stdout: ''
  timestamp: 1659799905
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = mutable.Set[Char]()\n        val closingBrackets = mutable.Set[Char]()\n \
    \       var openingBracketsCount = 0\n        var closingBracketsCount = 0\n \
    \       for(i <- 0 until bracketsArray.length){\n            if(bracketsArray(i)\
    \ == '<'){\n                openingBrackets += bracketsArray(i).toChar\n     \
    \           openingBracketsCount += 1\n            }\n            if(bracketsArray(i)\
    \ == '>'){\n                closingBrackets += bracketsArray(i).toChar\n     \
    \           closingBracketsCount += 1\n            }\n        }\n        if(openingBracketsCount\
    \ == closingBracketsCount){\n            false\n        }else{\n            true\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeb7tcrhv.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeb7tcrhv.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '<')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == '>')\n        openingBracketsCount != closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptxuw96gw.scala:21)\n\tat Problem.main(tmptxuw96gw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.foldLeft(0)(_ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_\
    \ + _)\n        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpxedn1f9t.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpxedn1f9t.scala:15)\n\
    \tat Problem$.main(tmpxedn1f9t.scala:22)\n\tat Problem.main(tmpxedn1f9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.foldLeft(0)(_ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_\
    \ + _)\n        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpxedn1f9t.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpxedn1f9t.scala:15)\n\
    \tat Problem$.main(tmpxedn1f9t.scala:22)\n\tat Problem.main(tmpxedn1f9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayCopy = Array(bracketsArrayLength)\n\
    \        System.arraycopy(bracketsArray, 0, bracketsArrayCopy, 0, bracketsArrayLength)\n\
    \        val openingBracketsArray = Array(bracketsArrayLength)\n        val closingBracketsArray\
    \ = Array(bracketsArrayLength)\n        val openingBracketsArrayCopy = Array(openingBracketsArray.length)\n\
    \        val closingBracketsArrayCopy = Array(closingBracketsArray.length)\n \
    \       var openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n \
    \       var openingBracketsCopyIndex = 0\n        var closingBracketsCopyIndex\
    \ = 0\n        var openingBracketsCopyIndex2 = 0\n        var closingBracketsCopyIndex2\
    \ = 0\n        var openingBracketsCopyIndex3 = 0\n        var closingBracketsCopyIndex3\
    \ = 0\n        var openingBracketsCopyIndex4 = 0\n        var closingBracketsCopyIndex4\
    \ = 0\n        var openingBracketsCopyIndex5 = 0\n        var closingBracketsCopyIndex5\
    \ = 0\n        var openingBracketsCopyIndex6 = 0\n        var closingBracketsCopyIndex6\
    \ = 0\n        var openingBracketsCopyIndex7 = 0\n        var closingBracketsCopyIndex7\
    \ = 0\n        var openingBracketsCopyIndex8 = 0\n        var closingBracketsCopyIndex8\
    \ = 0\n        var openingBracketsCopyIndex9 = 0\n        var closingBracketsCopyIndex9\
    \ = 0\n        var openingBracketsCopyIndex10 = 0\n        var closingBracketsCopyIndex10\
    \ = 0\n        var openingBracketsCopyIndex11 = 0\n        var closingBracketsCopyIndex11\
    \ = 0\n        var openingBracketsCopyIndex12 = 0\n        var closingBracketsCopyIndex12\
    \ = 0\n        var openingBracketsCopyIndex13 = 0\n        var closingBracketsCopyIndex13\
    \ = 0\n        var openingBracketsCopyIndex14 = 0\n        var closingBracketsCopyIndex14\
    \ = 0\n        var openingBracketsCopyIndex15 = 0\n        var closingBracketsCopyIndex15\
    \ = 0\n        var openingBracketsCopyIndex16 = 0\n        var closingBracketsCopyIndex16\
    \ = 0\n        var openingBracketsCopyIndex17 = 0\n        var closingBracketsCopyIndex17\
    \ = 0\n        var openingBracketsCopy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw8r15ez4.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpw8r15ez4.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ : List[Char] = Nil\n        var closingBrackets : List[Char] = Nil\n       \
    \ var openingBracketsCount : Int = 0\n        var closingBracketsCount : Int =\
    \ 0\n        var openingBracketsIndex : Int = 0\n        var closingBracketsIndex\
    \ : Int = 0\n        while(openingBracketsIndex < bracketsArray.length) {\n  \
    \          val currentChar = bracketsArray(openingBracketsIndex)\n           \
    \ openingBracketsCount += 1\n            if(currentChar == '<') {\n          \
    \      openingBrackets = openingBrackets :+ currentChar\n                openingBracketsIndex\
    \ += 1\n            } else if(currentChar == '>') {\n                closingBrackets\
    \ = closingBrackets :+ currentChar\n                closingBracketsIndex += 1\n\
    \            } else {\n                assert(openingBracketsCount == closingBracketsCount)\n\
    \                assert(openingBracketsCount == 1)\n                assert(closingBracketsCount\
    \ == 1)\n                assert(openingBracketsIndex == 0)\n                assert(closingBracketsIndex\
    \ == 0)\n                assert(openingBrackets.size == closingBrackets.size)\n\
    \                assert(openingBrackets.size == 1)\n                assert(closingBrackets.size\
    \ == 1)\n                assert(openingBrackets.head == closingBrackets.head)\n\
    \                assert(openingBrackets.head == '<' || closingBrackets.head ==\
    \ '>')\n                assert(openingBrackets.head == '<')\n                assert(closingBrackets.head\
    \ == '>')\n                assert(closingBrackets.head == '>')\n             \
    \   assert(openingBrackets.tail == closingBrackets.tail)\n                assert(openingBrackets.tail\
    \ == Nil)\n                assert(closingBrackets.tail == Nil)\n             \
    \   assert(openingBrackets.size == closingBrackets.size)\n                assert(openingBrackets.size\
    \ == 1)\n                assert(closingBrackets.size == 1)\n                assert(openingBrackets.head\
    \ == closingBrackets.head)\n                assert(openingBrackets.head == '<'\
    \ || closingBrackets.head == '>')\n                assert(openingBrackets.head\
    \ == '<')\n                assert(closingBrackets.head == '>')\n             \
    \   assert(closingBrackets.head == '>')\n                assert(openingBrackets.tail\
    \ == closingBrackets.tail)\n                assert(openingBrackets.tail == Nil)\n\
    \                assert(closingBrackets.tail == \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcj4sjl33.scala:58:46 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m                assert(closingBrackets.tail == \n\e[31m\e\
    [31m   |\e[0m                                              ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcj4sjl33.scala:76:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m76 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpcj4sjl33.scala:60:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m60 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.foldLeft(0)(_ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_\
    \ + _)\n        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpxedn1f9t.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpxedn1f9t.scala:15)\n\
    \tat Problem$.main(tmpxedn1f9t.scala:22)\n\tat Problem.main(tmpxedn1f9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5vqai9nj.scala:22)\n\tat Problem.main(tmp5vqai9nj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsSet\
    \ = Set(openingBrackets)\n        val closingBracketsSet = Set(closingBrackets)\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpvdxv5fqi.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpvdxv5fqi.scala:15)\n\
    \tat Problem$.main(tmpvdxv5fqi.scala:22)\n\tat Problem.main(tmpvdxv5fqi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799906
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = bracketsArray.filter(c => c == '<')\n        val closingBracketsArray = bracketsArray.filter(c\
    \ => c == '>')\n        openingBracketsArray.forall(c => closingBracketsArray.contains(c))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp383zhlks.scala:21)\n\tat Problem.main(tmp383zhlks.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = bracketsArray.filter(_ == '<')\n        val closingBracketsArray = bracketsArray.filter(_\
    \ == '>')\n        openingBracketsArray.size == closingBracketsArray.size\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg6pbyipk.scala:26)\n\tat Problem.main(tmpg6pbyipk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799906
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyjkklvhs.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyjkklvhs.scala:69:5 ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799906
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(c => c == '<')\n        val closingBracketsCount = bracketsArray.count(c\
    \ => c == '>')\n        openingBracketsCount == closingBracketsCount\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpus8vhk0v.scala:26)\n\tat Problem.main(tmpus8vhk0v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799906
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        if (openingBracketsCount\
    \ != closingBracketsCount) {\n            return false\n        }\n        val\
    \ openingBracketsMap = openingBrackets.toMap\n        val closingBracketsMap =\
    \ closingBrackets.toMap\n        val openingBracketsMapKeys = openingBracketsMap.keys\n\
    \        val closingBracketsMapKeys = closingBracketsMap.keys\n        val openingBracketsMapValues\
    \ = openingBracketsMap.values.toList\n        val closingBracketsMapValues = closingBracketsMap.values.toList\n\
    \        val openingBracketsMapValuesCount = openingBracketsMapValues.length\n\
    \        val closingBracketsMapValuesCount = closingBracketsMapValues.length\n\
    \        if (openingBracketsMapValuesCount != closingBracketsMapValuesCount) {\n\
    \            return false\n        }\n        val openingBracketsMapValuesMap\
    \ = openingBracketsMapValues.toMap\n        val closingBracketsMapValuesMap =\
    \ closingBracketsMapValues.toMap\n        val openingBracketsMapValuesMapKeys\
    \ = openingBracketsMapValuesMap.keys\n        val closingBracketsMapValuesMapKeys\
    \ = closingBracketsMapValuesMap.keys\n        val openingBracketsMapValuesMapValues\
    \ = openingBracketsMapValuesMap.values.toList\n        val closingBracketsMapValuesMapValues\
    \ = closingBracketsMapValuesMap.values.toList\n        val openingBracketsMapValuesMapValuesCount\
    \ = openingBracketsMapValuesMapValues.length\n        val closingBracketsMapValuesMapValuesCount\
    \ = closingBracketsMapValuesMapValues.length\n        if (openingBracketsMapValuesMapValuesCount\
    \ != closingBracketsMapValuesMapValuesCount) {\n            return false\n   \
    \     }\n        val openingBracketsMapValuesMapValuesMap = openingBracketsMapValuesMapValues.toMap\n\
    \        val closingBracketsMapValuesMapValuesMap = closingBracketsMapValuesMapValues.toMap\n\
    \        val openingBracketsMapValuesMapValuesMapKeys = openingBracketsMapValuesMapValuesMap.keys\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzzv2kahe.scala:22:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = openingBrackets.toMap\n\e[31m\e[31m   |\e[0m                             \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \         Cannot prove that String <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \                                     where:    K is a type variable\n\e[31m \
    \  |\e[0m                                               V is a type variable\n\
    \e[31m   |\e[0m                                     .\n\e[31m\e[31m-- Error: /tmp/tmpzzv2kahe.scala:23:54\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m = closingBrackets.toMap\n\e[31m\e\
    [31m   |\e[0m                                                      ^\e[0m\n\e\
    [31m   |\e[0m                                     Cannot prove that String <:<\
    \ (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                   \
    \  where:    K is a type variable\n\e[31m   |\e[0m                           \
    \                    V is a type variable\n\e[31m   |\e[0m                   \
    \                  .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzzv2kahe.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799906
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        if (openingBracketsCount\
    \ != closingBracketsCount) {\n            return false\n        }\n        var\
    \ openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n        while\
    \ (openingBracketsIndex < openingBracketsCount && closingBracketsIndex < closingBracketsCount)\
    \ {\n            if (openingBrackets(openingBracketsIndex) != closingBrackets(closingBracketsIndex))\
    \ {\n                return false\n            }\n            openingBracketsIndex\
    \ += 1\n            closingBracketsIndex += 1\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbrzklc84.scala:34)\n\tat Problem.main(tmpbrzklc84.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799906
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.toSet.size // O(n)\n        val closingBracketsCount = closingBrackets.toSet.size\
    \ // O(n)\n        openingBracketsCount == closingBracketsCount // O(1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp2kexfgej.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmp2kexfgej.scala:15)\n\
    \tat Problem$.main(tmp2kexfgej.scala:22)\n\tat Problem.main(tmp2kexfgej.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799912
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.forall(closingBrackets.contains)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprk8hn1fn.scala:20)\n\tat Problem.main(tmprk8hn1fn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentChar = bracketsArray(0)\n        var currentCharCount\
    \ = 1\n        var currentCharCountInCurrentBracket = 0\n        var currentCharCountInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBra\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp28pjmpn0.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp28pjmpn0.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp28pjmpn0.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m \e[36mcurrentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBra"
  stdout: ''
  timestamp: 1659799913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyjkklvhs.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyjkklvhs.scala:69:5 ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799906
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.subsetOf(closingBrackets)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0sblzqs.scala:20)\n\tat Problem.main(tmpo0sblzqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toList\n        val bracketsArraySize\
    \ = bracketsArray.length\n        val openingBracketsArray = bracketsArray.filter(_.isLetter)\n\
    \        val closingBracketsArray = bracketsArray.filter(_.isLetter)\n       \
    \ val openingBracketsArraySize = openingBracketsArray.length\n        val closingBracketsArraySize\
    \ = closingBracketsArray.length\n        openingBracketsArray.forall(bracketsArray(_).isLetter)\n\
    \        closingBracketsArray.forall(bracketsArray(_).isLetter)\n        openingBracketsArraySize\
    \ == closingBracketsArraySize\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsvwiw209.scala:30)\n\tat Problem.main(tmpsvwiw209.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyjkklvhs.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyjkklvhs.scala:69:5 ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799906
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '<')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == '>')\n        openingBracketsCount == closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz4nydo9q.scala:26)\n\tat Problem.main(tmpz4nydo9q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '<')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == '>')\n        openingBracketsCount != closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptxuw96gw.scala:21)\n\tat Problem.main(tmptxuw96gw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = bracketsArray.filter(c => c == '<')\n        val closingBracketsArray = bracketsArray.filter(c\
    \ => c == '>')\n        openingBracketsArray.forall(c => closingBracketsArray.contains(c))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp383zhlks.scala:21)\n\tat Problem.main(tmp383zhlks.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplj5pzjvp.scala:22)\n\tat Problem.main(tmplj5pzjvp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.foldLeft(0)(_ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_\
    \ + _)\n        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpxedn1f9t.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpxedn1f9t.scala:15)\n\
    \tat Problem$.main(tmpxedn1f9t.scala:22)\n\tat Problem.main(tmpxedn1f9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = mutable.HashSet[Char]()\n        val closingBrackets = mutable.HashSet[Char]()\n\
    \        var openingBracketsCount = 0\n        var closingBracketsCount = 0\n\
    \        var currentChar = 0\n        var currentOpeningBracket = 0\n        var\
    \ currentClosingBracket = 0\n        var currentOpeningBracketCount = 0\n    \
    \    var currentClosingBracketCount = 0\n        var currentOpeningBracketCountBefore\
    \ = 0\n        var currentClosingBracketCountBefore = 0\n        var currentOpeningBracketCountAfter\
    \ = 0\n        var currentClosingBracketCountAfter = 0\n        var currentOpeningBracketCountBeforeAfter\
    \ = 0\n        var currentClosingBracketCountBeforeAfter = 0\n        var currentOpeningBracketCountBeforeBefore\
    \ = 0\n        var currentClosingBracketCountBeforeBefore = 0\n        var currentOpeningBracketCountBeforeBeforeAfter\
    \ = 0\n        var currentClosingBracketCountBeforeBeforeAfter = 0\n        var\
    \ currentOpeningBracketCountBeforeBeforeBefore = 0\n        var currentClosingBracketCountBeforeBeforeBefore\
    \ = 0\n        var currentOpeningBracketCountBeforeBeforeBefore = 0\n        var\
    \ currentClosingBracketCountBeforeBeforeBefore = 0\n        var currentOpeningBracketCountBeforeBeforeBeforeAfter\
    \ = 0\n        var currentClosingBracketCountBeforeBeforeBeforeAfter = 0\n   \
    \     var currentOpeningBracketCountBeforeBeforeBeforeBefore = 0\n        var\
    \ currentClosingBracketCountBeforeBeforeBeforeBefore = 0\n        var currentOpeningBracketCountBeforeBeforeBeforeBefore\
    \ = 0\n        var currentClosingBracketCountBeforeBeforeBeforeBefore = 0\n  \
    \      var currentOpeningBracketCountBeforeBeforeBeforeBefore = 0\n        var\
    \ currentClosingBracketCountBeforeBeforeBeforeBefore = 0\n        var currentOpeningBracketCountBeforeBeforeBeforeBefore\
    \ = 0\n        var currentClosingBracketCountBeforeBeforeBeforeBefore = 0\n  \
    \      var currentOpeningBracketCountBeforeBeforeBeforeBefore = 0\n        var\
    \ currentClosingBracketCountBeforeBeforeBeforeBefore = 0\n        var currentOpeningBracketCountBeforeBeforeBeforeBefore\
    \ = 0\n        var currentClosingBracketCountBeforeBeforeBeforeBefore = 0\n  \
    \      var currentOpeningBracketCountBeforeBeforeBeforeBefore = 0\n        var\
    \ currentClosingBracketCountBeforeBeforeBeforeBefore = 0\n        var currentOpeningBracketCountBeforeBeforeBeforeBefore\
    \ = 0\n        var currentClosingBracketCountBeforeBeforeBeforeBefore = 0\n  \
    \      var currentOpeningBracketCountBeforeBeforeBeforeBefore = 0\n        var\
    \ currentClosingBracketCountBeforeBeforeBefore\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg8kslm20.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg8kslm20.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentOpeningBracketCountBeforeBeforeBefore\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcurrentOpeningBracketCountBeforeBeforeBefore is already defined\
    \ as \e[33mvariable\e[0m \e[35mcurrentOpeningBracketCountBeforeBeforeBefore\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg8kslm20.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mvar\e[0m \e[36mcurrentClosingBracketCountBeforeBeforeBefore\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentClosingBracketCountBeforeBeforeBefore is already defined\
    \ as \e[33mvariable\e[0m \e[35mcurrentClosingBracketCountBeforeBeforeBefore\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg8kslm20.scala:43:12 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m        \e[33mvar\e[0m \e[36mcurrentOpeningBracketCountBeforeBeforeBeforeBefore\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentOpeningBracketCountBeforeBeforeBeforeBefore is already\
    \ defined as \e[33mvariable\e[0m \e[35mcurrentOpeningBracketCountBeforeBeforeBeforeBefore\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg8kslm20.scala:44:12 ---------------------------\e[0m\e[0m\n\e\
    [31m44 |\e[0m        \e[33mvar\e[0m \e[36mcurrentClosingBracketCountBeforeBefo"
  stdout: ''
  timestamp: 1659799914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.foldLeft(0)(_ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_\
    \ + _)\n        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpxedn1f9t.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpxedn1f9t.scala:15)\n\
    \tat Problem$.main(tmpxedn1f9t.scala:22)\n\tat Problem.main(tmpxedn1f9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5vqai9nj.scala:22)\n\tat Problem.main(tmp5vqai9nj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = mutable.ListBuffer[Char]()\n        val closingBrackets = mutable.ListBuffer[Char]()\n\
    \        var openingBracketsCount = 0\n        var closingBracketsCount = 0\n\
    \        var currentOpeningBracket = ' '\n        var currentClosingBracket =\
    \ ' '\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketChar = ' '\n        var currentClosingBracketChar\
    \ = ' '\n        var currentOpeningBracketCountChar = ' '\n        var currentClosingBracketCountChar\
    \ = ' '\n        var currentOpeningBracketCharArray = Array[Char]()\n        var\
    \ currentClosingBracketCharArray = Array[Char]()\n        var currentOpeningBracketCountCharArray\
    \ = Array[Char]()\n        var currentClosingBracketCountCharArray = Array[Char]()\n\
    \        var currentOpeningBracketCountCharArrayLength = currentOpeningBracketCountCharArray.length\n\
    \        var currentClosingBracketCountCharArrayLength = currentClosingBracketCountCharArray.length\n\
    \        var currentOpeningBracketCountCharArrayIndex = 0\n        var currentClosingBracketCountCharArrayIndex\
    \ = 0\n        var currentOpeningBracketCountCharArrayIndexLength = currentOpeningBracketCountCharArrayIndex.length\n\
    \        var currentClosingBracketCountCharArrayIndexLength = currentClosingBracketCountCharArrayIndex.length\n\
    \        var currentOpeningBracketCountCharArrayIndexLength = 0\n        var currentClosingBracketCountCharArrayIndexLength\
    \ = 0\n        var currentOpeningBracketCountCharArrayIndexLength = 0\n      \
    \  var currentOpeningBracketCountCharArrayIndexLength = 0\n        var currentOpeningBracketCountCharArrayIndexLength\
    \ = 0\n        var currentOpeningBracketCountCharArrayIndexLength = 0\n      \
    \  var currentOpeningBracketCountCharArrayIndexLength = 0\n        var currentOpeningBracketCountCharArrayIndexLength\
    \ = 0\n        var currentOpeningBracketCountCharArrayIndexLength = 0\n      \
    \  var currentOpeningBracketCountCharArrayIndexLength = 0\n        var currentOpeningBracketCountCharArrayIndexLength\
    \ = 0\n        var currentOpeningBracketCountCharArrayIndexLength = 0\n      \
    \  var currentOpeningBracketCountCharArrayIndexLength = 0\n        var currentOpeningBracketCountCharArrayIndexLength\
    \ = 0\n        var currentOpeningBracketCountCharArrayIndexLength = 0\n      \
    \  var currentOpeningBracketCountCharArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpock4n31_.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpock4n31_.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentOpeningBracketCountCharArrayIndexLength\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentOpeningBracketCountCharArrayIndexLength is already\
    \ defined as \e[33mvariable\e[0m \e[35mcurrentOpeningBracketCountCharArrayIndexLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpock4n31_.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mvar\e[0m \e[36mcurrentClosingBracketCountCharArrayIndexLength\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentClosingBracketCountCharArrayIndexLength is already\
    \ defined as \e[33mvariable\e[0m \e[35mcurrentClosingBracketCountCharArrayIndexLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpock4n31_.scala:40:12 ---------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m        \e[33mvar\e[0m \e[36mcurrentOpeningBracketCountCharArrayIndexLength\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentOpeningBracketCountCharArrayIndexLength is already\
    \ defined as \e[33mvariable\e[0m \e[35mcurrentOpeningBracketCountCharArrayIndexLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpock4n31_.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mvar\e[0m \e[36mcurrentOpeningBracketCountCharArrayI"
  stdout: ''
  timestamp: 1659799914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.foldLeft(0)(_ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_\
    \ + _)\n        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpxedn1f9t.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpxedn1f9t.scala:15)\n\
    \tat Problem$.main(tmpxedn1f9t.scala:22)\n\tat Problem.main(tmpxedn1f9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = mutable.HashSet[Char]()\n        val closingBrackets = mutable.HashSet[Char]()\n\
    \        bracketsArray.foreach { c =>\n            if (c == '<') {\n         \
    \       openingBrackets += c\n            } else if (c == '>') {\n           \
    \     closingBrackets += c\n            }\n        }\n        openingBrackets.size\
    \ == closingBrackets.size\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0l1_r0yu.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0l1_r0yu.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799911
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.toSet.size\n        val closingBracketsCount = closingBrackets.toSet.size\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmprq6znd3f.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmprq6znd3f.scala:15)\n\
    \tat Problem$.main(tmprq6znd3f.scala:22)\n\tat Problem.main(tmprq6znd3f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.forall(closingBrackets.contains)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprk8hn1fn.scala:20)\n\tat Problem.main(tmprk8hn1fn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799913
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.subsetOf(closingBrackets)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0sblzqs.scala:20)\n\tat Problem.main(tmpo0sblzqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplj5pzjvp.scala:22)\n\tat Problem.main(tmplj5pzjvp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '<')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == '>')\n        openingBracketsCount == closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz4nydo9q.scala:26)\n\tat Problem.main(tmpz4nydo9q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"<\", \">\", \"(\", \")\")\n        val closingBracketsArray = Array(\"\
    <\", \">\", \">\", \"<\")\n        val openingBracketsCount = openingBracketsArray.length\n\
    \        val closingBracketsCount = closingBracketsArray.length\n        var openingBracketsCountInCurrentBracket\
    \ = 0\n        var closingBracketsCountInCurrentBracket = 0\n        var currentBracket\
    \ = openingBracketsArray(0)\n        var currentBracketCount = 0\n        var\
    \ currentBracketCountInCurrentBracket = 0\n        var currentBracketCountInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBra\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_ye6s7dd.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_ye6s7dd.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp_ye6s7dd.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definit"
  stdout: ''
  timestamp: 1659799914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplj5pzjvp.scala:22)\n\tat Problem.main(tmplj5pzjvp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsMap\
    \ = mutable.HashMap[String, Int]()\n        val closingBracketsMap = mutable.HashMap[String,\
    \ Int]()\n        for (i <- 0 until openingBracketsCount) {\n            val openingBracket\
    \ = openingBrackets(i)\n            val closingBracket = closingBrackets(i)\n\
    \            openingBracketsMap.put(openingBracket, openingBracketsMap.getOrElse(openingBracket,\
    \ 0) + 1)\n            closingBracketsMap.put(closingBracket, closingBracketsMap.getOrElse(closingBracket,\
    \ 0) + 1)\n        }\n        openingBracketsMap.forall { case (openingBracket,\
    \ count) =>\n            closingBracketsMap.get(openingBracket) == count\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphlb3z4g5.scala:19:33 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphlb3z4g5.scala:20:33 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799912
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.toSet.size\n        val closingBracketsCount = closingBrackets.toSet.size\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmprq6znd3f.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmprq6znd3f.scala:15)\n\
    \tat Problem$.main(tmprq6znd3f.scala:22)\n\tat Problem.main(tmprq6znd3f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplj5pzjvp.scala:22)\n\tat Problem.main(tmplj5pzjvp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplj5pzjvp.scala:22)\n\tat Problem.main(tmplj5pzjvp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.forall(closingBrackets.contains)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprk8hn1fn.scala:20)\n\tat Problem.main(tmprk8hn1fn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799913
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.toSet.size\n        val closingBracketsCount = closingBrackets.toSet.size\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmprq6znd3f.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmprq6znd3f.scala:15)\n\
    \tat Problem$.main(tmprq6znd3f.scala:22)\n\tat Problem.main(tmprq6znd3f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = bracketsArray.filter(_ == '<')\n        val closingBracketsArray = bracketsArray.filter(_\
    \ == '>')\n        openingBracketsArray.forall(closingBracketsArray.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj2qt0ybc.scala:21)\n\tat Problem.main(tmpj2qt0ybc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        if (openingBracketsCount\
    \ != closingBracketsCount) {\n            return false\n        }\n        val\
    \ openingBracketsMap = mutable.HashMap[String, Int]()\n        for (openingBracket\
    \ <- openingBrackets) {\n            val closingBracket = closingBrackets(openingBracketsCount\
    \ - 1)\n            val closingBracketCount = openingBracketsCount - 1\n     \
    \       val closingBracketsMap = mutable.HashMap[String, Int]()\n            openingBracketsMap.put(openingBracket,\
    \ closingBracketCount)\n            closingBracketsMap.put(closingBracket, openingBracketCount)\n\
    \            val openingBracketCount = openingBracketsMap.get(openingBracket)\n\
    \            val closingBracketCount = closingBracketsMap.get(closingBracket)\n\
    \            if (openingBracketCount != closingBracketCount) {\n             \
    \   return false\n            }\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk0sqmv4d.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmpk0sqmv4d.scala:30:16 ---------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mclosingBracketCount\e[0m\
    \ = closingBracketsMap.get(closingBracket)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosingBracketCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpk0sqmv4d.scala:26:37 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mclosingBracketsMap\e\
    [0m = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799912
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprywfpj66.scala:22)\n\tat Problem.main(tmprywfpj66.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799917
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.subsetOf(closingBrackets)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0sblzqs.scala:20)\n\tat Problem.main(tmpo0sblzqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5vqai9nj.scala:22)\n\tat Problem.main(tmp5vqai9nj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.foldLeft(0)(_ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_\
    \ + _)\n        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpxedn1f9t.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpxedn1f9t.scala:15)\n\
    \tat Problem$.main(tmpxedn1f9t.scala:22)\n\tat Problem.main(tmpxedn1f9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"<\")\n        val closingBracketsArray = Array(\">\")\n        val\
    \ openingBracketsCount = openingBracketsArray.length\n        val closingBracketsCount\
    \ = closingBracketsArray.length\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArray = Array.fill(openingBracketsArrayLength)(0)\n    \
    \    val closingBracketsArray = Array.fill(closingBracketsArrayLength)(0)\n  \
    \      var openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n  \
    \      var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsArrayIndex2 = 0\n        var closingBracketsArrayIndex2\
    \ = 0\n        var openingBracketsArrayIndex3 = 0\n        var closingBracketsArrayIndex3\
    \ = 0\n        var openingBracketsArrayIndex4 = 0\n        var closingBracketsArrayIndex4\
    \ = 0\n        var openingBracketsArrayIndex5 = 0\n        var closingBracketsArrayIndex5\
    \ = 0\n        var openingBracketsArrayIndex6 = 0\n        var closingBracketsArrayIndex6\
    \ = 0\n        var openingBracketsArrayIndex7 = 0\n        var closingBracketsArrayIndex7\
    \ = 0\n        var openingBracketsArrayIndex8 = 0\n        var closingBracketsArrayIndex8\
    \ = 0\n        var openingBracketsArrayIndex9 = 0\n        var closingBracketsArrayIndex9\
    \ = 0\n        var openingBracketsArrayIndex10 = 0\n        var closingBracketsArrayIndex10\
    \ = 0\n        var openingBracketsArrayIndex11 = 0\n        var closingBracketsArrayIndex11\
    \ = 0\n        var openingBracketsArrayIndex12 = 0\n        var closingBracketsArrayIndex12\
    \ = 0\n        var openingBracketsArrayIndex13 = 0\n        var closingBracketsArrayIndex13\
    \ = 0\n        var openingBracketsArrayIndex14 = 0\n        var closingBracketsArrayIndex14\
    \ = 0\n        var openingBracketsArrayIndex15 = 0\n        var closingBracketsArrayIndex15\
    \ = 0\n        var openingBracketsArrayIndex16 = 0\n        var closingBracketsArrayIndex16\
    \ = 0\n        var openingBracketsArrayIndex17 = 0\n        var closingBracketsArrayIndex17\
    \ = 0\n        var \n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp4lai6k5m.scala:60:11 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp4lai6k5m.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArray\e[0m\
    \ = Array.fill(openingBracketsArrayLength)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArray is already defined as \e[33mvalue\e[0m\
    \ \e[35mopeningBracketsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4lai6k5m.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArray\e[0m\
    \ = Array.fill(closingBracketsArrayLength)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArray is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosingBracketsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4lai6k5m.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toList\n        val openingBrackets\
    \ = bracketsArray.filter(x => x == \"<\")\n        val closingBrackets = bracketsArray.filter(x\
    \ => x == \">\")\n        openingBrackets.size == closingBrackets.size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpw_p9ghpa.scala:16:56 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = bracketsArray.filter(\e\
    [36mx\e[0m => x == \e[31m\"<\"\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpw_p9ghpa.scala:17:56 -----------------------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = bracketsArray.filter(\e\
    [36mx\e[0m => x == \e[31m\">\"\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659799916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '<')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == '>')\n        openingBracketsCount == closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz4nydo9q.scala:26)\n\tat Problem.main(tmpz4nydo9q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ = 0\n        var closingBrackets = 0\n        var openingBracketsArray = new\
    \ Array[Char](bracketsArray.length)\n        var closingBracketsArray = new Array[Char](bracketsArray.length)\n\
    \        var i = 0\n        while (i < bracketsArray.length) {\n            openingBracketsArray(i)\
    \ = bracketsArray(i)\n            closingBracketsArray(i) = bracketsArray(i)\n\
    \            i += 1\n        }\n        while (i < bracketsArray.length) {\n \
    \           if (openingBracketsArray(i) == '<') {\n                openingBrackets\
    \ += 1\n                closingBracketsArray(i) = '>'\n                i += 1\n\
    \            } else if (openingBracketsArray(i) == '>') {\n                openingBrackets\
    \ -= 1\n                closingBracketsArray(i) = openingBracketsArray(i)\n  \
    \              i += 1\n            }\n        }\n        openingBrackets == 0\
    \ && closingBrackets == 0\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp825sp9i9.scala:44)\n\tat Problem.main(tmp825sp9i9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.toSet.size\n        val closingBracketsCount = closingBrackets.toSet.size\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmprq6znd3f.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmprq6znd3f.scala:15)\n\
    \tat Problem$.main(tmprq6znd3f.scala:22)\n\tat Problem.main(tmprq6znd3f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = bracketsArray.filter(_ == '<')\n        val closingBracketsArray = bracketsArray.filter(_\
    \ == '>')\n        openingBracketsArray.forall(closingBracketsArray.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj2qt0ybc.scala:21)\n\tat Problem.main(tmpj2qt0ybc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = bracketsArray.filter(c => c == '<')\n        val closingBracketsArray = bracketsArray.filter(c\
    \ => c == '>')\n        openingBracketsArray.forall(c => closingBracketsArray.contains(c))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp383zhlks.scala:21)\n\tat Problem.main(tmp383zhlks.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ : List[Char] = Nil\n        var closingBrackets : List[Char] = Nil\n       \
    \ var openingBracketsCount : Int = 0\n        var closingBracketsCount : Int =\
    \ 0\n        var currentBrackets : List[Char] = Nil\n        var currentBracketsCount\
    \ : Int = 0\n        var currentOpeningBrackets : List[Char] = Nil\n        var\
    \ currentOpeningBracketsCount : Int = 0\n        var currentClosingBrackets :\
    \ List[Char] = Nil\n        var currentClosingBracketsCount : Int = 0\n      \
    \  var currentBracketsArray : Array[Char] = Nil\n        var currentBracketsArrayCount\
    \ : Int = 0\n        var currentOpeningBracketsArray : Array[Char] = Nil\n   \
    \     var currentOpeningBracketsArrayCount : Int = 0\n        var currentClosingBracketsArray\
    \ : Array[Char] = Nil\n        var currentClosingBracketsArrayCount : Int = 0\n\
    \        var currentBracketsArrayIndex : Int = 0\n        var currentOpeningBracketsArrayIndex\
    \ : Int = 0\n        var currentClosingBracketsArrayIndex : Int = 0\n        var\
    \ currentBracketsArrayIndexCount : Int = 0\n        var currentOpeningBracketsArrayIndexCount\
    \ : Int = 0\n        var currentClosingBracketsArrayIndexCount : Int = 0\n   \
    \     var currentBracketsArrayIndex : Int = 0\n        var currentOpeningBracketsArrayIndex\
    \ : Int = 0\n        var currentClosingBracketsArrayIndex : Int = 0\n        var\
    \ currentBracketsArrayIndexCount : Int = 0\n        var currentOpeningBracketsArrayIndexCount\
    \ : Int = 0\n        var currentClosingBracketsArrayIndexCount : Int = 0\n   \
    \     var currentBracketsArrayIndex : Int = 0\n        var currentOpeningBracketsArrayIndex\
    \ : Int = 0\n        var currentClosingBracketsArrayIndex : Int = 0\n        var\
    \ currentBracketsArrayIndexCount : Int = 0\n        var currentOpeningBracketsArrayIndexCount\
    \ : Int = 0\n        var currentClosingBracketsArrayIndexCount : Int = 0\n   \
    \     var currentBracketsArrayIndex : Int = 0\n        var currentOpeningBracketsArrayIndex\
    \ : Int = 0\n        var currentClosingBracketsArrayIndex : Int = 0\n        var\
    \ currentBracketsArrayIndexCount : Int = 0\n        var currentOpeningBracketsArrayIndexCount\
    \ : Int = 0\n        var currentClosingBracketsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0d3pkdui.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0d3pkdui.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketsArrayIndex\e[0m : \e[35mInt\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcurrentBracketsArrayIndex is already defined as \e[33mvariable\e[0m \e[35mcurrentBracketsArrayIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0d3pkdui.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mvar\e[0m \e[36mcurrentOpeningBracketsArrayIndex\e[0m\
    \ : \e[35mInt\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentOpeningBracketsArrayIndex is already defined as \e\
    [33mvariable\e[0m \e[35mcurrentOpeningBracketsArrayIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0d3pkdui.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentClosingBracketsArrayIndex\e[0m : \e[35mInt\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentClosingBracketsArrayIndex is already defined as \e\
    [33mvariable\e[0m \e[35mcurrentClosingBracketsArrayIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0d3pkdui.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketsArrayIndexCount\e[0m : \e[35mInt\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcurrentBracketsArr"
  stdout: ''
  timestamp: 1659799917
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.filter(c => c == '<').length\n        val closingBracketsCount\
    \ = bracketsArray.filter(c => c == '>').length\n        openingBracketsCount !=\
    \ closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1hp1kzxx.scala:21)\n\tat Problem.main(tmp1hp1kzxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799917
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.zip(closingBrackets).forall\
    \ { case (opening, closing) => opening == closing }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmprvouilcy.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmprvouilcy.scala:15)\n\
    \tat Problem$.main(tmprvouilcy.scala:22)\n\tat Problem.main(tmprvouilcy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"<\", \">\")\n        val closingBracketsArray = Array(\"<\", \">\"\
    )\n        val openingBracketsCount = openingBracketsArray.length\n        val\
    \ closingBracketsCount = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArray = Array.fill(openingBracketsArrayLength)(0)\n\
    \        val closingBracketsArray = Array.fill(closingBracketsArrayLength)(0)\n\
    \        var openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n\
    \        var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsArrayIndex2 = 0\n        var closingBracketsArrayIndex2\
    \ = 0\n        var openingBracketsArrayIndex3 = 0\n        var closingBracketsArrayIndex3\
    \ = 0\n        var openingBracketsArrayIndex4 = 0\n        var closingBracketsArrayIndex4\
    \ = 0\n        var openingBracketsArrayIndex5 = 0\n        var closingBracketsArrayIndex5\
    \ = 0\n        var openingBracketsArrayIndex6 = 0\n        var closingBracketsArrayIndex6\
    \ = 0\n        var openingBracketsArrayIndex7 = 0\n        var closingBracketsArrayIndex7\
    \ = 0\n        var openingBracketsArrayIndex8 = 0\n        var closingBracketsArrayIndex8\
    \ = 0\n        var openingBracketsArrayIndex9 = 0\n        var closingBracketsArrayIndex9\
    \ = 0\n        var openingBracketsArrayIndex10 = 0\n        var closingBracketsArrayIndex10\
    \ = 0\n        var openingBracketsArrayIndex11 = 0\n        var closingBracketsArrayIndex11\
    \ = 0\n        var openingBracketsArrayIndex12 = 0\n        var closingBracketsArrayIndex12\
    \ = 0\n        var openingBracketsArrayIndex13 = 0\n        var closingBracketsArrayIndex13\
    \ = 0\n        var openingBracketsArrayIndex14 = 0\n        var closingBracketsArrayIndex14\
    \ = 0\n        var openingBracketsArrayIndex15 = 0\n        var closingBracketsArrayIndex15\
    \ = 0\n        var openingBracketsArrayIndex16 = 0\n        var closingBracketsArrayIndex16\
    \ = 0\n        var openingBracketsArrayIndex17 = 0\n        var closingBracketsArrayIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3iy6lfbb.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3iy6lfbb.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopeningBracketsArray\e[0m = Array.fill(openingBracketsArrayLength)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArray is already defined as \e[33mvalue\e[0m\
    \ \e[35mopeningBracketsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3iy6lfbb.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArray\e[0m\
    \ = Array.fill(closingBracketsArrayLength)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArray is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosingBracketsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp3iy6lfbb.scala:60:5 ---------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.toSet.size\n        val closingBracketsCount = closingBrackets.toSet.size\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmprq6znd3f.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmprq6znd3f.scala:15)\n\
    \tat Problem$.main(tmprq6znd3f.scala:22)\n\tat Problem.main(tmprq6znd3f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.subsetOf(closingBrackets)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0sblzqs.scala:20)\n\tat Problem.main(tmpo0sblzqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.toSet.size\n        val closingBracketsCount = closingBrackets.toSet.size\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmprq6znd3f.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmprq6znd3f.scala:15)\n\
    \tat Problem$.main(tmprq6znd3f.scala:22)\n\tat Problem.main(tmprq6znd3f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplj5pzjvp.scala:22)\n\tat Problem.main(tmplj5pzjvp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCountInCurrentBracket = 0\n        var closingBracketsCountInCurrentBracket\
    \ = 0\n        var currentBracket = bracketsArray(0)\n        var currentBracketCount\
    \ = 0\n        var currentBracketCountInCurrentBracket = 0\n        var currentBracketCountInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrent\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7ki_tqee.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7ki_tqee.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp7ki_tqee.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\n\
    \e[3"
  stdout: ''
  timestamp: 1659799893
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.forall(closingBrackets.contains)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprk8hn1fn.scala:20)\n\tat Problem.main(tmprk8hn1fn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyjkklvhs.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyjkklvhs.scala:69:5 ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799906
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.toSet.size\n        val closingBracketsCount = closingBrackets.toSet.size\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmprq6znd3f.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmprq6znd3f.scala:15)\n\
    \tat Problem$.main(tmprq6znd3f.scala:22)\n\tat Problem.main(tmprq6znd3f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = bracketsArray.filter(c => c == '<')\n        val closingBrackets = bracketsArray.filter(c\
    \ => c == '>')\n        openingBrackets.size == closingBrackets.size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfynfryz9.scala:26)\n\tat Problem.main(tmpfynfryz9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799918
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.foldLeft(0)(_ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_\
    \ + _)\n        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpxedn1f9t.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpxedn1f9t.scala:15)\n\
    \tat Problem$.main(tmpxedn1f9t.scala:22)\n\tat Problem.main(tmpxedn1f9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5vqai9nj.scala:22)\n\tat Problem.main(tmp5vqai9nj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCountInCurrentBracket = 0\n        var closingBracketsCountInCurrentBracket\
    \ = 0\n        var currentBracket = bracketsArray(0)\n        var currentBracketCount\
    \ = 0\n        var currentBracketCountInCurrentBracket = 0\n        var currentBracketCountInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrent\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7ki_tqee.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7ki_tqee.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp7ki_tqee.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\n\
    \e[3"
  stdout: ''
  timestamp: 1659799893
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '<')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == '>')\n        openingBracketsCount != closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptxuw96gw.scala:21)\n\tat Problem.main(tmptxuw96gw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = bracketsArray.filter(c => c == '<')\n        val closingBracketsArray = bracketsArray.filter(c\
    \ => c == '>')\n        openingBracketsArray.forall(c => closingBracketsArray.contains(c))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp383zhlks.scala:21)\n\tat Problem.main(tmp383zhlks.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.subsetOf(closingBrackets)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0sblzqs.scala:20)\n\tat Problem.main(tmpo0sblzqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.size == closingBracketsSet.size &&\n            openingBracketsSet.forall(openingBracket\
    \ => closingBracketsSet.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6o2c57br.scala:25)\n\tat Problem.main(tmp6o2c57br.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799918
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.foldLeft(0)(_ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_\
    \ + _)\n        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpxedn1f9t.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpxedn1f9t.scala:15)\n\
    \tat Problem$.main(tmpxedn1f9t.scala:22)\n\tat Problem.main(tmpxedn1f9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        if (openingBracketsCount\
    \ != closingBracketsCount) {\n            return false\n        }\n        var\
    \ openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n        while\
    \ (openingBracketsIndex < openingBracketsCount && closingBracketsIndex < closingBracketsCount)\
    \ {\n            if (openingBrackets(openingBracketsIndex) != closingBrackets(closingBracketsIndex))\
    \ {\n                return false\n            }\n            openingBracketsIndex\
    \ += 1\n            closingBracketsIndex += 1\n        }\n        if (openingBracketsIndex\
    \ != openingBracketsCount) {\n            return false\n        }\n        if\
    \ (closingBracketsIndex != closingBracketsCount) {\n            return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2czy6mf.scala:40)\n\tat Problem.main(tmpv2czy6mf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799917
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5vqai9nj.scala:22)\n\tat Problem.main(tmp5vqai9nj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsArray = new Array[Int](bracketsArrayLength)\n\
    \        val closingBracketsArray = new Array[Int](bracketsArrayLength)\n    \
    \    var openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n    \
    \    var openingBracketsCount = 0\n        var closingBracketsCount = 0\n    \
    \    var openingBracketsCount2 = 0\n        var closingBracketsCount2 = 0\n  \
    \      var openingBracketsCount3 = 0\n        var closingBracketsCount3 = 0\n\
    \        var openingBracketsCount4 = 0\n        var closingBracketsCount4 = 0\n\
    \        var openingBracketsCount5 = 0\n        var closingBracketsCount5 = 0\n\
    \        var openingBracketsCount6 = 0\n        var closingBracketsCount6 = 0\n\
    \        var openingBracketsCount7 = 0\n        var closingBracketsCount7 = 0\n\
    \        var openingBracketsCount8 = 0\n        var closingBracketsCount8 = 0\n\
    \        var openingBracketsCount9 = 0\n        var closingBracketsCount9 = 0\n\
    \        var openingBracketsCount10 = 0\n        var closingBracketsCount10 =\
    \ 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBrackets\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9id3if2v.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9id3if2v.scala:67:5 ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.forall(closingBrackets.contains)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprk8hn1fn.scala:20)\n\tat Problem.main(tmprk8hn1fn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCountInside = 0\n        var closingBracketsCountInside\
    \ = 0\n        var openingBracketsCountOutside = 0\n        var closingBracketsCountOutside\
    \ = 0\n        var openingBracketsCountInsideOutside = 0\n        var closingBracketsCountInsideOutside\
    \ = 0\n        var openingBracketsCountOutsideInside = 0\n        var closingBracketsCountOutsideInside\
    \ = 0\n        var openingBracketsCountInsideOutsideOutside = 0\n        var closingBracketsCountInsideOutsideOutside\
    \ = 0\n        var openingBracketsCountOutsideInsideInside = 0\n        var closingBracketsCountOutsideInsideInside\
    \ = 0\n        var openingBracketsCountInsideOutsideOutsideInside = 0\n      \
    \  var closingBracketsCountInsideOutsideOutsideInside = 0\n        var openingBracketsCountOutsideInsideInside\
    \ = 0\n        var closingBracketsCountOutsideInsideInside = 0\n        var openingBracketsCountInsideOutsideOutsideInsideInside\
    \ = 0\n        var closingBracketsCountInsideOutsideOutsideInsideInside = 0\n\
    \        var openingBracketsCountOutsideInsideInside = 0\n        var closingBracketsCountOutsideInsideInside\
    \ = 0\n        var openingBracketsCountInsideOutsideOutsideInsideInside = 0\n\
    \        var closingBracketsCountInsideOutsideOutsideInsideInside = 0\n      \
    \  var openingBracketsCountOutsideInsideInside = 0\n        var closingBracketsCountOutsideInsideInside\
    \ = 0\n        var openingBracketsCountInsideOutsideOutsideInsideInside = 0\n\
    \        var closingBracketsCountInsideOutsideOutsideInsideInside = 0\n      \
    \  var openingBracketsCountOutsideInsideInside = 0\n        var closingBracketsCountOutsideInsideInside\
    \ = 0\n        var openingBracketsCountInsideOutsideOutsideInsideInside = 0\n\
    \        var closingBracketsCountInsideOutsideOutsideInsideInside = 0\n      \
    \  var openingBracketsCountOutsideInsideInside = 0\n        var closingBracketsCountOutsideInside\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0x656990.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0x656990.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mopeningBracketsCountOutsideInsideInside\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mopeningBracketsCountOutsideInsideInside is already defined as \e\
    [33mvariable\e[0m \e[35mopeningBracketsCountOutsideInsideInside\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0x656990.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mvar\e[0m \e[36mclosingBracketsCountOutsideInsideInside\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsCountOutsideInsideInside is already defined\
    \ as \e[33mvariable\e[0m \e[35mclosingBracketsCountOutsideInsideInside\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0x656990.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mvar\e[0m \e[36mopeningBracketsCountOutsideInsideInside\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsCountOutsideInsideInside is already defined\
    \ as \e[33mvariable\e[0m \e[35mopeningBracketsCountOutsideInsideInside\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0x656990.scala:38:12 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        \e[33mvar\e[0m \e[36mclosingBracketsCountOutsideInsideInside\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.filter(c => c == '<').length\n        val closingBracketsCount\
    \ = bracketsArray.filter(c => c == '>').length\n        openingBracketsCount ==\
    \ closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpru59ol_y.scala:26)\n\tat Problem.main(tmpru59ol_y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCountInside = 0\n        var closingBracketsCountInside\
    \ = 0\n        var openingBracketsCountOutside = 0\n        var closingBracketsCountOutside\
    \ = 0\n        var openingBracketsCountInsideOutside = 0\n        var closingBracketsCountInsideOutside\
    \ = 0\n        var openingBracketsCountOutsideInside = 0\n        var closingBracketsCountOutsideInside\
    \ = 0\n        var openingBracketsCountInsideOutsideInside = 0\n        var closingBracketsCountInsideOutsideInside\
    \ = 0\n        var openingBracketsCountOutsideInsideOutside = 0\n        var closingBracketsCountOutsideInsideOutside\
    \ = 0\n        var openingBracketsCountInsideOutsideInsideOutside = 0\n      \
    \  var closingBracketsCountInsideOutsideInsideOutside = 0\n        var openingBracketsCountOutsideInsideOutsideInside\
    \ = 0\n        var closingBracketsCountOutsideInsideOutsideInside = 0\n      \
    \  var openingBracketsCountInsideOutsideInsideOutsideInside = 0\n        var closingBracketsCountInsideOutsideInsideOutsideInside\
    \ = 0\n        var openingBracketsCountOutsideInsideOutsideInsideOutside = 0\n\
    \        var closingBracketsCountOutsideInsideOutsideInsideOutside = 0\n     \
    \   var openingBracketsCountInsideOutsideInsideOutsideInsideOutside = 0\n    \
    \    var closingBracketsCountInsideOutsideInsideOutsideInsideOutside = 0\n   \
    \     var openingBracketsCountOutsideInsideOutsideInsideOutsideInsideOutside =\
    \ 0\n        var closingBracketsCountOutsideInsideOutsideInsideOutsideInsideOutside\
    \ = 0\n        var openingBracketsCountInsideOutsideInsideOutsideInsideOutsideInsideOutside\
    \ = 0\n        var closingBracketsCountInsideOutsideInsideOutsideInsideOutsideInsideOutside\
    \ = 0\n        var openingBracketsCountOutsideInsideOutsideInsideOutsideInsideOutsideInsideOutside\
    \ = 0\n        var closingBracketsCountOutsideInsideOutsideInsideOutsideInsideOutside\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbse7hdu9.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbse7hdu9.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplj5pzjvp.scala:22)\n\tat Problem.main(tmplj5pzjvp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.subsetOf(closingBrackets)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0sblzqs.scala:20)\n\tat Problem.main(tmpo0sblzqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5vqai9nj.scala:22)\n\tat Problem.main(tmp5vqai9nj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toList\n        val openingBracketsArray\
    \ = bracketsArray.filter(x => x == \"<\")\n        val closingBracketsArray =\
    \ bracketsArray.filter(x => x == \">\")\n        openingBracketsArray.forall(x\
    \ => closingBracketsArray.contains(x))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphkismwnm.scala:16:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArray\e[0m\
    \ = bracketsArray.filter(\e[36mx\e[0m => x == \e[31m\"<\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                             ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmphkismwnm.scala:17:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArray\e[0m\
    \ = bracketsArray.filter(\e[36mx\e[0m => x == \e[31m\">\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                             ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659799923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.subsetOf(closingBrackets)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0sblzqs.scala:20)\n\tat Problem.main(tmpo0sblzqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentOpeningBracket = bracketsArray(0)\n        var currentClosingBracket\
    \ = bracketsArray(0)\n        var currentOpeningBracketCount = 0\n        var\
    \ currentClosingBracketCount = 0\n        var currentOpeningBracketIndex = -1\n\
    \        var currentClosingBracketIndex = -1\n        var currentOpeningBracketCountIndex\
    \ = -1\n        var currentClosingBracketCountIndex = -1\n        var currentOpeningBracketIndexInArray\
    \ = -1\n        var currentClosingBracketIndexInArray = -1\n        var currentOpeningBracketCountIndexInArray\
    \ = -1\n        var currentClosingBracketCountIndexInArray = -1\n        var currentOpeningBracketIndexInArrayLength\
    \ = -1\n        var currentClosingBracketIndexInArrayLength = -1\n        var\
    \ currentOpeningBracketCountIndexInArrayLength = -1\n        var currentClosingBracketCountIndexInArrayLength\
    \ = -1\n        var currentOpeningBracketIndexInArrayLength = -1\n        var\
    \ currentClosingBracketIndexInArrayLength = -1\n        var currentOpeningBracketCountIndexInArrayLength\
    \ = -1\n        var currentClosingBracketCountIndexInArrayLength = -1\n      \
    \  var currentOpeningBracketCountIndexInArrayLength = -1\n        var currentOpeningBracketCountIndexInArrayLength\
    \ = -1\n        var currentOpeningBracketCountIndexInArrayLength = -1\n      \
    \  var currentOpeningBracketCountIndexInArrayLength = -1\n        var currentOpeningBracketCountIndexInArrayLength\
    \ = -1\n        var currentOpeningBracketCountIndexInArrayLength = -1\n      \
    \  var currentOpeningBracketCountIndexInArrayLength = -1\n        var currentOpeningBracketCountIndexInArrayLength\
    \ = -1\n        var currentOpeningBracketCountIndexInArrayLength = -1\n      \
    \  var currentOpeningBracketCountIndexInArrayLength = -1\n        var currentOpeningBracketCountIndexInArrayLength\
    \ = -1\n        var currentOpeningBracketCountIndexInArrayLength = -1\n      \
    \  var currentOpeningBracketCountIndexInArrayLength = -1\n        var currentOpeningBracketCountIndexInArrayLength\
    \ = -1\n        var currentOpeningBracketCountIndexInArrayLength = -1\n      \
    \  var currentOpeningBracketCountIndexInArrayLength = -1\n        var currentOpeningBracketCountIndexInArrayLength\
    \ = -1\n        var currentOpeningBracketCountIndexInArrayLength = -1\n      \
    \  var currentOpeningBracketCountIndexInArrayLength = -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv_z6g3qm.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mvar\e[0m \e[36mcurrentOpeningBracketIndexInArrayLength\e\
    [0m = -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentOpeningBracketIndexInArrayLength is already defined\
    \ as \e[33mvariable\e[0m \e[35mcurrentOpeningBracketIndexInArrayLength\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv_z6g3qm.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentClosingBracketIndexInArrayLength\e\
    [0m = -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentClosingBracketIndexInArrayLength is already defined\
    \ as \e[33mvariable\e[0m \e[35mcurrentClosingBracketIndexInArrayLength\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv_z6g3qm.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentOpeningBracketCountIndexInArrayLength\e\
    [0m = -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentOpeningBracketCountIndexInArrayLength is already defined\
    \ as \e[33mvariable\e[0m \e[35mcurrentOpeningBracketCountIndexInArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv_z6g3qm.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mvar\e[0m \e[36mcurrentClosingBracketCountIndexInArrayLength\e\
    [0m = -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentClosingBracketCountIndexInArrayLength is already defined\
    \ as \e[33mvariable\e[0m \e[35mcurrentClosingBracketCountIndexInAr"
  stdout: ''
  timestamp: 1659799923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.filter(c => c == '<').length\n        val closingBracketsCount\
    \ = bracketsArray.filter(c => c == '>').length\n        openingBracketsCount ==\
    \ closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpru59ol_y.scala:26)\n\tat Problem.main(tmpru59ol_y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.filter(c => c == '<').length\n        val closingBracketsCount\
    \ = bracketsArray.filter(c => c == '>').length\n        openingBracketsCount ==\
    \ closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpru59ol_y.scala:26)\n\tat Problem.main(tmpru59ol_y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.foldLeft(0)(_ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_\
    \ + _)\n        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpxedn1f9t.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpxedn1f9t.scala:15)\n\
    \tat Problem$.main(tmpxedn1f9t.scala:22)\n\tat Problem.main(tmpxedn1f9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.subsetOf(closingBrackets)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0sblzqs.scala:20)\n\tat Problem.main(tmpo0sblzqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = mutable.HashSet[Char]()\n        val closingBrackets = mutable.HashSet[Char]()\n\
    \        val openingBracketsArray = mutable.ArrayBuffer(0)\n        val closingBracketsArray\
    \ = mutable.ArrayBuffer(0)\n        var openingBracketsIndex = 0\n        var\
    \ closingBracketsIndex = 0\n        var openingBracketsCount = 0\n        var\
    \ closingBracketsCount = 0\n        var openingBracketsCount2 = 0\n        var\
    \ closingBracketsCount2 = 0\n        var openingBracketsCount3 = 0\n        var\
    \ closingBracketsCount3 = 0\n        var openingBracketsCount4 = 0\n        var\
    \ closingBracketsCount4 = 0\n        var openingBracketsCount5 = 0\n        var\
    \ closingBracketsCount5 = 0\n        var openingBracketsCount6 = 0\n        var\
    \ closingBracketsCount6 = 0\n        var openingBracketsCount7 = 0\n        var\
    \ closingBracketsCount7 = 0\n        var openingBracketsCount8 = 0\n        var\
    \ closingBracketsCount8 = 0\n        var openingBracketsCount9 = 0\n        var\
    \ closingBracketsCount9 = 0\n        var openingBracketsCount10 = 0\n        var\
    \ closingBracketsCount10 = 0\n        var openingBracketsCount11 = 0\n       \
    \ var closingBracketsCount11 = 0\n        var openingBracketsCount12 = 0\n   \
    \     var closingBracketsCount12 = 0\n        var openingBracketsCount13 = 0\n\
    \        var closingBracketsCount13 = 0\n        var openingBracketsCount14 =\
    \ 0\n        var closingBracketsCount14 = 0\n        var openingBracketsCount15\
    \ = 0\n        var closingBracketsCount15 = 0\n        var openingBracketsCount16\
    \ = 0\n        var closingBracketsCount16 = 0\n        var openingBracketsCount17\
    \ = 0\n        var closingBracketsCount17 = 0\n        var openingBracketsCount18\
    \ = 0\n        var closingBracketsCount18 = 0\n        var openingBracketsCount19\
    \ = 0\n        var closingBracketsCount19 = 0\n        var openingBracketsCount20\
    \ = 0\n        var closingBracketsCount20 = 0\n        var openingBracketsCount21\
    \ = 0\n        var closingBracketsCount21 = 0\n        var openingBracketsCount22\
    \ = 0\n        var closingBracketsCount22 = 0\n        var openingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkg3qdld_.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkg3qdld_.scala:16:30\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mopeningBrackets\e[0m = mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpkg3qdld_.scala:17:30 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkg3qdld_.scala:18:35 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArray\e[0m\
    \ = mutable.ArrayBuffer(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkg3qdld_.scala:19:35 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mclosingBracketsArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkg3qdld_.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e"
  stdout: ''
  timestamp: 1659799923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.foldLeft(0)(_ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_\
    \ + _)\n        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpxedn1f9t.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpxedn1f9t.scala:15)\n\
    \tat Problem$.main(tmpxedn1f9t.scala:22)\n\tat Problem.main(tmpxedn1f9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = mutable.HashSet[Char]()\n        val closingBrackets = mutable.HashSet[Char]()\n\
    \        val openingBracketsCount = mutable.HashMap[Char, Int]()\n        val\
    \ closingBracketsCount = mutable.HashMap[Char, Int]()\n        val openingBracketsCountArray\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closingBracketsCountArray = mutable.ArrayBuffer.empty[Int]\n\
    \        val openingBracketsCountArray2 = mutable.ArrayBuffer.empty[Int]\n   \
    \     val closingBracketsCountArray2 = mutable.ArrayBuffer.empty[Int]\n      \
    \  val openingBracketsCountArray3 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closingBracketsCountArray3 = mutable.ArrayBuffer.empty[Int]\n        val openingBracketsCountArray4\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closingBracketsCountArray4 = mutable.ArrayBuffer.empty[Int]\n\
    \        val openingBracketsCountArray5 = mutable.ArrayBuffer.empty[Int]\n   \
    \     val closingBracketsCountArray5 = mutable.ArrayBuffer.empty[Int]\n      \
    \  val openingBracketsCountArray6 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closingBracketsCountArray6 = mutable.ArrayBuffer.empty[Int]\n        val openingBracketsCountArray7\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closingBracketsCountArray7 = mutable.ArrayBuffer.empty[Int]\n\
    \        val openingBracketsCountArray8 = mutable.ArrayBuffer.empty[Int]\n   \
    \     val closingBracketsCountArray8 = mutable.ArrayBuffer.empty[Int]\n      \
    \  val openingBracketsCountArray9 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closingBracketsCountArray9 = mutable.ArrayBuffer.empty[Int]\n        val openingBracketsCountArray10\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closingBracketsCountArray10 =\
    \ mutable.ArrayBuffer.empty[Int]\n        val openingBracketsCountArray11 = mutable.ArrayBuffer.empty[Int]\n\
    \        val closingBracketsCountArray11 = mutable.ArrayBuffer.empty[Int]\n  \
    \      val openingBracketsCountArray12 = mutable.ArrayBuffer.empty[Int]\n    \
    \    val closingBracketsCountArray\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcigo8o5_.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcigo8o5_.scala:16:30\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mopeningBrackets\e[0m = mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcigo8o5_.scala:17:30 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcigo8o5_.scala:18:35 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsCount\e[0m\
    \ = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcigo8o5_.scala:19:35 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsCount\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcigo8o5_.scala:20:40\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mopeningBracketsCountArray\e[0m = mutable.ArrayBuff"
  stdout: ''
  timestamp: 1659799904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ = 0 // number of opening brackets\n        var closingBrackets = 0 // number\
    \ of closing brackets\n        var openingBracketsArray = Array.empty[Char]\n\
    \        var closingBracketsArray = Array.empty[Char]\n        var openingBracketsArrayIndex\
    \ = Array.empty[Int]\n        var closingBracketsArrayIndex = Array.empty[Int]\n\
    \        var openingBracketsArrayLength = Array.empty[Int]\n        var closingBracketsArrayLength\
    \ = Array.empty[Int]\n        var openingBracketsArrayIndexLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLength = Array.empty[Int]\n        var openingBracketsArrayIndexLengthLength\
    \ = Array.empty[Int]\n        var closingBracketsArrayIndexLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBra\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwtnswha4.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwtnswha4.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mopeningBracketsArrayIndexLengthLengthLength\e[0m = Array.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayIndexLengthLengthLength is already defined\
    \ as \e[33mvariable\e[0m \e[35mopeningBracketsArrayIndexLengthLengthLength\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwtnswha4.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mvar\e[0m \e[36mclosingBracketsArrayIndexLengthLengthLength\e\
    [0m = Array.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayIndexLengthLengthLength is already defined\
    \ as \e[33mvariable\e[0m \e[35mclosingBracketsArrayIndexLengthLengthLength\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwtnswha4.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mvar\e[0m \e[36mopeningBracketsArrayIndexLengthLengthLength\e\
    [0m = Array.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayIndexLengthLengthLength is already defined\
    \ as \e[33mvariable\e[0m \e[35mopeningBracketsArrayIndexLengthLengthLength\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwtnswha4.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        "
  stdout: ''
  timestamp: 1659799924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.foldLeft(0)(_ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_\
    \ + _)\n        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpxedn1f9t.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpxedn1f9t.scala:15)\n\
    \tat Problem$.main(tmpxedn1f9t.scala:22)\n\tat Problem.main(tmpxedn1f9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpztnm0jh3.scala:24)\n\tat Problem.main(tmpztnm0jh3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.subsetOf(closingBrackets)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0sblzqs.scala:20)\n\tat Problem.main(tmpo0sblzqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toList\n        val openingBrackets\
    \ = bracketsArray.filter(x => x == \"<\")\n        val closingBrackets = bracketsArray.filter(x\
    \ => x == \">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpuyi6k8zd.scala:16:56 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = bracketsArray.filter(\e\
    [36mx\e[0m => x == \e[31m\"<\"\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpuyi6k8zd.scala:17:56 -----------------------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = bracketsArray.filter(\e\
    [36mx\e[0m => x == \e[31m\">\"\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659799925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayIterator = bracketsArray.iterator\n\
    \        var openingBracketCount = 0\n        var closingBracketCount = 0\n  \
    \      while(bracketsArrayIterator.hasNext) {\n            val nextChar = bracketsArrayIterator.next()\n\
    \            if(nextChar == '<') {\n                openingBracketCount += 1\n\
    \            }\n            if(nextChar == '>') {\n                closingBracketCount\
    \ += 1\n            }\n        }\n        openingBracketCount < closingBracketCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3dq2xzci.scala:32)\n\tat Problem.main(tmp3dq2xzci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCountArray = new Array[Int](bracketsArrayLength)\n\
    \        var closingBracketsCountArray = new Array[Int](bracketsArrayLength)\n\
    \        var openingBracketsCountArrayIndex = 0\n        var closingBracketsCountArrayIndex\
    \ = 0\n        var openingBracketsCountArrayIndex2 = 0\n        var closingBracketsCountArrayIndex2\
    \ = 0\n        var openingBracketsCountArrayIndex3 = 0\n        var closingBracketsCountArrayIndex3\
    \ = 0\n        var openingBracketsCountArrayIndex4 = 0\n        var closingBracketsCountArrayIndex4\
    \ = 0\n        var openingBracketsCountArrayIndex5 = 0\n        var closingBracketsCountArrayIndex5\
    \ = 0\n        var openingBracketsCountArrayIndex6 = 0\n        var closingBracketsCountArrayIndex6\
    \ = 0\n        var openingBracketsCountArrayIndex7 = 0\n        var closingBracketsCountArrayIndex7\
    \ = 0\n        var openingBracketsCountArrayIndex8 = 0\n        var closingBracketsCountArrayIndex8\
    \ = 0\n        var openingBracketsCountArrayIndex9 = 0\n        var closingBracketsCountArrayIndex9\
    \ = 0\n        var openingBracketsCountArrayIndex10 = 0\n        var closingBracketsCountArrayIndex10\
    \ = 0\n        var openingBracketsCountArrayIndex11 = 0\n        var closingBracketsCountArrayIndex11\
    \ = 0\n        var openingBracketsCountArrayIndex12 = 0\n        var closingBracketsCountArrayIndex12\
    \ = 0\n        var openingBracketsCountArrayIndex13 = 0\n        var closingBracketsCountArrayIndex13\
    \ = 0\n        var openingBracketsCountArrayIndex14 = 0\n        var closingBracketsCountArrayIndex14\
    \ = 0\n        var openingBracketsCountArrayIndex15 = 0\n        var closingBracketsCountArrayIndex15\
    \ = 0\n        var openingBracketsCountArrayIndex16 = 0\n        var closingBracketsCountArrayIndex16\
    \ = 0\n        var openingBracketsCountArrayIndex17 = 0\n        var closingBracketsCountArrayIndex17\
    \ = 0\n        var openingBracketsCountArrayIndex18 = 0\n        var closingBracketsCountArrayIndex18\
    \ = 0\n        var openingBracketsCountArrayIndex19 = 0\n        var closingBracketsCountArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpopegv96q.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpopegv96q.scala:59:5 ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.forall(closingBrackets.contains)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprk8hn1fn.scala:20)\n\tat Problem.main(tmprk8hn1fn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"<\")\n        val closingBracketsArray = Array(\">\")\n        val\
    \ openingBracketsCount = openingBracketsArray.length\n        val closingBracketsCount\
    \ = closingBracketsArray.length\n        var openingBracketsIndex = 0\n      \
    \  var closingBracketsIndex = 0\n        var openingBracketsCountSoFar = 0\n \
    \       var closingBracketsCountSoFar = 0\n        var openingBracketsCountSoFarSoFar\
    \ = 0\n        var closingBracketsCountSoFarSoFar = 0\n        var openingBracketsCountSoFarSoFarSoFar\
    \ = 0\n        var closingBracketsCountSoFarSoFarSoFar = 0\n        var openingBracketsCountSoFarSoFarSoFarSoFar\
    \ = 0\n        var closingBracketsCountSoFarSoFarSoFarSoFar = 0\n        var openingBracketsCountSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        var closingBracketsCountSoFarSoFarSoFarSoFarSoFar = 0\n       \
    \ var openingBracketsCountSoFarSoFarSoFarSoFarSoFar = 0\n        var closingBracketsCountSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        var openingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFar = 0\n  \
    \      var closingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        var\
    \ openingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        var closingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        var openingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        var closingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        var openingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        var closingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        var openingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        var closingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSo\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoiygtozd.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoiygtozd.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mopeningBracketsCountSoFarSoFarSoFarSoFarSoFar\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsCountSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvariable\e[0m \e[35mopeningBracketsCountSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoiygtozd.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mvar\e[0m \e[36mclosingBracketsCountSoFarSoFarSoFarSoFarSoFar\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsCountSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvariable\e[0m \e[35mclosingBracketsCountSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpoiygtozd.scala:44:5 ---------------------\e[0m\e[0m\n\
    \e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = mutable.ListBuffer[Char]()\n        val closingBrackets = mutable.ListBuffer[Char]()\n\
    \        val openingBracketsCount = mutable.ListBuffer[Int]()\n        val closingBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        var openingBracketsIndex = 0\n        var\
    \ closingBracketsIndex = 0\n        var currentOpeningBracketsIndex = 0\n    \
    \    var currentClosingBracketsIndex = 0\n        var currentOpeningBracketsCount\
    \ = 0\n        var currentClosingBracketsCount = 0\n        var currentOpeningBracketsChar\
    \ = ' '\n        var currentClosingBracketsChar = ' '\n        var currentOpeningBracketsCharCount\
    \ = 0\n        var currentClosingBracketsCharCount = 0\n        var currentOpeningBracketsCharArray\
    \ = Array[Char]()\n        var currentClosingBracketsCharArray = Array[Char]()\n\
    \        var currentOpeningBracketsCharArrayIndex = 0\n        var currentClosingBracketsCharArrayIndex\
    \ = 0\n        var currentOpeningBracketsCharArrayCount = 0\n        var currentClosingBracketsCharArrayCount\
    \ = 0\n        var currentOpeningBracketsCharArrayIndex = 0\n        var currentClosingBracketsCharArrayIndex\
    \ = 0\n        var currentOpeningBracketsCharArrayCount = 0\n        var currentClosingBracketsCharArrayCount\
    \ = 0\n        var currentOpeningBracketsCharArrayIndex = 0\n        var currentClosingBracketsCharArrayIndex\
    \ = 0\n        var currentOpeningBracketsCharArrayCount = 0\n        var currentClosingBracketsCharArrayCount\
    \ = 0\n        var currentOpeningBracketsCharArrayIndex = 0\n        var currentClosingBracketsCharArrayIndex\
    \ = 0\n        var currentOpeningBracketsCharArrayCount = 0\n        var currentClosingBracketsCharArrayCount\
    \ = 0\n        var currentOpeningBracketsCharArrayIndex = 0\n        var currentClosingBracketsCharArrayIndex\
    \ = 0\n        var currentOpeningBracketsCharArrayCount = 0\n        var currentClosingBracketsCharArrayCount\
    \ = 0\n        var currentOpeningBracketsCharArrayIndex = 0\n        var currentClosingBracketsCharArrayIndex\
    \ = 0\n        var currentOpeningBracketsCharArrayCount = 0\n        var currentClosingBracketsCharArrayCount\
    \ = 0\n        var currentOpeningBracketsCharArrayIndex = 0\n        var currentClos\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppan03yph.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppan03yph.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentOpeningBracketsCharArrayIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mcurrentOpeningBracketsCharArrayIndex is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentOpeningBracketsCharArrayIndex\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppan03yph.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentClosingBracketsCharArrayIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mcurrentClosingBracketsCharArrayIndex is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentClosingBracketsCharArrayIndex\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppan03yph.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentOpeningBracketsCharArrayCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mcurrentOpeningBracketsCharArrayCount is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentOpeningBracketsCharArrayCount\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppan03yph.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentClosingBracketsCharArrayCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mcurrentClosing"
  stdout: ''
  timestamp: 1659799926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = bracketsArray.filter(c => c == '<')\n        val closingBrackets = bracketsArray.filter(c\
    \ => c == '>')\n        openingBrackets.size == closingBrackets.size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfynfryz9.scala:26)\n\tat Problem.main(tmpfynfryz9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799918
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.subsetOf(closingBrackets)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0sblzqs.scala:20)\n\tat Problem.main(tmpo0sblzqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = bracketsArray.filter(c => c == '<')\n        val closingBrackets = bracketsArray.filter(c\
    \ => c == '>')\n        openingBrackets.size == closingBrackets.size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfynfryz9.scala:26)\n\tat Problem.main(tmpfynfryz9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentChar = 0\n        var currentCharValue = 0\n       \
    \ var currentCharValue2 = 0\n        var currentCharValue3 = 0\n        var currentCharValue4\
    \ = 0\n        var currentCharValue5 = 0\n        var currentCharValue6 = 0\n\
    \        var currentCharValue7 = 0\n        var currentCharValue8 = 0\n      \
    \  var currentCharValue9 = 0\n        var currentCharValue10 = 0\n        var\
    \ currentCharValue11 = 0\n        var currentCharValue12 = 0\n        var currentCharValue13\
    \ = 0\n        var currentCharValue14 = 0\n        var currentCharValue15 = 0\n\
    \        var currentCharValue16 = 0\n        var currentCharValue17 = 0\n    \
    \    var currentCharValue18 = 0\n        var currentCharValue19 = 0\n        var\
    \ currentCharValue20 = 0\n        var currentCharValue21 = 0\n        var currentCharValue22\
    \ = 0\n        var currentCharValue23 = 0\n        var currentCharValue24 = 0\n\
    \        var currentCharValue25 = 0\n        var currentCharValue26 = 0\n    \
    \    var currentCharValue27 = 0\n        var currentCharValue28 = 0\n        var\
    \ currentCharValue29 = 0\n        var currentCharValue30 = 0\n        var currentCharValue31\
    \ = 0\n        var currentCharValue32 = 0\n        var currentCharValue33 = 0\n\
    \        var currentCharValue34 = 0\n        var currentCharValue35 = 0\n    \
    \    var currentCharValue36 = 0\n        var currentCharValue37 = 0\n        var\
    \ currentCharValue38 = 0\n        var currentCharValue39 = 0\n        var currentCharValue40\
    \ = 0\n        var currentCharValue41 = 0\n        var currentCharValue42 = 0\n\
    \        var currentCharValue43 = 0\n        var currentCharValue44 = 0\n    \
    \    var currentCharValue45 = 0\n        var currentCharValue46 = 0\n        var\
    \ currentCharValue47 = 0\n        var currentCharValue48 = 0\n        var currentCharValue49\
    \ = 0\n        var currentCharValue50 = 0\n        var currentCharValue51 = 0\n\
    \        var currentCharValue52 = 0\n        var currentCharValue53 = 0\n    \
    \    var currentCharValue54 = 0\n        var currentCharValue55 = 0\n        var\
    \ currentCharValue56 = 0\n        var currentCharValue57 = 0\n        var currentCharValue58\
    \ = 0\n        var currentCharValue59 = 0\n        var currentCharValue60 = 0\n\
    \        var currentCharValue61 = 0\n        var currentCharValue62 = 0\n    \
    \    var currentCharValue63 = 0\n        var currentCharValue64 = 0\n        var\
    \ currentCharValue65 = 0\n        var currentCharValue66 = 0\n        var currentCharValue67\
    \ = 0\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2906e1j8.scala:87:5\
    \ ---------------------\e[0m\e[0m\n\e[31m87 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = bracketsArray.filter(_ == '<')\n        val closingBracketsArray = bracketsArray.filter(_\
    \ == '>')\n        openingBracketsArray.size == closingBracketsArray.size &&\n\
    \            openingBracketsArray.forall(closingBracketsArray.contains)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp56akmh1y.scala:22)\n\tat Problem.main(tmp56akmh1y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"<\")\n        val closingBracketsArray = Array(\">\")\n        val\
    \ openingBracketsCount = openingBracketsArray.length\n        val closingBracketsCount\
    \ = closingBracketsArray.length\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArray = openingBracketsArray.drop(openingBracketsArrayLength)\n\
    \        val closingBracketsArray = closingBracketsArray.drop(closingBracketsArrayLength)\n\
    \        val openingBracketsCount = openingBracketsArray.length\n        val closingBracketsCount\
    \ = closingBracketsArray.length\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArray = openingBracketsArray.drop(openingBracketsArrayLength)\n\
    \        val closingBracketsArray = closingBracketsArray.drop(closingBracketsArrayLength)\n\
    \        val openingBracketsCount = openingBracketsArray.length\n        val closingBracketsCount\
    \ = closingBracketsArray.length\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArray = openingBracketsArray.drop(openingBracketsArrayLength)\n\
    \        val closingBracketsArray = closingBracketsArray.drop(closingBracketsArrayLength)\n\
    \        val openingBracketsCount = openingBracketsArray.length\n        val closingBracketsCount\
    \ = closingBracketsArray.length\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArray = openingBracketsArray.drop(openingBracketsArrayLength)\n\
    \        val closingBracketsArray = closingBracketsArray.drop(closingBracketsArrayLength)\n\
    \        val openingBracketsCount = openingBracketsArray.length\n        val closingBracketsCount\
    \ = closingBracketsArray.length\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn7fkr1u9.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArray\e[0m\
    \ = openingBracketsArray.drop(openingBracketsArrayLength)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArray is already defined as \e[33mvalue\e[0m\
    \ \e[35mopeningBracketsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn7fkr1u9.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArray\e[0m\
    \ = closingBracketsArray.drop(closingBracketsArrayLength)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArray is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosingBracketsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn7fkr1u9.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsCount\e[0m\
    \ = openingBracketsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mopeningBracketsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn7fkr1u9.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsCount\e[0m\
    \ = closingBracketsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosingBracketsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be define"
  stdout: ''
  timestamp: 1659799928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsCount = bracketsArray.count(_\
    \ == '<')\n        val closingBracketsCount = bracketsArray.count(_ == '>')\n\
    \        openingBracketsCount != closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpol4twq2e.scala:22)\n\tat Problem.main(tmpol4twq2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ = 0 // number of opening brackets\n        var closingBrackets = 0 // number\
    \ of closing brackets\n        var openingBracketsArray = new Array[Char](bracketsArray.length)\n\
    \        var closingBracketsArray = new Array[Char](bracketsArray.length)\n  \
    \      var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsArrayIndex2 = 0\n        var closingBracketsArrayIndex2\
    \ = 0\n        var openingBracketsArrayIndex3 = 0\n        var closingBracketsArrayIndex3\
    \ = 0\n        var openingBracketsArrayIndex4 = 0\n        var closingBracketsArrayIndex4\
    \ = 0\n        var openingBracketsArrayIndex5 = 0\n        var closingBracketsArrayIndex5\
    \ = 0\n        var openingBracketsArrayIndex6 = 0\n        var closingBracketsArrayIndex6\
    \ = 0\n        var openingBracketsArrayIndex7 = 0\n        var closingBracketsArrayIndex7\
    \ = 0\n        var openingBracketsArrayIndex8 = 0\n        var closingBracketsArrayIndex8\
    \ = 0\n        var openingBracketsArrayIndex9 = 0\n        var closingBracketsArrayIndex9\
    \ = 0\n        var openingBracketsArrayIndex10 = 0\n        var closingBracketsArrayIndex10\
    \ = 0\n        var openingBracketsArrayIndex11 = 0\n        var closingBracketsArrayIndex11\
    \ = 0\n        var openingBracketsArrayIndex12 = 0\n        var closingBracketsArrayIndex12\
    \ = 0\n        var openingBracketsArrayIndex13 = 0\n        var closingBracketsArrayIndex13\
    \ = 0\n        var openingBracketsArrayIndex14 = 0\n        var closingBracketsArrayIndex14\
    \ = 0\n        var openingBracketsArrayIndex15 = 0\n        var closingBracketsArrayIndex15\
    \ = 0\n        var openingBracketsArrayIndex16 = 0\n        var closingBracketsArrayIndex16\
    \ = 0\n        var openingBracketsArrayIndex17 = 0\n        var closingBracketsArrayIndex17\
    \ = 0\n        var openingBracketsArrayIndex18 = 0\n        var closingBracketsArrayIndex18\
    \ = 0\n        var openingBracketsArrayIndex19 = 0\n        var closingBracketsArrayIndex19\
    \ = 0\n        var openingBracketsArrayIndex20 = 0\n        var closingBracketsArrayIndex20\
    \ = 0\n        var openingBracketsArrayIndex21 = 0\n        var closingBracketsArrayIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxxkobyy3.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxxkobyy3.scala:62:5 ---------------------\e[0m\e[0m\n\e[31m62 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.forall(closingBrackets.contains)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprk8hn1fn.scala:20)\n\tat Problem.main(tmprk8hn1fn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799913
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.foldLeft(0)(_ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_\
    \ + _)\n        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpxedn1f9t.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpxedn1f9t.scala:15)\n\
    \tat Problem$.main(tmpxedn1f9t.scala:22)\n\tat Problem.main(tmpxedn1f9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.subsetOf(closingBrackets)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0sblzqs.scala:20)\n\tat Problem.main(tmpo0sblzqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.foldLeft(0)(_ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_\
    \ + _)\n        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpxedn1f9t.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmpxedn1f9t.scala:15)\n\
    \tat Problem$.main(tmpxedn1f9t.scala:22)\n\tat Problem.main(tmpxedn1f9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsArray = Array.fill(\n   \
    \         bracketsArrayLength\n        )(0)\n        val closingBracketsArray\
    \ = Array.fill(\n            bracketsArrayLength\n        )(0)\n        var openingBracketsIndex\
    \ = 0\n        var closingBracketsIndex = 0\n        for(i <- 0 until bracketsArrayLength)\
    \ {\n            if(bracketsArray(i) == '<') {\n                openingBracketsArray(i)\
    \ = openingBracketsIndex\n                openingBracketsIndex += 1\n        \
    \    } else if(bracketsArray(i) == '>') {\n                closingBracketsArray(i)\
    \ = closingBracketsIndex\n                closingBracketsIndex += 1\n        \
    \    }\n        }\n        openingBracketsIndex == closingBracketsIndex\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9j7nog03.scala:42)\n\tat Problem.main(tmp9j7nog03.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsArray = new Array[Int](bracketsArrayLength)\n\
    \        val closingBracketsArray = new Array[Int](bracketsArrayLength)\n    \
    \    var openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n    \
    \    var openingBracketsCount = 0\n        var closingBracketsCount = 0\n    \
    \    for(i <- 0 until bracketsArrayLength) {\n            if(bracketsArray(i)\
    \ == '<') {\n                openingBracketsArray(openingBracketsIndex) = i\n\
    \                openingBracketsIndex = openingBracketsIndex + 1\n           \
    \     openingBracketsCount = openingBracketsCount + 1\n            }\n       \
    \     if(bracketsArray(i) == '>') {\n                closingBracketsArray(closingBracketsIndex)\
    \ = i\n                closingBracketsIndex = closingBracketsIndex + 1\n     \
    \           closingBracketsCount = closingBracketsCount + 1\n            }\n \
    \       }\n        if(openingBracketsCount != closingBracketsCount) {\n      \
    \      return false\n        }\n        for(i <- 0 until openingBracketsArray.length)\
    \ {\n            val openingBracket = openingBracketsArray(i)\n            val\
    \ closingBracket = closingBracketsArray(i)\n            if(openingBracket < closingBracket)\
    \ {\n                return false\n            }\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuqkqkus9.scala:48)\n\tat Problem.main(tmpuqkqkus9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.subsetOf(closingBrackets)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0sblzqs.scala:20)\n\tat Problem.main(tmpo0sblzqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsCount = bracketsArray.filter(c\
    \ => c == '<').length\n        val closingBracketsCount = bracketsArray.filter(c\
    \ => c == '>').length\n        openingBracketsCount == closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgrprnlsc.scala:27)\n\tat Problem.main(tmpgrprnlsc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.toSet.size\n        val closingBracketsCount = closingBrackets.toSet.size\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmprq6znd3f.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmprq6znd3f.scala:15)\n\
    \tat Problem$.main(tmprq6znd3f.scala:22)\n\tat Problem.main(tmprq6znd3f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.toSet.size\n        val closingBracketsCount = closingBrackets.toSet.size\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmprq6znd3f.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmprq6znd3f.scala:15)\n\
    \tat Problem$.main(tmprq6znd3f.scala:22)\n\tat Problem.main(tmprq6znd3f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentBracket = bracketsArray(0)\n        var currentBracketCount\
    \ = 0\n        var currentBracketCountInCurrentBracket = 0\n        var currentBracketCountInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracket\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8q_2ciay.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8q_2ciay.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp8q_2ciay.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp8q_2ciay.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[3"
  stdout: ''
  timestamp: 1659799928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"<\")\n        val closingBracketsArray = Array(\">\")\n        val\
    \ openingBracketsCount = openingBracketsArray.length\n        val closingBracketsCount\
    \ = closingBracketsArray.length\n        val openingBracketsIndex = 0\n      \
    \  val closingBracketsIndex = 0\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArrayIndex = 0\n        val closingBracketsArrayIndex =\
    \ 0\n        val openingBracketsArrayLength = openingBracketsArray.length\n  \
    \      val closingBracketsArrayLength = closingBracketsArray.length\n        val\
    \ openingBracketsArrayIndex = 0\n        val closingBracketsArrayIndex = 0\n \
    \       val openingBracketsArrayLength = openingBracketsArray.length\n       \
    \ val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArrayIndex\
    \ = 0\n        val closingBracketsArrayIndex = 0\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArrayIndex = 0\n        val closingBracketsArrayIndex\
    \ = 0\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArrayIndex = 0\n        val closingBracketsArrayIndex =\
    \ 0\n        val openingBracketsArrayLength = openingBracketsArray.length\n  \
    \      val closingBracketsArrayLength = closingBracketsArray.length\n        val\
    \ openingBracketsArrayIndex = 0\n        val closingBracketsArrayIndex = 0\n \
    \       val openingBracketsArrayLength = openingBracketsArray.length\n       \
    \ val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArrayIndex\
    \ = 0\n        val closingBracketsArrayIndex = 0\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArrayIndex = 0\n        val closingBracketsArrayIndex\
    \ = 0\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppp61eaks.scala:54:11 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmppp61eaks.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArrayLength\e\
    [0m = openingBracketsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppp61eaks.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayLength\e\
    [0m = closingBracketsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mclosingBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppp61eaks.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArrayIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayIndex is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsArrayIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppp61eaks.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = bracketsArray.filter(_ == '<')\n        val closingBrackets = bracketsArray.filter(_\
    \ == '>')\n        openingBrackets.size == closingBrackets.size\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp368hop7w.scala:26)\n\tat Problem.main(tmp368hop7w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsCount = bracketsArray.count(_\
    \ == '<')\n        val closingBracketsCount = bracketsArray.count(_ == '>')\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuf7z02vg.scala:27)\n\tat Problem.main(tmpuf7z02vg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.subsetOf(closingBrackets)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0sblzqs.scala:20)\n\tat Problem.main(tmpo0sblzqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toList\n        val openingBracketsArray\
    \ = bracketsArray.filter(x => x == \"<\")\n        val closingBracketsArray =\
    \ bracketsArray.filter(x => x == \">\")\n        openingBracketsArray.forall(x\
    \ => closingBracketsArray.contains(x))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphkismwnm.scala:16:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArray\e[0m\
    \ = bracketsArray.filter(\e[36mx\e[0m => x == \e[31m\"<\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                             ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmphkismwnm.scala:17:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArray\e[0m\
    \ = bracketsArray.filter(\e[36mx\e[0m => x == \e[31m\">\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                             ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659799923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"<\", \">\", \"(\", \")\")\n        val closingBracketsArray = Array(\"\
    <\", \">\", \">\", \"(\", \")\")\n        val openingBracketsCount = openingBracketsArray.length\n\
    \        val closingBracketsCount = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArray = Array.fill(openingBracketsArrayLength)(0)\n\
    \        val closingBracketsArray = Array.fill(closingBracketsArrayLength)(0)\n\
    \        var openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n\
    \        var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsArrayIndexLength = 0\n        var closingBracketsArrayIndexLength\
    \ = 0\n        var openingBracketsArrayIndexLength = 0\n        var closingBracketsArrayIndexLength\
    \ = 0\n        var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsArrayIndexLength = 0\n        var closingBracketsArrayIndexLength\
    \ = 0\n        var openingBracketsArrayIndexLength = 0\n        var closingBracketsArrayIndexLength\
    \ = 0\n        var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsArrayIndexLength = 0\n        var closingBracketsArrayIndexLength\
    \ = 0\n        var openingBracketsArrayIndexLength = 0\n        var closingBracketsArrayIndexLength\
    \ = 0\n        var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsArrayIndexLength = 0\n        var closingBracketsArrayIndexLength\
    \ = 0\n        var openingBracketsArrayIndexLength = 0\n        var closingBracketsArrayIndexLength\
    \ = 0\n        var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsArrayIndexLength = 0\n        var closingBracketsArrayIndexLength\
    \ = 0\n        var openingBracketsArrayIndexLength = 0\n        var closingBracketsArrayIndexLength\
    \ = 0\n        var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsArrayIndexLength = 0\n        var closingBracketsArrayIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgpb4wulh.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgpb4wulh.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopeningBracketsArray\e[0m = Array.fill(openingBracketsArrayLength)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArray is already defined as \e[33mvalue\e[0m\
    \ \e[35mopeningBracketsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgpb4wulh.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArray\e[0m\
    \ = Array.fill(closingBracketsArrayLength)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArray is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosingBracketsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgpb4wulh.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m \e[36mopeningBracketsArrayIndexLength\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayIndexLength is already defined as \e[33mvariable\e\
    [0m \e[35mopeningBracketsArrayIndexLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgpb4wulh.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mclosingBracketsArrayIndexLength\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mclosingBracketsArr"
  stdout: ''
  timestamp: 1659799928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(c => c == '<')\n        val closingBracketsCount = bracketsArray.count(c\
    \ => c == '>')\n        openingBracketsCount != closingBracketsCount\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpimk9g79c.scala:21)\n\tat Problem.main(tmpimk9g79c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.subsetOf(closingBrackets)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0sblzqs.scala:20)\n\tat Problem.main(tmpo0sblzqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var isCorrect = true\n        for (bracket <- bracketsArray) {\n\
    \            if (bracket.equals(\"<\")) {\n                openingBracketsCount\
    \ += 1\n            } else if (bracket.equals(\">\")) {\n                closingBracketsCount\
    \ += 1\n            }\n        }\n        if (openingBracketsCount != closingBracketsCount)\
    \ {\n            isCorrect = false\n        }\n        isCorrect\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx9414ilq.scala:37)\n\tat Problem.main(tmpx9414ilq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayIterator = bracketsArray.iterator\n\
    \        val bracketsArrayIteratorNext = bracketsArrayIterator.next\n        val\
    \ bracketsArrayIteratorNextNext = bracketsArrayIteratorNext.next\n        val\
    \ bracketsArrayIteratorNextNextNext = bracketsArrayIteratorNextNext.next\n   \
    \     val bracketsArrayIteratorNextNextNextNext = bracketsArrayIteratorNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNext = bracketsArrayIteratorNextNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNext = bracketsArrayIteratorNextNextNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNext = bracketsArrayIteratorNextNextNextNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNextNext = bracketsArrayIteratorNextNextNextNextNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNextNextNext = bracketsArrayIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNext = bracketsArrayIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val brackets\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmdzao_o0.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmdzao_o0.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNext\e[0m\
    \ = bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mbracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmdzao_o0.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mbracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mbracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmdzao_o0.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mbracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = bracketsArrayIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext"
  stdout: ''
  timestamp: 1659799931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var isCorrect = true\n        for (bracket <- bracketsArray) {\n\
    \            if (bracket.equals(\"<\")) {\n                openingBracketsCount\
    \ += 1\n            } else if (bracket.equals(\">\")) {\n                closingBracketsCount\
    \ += 1\n            }\n        }\n        if (openingBracketsCount != bracketsArrayLength)\
    \ {\n            isCorrect = false\n        }\n        if (closingBracketsCount\
    \ != bracketsArrayLength) {\n            isCorrect = false\n        }\n      \
    \  isCorrect\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj6d6za5d.scala:36)\n\tat Problem.main(tmpj6d6za5d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799932
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n    \
    \    val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsSet\
    \ = Set(openingBrackets)\n        val closingBracketsSet = Set(closingBrackets)\n\
    \        openingBracketsSet.size == closingBracketsSet.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp7snphta5.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.correctBracketing(tmp7snphta5.scala:15)\n\
    \tat Problem$.main(tmp7snphta5.scala:22)\n\tat Problem.main(tmp7snphta5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799932
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = bracketsArray.filter(c => c == '<')\n        val closingBrackets = bracketsArray.filter(c\
    \ => c == '>')\n        openingBrackets.size == closingBrackets.size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfynfryz9.scala:26)\n\tat Problem.main(tmpfynfryz9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCountArray = new Array[Int](bracketsArrayLength)\n\
    \        var closingBracketsCountArray = new Array[Int](bracketsArrayLength)\n\
    \        var openingBracketsCountArrayIndex = 0\n        var closingBracketsCountArrayIndex\
    \ = 0\n        var openingBracketsCountArrayIndex2 = 0\n        var closingBracketsCountArrayIndex2\
    \ = 0\n        var openingBracketsCountArrayIndex3 = 0\n        var closingBracketsCountArrayIndex3\
    \ = 0\n        var openingBracketsCountArrayIndex4 = 0\n        var closingBracketsCountArrayIndex4\
    \ = 0\n        var openingBracketsCountArrayIndex5 = 0\n        var closingBracketsCountArrayIndex5\
    \ = 0\n        var openingBracketsCountArrayIndex6 = 0\n        var closingBracketsCountArrayIndex6\
    \ = 0\n        var openingBracketsCountArrayIndex7 = 0\n        var closingBracketsCountArrayIndex7\
    \ = 0\n        var openingBracketsCountArrayIndex8 = 0\n        var closingBracketsCountArrayIndex8\
    \ = 0\n        var openingBracketsCountArrayIndex9 = 0\n        var closingBracketsCountArrayIndex9\
    \ = 0\n        var openingBracketsCountArrayIndex10 = 0\n        var closingBracketsCountArrayIndex10\
    \ = 0\n        var openingBracketsCountArrayIndex11 = 0\n        var closingBracketsCountArrayIndex11\
    \ = 0\n        var openingBracketsCountArrayIndex12 = 0\n        var closingBracketsCountArrayIndex12\
    \ = 0\n        var openingBracketsCountArrayIndex13 = 0\n        var closingBracketsCountArrayIndex13\
    \ = 0\n        var openingBracketsCountArrayIndex14 = 0\n        var closingBracketsCountArrayIndex14\
    \ = 0\n        var openingBracketsCountArrayIndex15 = 0\n        var closingBracketsCountArrayIndex15\
    \ = 0\n        var openingBracketsCountArrayIndex16 = 0\n        var closingBracketsCountArrayIndex16\
    \ = 0\n        var openingBracketsCountArrayIndex17 = 0\n        var closingBracketsCountArrayIndex17\
    \ = 0\n        var openingBracketsCountArrayIndex18 = 0\n        var closingBracketsCountArrayIndex18\
    \ = 0\n        var openingBracketsCountArrayIndex19 = 0\n        var closingBracketsCountArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpopegv96q.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpopegv96q.scala:59:5 ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = bracketsArray.filter(c => c == '<')\n        val closingBrackets = bracketsArray.filter(c\
    \ => c == '>')\n        openingBrackets.size == closingBrackets.size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\"))\
    \ == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfynfryz9.scala:26)\n\tat Problem.main(tmpfynfryz9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayCopy = Array(bracketsArrayLength)\n\
    \        System.arraycopy(bracketsArray, 0, bracketsArrayCopy, 0, bracketsArrayLength)\n\
    \        val openingBracketsArray = Array(bracketsArrayCopy.size)\n        val\
    \ closingBracketsArray = Array(bracketsArrayCopy.size)\n        var openingBracketsIndex\
    \ = 0\n        var closingBracketsIndex = 0\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        var openingBracketsCount2\
    \ = 0\n        var closingBracketsCount2 = 0\n        var openingBracketsCount3\
    \ = 0\n        var closingBracketsCount3 = 0\n        var openingBracketsCount4\
    \ = 0\n        var closingBracketsCount4 = 0\n        var openingBracketsCount5\
    \ = 0\n        var closingBracketsCount5 = 0\n        var openingBracketsCount6\
    \ = 0\n        var closingBracketsCount6 = 0\n        var openingBracketsCount7\
    \ = 0\n        var closingBracketsCount7 = 0\n        var openingBracketsCount8\
    \ = 0\n        var closingBracketsCount8 = 0\n        var openingBracketsCount9\
    \ = 0\n        var closingBracketsCount9 = 0\n        var openingBracketsCount10\
    \ = 0\n        var closingBracketsCount10 = 0\n        var openingBracketsCount11\
    \ = 0\n        var closingBracketsCount11 = 0\n        var openingBracketsCount12\
    \ = 0\n        var closingBracketsCount12 = 0\n        var openingBracketsCount13\
    \ = 0\n        var closingBracketsCount13 = 0\n        var openingBracketsCount14\
    \ = 0\n        var closingBracketsCount14 = 0\n        var openingBracketsCount15\
    \ = 0\n        var closingBracketsCount15 = 0\n        var openingBracketsCount16\
    \ = 0\n        var closingBracketsCount16 = 0\n        var openingBracketsCount17\
    \ = 0\n        var closingBracketsCount17 = 0\n        var openingBracketsCount18\
    \ = 0\n        var closingBracketsCount18 = 0\n        var openingBracketsCount19\
    \ = 0\n        var closingBracketsCount19 = 0\n        var openingBracketsCount20\
    \ = 0\n        var closingBracketsCount20 = 0\n        var openingBracketsCount21\
    \ = 0\n        var closingBracketsCount21 = 0\n        var \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmplndnev2l.scala:65:11 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplndnev2l.scala:66:5 ---------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        for (i <- 0 until bracketsArray.length)\
    \ {\n            if (bracketsArray(i) == '<') {\n                openingBracketsCount\
    \ += 1\n            }\n            if (bracketsArray(i) == '>') {\n          \
    \      closingBracketsCount += 1\n            }\n        }\n        if (openingBracketsCount\
    \ != closingBracketsCount) {\n            return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppvnrfr4o.scala:37)\n\tat Problem.main(tmppvnrfr4o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ = 0\n        var closingBrackets = 0\n        var openingBracketsArray = Array[Char]()\n\
    \        var closingBracketsArray = Array[Char]()\n        var currentChar = 0\n\
    \        var currentCharArray = Array[Char]()\n        var currentCharArrayLength\
    \ = currentCharArray.length\n        var currentCharArrayIndex = 0\n        var\
    \ currentCharArrayIndexLength = currentCharArrayIndex.length\n        var currentCharArrayIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexLength = currentCharArrayIndexIndex.length\n\
    \        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexLength\
    \ = currentCharArrayIndexIndex.length\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexLength = currentCharArrayIndexIndex.length\n\
    \        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexLength\
    \ = currentCharArrayIndexIndex.length\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexLength = currentCharArrayIndexIndex.length\n\
    \        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexLength\
    \ = currentCharArrayIndexIndex.length\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexLength = currentCharArrayIndexIndex.length\n\
    \        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexLength\
    \ = currentCharArrayIndexIndex.length\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexLength = currentCharArrayIndexIndex.length\n\
    \        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexLength\
    \ = currentCharArrayIndexIndex.length\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexLength = currentCharArrayIndexIndex.length\n\
    \        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexLength\
    \ = currentCharArrayIndexIndex.length\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexLength = currentCharArrayIndexIndex.length\n\
    \        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexLength\
    \ = currentCharArrayIndexIndex.length\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexLength = currentCharArrayIndexIndex.length\n\
    \        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexLength\
    \ = currentCharArrayIndexIndex.length\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexLength = currentCharArrayIndexIndex.length\n\
    \        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexLength\
    \ = currentCharArrayIndexIndex.length\n        var current\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp759__go.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp759__go.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentCharArrayIndexIndexLength\e[0m = currentCharArrayIndexIndex.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentCharArrayIndexIndexLength is already defined as \e\
    [33mvariable\e[0m \e[35mcurrentCharArrayIndexIndexLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp759__go.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentCharArrayIndexIndexIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentCharArrayIndexIndexIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentCharArrayIndexIndexIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp759__go.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mvar\e[0m \e[36mcurrentCharArrayIndexIndexLength\e[0m\
    \ = currentCharArrayIndexIndex.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentCharArrayIndexIndexLength is already defined as \e\
    [33mvariable\e[0m \e[35mcurrentCharArrayIndexIndexLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp759__go.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentCharArrayIndexIndexIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799932
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        var openingBracketsArray\
    \ = Array.empty[Char]\n        var closingBracketsArray = Array.empty[Char]\n\
    \        for (i <- 0 until bracketsArray.length) {\n            if (bracketsArray(i)\
    \ == '<') {\n                openingBracketsCount += 1\n                openingBracketsArray\
    \ :+= bracketsArray(i)\n            } else if (bracketsArray(i) == '>') {\n  \
    \              closingBracketsCount += 1\n                closingBracketsArray\
    \ :+= bracketsArray(i)\n            }\n        }\n        if (openingBracketsCount\
    \ != closingBracketsCount) {\n            return false\n        }\n        for\
    \ (i <- 0 until openingBracketsArray.length) {\n            if (closingBracketsArray.contains(openingBracketsArray(i)))\
    \ {\n                return false\n            }\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe6qmo4id.scala:45)\n\tat Problem.main(tmpe6qmo4id.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsMap\
    \ = mutable.Map[String, Int]()\n        val closingBracketsMap = mutable.Map[String,\
    \ Int]()\n        openingBrackets.foreach(openingBracket => {\n            val\
    \ closingBracket = closingBrackets(openingBracketsCount - 1)\n            openingBracketsMap(openingBracket)\
    \ = openingBracketsMap.getOrElse(openingBracket, 0) + 1\n            closingBracketsMap(closingBracket)\
    \ = closingBracketsMap.getOrElse(closingBracket, 0) + 1\n        })\n        openingBracketsMap.forall(openingBracket\
    \ => closingBracketsMap.getOrElse(openingBracket, 0) == 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkp5kymln.scala:19:33 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpkp5kymln.scala:20:33 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpztnm0jh3.scala:24)\n\tat Problem.main(tmpztnm0jh3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '<')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == '>')\n        openingBracketsCount == closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz4nydo9q.scala:26)\n\tat Problem.main(tmpz4nydo9q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.forall(closingBrackets.contains)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprk8hn1fn.scala:20)\n\tat Problem.main(tmprk8hn1fn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsArray = Array[Int](bracketsArrayLength)\n\
    \        var openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n\
    \        var openingBracketsCount = 0\n        var closingBracketsCount = 0\n\
    \        var currentOpeningBracketsIndex = 0\n        var currentClosingBracketsIndex\
    \ = 0\n        var currentOpeningBracketsCount = 0\n        var currentClosingBracketsCount\
    \ = 0\n        var currentOpeningBracketsChar = ' '\n        var currentClosingBracketsChar\
    \ = ' '\n        var currentOpeningBracketsCharArray = Array[Char]()\n       \
    \ var currentClosingBracketsCharArray = Array[Char]()\n        var currentOpeningBracketsCharArrayLength\
    \ = currentOpeningBracketsCharArray.length\n        var currentClosingBracketsCharArrayLength\
    \ = currentClosingBracketsCharArray.length\n        var currentOpeningBracketsCharArrayIndex\
    \ = 0\n        var currentClosingBracketsCharArrayIndex = 0\n        var currentOpeningBracketsCharArrayIndexLength\
    \ = currentOpeningBracketsCharArrayIndex.length\n        var currentClosingBracketsCharArrayIndexLength\
    \ = currentClosingBracketsCharArrayIndex.length\n        var currentOpeningBracketsCharArrayIndex\
    \ = 0\n        var currentClosingBracketsCharArrayIndex = 0\n        var currentOpeningBracketsCharArrayIndexLength\
    \ = currentOpeningBracketsCharArrayIndex.length\n        var currentClosingBracketsCharArrayIndexLength\
    \ = currentClosingBracketsCharArrayIndex.length\n        var currentOpeningBracketsCharArrayIndex\
    \ = 0\n        var currentClosingBracketsCharArrayIndex = 0\n        var currentOpeningBracketsCharArrayIndexLength\
    \ = currentOpeningBracketsCharArrayIndex.length\n        var currentClosingBracketsCharArrayIndexLength\
    \ = currentClosingBracketsCharArrayIndex.length\n        var currentOpeningBracketsCharArrayIndex\
    \ = 0\n        var currentClosingBracketsCharArrayIndex = 0\n        var currentOpeningBracketsCharArrayIndexLength\
    \ = currentOpeningBracketsCharArrayIndex.length\n        var currentClosingBracketsCharArrayIndexLength\
    \ = currentClosingBracketsCharArrayIndex.length\n        var currentOpeningBracketsCharArrayIndex\
    \ = 0\n        var currentClosingBracketsCharArrayIndex = 0\n        var currentOpening\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu_y8u4a6.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu_y8u4a6.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentOpeningBracketsCharArrayIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mcurrentOpeningBracketsCharArrayIndex is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentOpeningBracketsCharArrayIndex\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu_y8u4a6.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentClosingBracketsCharArrayIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mcurrentClosingBracketsCharArrayIndex is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentClosingBracketsCharArrayIndex\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu_y8u4a6.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentOpeningBracketsCharArrayIndexLength\e[0m = currentOpeningBracketsCharArrayIndex.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentOpeningBracketsCharArrayIndexLength is already defined\
    \ as \e[33mvariable\e[0m \e[35mcurrentOpeningBracketsCharArrayIndexLength\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu_y8u4a6.scala:39:12 ---------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentClosingBracketsCharArrayIndexLength\e\
    [0m = currentC"
  stdout: ''
  timestamp: 1659799932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
    <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
    ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyjkklvhs.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyjkklvhs.scala:69:5 ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799906
