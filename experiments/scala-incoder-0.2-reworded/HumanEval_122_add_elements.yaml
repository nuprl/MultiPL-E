name: HumanEval_122_add_elements
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a non-empty list of integers arr and an integer k, return\n    //\
  \ the sum of the elements with at most two digits from the first k elements of arr.\n\
  \    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong,\
  \ 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l))\n\
  \    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1\
  \ <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
  \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
  \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
  \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
  \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n \
  \   assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n  \
  \  assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
completions: ["        var sum = 0L\n        var i = 0\n        while (i < k) {\n\
    \            sum += arr(i)\n            i += 1\n        }\n        sum", "   \
    \     val result = new mutable.ListBuffer[Long]()\n        val arr = arr.toList\n\
    \        val len = arr.size\n        val max = (len / 2).toInt\n        val max2\
    \ = max / 2\n        val max3 = max / 3\n        val max4 = max / 4\n        val\
    \ max5 = max / 5\n        val max6 = max / 6\n        val max7 = max / 7\n   \
    \     val max8 = max / 8\n        val max9 = max / 9\n        val max10 = max\
    \ / 10\n        val max11 = max / 11\n        val max12 = max / 12\n        val\
    \ max13 = max / 13\n        val max14 = max / 14\n        val max15 = max / 15\n\
    \        val max16 = max / 16\n        val max17 = max / 17\n        val max18\
    \ = max / 18\n        val max19 = max / 19\n        val max20 = max / 20\n   \
    \     val max21 = max / 21\n        val max22 = max / 22\n        val max23 =\
    \ max / 23\n        val max24 = max / 24\n        val max25 = max / 25\n     \
    \   val max26 = max / 26\n        val max27 = max / 27\n        val max28 = max\
    \ / 28\n        val max29 = max / 29\n        val max30 = max / 30\n        val\
    \ max31 = max / 31\n        val max32 = max / 32\n        val max33 = max / 33\n\
    \        val max34 = max / 34\n        val max35 = max / 35\n        val max36\
    \ = max / 36\n        val max37 = max / 37\n        val max38 = max / 38\n   \
    \     val max39 = max / 39\n        val max40 = max / 40\n        val max41 =\
    \ max / 41\n        val max42 = max / 42\n        val max43 = max / 43\n     \
    \   val max44 = max / 44\n        val max45 = max / 45\n        val max46 = max\
    \ / 46\n        val max47 = max / 47\n        val max48 = max / 48\n        val\
    \ max49 = max / 49\n        val max50 = max / 50\n        val max51 = max / 51\n\
    \        val max52 = max / 52\n        val max53 = max / 53\n        val max54\
    \ = max / 54\n        val max55 = max / 55\n        ", "        val arr = arr.toList\n\
    \        val len = arr.size\n        val maxLen = arr.take(k).size\n        val\
    \ maxLen2 = maxLen / 2\n        val maxLen3 = maxLen - maxLen2\n        val maxLen4\
    \ = maxLen - maxLen3\n        val maxLen5 = maxLen - maxLen4\n        val maxLen6\
    \ = maxLen - maxLen5\n        val maxLen7 = maxLen - maxLen6\n        val maxLen8\
    \ = maxLen - maxLen7\n        val maxLen9 = maxLen - maxLen8\n        val maxLen10\
    \ = maxLen - maxLen9\n        val maxLen11 = maxLen - maxLen10\n        val maxLen12\
    \ = maxLen - maxLen11\n        val maxLen13 = maxLen - maxLen12\n        val maxLen14\
    \ = maxLen - maxLen13\n        val maxLen15 = maxLen - maxLen14\n        val maxLen16\
    \ = maxLen - maxLen15\n        val maxLen17 = maxLen - maxLen16\n        val maxLen18\
    \ = maxLen - maxLen17\n        val maxLen19 = maxLen - maxLen18\n        val maxLen20\
    \ = maxLen - maxLen19\n        val maxLen21 = maxLen - maxLen20\n        val maxLen22\
    \ = maxLen - maxLen21\n        val maxLen23 = maxLen - maxLen22\n        val maxLen24\
    \ = maxLen - maxLen23\n        val maxLen25 = maxLen - maxLen24\n        val maxLen26\
    \ = maxLen - maxLen25\n        val maxLen27 = maxLen - maxLen26\n        val maxLen28\
    \ = maxLen - maxLen27\n        val maxLen29 = maxLen - maxLen28\n        val maxLen30\
    \ = maxLen - maxLen29\n        val maxLen31 = maxLen - maxLen30\n        val maxLen32\
    \ = maxLen - maxLen31\n        val maxLen33 = maxLen - maxLen32\n        val maxLen34\
    \ = maxLen - maxLen33\n        val maxLen35 = maxLen - maxLen34\n        val maxLen36\
    \ = maxLen - maxLen35\n        val maxLen37 = maxLen - maxLen36\n        val maxLen38\
    \ = maxLen - maxLen37\n        val maxLen39 = maxLen - maxLen38\n        val maxLen40\
    \ = max", "        val arr = arr.toList\n        val len = arr.length\n      \
    \  val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max",
  "        val result = new mutable.ListBuffer[Long]()\n        val maxTwoDigit =\
    \ arr.take(k).foldLeft(0l){\n            (acc, elem) => acc + (elem.toString.length\
    \ * 10)\n        }\n        arr.take(k).foreach(elem => {\n            if (elem.toString.length\
    \ < maxTwoDigit) {\n                result.add(elem)\n            }\n        })\n\
    \        result.foldLeft(0l){\n            (acc, elem) => acc + elem\n       \
    \ }", "        val result = new mutable.ListBuffer[Long]()\n        val arr =\
    \ arr.toList\n        var sum = 0\n        var i = 0\n        while (i < k) {\n\
    \            sum += arr(i)\n            i += 1\n        }\n        while (i <\
    \ arr.size) {\n            sum += arr(i)\n            i += 1\n        }\n    \
    \    result += sum\n        return result.toList(0)", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxLen = len - k\n        val maxSum\
    \ = arr.take(maxLen).sum\n        val sum = 0\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until maxLen) {\n            val curSum = arr(i) + arr(i\
    \ + k).toInt\n            sum += curSum\n            sums += curSum\n        }\n\
    \        sum.toLong + sums.sum", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val len = arr.length\n        val maxNum = arr.max\n        val minNum\
    \ = arr.min\n        val maxNumDigit = math.ceil(math.log10(maxNum))\n       \
    \ val minNumDigit = math.ceil(math.log10(minNum))\n        val maxNumDigitDiff\
    \ = maxNumDigit - minNumDigit\n        val minNumDigitDiff = minNumDigit - maxNumDigit\n\
    \        val maxNumDiff = maxNum - minNum\n        val minNumDiff = minNum - maxNum\n\
    \        val maxNumDiffDigit = math.ceil(math.log10(maxNumDiff))\n        val\
    \ minNumDiffDigit = math.ceil(math.log10(minNumDiff))\n        val maxNumDiffDigitDiff\
    \ = maxNumDiffDigit - minNumDiffDigit\n        val minNumDiffDigitDiff = minNumDiffDigit\
    \ - maxNumDiffDigit\n        val maxNumDiffDigitDiffDigit = math.ceil(math.log10(maxNumDiffDigitDiff))\n\
    \        val minNumDiffDigitDiffDigit = math.ceil(math.log10(minNumDiffDigitDiff))\n\
    \        val maxNumDiffDigitDiffDigitDiff = maxNumDiffDigitDiffDigit - minNumDiffDigitDiffDigit\n\
    \        val minNumDiffDigitDiffDigitDiff = minNumDiffDigitDiffDigit - maxNumDiffDigitDiffDigit\n\
    \        val maxNumDiffDigitDiffDigitDiffDigit = math.ceil(math.log10(maxNumDiffDigitDiffDigitDiff))\n\
    \        val minNumDiffDigitDiffDigitDiffDigit = math.ceil(math.log10(minNumDiffDigitDiffDigitDiff))\n\
    \        val maxNumDiffDigitDiffDigitDiffDigitDiff = maxNumDiffDigitDiffDigitDiffDigit\
    \ - minNumDiffDigitDiffDigitDiffDigit\n        val minNumDiffDigitDiffDigitDiffDigitDiff\
    \ = minNumDiffDigitDiffDigitDiffDigit - maxNumDiffDigitDiffDigitDiffDigit\n  \
    \      val maxNumDiffDigitDiffDigitDiffDigitDiffDigit = math.ceil(math.log10(maxNumDiffDigitDiffDigitDiffDigitDiff))\n\
    \        val minNumDiffDigitDiffDigitDiffDigitDiffDigit = math.ceil(math.log10(minNumDiffDigitDiffDigitDiffDigitDiff))\n\
    \        val maxNumDiffDigitDiffDigitDiffDigitDiffDigitDiff = maxNumDiffDigitDiffDigitDiffDigitDiffDigit\
    \ - minNumDiffDigitDiffDigitDiffDigitDiffDigit\n        val minNumDiffDigitDiffDigitDiffDigitDiffDigitDiff\
    \ = minNumDiffDigitDiffDigitDiffDigitDiffDigit ", "        val arr = arr.toList\n\
    \        val len = arr.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max2 = arr.take(k).max\n        val max3 = arr.take(k).max\n    \
    \    val max4 = arr.take(k).max\n        val max5 = arr.take(k).max\n        val\
    \ max6 = arr.take(k).max\n        val max7 = arr.take(k).max\n        val max8\
    \ = arr.take(k).max\n        val max9 = arr.take(k).max\n        val max10 = arr.take(k).max\n\
    \        val max11 = arr.take(k).max\n        val max12 = arr.take(k).max\n  \
    \      val max13 = arr.take(k).max\n        val max14 = arr.take(k).max\n    \
    \    val max15 = arr.take(k).max\n        val max16 = arr.take(k).max\n      \
    \  val max17 = arr.take(k).max\n        val max18 = arr.take(k).max\n        val\
    \ max19 = arr.take(k).max\n        val max20 = arr.take(k).max\n        val max21\
    \ = arr.take(k).max\n        val max22 = arr.take(k).max\n        val max23 =\
    \ arr.take(k).max\n        val max24 = arr.take(k).max\n        val max25 = arr.take(k).max\n\
    \        val max26 = arr.take(k).max\n        val max27 = arr.take(k).max\n  \
    \      val max28 = arr.take(k).max\n        val max29 = arr.take(k).max\n    \
    \    val max30 = arr.take(k).max\n        val max31 = arr.take(k).max\n      \
    \  val max32 = arr.take(k).max\n        val max33 = arr.take(k).max\n        val\
    \ max34 = arr.take(k).max\n        val max35 = arr.take(k).max\n        val max36\
    \ = arr.take(k).max\n        val max37 = arr.take(k).max\n        val max38 =\
    \ arr.take(k).max\n        val max39 = arr.take(k).max\n        val max40 = arr.take(k).max\n\
    \        val max41 = arr.take(k).max\n        val max42 = arr.take(k).max\n  \
    \      val max43 = arr.take(k).max\n        val max44 = arr.take(k).max\n    \
    \    val max45 = arr.take(k).max\n        val max46 = arr.take(k).max\n      \
    \  val ", "        var sum = 0\n        var i = 0\n        while (i < k) {\n \
    \           sum += arr(i)\n            i += 1\n        }\n        return sum",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     for(i <- 0 until arr.length)\n            if(arr.take(i).sum > k)\n    \
    \            sum += arr.take(i).sum\n            else\n                sum +=\
    \ arr.take(i).sum - k\n        result += sum\n        result.sum", "        val\
    \ arr = arr.toList\n        val len = arr.length\n        val max = (len / 2).toInt\n\
    \        val sum = 0\n        val result = new mutable.HashMap[Long, Long]()\n\
    \        for(i <- 0 until max){\n            val key = arr(i).toLong\n       \
    \     val value = arr(i+k).toLong\n            if(result.contains(key)){\n   \
    \             sum += result.get(key)\n            }else{\n                sum\
    \ += value\n                result.put(key, value)\n            }\n        }\n\
    \        sum", "        val arr = arr.toList\n        val len = arr.length\n \
    \       val max = (len - k).toInt\n        val sum = 0L\n        val max2 = max\
    \ * max\n        for(i <- 0 until max2) {\n            val cur = arr(i).toInt\n\
    \            val cur2 = cur * cur\n            val cur3 = cur2 * cur\n       \
    \     val cur4 = cur3 * cur\n            val cur5 = cur4 * cur\n            val\
    \ cur6 = cur5 * cur\n            val cur7 = cur6 * cur\n            val cur8 =\
    \ cur7 * cur\n            val cur9 = cur8 * cur\n            val cur10 = cur9\
    \ * cur\n            val cur11 = cur10 * cur\n            val cur12 = cur11 *\
    \ cur\n            val cur13 = cur12 * cur\n            val cur14 = cur13 * cur\n\
    \            val cur15 = cur14 * cur\n            val cur16 = cur15 * cur\n  \
    \          val cur17 = cur16 * cur\n            val cur18 = cur17 * cur\n    \
    \        val cur19 = cur18 * cur\n            val cur20 = cur19 * cur\n      \
    \      val cur21 = cur20 * cur\n            val cur22 = cur21 * cur\n        \
    \    val cur23 = cur22 * cur\n            val cur24 = cur23 * cur\n          \
    \  val cur25 = cur24 * cur\n            val cur26 = cur25 * cur\n            val\
    \ cur27 = cur26 * cur\n            val cur28 = cur27 * cur\n            val cur29\
    \ = cur28 * cur\n            val cur30 = cur29 * cur\n            val cur31 =\
    \ cur30 * cur\n            val cur32 = cur31 * cur\n            val cur33 = cur32\
    \ * cur\n            val cur34 = cur33 * cur\n            val cur35 = cur34 *\
    \ cur\n            val cur36 = cur35 * cur\n            val cur37 = cur36 * cur\n\
    \            val cur38 = cur37 * cur\n            val cur39 = cur38 * cur\n  \
    \          val cur40 = cur39 * cur\n            val cur41 = cur40 * cur\n    \
    \        val cur42 = cur41 * cur\n            val cur43 = cur42 * cur\n      \
    \      val cur44 = cur43 * cur\n            val cur45 = cur44 * cur\n        \
    \    val cur46 = cur45 * cur\n            val cur47 = cur46 * cur\n          \
    \  val cur48 = cur47 * cur\n            val cur49 = cur", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxDigits = k\n        val maxSum =\
    \ arr.take(maxDigits).sum\n        val maxSum2 = arr.take(maxDigits).sum\n   \
    \     val maxSum3 = arr.take(maxDigits).sum\n        val maxSum4 = arr.take(maxDigits).sum\n\
    \        val maxSum5 = arr.take(maxDigits).sum\n        val maxSum6 = arr.take(maxDigits).sum\n\
    \        val maxSum7 = arr.take(maxDigits).sum\n        val maxSum8 = arr.take(maxDigits).sum\n\
    \        val maxSum9 = arr.take(maxDigits).sum\n        val maxSum10 = arr.take(maxDigits).sum\n\
    \        val maxSum11 = arr.take(maxDigits).sum\n        val maxSum12 = arr.take(maxDigits).sum\n\
    \        val maxSum13 = arr.take(maxDigits).sum\n        val maxSum14 = arr.take(maxDigits).sum\n\
    \        val maxSum15 = arr.take(maxDigits).sum\n        val maxSum16 = arr.take(maxDigits).sum\n\
    \        val maxSum17 = arr.take(maxDigits).sum\n        val maxSum18 = arr.take(maxDigits).sum\n\
    \        val maxSum19 = arr.take(maxDigits).sum\n        val maxSum20 = arr.take(maxDigits).sum\n\
    \        val maxSum21 = arr.take(maxDigits).sum\n        val maxSum22 = arr.take(maxDigits).sum\n\
    \        val maxSum23 = arr.take(maxDigits).sum\n        val maxSum24 = arr.take(maxDigits).sum\n\
    \        val maxSum25 = arr.take(maxDigits).sum\n        val maxSum26 = arr.take(maxDigits).sum\n\
    \        val maxSum27 = arr.take(maxDigits).sum\n        val maxSum28 = arr.take(maxDigits).sum\n\
    \        val maxSum29 = arr.take(maxDigits).sum\n        val maxSum30 = arr.take(maxDigits).sum\n\
    \        val maxSum31 = arr.take(maxDigits).sum\n        val maxSum32 = arr.take(maxDigits).sum\n\
    \        val maxSum33 = arr.take(maxDigits).sum\n        val maxSum34 = arr.take(maxDigits).sum\n\
    \        val maxSum35 = arr.take(maxDigits).sum\n        val maxSum36 = arr.take(maxDigits).sum\n",
  "        val arr = arr.toList\n        val len = arr.length\n        val maxLen\
    \ = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen /\
    \ 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n    \
    \    val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8\
    \ = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen\
    \ / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n\
    \        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n    \
    \    val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val\
    \ maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19\
    \ = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen\
    \ / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n\
    \        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n    \
    \    val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val\
    \ maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30\
    \ = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen\
    \ / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n\
    \        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n    \
    \    val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val\
    \ maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41\
    \ = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen\
    \ / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n\
    \        val maxLen46 = maxLen / 46\n        val maxLen47 = max", "        val\
    \ arr = arr.toList\n        val len = arr.length\n        val maxTwoDigit = arr.take(k).maxBy(_.toString.length).toString.length\n\
    \        val result = arr.take(k).foldLeft(0l) { (sum, element) => sum + element\
    \ }\n        val twoDigit = result % 10\n        val remainder = result / 10\n\
    \        val result2 = remainder.foldLeft(0l) { (sum, element) => sum + element\
    \ }\n        val twoDigit2 = result2 % 10\n        val remainder2 = result2 /\
    \ 10\n        val result3 = remainder2.foldLeft(0l) { (sum, element) => sum +\
    \ element }\n        val twoDigit3 = result3 % 10\n        val remainder3 = result3\
    \ / 10\n        val result4 = remainder3.foldLeft(0l) { (sum, element) => sum\
    \ + element }\n        val twoDigit4 = result4 % 10\n        val remainder4 =\
    \ result4 / 10\n        val result5 = remainder4.foldLeft(0l) { (sum, element)\
    \ => sum + element }\n        val twoDigit5 = result5 % 10\n        val remainder5\
    \ = result5 / 10\n        val result6 = remainder5.foldLeft(0l) { (sum, element)\
    \ => sum + element }\n        val twoDigit6 = result6 % 10\n        val remainder6\
    \ = result6 / 10\n        val result7 = remainder6.foldLeft(0l) { (sum, element)\
    \ => sum + element }\n        val twoDigit7 = result7 % 10\n        val remainder7\
    \ = result7 / 10\n        val result8 = remainder7.foldLeft(0l) { (sum, element)\
    \ => sum + element }\n        val twoDigit8 = result8 % 10\n        val remainder8\
    \ = result8 / 10\n        val result9 = remainder8.foldLeft(0l) { (sum, element)\
    \ => sum + element }\n        val twoDigit9 = result9 % 10\n        val remainder9\
    \ = result9 / 10\n        val result10 = remainder9.foldLeft(0l) { (sum, element)\
    \ => sum + element }\n        val twoDigit10 = result10 % 10\n        val remainder10\
    \ = result10 / 10\n        val result11 = remainder10.foldLeft(0l) { (sum, element)\
    \ => sum + element }\n        val twoDigit11 = result11 % 10\n        val remainder11\
    \ = result11 / 10\n        val result12 = remainder11.foldLeft(", "        var\
    \ sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n\
    \            i += 1\n        }\n        return sum", "        var sum = 0\n  \
    \      var index = 0\n        var count = 0\n        while(index < k) {\n    \
    \        sum = sum + arr(index)\n            index = index + 1\n            count\
    \ = count + 1\n        }\n        if(count > 1) {\n            sum = sum + arr(index\
    \ - 1)\n        }\n        return sum", "        var sum = 0\n        var i =\
    \ 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n\
    \        }\n        return sum", "        val arr = arr.toList\n        val len\
    \ = arr.length\n        val max = (len / 2).toInt\n        val sum = 0\n     \
    \   val maxSum = 0\n        val maxSumIndex = 0\n        val maxSumDigit = 0\n\
    \        val maxSumDigitIndex = 0\n        val maxSumDigitDigit = 0\n        val\
    \ maxSumDigitDigitIndex = 0\n        val maxSumDigitDigitDigit = 0\n        val\
    \ maxSumDigitDigitDigitIndex = 0\n        val maxSumDigitDigitDigitDigit = 0\n\
    \        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val max = (len - k).toInt\n        val\
    \ sum = 0\n        val arr = arr.take(k)\n        val len = arr.length\n     \
    \   val max = (len - k).toInt\n        val arr = arr.drop(k)\n        val len\
    \ = arr.length\n        val max = (len - k).toInt\n        val arr = arr.take(k)\n\
    \        val len = arr.length\n        val max = (len - k).toInt\n        val\
    \ arr = arr.drop(k)\n        val len = arr.length\n        val max = (len - k).toInt\n\
    \        val arr = arr.take(k)\n        val len = arr.length\n        val max\
    \ = (len - k).toInt\n        val arr = arr.drop(k)\n        val len = arr.length\n\
    \        val max = (len - k).toInt\n        val arr = arr.take(k)\n        val\
    \ len = arr.length\n        val max = (len - k).toInt\n        val arr = arr.drop(k)\n\
    \        val len = arr.length\n        val max = (len - k).toInt\n        val\
    \ arr = arr.take(k)\n        val len = arr.length\n        val max = (len - k).toInt\n\
    \        val arr = arr.drop(k)\n        val len = arr.length\n        val max\
    \ = (len - k).toInt\n        val arr = arr.take(k)\n        val len = arr.length\n\
    \        val max = (len - k).toInt\n        val arr = arr.drop(k)\n        val\
    \ len = arr.length\n        val max = (len - k).toInt\n        val arr = arr.take(k)\n\
    \        val len = arr.length\n        val max = (len - k).toInt\n        val\
    \ arr = arr.drop(k)\n        val len = arr.length\n        val max = (len - k).toInt\n\
    \        val arr = arr.take(k)\n        val len = arr.length\n        val max\
    \ = (len - k).toInt\n        val arr = arr.drop(k)\n        val len = arr.length\n\
    \        val max = (len - k).toInt\n        val arr = arr.take(k)\n        val\
    \ len = arr.length\n        val max = (len - k).toInt\n        val arr = arr.drop(k)\n\
    \        val len = arr.length\n        val max = (len - k).toInt\n        val\
    \ arr = arr.take(k)\n        val len = arr.length\n        val max = (len - k).toInt\n\
    \        val arr = arr.drop(k)\n        val len = arr.length\n        val max\
    \ = (len - k).toInt\n        val arr = arr.take(k)\n        val len = arr.length\n\
    \        val max = (len - k).toInt\n        val ", "        val arr = arr.toList\n\
    \        val len = arr.size\n        val max = (len / 2).toInt\n        val sum\
    \ = 0\n        val twoDigits = arr.take(max)\n        val twoDigitsSum = twoDigits.sum\n\
    \        val twoDigitsSum2 = twoDigits.sum\n        val twoDigitsSum3 = twoDigits.sum\n\
    \        val twoDigitsSum4 = twoDigits.sum\n        val twoDigitsSum5 = twoDigits.sum\n\
    \        val twoDigitsSum6 = twoDigits.sum\n        val twoDigitsSum7 = twoDigits.sum\n\
    \        val twoDigitsSum8 = twoDigits.sum\n        val twoDigitsSum9 = twoDigits.sum\n\
    \        val twoDigitsSum10 = twoDigits.sum\n        val twoDigitsSum11 = twoDigits.sum\n\
    \        val twoDigitsSum12 = twoDigits.sum\n        val twoDigitsSum13 = twoDigits.sum\n\
    \        val twoDigitsSum14 = twoDigits.sum\n        val twoDigitsSum15 = twoDigits.sum\n\
    \        val twoDigitsSum16 = twoDigits.sum\n        val twoDigitsSum17 = twoDigits.sum\n\
    \        val twoDigitsSum18 = twoDigits.sum\n        val twoDigitsSum19 = twoDigits.sum\n\
    \        val twoDigitsSum20 = twoDigits.sum\n        val twoDigitsSum21 = twoDigits.sum\n\
    \        val twoDigitsSum22 = twoDigits.sum\n        val twoDigitsSum23 = twoDigits.sum\n\
    \        val twoDigitsSum24 = twoDigits.sum\n        val twoDigitsSum25 = twoDigits.sum\n\
    \        val twoDigitsSum26 = twoDigits.sum\n        val twoDigitsSum27 = twoDigits.sum\n\
    \        val twoDigitsSum28 = twoDigits.sum\n        val twoDigitsSum29 = twoDigits.sum\n\
    \        val twoDigitsSum30 = twoDigits.sum\n        val twoDigitsSum31 = twoDigits.sum\n\
    \        val twoDigitsSum32 = twoDigits.sum\n        val twoDigitsSum33 = twoDigits.sum\n\
    \        val twoDigitsSum34 = twoDigits.sum\n        val twoDigitsSum35 = twoDigits.sum\n\
    \        val twoDigitsSum36 = twoDigits.sum\n        val twoDigitsSum37 = twoDigits.sum\n\
    \        val twoDigits", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val max = (len / 2).toInt\n        val sum = 0\n        val maxSum =\
    \ 0\n        val maxSumIndex = 0\n        var i = 0\n        while (i < max) {\n\
    \            val cur = arr(i)\n            val curSum = cur.toString.toLong\n\
    \            if (curSum > maxSum) {\n                maxSum = curSum\n       \
    \         maxSumIndex = i\n            }\n            i += 1\n        }\n    \
    \    val maxSum = arr(maxSumIndex).toString.toLong\n        val maxSumIndex =\
    \ maxSumIndex.toString.toInt\n        var j = 0\n        while (j < max) {\n \
    \           val cur = arr(j)\n            val curSum = cur.toString.toLong\n \
    \           if (curSum > maxSum) {\n                maxSum = curSum\n        \
    \        maxSumIndex = j\n            }\n            j += 1\n        }\n     \
    \   val maxSum = arr(maxSumIndex).toString.toLong\n        val maxSumIndex = maxSumIndex.toString.toInt\n\
    \        var k = 0\n        while (k <= maxSumIndex) {\n            val cur =\
    \ arr(k)\n            val curSum = cur.toString.toLong\n            if (curSum\
    \ > maxSum) {\n                maxSum = curSum\n                maxSumIndex =\
    \ k\n            }\n            k += 1\n        }\n        val maxSum = arr(maxSumIndex).toString.toLong\n\
    \        val maxSumIndex = maxSumIndex.toString.toInt\n        var sum = 0\n \
    \       var i = 0\n        while (i < maxSumIndex) {\n            val cur = arr(i)\n\
    \            val curSum = cur.toString.toLong\n            if (curSum > maxSum)\
    \ {\n                maxSum = curSum\n                maxSumIndex = i\n      \
    \      }\n            i += 1\n        }\n        val maxSum = arr(maxSumIndex).toString.toLong\n\
    \        val maxSumIndex = maxSumIndex.toString.toInt\n        var j = 0\n   \
    \     while (j < maxSumIndex) {\n            val cur = arr(j)\n            val\
    \ curSum = cur.toString.toLong\n            if (curSum > maxSum) {\n         \
    \       maxSum = curSum\n                maxSumIndex = j\n            }\n    \
    \        j += 1\n        }\n        val maxSum = arr(maxSumIndex).toString.toLong\n\
    \        val maxSumIndex = maxSumIndex.toString.toInt\n        var k = 0\n   \
    \     while (k <= maxSumIndex) {\n            val cur = arr(k)\n            val\
    \ curSum = cur.toString.toLong\n            if (curSum > maxSum) {\n         \
    \       maxSum = curSum", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val maxLen = len - k\n        val maxSum = arr.take(k).sum\n        val\
    \ maxSum2 = arr.take(k).sum\n        val maxSum3 = arr.take(k).sum\n        val\
    \ maxSum4 = arr.take(k).sum\n        val maxSum5 = arr.take(k).sum\n        val\
    \ maxSum6 = arr.take(k).sum\n        val maxSum7 = arr.take(k).sum\n        val\
    \ maxSum8 = arr.take(k).sum\n        val maxSum9 = arr.take(k).sum\n        val\
    \ maxSum10 = arr.take(k).sum\n        val maxSum11 = arr.take(k).sum\n       \
    \ val maxSum12 = arr.take(k).sum\n        val maxSum13 = arr.take(k).sum\n   \
    \     val maxSum14 = arr.take(k).sum\n        val maxSum15 = arr.take(k).sum\n\
    \        val maxSum16 = arr.take(k).sum\n        val maxSum17 = arr.take(k).sum\n\
    \        val maxSum18 = arr.take(k).sum\n        val maxSum19 = arr.take(k).sum\n\
    \        val maxSum20 = arr.take(k).sum\n        val maxSum21 = arr.take(k).sum\n\
    \        val maxSum22 = arr.take(k).sum\n        val maxSum23 = arr.take(k).sum\n\
    \        val maxSum24 = arr.take(k).sum\n        val maxSum25 = arr.take(k).sum\n\
    \        val maxSum26 = arr.take(k).sum\n        val maxSum27 = arr.take(k).sum\n\
    \        val maxSum28 = arr.take(k).sum\n        val maxSum29 = arr.take(k).sum\n\
    \        val maxSum30 = arr.take(k).sum\n        val maxSum31 = arr.take(k).sum\n\
    \        val maxSum32 = arr.take(k).sum\n        val maxSum33 = arr.take(k).sum\n\
    \        val maxSum34 = arr.take(k).sum\n        val maxSum35 = arr.take(k).sum\n\
    \        val maxSum36 = arr.take(k).sum\n        val maxSum37 = arr.take(k).sum\n\
    \        val maxSum38 = arr.take(k).sum\n        val maxSum39 = arr.take(k).sum\n\
    \        val maxSum40 = arr.take(k).sum\n        val maxSum41 = arr.take(k).sum\n\
    \        val maxSum42 = arr.take(k).sum", "        val arr = arr.toList\n    \
    \    val len = arr.length\n        val max = (len / 2).toInt\n        val sum\
    \ = 0\n        var i = 0\n        while (i < max) {\n            sum += arr(i)\n\
    \            i += 1\n        }\n        if (len > k) {\n            sum += arr(k)\n\
    \        }\n        sum", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val sum = 0\n        val maxSum = arr.take(k).foldLeft(0L){ (sum, elem)\
    \ => sum + elem }\n        val maxSum2 = arr.take(k).foldLeft(0L){ (sum, elem)\
    \ => sum + elem.toString.toLong }\n        val maxSum3 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum4 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum5 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum6 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum7 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum8 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum9 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum10 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum11 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum12 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum13 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum14 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum15 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum16 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum17 = arr.take(k).foldLeft(",
  "        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n\
    \        val max = (len / 2).toInt\n        val max2 = max / 2\n        val max3\
    \ = max / 3\n        val max4 = max / 4\n        val max5 = max / 5\n        val\
    \ max6 = max / 6\n        val max7 = max / 7\n        val max8 = max / 8\n   \
    \     val max9 = max / 9\n        val max10 = max / 10\n        val max11 = max\
    \ / 11\n        val max12 = max / 12\n        val max13 = max / 13\n        val\
    \ max14 = max / 14\n        val max15 = max / 15\n        val max16 = max / 16\n\
    \        val max17 = max / 17\n        val max18 = max / 18\n        val max19\
    \ = max / 19\n        val max20 = max / 20\n        val max21 = max / 21\n   \
    \     val max22 = max / 22\n        val max23 = max / 23\n        val max24 =\
    \ max / 24\n        val max25 = max / 25\n        val max26 = max / 26\n     \
    \   val max27 = max / 27\n        val max28 = max / 28\n        val max29 = max\
    \ / 29\n        val max30 = max / 30\n        val max31 = max / 31\n        val\
    \ max32 = max / 32\n        val max33 = max / 33\n        val max34 = max / 34\n\
    \        val max35 = max / 35\n        val max36 = max / 36\n        val max37\
    \ = max / 37\n        val max38 = max / 38\n        val max39 = max / 39\n   \
    \     val max40 = max / 40\n        val max41 = max / 41\n        val max42 =\
    \ max / 42\n        val max43 = max / 43\n        val max44 = max / 44\n     \
    \   val max45 = max / 45\n        val max46 = max / 46\n        val max47 = max\
    \ / 47\n        val max48 = max / 48\n        val max49 = max / 49\n        val\
    \ max50 = max / 50\n        val max51 = max / 51\n        val max52 = max / 52\n\
    \        val max53 = max / 53\n        val max54 = max / 54\n        val max55\
    \ = max / 55\n        val max56 = max / 56", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for(i <- 0 until arr.size) {\n            sum +=\
    \ arr(i)\n            if(sum >= k) {\n                sum += arr(i+1) - arr(i)\n\
    \                result.add(sum)\n                sum = 0\n            }\n   \
    \     }\n        result.last", "        val arr = arr.toList\n        val len\
    \ = arr.size\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n\
    \        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val\
    \ maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7\
    \ = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen\
    \ / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n\
    \        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n    \
    \    val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val\
    \ maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18\
    \ = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen\
    \ / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n\
    \        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n    \
    \    val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val\
    \ maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29\
    \ = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen\
    \ / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n\
    \        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n    \
    \    val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val\
    \ maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40\
    \ = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen\
    \ / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n\
    \        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n    \
    \    val maxLen47 = max", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val arr = arr.toList\n        var sum = 0\n        var i = 0\n      \
    \  while (i < arr.length) {\n            val cur = arr(i)\n            if (cur\
    \ < 10) {\n                sum += cur\n                i += 1\n            } else\
    \ if (cur < 100) {\n                sum += cur / 10\n                i += 1\n\
    \            } else {\n                sum += cur / 100\n                i +=\
    \ 1\n            }\n            if (sum > k) {\n                sum -= arr(i)\n\
    \                i += 1\n            } else {\n                result += arr(i)\n\
    \                i += 1\n            }\n        }\n        sum", "        var\
    \ sum = 0\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n\
    \            i += 1\n        }\n        return sum", "        var sum = 0\n  \
    \      var i = 0\n        while (i < k) {\n            sum += arr(i)\n       \
    \     i += 1\n        }\n        val maxLength = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength2 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength3 = arr.take(k).map(_.toString.length).max\n        val maxLength4\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength5 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength6 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength7 = arr.take(k).map(_.toString.length).max\n        val maxLength8\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength9 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength10 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength11 = arr.take(k).map(_.toString.length).max\n        val maxLength12\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength13 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength14 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength15 = arr.take(k).map(_.toString.length).max\n        val maxLength16\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength17 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength18 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength19 = arr.take(k).map(_.toString.length).max\n        val maxLength20\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength21 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength22 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength23 = arr.take(k).map(_.toString.length).max\n        val maxLength24\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength25 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength26 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength27 = arr.take(k).map(_.toString.length).max\n        val maxLength28\
    \ = arr.take(k).map(_.toString.length).max", "        val arr = arr.toList\n \
    \       val len = arr.length\n        val res = arr.take(k).foldLeft(0l) { (sum,\
    \ el) => sum + el.toString.dropRight(2).sum.toLong }\n        val maxDigits =\
    \ arr.take(k).map(_.toString.dropRight(2).sum.toLong).max\n        val maxSum\
    \ = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n        val maxSumOfDigits\
    \ = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n        val maxSumOfDigits2\
    \ = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n        val maxSumOfDigits3\
    \ = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n        val maxSumOfDigits4\
    \ = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n        val maxSumOfDigits5\
    \ = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n        val maxSumOfDigits6\
    \ = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n        val maxSumOfDigits7\
    \ = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n        val maxSumOfDigits8\
    \ = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n        val maxSumOfDigits9\
    \ = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n        val maxSumOfDigits10\
    \ = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n        val maxSumOfDigits11\
    \ = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n        val maxSumOfDigits12\
    \ = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n        val maxSumOfDigits13\
    \ = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n        val maxSumOfDigits14\
    \ = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n        val maxSumOfDigits15\
    \ = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n        val maxSumOfDigits16\
    \ = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n        val ", " \
    \       val arr = arr.toList\n        val len = arr.length\n        val maxLen\
    \ = arr.take(k).length\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen", "  \
    \      val arr = arr.toList\n        val len = arr.size\n        val maxLen =\
    \ len - k\n        val maxSum = arr.take(maxLen).sum\n        val minSum = arr.drop(maxLen).sum\n\
    \        val sum = (maxSum + minSum) / 2\n        sum", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxLen = arr.take(k).length\n     \
    \   val maxLen2 = maxLen / 2\n        val sum = 0\n        for (i <- 0 until k)\
    \ {\n            val cur = arr(i)\n            val cur2 = cur % 10\n         \
    \   val cur3 = cur / 10\n            val cur4 = cur % 100\n            val cur5\
    \ = cur / 100\n            val cur6 = cur % 1000\n            val cur7 = cur /\
    \ 1000\n            val cur8 = cur % 10000\n            val cur9 = cur / 10000\n\
    \            val cur10 = cur % 100000\n            val cur11 = cur / 100000\n\
    \            val cur12 = cur % 1000000\n            val cur13 = cur / 1000000\n\
    \            val cur14 = cur % 10000000\n            val cur15 = cur / 10000000\n\
    \            val cur16 = cur % 100000000\n            val cur17 = cur / 100000000\n\
    \            val cur18 = cur % 1000000000\n            val cur19 = cur / 1000000000\n\
    \            val cur20 = cur % 10000000000\n            val cur21 = cur / 10000000000\n\
    \            val cur22 = cur % 100000000000\n            val cur23 = cur / 100000000000\n\
    \            val cur24 = cur % 1000000000000\n            val cur25 = cur / 1000000000000\n\
    \            val cur26 = cur % 10000000000000\n            val cur27 = cur / 10000000000000\n\
    \            val cur28 = cur % 100000000000000\n            val cur29 = cur /\
    \ 100000000000000\n            val cur30 = cur % 1000000000000000\n          \
    \  val cur31 = cur / 1000000000000000\n            val cur32 = cur % 10000000000000000\n\
    \            val cur33 = cur / 10000000000000000\n            val cur34 = cur\
    \ % 100000000000000000\n            val cur35 = cur / 100000000000000000\n   \
    \         val cur36 = cur % 1000000000000000000\n            val cur37 = cur /\
    \ 1000000000000000000\n            val cur38 = cur % 10000000000000000000\n  \
    \          val cur39 = cur / 10000000000000000000\n            val cur40 = cur\
    \ % 100000000000000000000\n            val cur41 = cur / 100000000000000000000\n\
    \            val cur42 = cur % 1000000000000000000000\n            val cur43 =\
    \ cur / 1000000000000000000000\n            val cur44 = cur % 10000000000000000000000\n\
    \            val cur45 = cur / 10000000000000000000000\n            val cur46\
    \ = cur % 100000000000000000000000\n            val cur47 = cur / 100", "    \
    \    val arr = arr.toList\n        val len = arr.length\n        val max = (len\
    \ / 2).toInt\n        val max2 = max / 2\n        val max3 = max / 3\n       \
    \ val max4 = max / 4\n        val max5 = max / 5\n        val max6 = max / 6\n\
    \        val max7 = max / 7\n        val max8 = max / 8\n        val max9 = max\
    \ / 9\n        val max10 = max / 10\n        val max11 = max / 11\n        val\
    \ max12 = max / 12\n        val max13 = max / 13\n        val max14 = max / 14\n\
    \        val max15 = max / 15\n        val max16 = max / 16\n        val max17\
    \ = max / 17\n        val max18 = max / 18\n        val max19 = max / 19\n   \
    \     val max20 = max / 20\n        val max21 = max / 21\n        val max22 =\
    \ max / 22\n        val max23 = max / 23\n        val max24 = max / 24\n     \
    \   val max25 = max / 25\n        val max26 = max / 26\n        val max27 = max\
    \ / 27\n        val max28 = max / 28\n        val max29 = max / 29\n        val\
    \ max30 = max / 30\n        val max31 = max / 31\n        val max32 = max / 32\n\
    \        val max33 = max / 33\n        val max34 = max / 34\n        val max35\
    \ = max / 35\n        val max36 = max / 36\n        val max37 = max / 37\n   \
    \     val max38 = max / 38\n        val max39 = max / 39\n        val max40 =\
    \ max / 40\n        val max41 = max / 41\n        val max42 = max / 42\n     \
    \   val max43 = max / 43\n        val max44 = max / 44\n        val max45 = max\
    \ / 45\n        val max46 = max / 46\n        val max47 = max / 47\n        val\
    \ max48 = max / 48\n        val max49 = max / 49\n        val max50 = max / 50\n\
    \        val max51 = max / 51\n        val max52 = max / 52\n        val max53\
    \ = max / 53\n        val max54 = max / 54\n        val max55 = max / 55\n   \
    \     val max56 = max / 56\n        val max57 = ", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val sum = 0\n        val maxLen = arr.take(k).map(_.toString.length).max\n\
    \        for(i <- 0 until k) {\n            val cur = arr.take(i).map(_.toString).sum\n\
    \            sum += cur\n            val curLen = cur.toString.length\n      \
    \      if(curLen > maxLen) {\n                maxLen = curLen\n            }\n\
    \        }\n        sum", "        val arr = arr.toList\n        val result =\
    \ new mutable.ListBuffer[Long]()\n        val maxLength = arr.take(k).map(_.toString.length).max\n\
    \        arr.take(k).foreach(x => {\n            val str = x.toString.padRight(maxLength,\
    \ \"0\")\n            val digits = str.split(\"(?<=\\\\d)(?=[0-9])\").map(_.toLong)\n\
    \            val sum = digits.sum\n            result += sum\n        })\n   \
    \     result.sum", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val maxLen = len - k\n        val maxDigit = arr.take(maxLen).map(_.toString.length).max\n\
    \        val maxDigits = arr.take(maxLen).map(_.toString).map(_.length).max\n\
    \        val maxDigitSum = arr.take(maxLen).map(_.toString).map(_.sum).max\n \
    \       val maxDigitSums = arr.take(maxLen).map(_.toString).map(_.sum).map(_.length).max\n\
    \        val maxDigitSumsSum = arr.take(maxLen).map(_.toString).map(_.sum).map(_.sum).max\n\
    \        val maxDigitSumsSums = arr.take(maxLen).map(_.toString).map(_.sum).map(_.sum).map(_.length).max\n\
    \        val maxDigitSumsSumsSum = arr.take(maxLen).map(_.toString).map(_.sum).map(_.sum).map(_.sum).map(_.length).max\n\
    \        val maxDigitSumsSumsSums = arr.take(maxLen).map(_.toString).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.length).max\n\
    \        val maxDigitSumsSumsSumsSum = arr.take(maxLen).map(_.toString).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.length).max\n\
    \        val maxDigitSumsSumsSumsSums = arr.take(maxLen).map(_.toString).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.length).max\n\
    \        val maxDigitSumsSumsSumsSumsSum = arr.take(maxLen).map(_.toString).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.length).max\n\
    \        val maxDigitSumsSumsSumsSumsSums = arr.take(maxLen).map(_.toString).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.length).max\n\
    \        val maxDigitSumsSumsSumsSumsSumsSum = arr.take(maxLen).map(_.toString).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(",
  "        val arr = arr.toList\n        val len = arr.size\n        val maxLen =\
    \ len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n\
    \        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val\
    \ maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8\
    \ = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen\
    \ / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n\
    \        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n    \
    \    val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val\
    \ maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19\
    \ = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen\
    \ / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n\
    \        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n    \
    \    val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val\
    \ maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30\
    \ = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen\
    \ / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n\
    \        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n    \
    \    val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val\
    \ maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41\
    \ = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen\
    \ / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n\
    \        val maxLen46 = maxLen / 46\n        val maxLen47 = max", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        var sum = 0\n        for(i\
    \ <- 0 until arr.length)\n        {\n            sum += arr(i)\n            if(sum\
    \ >= k)\n            {\n                result.add(sum)\n                sum =\
    \ 0\n            }\n        }\n        if(sum > 0)\n        {\n            result.add(sum)\n\
    \        }\n        sum = 0\n        for(i <- 0 until result.size)\n        {\n\
    \            sum += result(i)\n        }\n        return sum", "        var sum\
    \ = 0\n        var index = 0\n        while (index < k) {\n            sum +=\
    \ arr(index)\n            index += 1\n        }\n        return sum", "      \
    \  val arr = arr.toList\n        val len = arr.length\n        val maxLen = len\
    \ - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n  \
    \      val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val\
    \ maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8\
    \ = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen\
    \ / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n\
    \        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n    \
    \    val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val\
    \ maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19\
    \ = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen\
    \ / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n\
    \        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n    \
    \    val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val\
    \ maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30\
    \ = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen\
    \ / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n\
    \        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n    \
    \    val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val\
    \ maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41\
    \ = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen\
    \ / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n\
    \        val maxLen46 = maxLen / 46\n        val maxLen47 = max", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val arr = arr.toList\n    \
    \    val len = arr.size\n        val maxLen = len - k\n        val maxLen2 = maxLen\
    \ / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n  \
    \      val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val\
    \ maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9\
    \ = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen\
    \ / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n\
    \        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n    \
    \    val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val\
    \ maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20\
    \ = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen\
    \ / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n\
    \        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n    \
    \    val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val\
    \ maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31\
    \ = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen\
    \ / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n\
    \        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n    \
    \    val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val\
    \ maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42\
    \ = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen\
    \ / 44\n        val maxLen45 = maxLen / 45\n        val maxLen4", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val maxLength = arr.take(k).length\n\
    \        val maxLength2 = maxLength * maxLength\n        val maxLength3 = maxLength2\
    \ * maxLength\n        val maxLength4 = maxLength3 * maxLength\n        val maxLength5\
    \ = maxLength4 * maxLength\n        val maxLength6 = maxLength5 * maxLength\n\
    \        val maxLength7 = maxLength6 * maxLength\n        val maxLength8 = maxLength7\
    \ * maxLength\n        val maxLength9 = maxLength8 * maxLength\n        val maxLength10\
    \ = maxLength9 * maxLength\n        val maxLength11 = maxLength10 * maxLength\n\
    \        val maxLength12 = maxLength11 * maxLength\n        val maxLength13 =\
    \ maxLength12 * maxLength\n        val maxLength14 = maxLength13 * maxLength\n\
    \        val maxLength15 = maxLength14 * maxLength\n        val maxLength16 =\
    \ maxLength15 * maxLength\n        val maxLength17 = maxLength16 * maxLength\n\
    \        val maxLength18 = maxLength17 * maxLength\n        val maxLength19 =\
    \ maxLength18 * maxLength\n        val maxLength20 = maxLength19 * maxLength\n\
    \        val maxLength21 = maxLength20 * maxLength\n        val maxLength22 =\
    \ maxLength21 * maxLength\n        val maxLength23 = maxLength22 * maxLength\n\
    \        val maxLength24 = maxLength23 * maxLength\n        val maxLength25 =\
    \ maxLength24 * maxLength\n        val maxLength26 = maxLength25 * maxLength\n\
    \        val maxLength27 = maxLength26 * maxLength\n        val maxLength28 =\
    \ maxLength27 * maxLength\n        val maxLength29 = maxLength28 * maxLength\n\
    \        val maxLength30 = maxLength29 * maxLength\n        val maxLength31 =\
    \ maxLength30 * maxLength\n        val maxLength32 = maxLength31 * maxLength\n\
    \        val maxLength33 = maxLength32 * maxLength\n        val maxLength34 =\
    \ maxLength33 * maxLength\n        val maxLength35 = maxLength34 * maxLength\n\
    \        val maxLength36 = maxLength35 * maxLength\n        val maxLength37 =\
    \ maxLength36 * maxLength\n        val maxLength38 = maxLength37 * maxLength\n\
    \        val maxLength39 = maxLength38 * maxLength\n        val maxLength40 =\
    \ maxLength39 * maxLength\n", "        val arr = arr.toList\n        val len =\
    \ arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n\
    \        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val\
    \ maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7\
    \ = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen\
    \ / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n\
    \        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n    \
    \    val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val\
    \ maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18\
    \ = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen\
    \ / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n\
    \        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n    \
    \    val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val\
    \ maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29\
    \ = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen\
    \ / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n\
    \        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n    \
    \    val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val\
    \ maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40\
    \ = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen\
    \ / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n\
    \        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n    \
    \    val maxLen47 = max", "        val arr = arr.toList\n        val len = arr.size\n\
    \        val max = (len / 2).toInt\n        val sum = 0\n        for(i <- 0 until\
    \ max){\n            val x = arr(i).toInt\n            val y = arr(i+1).toInt\n\
    \            val sum = x + y\n            if(sum > 9){\n                sum -=\
    \ 10\n            }\n            sum += sum\n        }\n        sum", "      \
    \  val arr = arr.toList\n        val len = arr.length\n        val maxLen = len\
    \ - k\n        val maxLen2 = maxLen * maxLen\n        val maxLen3 = maxLen2 *\
    \ maxLen\n        val maxLen4 = maxLen3 * maxLen\n        val maxLen5 = maxLen4\
    \ * maxLen\n        val maxLen6 = maxLen5 * maxLen\n        val maxLen7 = maxLen6\
    \ * maxLen\n        val maxLen8 = maxLen7 * maxLen\n        val maxLen9 = maxLen8\
    \ * maxLen\n        val maxLen10 = maxLen9 * maxLen\n        val maxLen11 = maxLen10\
    \ * maxLen\n        val maxLen12 = maxLen11 * maxLen\n        val maxLen13 = maxLen12\
    \ * maxLen\n        val maxLen14 = maxLen13 * maxLen\n        val maxLen15 = maxLen14\
    \ * maxLen\n        val maxLen16 = maxLen15 * maxLen\n        val maxLen17 = maxLen16\
    \ * maxLen\n        val maxLen18 = maxLen17 * maxLen\n        val maxLen19 = maxLen18\
    \ * maxLen\n        val maxLen20 = maxLen19 * maxLen\n        val maxLen21 = maxLen20\
    \ * maxLen\n        val maxLen22 = maxLen21 * maxLen\n        val maxLen23 = maxLen22\
    \ * maxLen\n        val maxLen24 = maxLen23 * maxLen\n        val maxLen25 = maxLen24\
    \ * maxLen\n        val maxLen26 = maxLen25 * maxLen\n        val maxLen27 = maxLen26\
    \ * maxLen\n        val maxLen28 = maxLen27 * maxLen\n        val maxLen29 = maxLen28\
    \ * maxLen\n        val maxLen30 = maxLen29 * maxLen\n        val maxLen31 = maxLen30\
    \ * maxLen\n        val maxLen32 = maxLen31 * maxLen\n        val maxLen33 = maxLen32\
    \ * maxLen\n        val maxLen34 = maxLen33 * maxLen\n        val maxLen35 = maxLen34\
    \ * maxLen\n        val maxLen36 = maxLen35 * maxLen\n        val maxLen37 = maxLen36\
    \ * maxLen\n        val maxLen38 = maxLen37 * maxLen\n        val maxLen39 = maxLen38\
    \ * maxLen\n        val maxLen40 = maxLen39 * maxLen\n        val ", "       \
    \ val result = new mutable.ListBuffer[Long]()\n        val len = arr.size\n  \
    \      val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        ", "        val arr\
    \ = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n \
    \       val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val\
    \ maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6\
    \ = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen\
    \ / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n\
    \        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n    \
    \    val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val\
    \ maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17\
    \ = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen\
    \ / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n\
    \        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n    \
    \    val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val\
    \ maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28\
    \ = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen\
    \ / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n\
    \        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n    \
    \    val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val\
    \ maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39\
    \ = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen\
    \ / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n\
    \        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n    \
    \    val maxLen46 = maxLen / 46\n        val maxLen47 = max", "        val arr\
    \ = arr.toList\n        val len = arr.length\n        val maxLen = arr.take(k).length\n\
    \        val maxSum = arr.take(k).sum\n        val maxSum2 = arr.take(k).sum\n\
    \        val maxSum3 = arr.take(k).sum\n        val maxSum4 = arr.take(k).sum\n\
    \        val maxSum5 = arr.take(k).sum\n        val maxSum6 = arr.take(k).sum\n\
    \        val maxSum7 = arr.take(k).sum\n        val maxSum8 = arr.take(k).sum\n\
    \        val maxSum9 = arr.take(k).sum\n        val maxSum10 = arr.take(k).sum\n\
    \        val maxSum11 = arr.take(k).sum\n        val maxSum12 = arr.take(k).sum\n\
    \        val maxSum13 = arr.take(k).sum\n        val maxSum14 = arr.take(k).sum\n\
    \        val maxSum15 = arr.take(k).sum\n        val maxSum16 = arr.take(k).sum\n\
    \        val maxSum17 = arr.take(k).sum\n        val maxSum18 = arr.take(k).sum\n\
    \        val maxSum19 = arr.take(k).sum\n        val maxSum20 = arr.take(k).sum\n\
    \        val maxSum21 = arr.take(k).sum\n        val maxSum22 = arr.take(k).sum\n\
    \        val maxSum23 = arr.take(k).sum\n        val maxSum24 = arr.take(k).sum\n\
    \        val maxSum25 = arr.take(k).sum\n        val maxSum26 = arr.take(k).sum\n\
    \        val maxSum27 = arr.take(k).sum\n        val maxSum28 = arr.take(k).sum\n\
    \        val maxSum29 = arr.take(k).sum\n        val maxSum30 = arr.take(k).sum\n\
    \        val maxSum31 = arr.take(k).sum\n        val maxSum32 = arr.take(k).sum\n\
    \        val maxSum33 = arr.take(k).sum\n        val maxSum34 = arr.take(k).sum\n\
    \        val maxSum35 = arr.take(k).sum\n        val maxSum36 = arr.take(k).sum\n\
    \        val maxSum37 = arr.take(k).sum\n        val maxSum38 = arr.take(k).sum\n\
    \        val maxSum39 = arr.take(k).sum\n        val maxSum40 = arr.take(k).sum\n\
    \        val maxSum41 = arr.take(k).sum\n        val maxSum42 = arr.take", " \
    \       val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n   \
    \     for (i <- 0 until arr.length) {\n            if (sum + arr(i) <= k) {\n\
    \                sum += arr(i)\n                result += arr(i)\n           \
    \ }\n        }\n        result.sum", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        while (i < arr.length) {\n  \
    \          if (sum + arr(i) < k) {\n                sum += arr(i)\n          \
    \      i += 1\n            } else {\n                sum += arr(i)\n         \
    \       result.add(sum)\n                sum = 0\n                i += 1\n   \
    \         }\n        }\n        if (sum > k) {\n            result.add(sum)\n\
    \        }\n        result.sum", "        val arr = arr.toList\n        val len\
    \ = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n\
    \        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val\
    \ maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7\
    \ = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen\
    \ / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n\
    \        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n    \
    \    val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val\
    \ maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18\
    \ = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen\
    \ / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n\
    \        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n    \
    \    val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val\
    \ maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29\
    \ = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen\
    \ / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n\
    \        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n    \
    \    val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val\
    \ maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40\
    \ = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen\
    \ / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n\
    \        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n    \
    \    val maxLen47 = max", "        val arr = arr.toList\n        val len = arr.size\n\
    \        val max = (len / 2).toInt\n        val sum = 0\n        val maxSum =\
    \ 0\n        val maxSumIndex = 0\n        val maxSumIndex2 = 0\n        val maxSumIndex3\
    \ = 0\n        val maxSumIndex4 = 0\n        val maxSumIndex5 = 0\n        val\
    \ maxSumIndex6 = 0\n        val maxSumIndex7 = 0\n        val maxSumIndex8 = 0\n\
    \        val maxSumIndex9 = 0\n        val maxSumIndex10 = 0\n        val maxSumIndex11\
    \ = 0\n        val maxSumIndex12 = 0\n        val maxSumIndex13 = 0\n        val\
    \ maxSumIndex14 = 0\n        val maxSumIndex15 = 0\n        val maxSumIndex16\
    \ = 0\n        val maxSumIndex17 = 0\n        val maxSumIndex18 = 0\n        val\
    \ maxSumIndex19 = 0\n        val maxSumIndex20 = 0\n        val maxSumIndex21\
    \ = 0\n        val maxSumIndex22 = 0\n        val maxSumIndex23 = 0\n        val\
    \ maxSumIndex24 = 0\n        val maxSumIndex25 = 0\n        val maxSumIndex26\
    \ = 0\n        val maxSumIndex27 = 0\n        val maxSumIndex28 = 0\n        val\
    \ maxSumIndex29 = 0\n        val maxSumIndex30 = 0\n        val maxSumIndex31\
    \ = 0\n        val maxSumIndex32 = 0\n        val maxSumIndex33 = 0\n        val\
    \ maxSumIndex34 = 0\n        val maxSumIndex35 = 0\n        val maxSumIndex36\
    \ = 0\n        val maxSumIndex37 = 0\n        val maxSumIndex38 = 0\n        val\
    \ maxSumIndex39 = 0\n        val maxSumIndex40 = 0\n        val maxSumIndex41\
    \ = 0\n        val maxSumIndex42 = 0\n        val maxSumIndex43 = 0\n        val\
    \ maxSumIndex44 = 0\n        val maxSumIndex45 = 0\n        val maxSumIndex46\
    \ = 0\n        val maxSumIndex47 = 0\n        val maxSumIndex48 = 0\n        val\
    \ maxSumIndex49 = 0\n        val maxSumIndex50 = 0\n        val maxSumIndex51\
    \ = 0\n        val maxSumIndex52 = 0\n        val maxSumIndex53 = 0\n        val\
    \ maxSumIndex54 = 0\n        val maxSumIndex55 = 0\n        val maxSumIndex56\
    \ = 0\n        val maxSumIndex57 = 0\n        val maxSumIndex58 = 0\n        val\
    \ maxSumIndex59 = 0\n        val maxSumIndex60 = 0", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxLen = len - k\n        val maxLen2\
    \ = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen\
    \ / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n  \
    \      val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val\
    \ maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11\
    \ = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen\
    \ / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n\
    \        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n    \
    \    val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val\
    \ maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22\
    \ = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen\
    \ / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n\
    \        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n    \
    \    val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val\
    \ maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33\
    \ = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen\
    \ / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n\
    \        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n    \
    \    val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val\
    \ maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44\
    \ = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen\
    \ / 46\n        val maxLen47 = max", "        val result = new mutable.HashMap[Long,\
    \ Long]()\n        val maxLength = arr.take(k).map(_.toString.length).max\n  \
    \      arr.take(k).foreach(x => {\n            val key = x.toString.substring(0,\
    \ maxLength)\n            val value = result.getOrElse(key, 0L)\n            result\
    \ += ((key, value + x))\n        })\n        val sum = result.values.sum\n   \
    \     sum", "        val result = new mutable.ListBuffer[Long]()\n        val\
    \ maxLength = arr.take(k).map(_.toString.length).max\n        val maxLength2 =\
    \ arr.take(k).map(_.toString.length).max\n        val maxLength3 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength4 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength5 = arr.take(k).map(_.toString.length).max\n        val maxLength6\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength7 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength8 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength9 = arr.take(k).map(_.toString.length).max\n        val maxLength10\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength11 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength12 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength13 = arr.take(k).map(_.toString.length).max\n        val maxLength14\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength15 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength16 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength17 = arr.take(k).map(_.toString.length).max\n        val maxLength18\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength19 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength20 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength21 = arr.take(k).map(_.toString.length).max\n        val maxLength22\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength23 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength24 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength25 = arr.take(k).map(_.toString.length).max\n        val maxLength26\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength27 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength28 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength29 = arr.take", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        val\
    \ maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum2 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum3 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum4 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum5 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum6 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum7 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum8 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum9 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum10 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum11 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum12 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum13 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum14 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum15 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum16 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum17 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum18 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum19 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum20 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val\
    \ maxTwoDigitsSum21 = arr.take(k).", "        val arr = arr.toList\n        val\
    \ len = arr.length\n        val maxLen = len - k\n        val maxSum = arr.take(k).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum2 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum3 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum4 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum5 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum6 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum7 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum8 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum9 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum10 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum11 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum12 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum13 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum14 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum15 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum16 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum17 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum18 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        ", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxLen = len - k\n        val maxLen2\
    \ = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen\
    \ / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n  \
    \      val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val\
    \ maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11\
    \ = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen\
    \ / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n\
    \        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n    \
    \    val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val\
    \ maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22\
    \ = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen\
    \ / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n\
    \        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n    \
    \    val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val\
    \ maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33\
    \ = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen\
    \ / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n\
    \        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n    \
    \    val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val\
    \ maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44\
    \ = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen\
    \ / 46\n        val maxLen47 = max", "        val result = new mutable.HashMap[Long,\
    \ Long]()\n        var sum = 0\n        var i = 0\n        while (i < k) {\n \
    \           sum += arr(i)\n            i += 1\n        }\n        var j = 0\n\
    \        while (j < arr.length) {\n            val value = arr(j)\n          \
    \  if (result.contains(value)) {\n                val oldValue = result(value)\n\
    \                result.put(value, oldValue + sum)\n            } else {\n   \
    \             result.put(value, sum)\n            }\n            j += 1\n    \
    \    }\n        val maxValue = result.values.max\n        if (maxValue == 0) 0\n\
    \        else maxValue", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        while (i < arr.length) {\n  \
    \          sum += arr(i)\n            if (sum >= 10) {\n                sum +=\
    \ arr(i + 1)\n                result += sum.toLong\n                sum = 0\n\
    \            }\n            i += 1\n        }\n        if (sum > 0) {\n      \
    \      result += sum.toLong\n        }\n        sum", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val max = (len / 2).toInt\n        val\
    \ sum = 0\n        val arr = arr.take(max)\n        val arr2 = arr.drop(max)\n\
    \        val arr3 = arr2.take(max)\n        val arr4 = arr3.drop(max)\n      \
    \  val arr5 = arr4.take(max)\n        val arr6 = arr5.drop(max)\n        val arr7\
    \ = arr6.take(max)\n        val arr8 = arr7.drop(max)\n        val arr9 = arr8.take(max)\n\
    \        val arr10 = arr9.drop(max)\n        val arr11 = arr10.take(max)\n   \
    \     val arr12 = arr11.drop(max)\n        val arr13 = arr12.take(max)\n     \
    \   val arr14 = arr13.drop(max)\n        val arr15 = arr14.take(max)\n       \
    \ val arr16 = arr15.drop(max)\n        val arr17 = arr16.take(max)\n        val\
    \ arr18 = arr17.drop(max)\n        val arr19 = arr18.take(max)\n        val arr20\
    \ = arr19.drop(max)\n        val arr21 = arr20.take(max)\n        val arr22 =\
    \ arr21.drop(max)\n        val arr23 = arr22.take(max)\n        val arr24 = arr23.drop(max)\n\
    \        val arr25 = arr24.take(max)\n        val arr26 = arr25.drop(max)\n  \
    \      val arr27 = arr26.take(max)\n        val arr28 = arr27.drop(max)\n    \
    \    val arr29 = arr28.take(max)\n        val arr30 = arr29.drop(max)\n      \
    \  val arr31 = arr30.take(max)\n        val arr32 = arr31.drop(max)\n        val\
    \ arr33 = arr32.take(max)\n        val arr34 = arr33.drop(max)\n        val arr35\
    \ = arr34.take(max)\n        val arr36 = arr35.drop(max)\n        val arr37 =\
    \ arr36.take(max)\n        val arr38 = arr37.drop(max)\n        val arr39 = arr38.take(max)\n\
    \        val arr40 = arr39.drop(max)\n        val arr41 = arr40.take(max)\n  \
    \      val arr42 = arr41.drop(max)\n        val arr43 = arr42.take(max)\n    \
    \    val arr44 = arr43.drop(max)\n        val arr45 = arr44.take(max)\n", "  \
    \      val arr = arr.toList\n        val len = arr.length\n        val max = (len\
    \ - k).toInt\n        var sum = 0L\n        var i = 0\n        while (i < max)\
    \ {\n            sum += arr(i).toLong\n            i += 1\n        }\n       \
    \ return sum", "        val arr = arr.toList\n        val len = arr.size\n   \
    \     val maxLen = arr.take(k).size\n        val maxLen2 = maxLen / 2\n      \
    \  val maxLen3 = maxLen - maxLen2\n        val maxLen4 = maxLen - maxLen3\n  \
    \      val maxLen5 = maxLen - maxLen4\n        val maxLen6 = maxLen - maxLen5\n\
    \        val maxLen7 = maxLen - maxLen6\n        val maxLen8 = maxLen - maxLen7\n\
    \        val maxLen9 = maxLen - maxLen8\n        val maxLen10 = maxLen - maxLen9\n\
    \        val maxLen11 = maxLen - maxLen10\n        val maxLen12 = maxLen - maxLen11\n\
    \        val maxLen13 = maxLen - maxLen12\n        val maxLen14 = maxLen - maxLen13\n\
    \        val maxLen15 = maxLen - maxLen14\n        val maxLen16 = maxLen - maxLen15\n\
    \        val maxLen17 = maxLen - maxLen16\n        val maxLen18 = maxLen - maxLen17\n\
    \        val maxLen19 = maxLen - maxLen18\n        val maxLen20 = maxLen - maxLen19\n\
    \        val maxLen21 = maxLen - maxLen20\n        val maxLen22 = maxLen - maxLen21\n\
    \        val maxLen23 = maxLen - maxLen22\n        val maxLen24 = maxLen - maxLen23\n\
    \        val maxLen25 = maxLen - maxLen24\n        val maxLen26 = maxLen - maxLen25\n\
    \        val maxLen27 = maxLen - maxLen26\n        val maxLen28 = maxLen - maxLen27\n\
    \        val maxLen29 = maxLen - maxLen28\n        val maxLen30 = maxLen - maxLen29\n\
    \        val maxLen31 = maxLen - maxLen30\n        val maxLen32 = maxLen - maxLen31\n\
    \        val maxLen33 = maxLen - maxLen32\n        val maxLen34 = maxLen - maxLen33\n\
    \        val maxLen35 = maxLen - maxLen34\n        val maxLen36 = maxLen - maxLen35\n\
    \        val maxLen37 = maxLen - maxLen36\n        val maxLen38 = maxLen - maxLen37\n\
    \        val maxLen39 = maxLen - maxLen38\n        val maxLen40 = max", "    \
    \    val arr = arr.toList\n        val len = arr.length\n        val maxTwoDigits\
    \ = arr.take(k).map(_.toString.length).max\n        val sum = 0\n        for (i\
    \ <- 0 until len) {\n            val digits = arr(i).toString.length\n       \
    \     val twoDigits = digits - maxTwoDigits\n            val sum = sum + arr(i).asInstanceOf[Long]\
    \ + twoDigits\n        }\n        sum", "        val arr = arr.toList\n      \
    \  val len = arr.size\n        val maxDigit = arr.take(k).map(_.toString.length).max\n\
    \        val sum = 0\n        for (i <- 0 until len) {\n            val digit\
    \ = arr(i).toString.length\n            if (digit <= maxDigit) {\n           \
    \     sum += arr(i)\n            }\n        }\n        sum", "        val arr\
    \ = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n \
    \       val maxDigit = arr(maxLen)\n        val sum = 0\n        var i = 0\n \
    \       while (i < maxLen) {\n            val digit = arr(i)\n            sum\
    \ += digit\n            i += 1\n        }\n        sum + maxDigit", "        val\
    \ arr = arr.toList\n        val len = arr.length\n        val sum = 0\n      \
    \  val maxSum = arr.take(k).foldLeft(0l){ (sum, elem) => sum + elem }\n      \
    \  val maxSum2 = arr.take(k).foldLeft(0l){ (sum, elem) => sum + elem.toString.toLong\
    \ }\n        val maxSum3 = arr.take(k).foldLeft(0l){ (sum, elem) => sum + elem.toString.toLong\
    \ }\n        val maxSum4 = arr.take(k).foldLeft(0l){ (sum, elem) => sum + elem.toString.toLong\
    \ }\n        val maxSum5 = arr.take(k).foldLeft(0l){ (sum, elem) => sum + elem.toString.toLong\
    \ }\n        val maxSum6 = arr.take(k).foldLeft(0l){ (sum, elem) => sum + elem.toString.toLong\
    \ }\n        val maxSum7 = arr.take(k).foldLeft(0l){ (sum, elem) => sum + elem.toString.toLong\
    \ }\n        val maxSum8 = arr.take(k).foldLeft(0l){ (sum, elem) => sum + elem.toString.toLong\
    \ }\n        val maxSum9 = arr.take(k).foldLeft(0l){ (sum, elem) => sum + elem.toString.toLong\
    \ }\n        val maxSum10 = arr.take(k).foldLeft(0l){ (sum, elem) => sum + elem.toString.toLong\
    \ }\n        val maxSum11 = arr.take(k).foldLeft(0l){ (sum, elem) => sum + elem.toString.toLong\
    \ }\n        val maxSum12 = arr.take(k).foldLeft(0l){ (sum, elem) => sum + elem.toString.toLong\
    \ }\n        val maxSum13 = arr.take(k).foldLeft(0l){ (sum, elem) => sum + elem.toString.toLong\
    \ }\n        val maxSum14 = arr.take(k).foldLeft(0l){ (sum, elem) => sum + elem.toString.toLong\
    \ }\n        val maxSum15 = arr.take(k).foldLeft(0l){ (sum, elem) => sum + elem.toString.toLong\
    \ }\n        val maxSum16 = arr.take(k).foldLeft(0l){ (sum, elem) => sum + elem.toString.toLong\
    \ }\n        val maxSum17 = arr.take(k).foldLeft(", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxLen = len - k\n        val maxLen2\
    \ = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen\
    \ / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n  \
    \      val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val\
    \ maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11\
    \ = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen\
    \ / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n\
    \        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n    \
    \    val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val\
    \ maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22\
    \ = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen\
    \ / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n\
    \        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n    \
    \    val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val\
    \ maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33\
    \ = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen\
    \ / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n\
    \        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n    \
    \    val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val\
    \ maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44\
    \ = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen\
    \ / 46\n        val maxLen47 = max", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        while (i < k) {\n           \
    \ sum += arr(i)\n            i += 1\n        }\n        while (i < arr.length)\
    \ {\n            sum += arr(i)\n            i += 1\n        }\n        result\
    \ += sum\n        result.sum", "        val arr = arr.toList\n        val len\
    \ = arr.length\n        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n\
    \        val sum = 0\n        for(i <- 0 until k) {\n            val twoDigits\
    \ = arr.take(i).map(_.toString.length).max\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += ", "        val arr =\
    \ arr.toList\n        val len = arr.size\n        val res = arr.take(k).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val rem = arr.drop(k).foldLeft(0l) {\
    \ (sum, elem) => sum + elem }\n        res + rem", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val max = (len - k).toInt\n        val\
    \ sum = 0\n        val maxSum = 0\n        for(i <- 0 until max){\n          \
    \  val curr = arr(i).toInt\n            val next = (i + 1)%max\n            val\
    \ nextCurr = arr(next).toInt\n            val nextNext = (next + 1)%max\n    \
    \        val nextNextCurr = arr(nextNext).toInt\n            val nextNextNext\
    \ = (nextNext + 1)%max\n            val nextNextNextCurr = arr(nextNextNext).toInt\n\
    \            val nextNextNextNext = (nextNextNext + 1)%max\n            val nextNextNextNextCurr\
    \ = arr(nextNextNextNext).toInt\n            val nextNextNextNextNext = (nextNextNextNext\
    \ + 1)%max\n            val nextNextNextNextNextCurr = arr(nextNextNextNextNext).toInt\n\
    \            val nextNextNextNextNextNext = (nextNextNextNextNext + 1)%max\n \
    \           val nextNextNextNextNextNextCurr = arr(nextNextNextNextNextNext).toInt\n\
    \            val nextNextNextNextNextNextNext = (nextNextNextNextNextNext + 1)%max\n\
    \            val nextNextNextNextNextNextNextCurr = arr(nextNextNextNextNextNextNext).toInt\n\
    \            val nextNextNextNextNextNextNextNext = (nextNextNextNextNextNextNext\
    \ + 1)%max\n            val nextNextNextNextNextNextNextNextCurr = arr(nextNextNextNextNextNextNextNext).toInt\n\
    \            val nextNextNextNextNextNextNextNextNext = (nextNextNextNextNextNextNextNext\
    \ + 1)%max\n            val nextNextNextNextNextNextNextNextNextCurr = arr(nextNextNextNextNextNextNextNextNext).toInt\n\
    \            val nextNextNextNextNextNextNextNextNextNext = (nextNextNextNextNextNextNextNextNextNext\
    \ + 1)%max\n            val nextNextNextNextNextNextNextNextNextNextCurr = arr(nextNextNextNextNextNextNextNextNextNext).toInt\n\
    \            val nextNextNextNextNextNextNextNextNextNext = (nextNextNextNextNextNextNextNextNextNext\
    \ + 1)%max\n            val nextNextNextNextNextNextNextNextNextNextCurr = arr(nextNextNextNextNextNextNextNextNextNextNext).toInt\n\
    \            val nextNextNextNextNextNextNextNextNextNextNext = (nextNextNextNextNextNextNextNextNext",
  "        val arr = arr.toList\n        val len = arr.size\n        val maxTwoDigits\
    \ = arr.take(k).map(_.toString.length).max\n        val sum = 0\n        for(i\
    \ <- 0 until k) {\n            val twoDigits = arr.take(i).map(_.toString.length).max\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += ", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val res = arr.take(k).foldLeft(0l){ (sum, el) => sum + el.toString.dropRight(2).sum.toLong\
    \ }\n        val maxDigits = len - k\n        val maxDigitSum = arr.take(maxDigits).foldLeft(0l){\
    \ (sum, el) => sum + el.toString.dropRight(2).sum.toLong }\n        res + maxDigitSum",
  "        val arr = arr.toList\n        val len = arr.length\n        val max = (len\
    \ / 2).toInt\n        val sum = 0\n        val maxSum = 0\n        val maxSumIndex\
    \ = 0\n        val maxSumDigit = 0\n        val maxSumDigitIndex = 0\n       \
    \ val maxSumDigitDigit = 0\n        val maxSumDigitDigitIndex = 0\n        val\
    \ maxSumDigitDigitDigit = 0\n        val maxSumDigitDigitDigitIndex = 0\n    \
    \    val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n", "        val arr = arr.toList\n        val len = arr.length\n      \
    \  val max = (len / 2).toInt\n        val sum = 0\n        val twoDigits = arr.take(max)\n\
    \        val twoDigitSum = twoDigits.sum\n        val twoDigitSum2 = twoDigitSum\
    \ * 2\n        val twoDigitSum3 = twoDigitSum * 3\n        val twoDigitSum4 =\
    \ twoDigitSum * 4\n        val twoDigitSum5 = twoDigitSum * 5\n        val twoDigitSum6\
    \ = twoDigitSum * 6\n        val twoDigitSum7 = twoDigitSum * 7\n        val twoDigitSum8\
    \ = twoDigitSum * 8\n        val twoDigitSum9 = twoDigitSum * 9\n        val twoDigitSum10\
    \ = twoDigitSum * 10\n        val twoDigitSum11 = twoDigitSum * 11\n        val\
    \ twoDigitSum12 = twoDigitSum * 12\n        val twoDigitSum13 = twoDigitSum *\
    \ 13\n        val twoDigitSum14 = twoDigitSum * 14\n        val twoDigitSum15\
    \ = twoDigitSum * 15\n        val twoDigitSum16 = twoDigitSum * 16\n        val\
    \ twoDigitSum17 = twoDigitSum * 17\n        val twoDigitSum18 = twoDigitSum *\
    \ 18\n        val twoDigitSum19 = twoDigitSum * 19\n        val twoDigitSum20\
    \ = twoDigitSum * 20\n        val twoDigitSum21 = twoDigitSum * 21\n        val\
    \ twoDigitSum22 = twoDigitSum * 22\n        val twoDigitSum23 = twoDigitSum *\
    \ 23\n        val twoDigitSum24 = twoDigitSum * 24\n        val twoDigitSum25\
    \ = twoDigitSum * 25\n        val twoDigitSum26 = twoDigitSum * 26\n        val\
    \ twoDigitSum27 = twoDigitSum * 27\n        val twoDigitSum28 = twoDigitSum *\
    \ 28\n        val twoDigitSum29 = twoDigitSum * 29\n        val twoDigitSum30\
    \ = twoDigitSum * 30\n        val twoDigitSum31 = twoDigitSum * 31\n        val\
    \ twoDigitSum32 = twoDigitSum * 32\n        val twoDigitSum33 = twoDigitSum *\
    \ 33\n        val twoDigitSum34 = twoDigitSum * 34\n        val twoDigitSum35\
    \ = twoDigitSum * 35\n        val twoDigitSum36 = twoDigitSum * 36\n        val\
    \ twoDigitSum37 = twoDigitSum * 37\n        val twoDigitSum38 = ", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n    \
    \    val maxLen = len - k\n        val maxDigit = arr(maxLen)\n        val maxDigitDigit\
    \ = maxDigit / 10\n        val maxDigitRemainder = maxDigit % 10\n        val\
    \ maxDigitDigitRemainder = maxDigitRemainder / 10\n        val maxDigitDigitRemainderRemainder\
    \ = maxDigitRemainder % 10\n        val maxDigitDigitRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainder / 10\n        val maxDigitDigitRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainder % 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainder / 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainderRemainder % 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainderRemainderRemainder / 10\n    \
    \    val maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder %\
    \ 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder /\
    \ 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder %\
    \ 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder /\
    \ 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder %\
    \ 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder /\
    \ 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder %\
    \ 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemain", " \
    \       val arr = arr.toList\n        val len = arr.size\n        val maxLen =\
    \ len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n\
    \        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val\
    \ maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8\
    \ = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen\
    \ / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n\
    \        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n    \
    \    val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val\
    \ maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19\
    \ = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen\
    \ / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n\
    \        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n    \
    \    val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val\
    \ maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30\
    \ = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen\
    \ / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n\
    \        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n    \
    \    val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val\
    \ maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41\
    \ = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen\
    \ / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n\
    \        val maxLen46 = maxLen / 46\n        val maxLen47 = max", "        val\
    \ arr = arr.toList\n        val len = arr.size\n        val max2 = arr.take(k).max\n\
    \        val max1 = arr.take(k).min\n        val max2Index = arr.lastIndexWhere(x\
    \ => x > max2)\n        val max1Index = arr.lastIndexWhere(x => x > max1)\n  \
    \      val max2Index = if (max2Index == -1) k else max2Index\n        val max1Index\
    \ = if (max1Index == -1) k else max1Index\n        val max2Index = if (max2Index\
    \ == -1) k else max2Index\n        val max1Index = if (max1Index == -1) k else\
    \ max1Index\n        val max2Index = if (max2Index == -1) k else max2Index\n \
    \       val max1Index = if (max1Index == -1) k else max1Index\n        val max2Index\
    \ = if (max2Index == -1) k else max2Index\n        val max1Index = if (max1Index\
    \ == -1) k else max1Index\n        val max2Index = if (max2Index == -1) k else\
    \ max2Index\n        val max1Index = if (max1Index == -1) k else max1Index\n \
    \       val max2Index = if (max2Index == -1) k else max2Index\n        val max1Index\
    \ = if (max1Index == -1) k else max1Index\n        val max2Index = if (max2Index\
    \ == -1) k else max2Index\n        val max1Index = if (max1Index == -1) k else\
    \ max1Index\n        val max2Index = if (max2Index == -1) k else max2Index\n \
    \       val max1Index = if (max1Index == -1) k else max1Index\n        val max2Index\
    \ = if (max2Index == -1) k else max2Index\n        val max1Index = if (max1Index\
    \ == -1) k else max1Index\n        val max2Index = if (max2Index == -1) k else\
    \ max2Index\n        val max1Index = if (max1Index == -1) k else max1Index\n \
    \       val max2Index = if (max2Index == -1) k else max2Index\n        val max1Index\
    \ = if (max1Index == -1) k else max1Index\n        val max2Index = if (max2Index\
    \ == -1) k else max2Index\n        val max1Index = if (max1Index == -1) k else\
    \ max1Index\n        val max2Index = if (max2Index == -1) k else max2Index\n \
    \       val max1Index = if (max1Index == -1) k else max1Index\n        val max2Index\
    \ = if (max", "        val arr = arr.toList\n        val len = arr.length\n  \
    \      val max = (len / 2).toInt\n        val max2 = max / 2\n        val max3\
    \ = max / 3\n        val max4 = max / 4\n        val max5 = max / 5\n        val\
    \ max6 = max / 6\n        val max7 = max / 7\n        val max8 = max / 8\n   \
    \     val max9 = max / 9\n        val max10 = max / 10\n        val max11 = max\
    \ / 11\n        val max12 = max / 12\n        val max13 = max / 13\n        val\
    \ max14 = max / 14\n        val max15 = max / 15\n        val max16 = max / 16\n\
    \        val max17 = max / 17\n        val max18 = max / 18\n        val max19\
    \ = max / 19\n        val max20 = max / 20\n        val max21 = max / 21\n   \
    \     val max22 = max / 22\n        val max23 = max / 23\n        val max24 =\
    \ max / 24\n        val max25 = max / 25\n        val max26 = max / 26\n     \
    \   val max27 = max / 27\n        val max28 = max / 28\n        val max29 = max\
    \ / 29\n        val max30 = max / 30\n        val max31 = max / 31\n        val\
    \ max32 = max / 32\n        val max33 = max / 33\n        val max34 = max / 34\n\
    \        val max35 = max / 35\n        val max36 = max / 36\n        val max37\
    \ = max / 37\n        val max38 = max / 38\n        val max39 = max / 39\n   \
    \     val max40 = max / 40\n        val max41 = max / 41\n        val max42 =\
    \ max / 42\n        val max43 = max / 43\n        val max44 = max / 44\n     \
    \   val max45 = max / 45\n        val max46 = max / 46\n        val max47 = max\
    \ / 47\n        val max48 = max / 48\n        val max49 = max / 49\n        val\
    \ max50 = max / 50\n        val max51 = max / 51\n        val max52 = max / 52\n\
    \        val max53 = max / 53\n        val max54 = max / 54\n        val max55\
    \ = max / 55\n        val max56 = max / 56\n        val max57 = ", "        val\
    \ arr = arr.toList\n        val len = arr.length\n        val max = (len / 2).toInt\n\
    \        val max2 = max / 2\n        val max3 = max / 3\n        val max4 = max\
    \ / 4\n        val max5 = max / 5\n        val max6 = max / 6\n        val max7\
    \ = max / 7\n        val max8 = max / 8\n        val max9 = max / 9\n        val\
    \ max10 = max / 10\n        val max11 = max / 11\n        val max12 = max / 12\n\
    \        val max13 = max / 13\n        val max14 = max / 14\n        val max15\
    \ = max / 15\n        val max16 = max / 16\n        val max17 = max / 17\n   \
    \     val max18 = max / 18\n        val max19 = max / 19\n        val max20 =\
    \ max / 20\n        val max21 = max / 21\n        val max22 = max / 22\n     \
    \   val max23 = max / 23\n        val max24 = max / 24\n        val max25 = max\
    \ / 25\n        val max26 = max / 26\n        val max27 = max / 27\n        val\
    \ max28 = max / 28\n        val max29 = max / 29\n        val max30 = max / 30\n\
    \        val max31 = max / 31\n        val max32 = max / 32\n        val max33\
    \ = max / 33\n        val max34 = max / 34\n        val max35 = max / 35\n   \
    \     val max36 = max / 36\n        val max37 = max / 37\n        val max38 =\
    \ max / 38\n        val max39 = max / 39\n        val max40 = max / 40\n     \
    \   val max41 = max / 41\n        val max42 = max / 42\n        val max43 = max\
    \ / 43\n        val max44 = max / 44\n        val max45 = max / 45\n        val\
    \ max46 = max / 46\n        val max47 = max / 47\n        val max48 = max / 48\n\
    \        val max49 = max / 49\n        val max50 = max / 50\n        val max51\
    \ = max / 51\n        val max52 = max / 52\n        val max53 = max / 53\n   \
    \     val max54 = max / 54\n        val max55 = max / 55\n        val max56 =\
    \ max / 56\n        val max57 = ", "        val arr = arr.toList\n        val\
    \ len = arr.length\n        val max = (len / 2).toInt\n        val sum = 0\n \
    \       val twoDigits = arr.take(max).filter(_ < 10).sum\n        val threeDigits\
    \ = arr.take(max).filter(_ >= 10).sum\n        val twoDigitSum = arr.take(max).filter(_\
    \ < 10).sum\n        val threeDigitSum = arr.take(max).filter(_ >= 10).sum\n \
    \       val twoDigitSum2 = arr.take(max).filter(_ < 10).sum\n        val threeDigitSum2\
    \ = arr.take(max).filter(_ >= 10).sum\n        val twoDigitSum3 = arr.take(max).filter(_\
    \ < 10).sum\n        val threeDigitSum3 = arr.take(max).filter(_ >= 10).sum\n\
    \        val twoDigitSum4 = arr.take(max).filter(_ < 10).sum\n        val threeDigitSum4\
    \ = arr.take(max).filter(_ >= 10).sum\n        val twoDigitSum5 = arr.take(max).filter(_\
    \ < 10).sum\n        val threeDigitSum5 = arr.take(max).filter(_ >= 10).sum\n\
    \        val twoDigitSum6 = arr.take(max).filter(_ < 10).sum\n        val threeDigitSum6\
    \ = arr.take(max).filter(_ >= 10).sum\n        val twoDigitSum7 = arr.take(max).filter(_\
    \ < 10).sum\n        val threeDigitSum7 = arr.take(max).filter(_ >= 10).sum\n\
    \        val twoDigitSum8 = arr.take(max).filter(_ < 10).sum\n        val threeDigitSum8\
    \ = arr.take(max).filter(_ >= 10).sum\n        val twoDigitSum9 = arr.take(max).filter(_\
    \ < 10).sum\n        val threeDigitSum9 = arr.take(max).filter(_ >= 10).sum\n\
    \        val twoDigitSum10 = arr.take(max).filter(_ < 10).sum\n        val threeDigitSum10\
    \ = arr.take(max).filter(_ >= 10).sum\n        val twoDigitSum11 = arr.take(max).filter(_\
    \ < 10).sum\n        val threeDigitSum11 = arr.take(max).filter(_ >= 10).sum\n\
    \        val twoDigitSum12 = arr.take(max).filter(_ < 10).sum\n        val threeDigitSum12\
    \ = arr.take(max).filter(_ >= 10).sum\n        val twoDigitSum13 = arr.take(max).filter(_\
    \ < 10).sum", "        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0\n        for (i <- 0 until arr.size) {\n            if (arr.size <=\
    \ k) {\n                sum += arr(i)\n            } else {\n                val\
    \ temp = arr(i)\n                val temp2 = temp % 10\n                val temp3\
    \ = temp / 10\n                if (temp2 > 2) {\n                    sum += temp3\n\
    \                }\n            }\n        }\n        sum", "        val arr =\
    \ arr.toList\n        val len = arr.length\n        val maxLen = len - k\n   \
    \     val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val\
    \ maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6\
    \ = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen\
    \ / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n\
    \        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n    \
    \    val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val\
    \ maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17\
    \ = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen\
    \ / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n\
    \        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n    \
    \    val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val\
    \ maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28\
    \ = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen\
    \ / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n\
    \        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n    \
    \    val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val\
    \ maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39\
    \ = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen\
    \ / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n\
    \        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n    \
    \    val maxLen46 = maxLen / 46\n        val maxLen47 = max", "        val arr\
    \ = arr.toList\n        val len = arr.size\n        val maxLen = len - k\n   \
    \     val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val\
    \ maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6\
    \ = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen\
    \ / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n\
    \        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n    \
    \    val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val\
    \ maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17\
    \ = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen\
    \ / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n\
    \        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n    \
    \    val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val\
    \ maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28\
    \ = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen\
    \ / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n\
    \        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n    \
    \    val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val\
    \ maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39\
    \ = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen\
    \ / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n\
    \        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n    \
    \    val maxLen46 = maxLen / 46\n        val maxLen47 = max", "        val arr\
    \ = arr.toList\n        val len = arr.size\n        val maxNum = arr.take(k).max\n\
    \        val maxNumLen = maxNum.toString.length\n        val result = arr.filter(_\
    \ <= maxNum).sum\n        val resultLen = result.toString.length\n        if (resultLen\
    \ > maxNumLen) {\n            val maxNumStr = maxNum.toString\n            val\
    \ maxNumLenStr = maxNumStr.length\n            val maxNumStrLen = maxNumStrLen\
    \ - maxNumLen\n            val resultStr = result.toString\n            val resultStrLen\
    \ = resultStr.length\n            val maxNumStrLen = maxNumStrLen - maxNumLen\n\
    \            val resultStrLenStr = resultStrLen + maxNumStrLen\n            val\
    \ maxNumStrLenStr = maxNumStrLen - maxNumLenStr\n            val resultStrLenStrStr\
    \ = resultStrLenStr + maxNumStrLenStr\n            val maxNumStrLenStrStr = maxNumStrLenStr\
    \ - maxNumLenStrStr\n            val resultStrLenStrStrStr = resultStrLenStrStr\
    \ + maxNumStrLenStrStr\n            val maxNumStrLenStrStrStr = maxNumStrLenStrStr\
    \ - maxNumLenStrStrStr\n            val resultStrLenStrStrStrStr = resultStrLenStrStrStr\
    \ + maxNumStrLenStrStrStr\n            val maxNumStrLenStrStrStrStr = maxNumStrLenStrStrStr\
    \ - maxNumLenStrStrStrStr\n            val resultStrLenStrStrStrStrStr = resultStrLenStrStrStrStr\
    \ + maxNumStrLenStrStrStrStr\n            val maxNumStrLenStrStrStrStrStr = maxNumStrLenStrStrStrStr\
    \ - maxNumLenStrStrStrStrStrStr\n            val resultStrLenStrStrStrStrStrStr\
    \ = resultStrLenStrStrStrStrStrStr + maxNumStrLenStrStrStrStrStrStr\n        \
    \    val maxNumStrLenStrStrStrStrStrStrStr = maxNumStrLenStrStrStrStrStrStrStr\
    \ - maxNumLenStrStrStrStrStrStrStrStr\n            val resultStrLenStrStrStrStrStrStrStrStr\
    \ = resultStrLenStrStrStrStrStrStrStrStr + maxNumStrLenStrStrStrStrStrStrStrStrStr\n\
    \            val maxNumStrLenStrStrStrStrStrStrStrStrStrStr = maxNumStrLenStrStrStrStrStrStrStrStrStrStrStrStr\
    \ - maxNumLenStrStrStrStrStrStrStrStrStrStrStr", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxLen = len - k\n        val maxLen2\
    \ = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen\
    \ / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n  \
    \      val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val\
    \ maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11\
    \ = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen\
    \ / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n\
    \        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n    \
    \    val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val\
    \ maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22\
    \ = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen\
    \ / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n\
    \        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n    \
    \    val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val\
    \ maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33\
    \ = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen\
    \ / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n\
    \        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n    \
    \    val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val\
    \ maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44\
    \ = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen\
    \ / 46\n        val maxLen47 = max", "        val arr = arr.toList\n        val\
    \ len = arr.length\n        val max = (len - k).toInt\n        val sum = 0\n \
    \       var i = 0\n        while (i < max) {\n            val cur = arr(i)\n \
    \           val next = (i + 1) < max ? arr(i + 1) : 0\n            val curDigit\
    \ = cur.toString.toInt\n            val nextDigit = next.toString.toInt\n    \
    \        val curSum = curDigit + nextDigit\n            val nextSum = nextDigit\
    \ + curDigit\n            if (curSum > nextSum) {\n                sum += curSum\n\
    \                i += 2\n            } else {\n                sum += nextSum\n\
    \                i += 1\n            }\n        }\n        sum", "        val\
    \ arr = arr.toList\n        val len = arr.length\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxTwoDigit = arr.take(k).map(_.toString.length).max\n        val\
    \ maxTwoDigitIndex = arr.take(k).map(_.toString.length).indexWhere(_ == maxTwoDigit)\n\
    \        val maxTwoDigitSum = arr.take(k).map(_.toString).sum\n        val maxTwoDigitSumIndex\
    \ = arr.take(k).map(_.toString).indexWhere(_ == maxTwoDigitSum)\n        val maxTwoDigitSumIndex2\
    \ = arr.take(k).map(_.toString).indexWhere(_ == maxTwoDigitSumIndex + 1)\n   \
    \     val maxTwoDigitSumIndex3 = arr.take(k).map(_.toString).indexWhere(_ == maxTwoDigitSumIndex\
    \ + 2)\n        val maxTwoDigitSumIndex4 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 3)\n        val maxTwoDigitSumIndex5 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 4)\n        val maxTwoDigitSumIndex6 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 5)\n        val maxTwoDigitSumIndex7 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 6)\n        val maxTwoDigitSumIndex8 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 7)\n        val maxTwoDigitSumIndex9 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 8)\n        val maxTwoDigitSumIndex10 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 9)\n        val maxTwoDigitSumIndex11 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 10)\n        val maxTwoDigitSumIndex12 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 11)\n        val maxTwoDigitSumIndex13 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 12)\n        val maxTwoDigitSumIndex14 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 13)\n        val maxTwoDigitSumIndex15 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 14)\n        val maxTwoDigitSumIndex", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        var sum = 0\n        for (i\
    \ <- 0 until arr.length) {\n            sum += arr(i)\n            if (sum >=\
    \ 10) {\n                sum += arr(i + k)\n            }\n            if (sum\
    \ >= 10) {\n                result.add(sum)\n                sum = 0\n       \
    \     }\n        }\n        if (sum > 0) {\n            result.add(sum)\n    \
    \    }\n        result.sum", "        val arr = arr.toList\n        val len =\
    \ arr.length\n        val maxLen = len - k\n        val maxSum = arr(k).toLong\
    \ + arr(maxLen).toLong\n        val maxSum2 = arr(k).toLong + arr(maxLen + 1).toLong\n\
    \        val maxSum3 = arr(k).toLong + arr(maxLen + 2).toLong\n        val maxSum4\
    \ = arr(k).toLong + arr(maxLen + 3).toLong\n        val maxSum5 = arr(k).toLong\
    \ + arr(maxLen + 4).toLong\n        val maxSum6 = arr(k).toLong + arr(maxLen +\
    \ 5).toLong\n        val maxSum7 = arr(k).toLong + arr(maxLen + 6).toLong\n  \
    \      val maxSum8 = arr(k).toLong + arr(maxLen + 7).toLong\n        val maxSum9\
    \ = arr(k).toLong + arr(maxLen + 8).toLong\n        val maxSum10 = arr(k).toLong\
    \ + arr(maxLen + 9).toLong\n        val maxSum11 = arr(k).toLong + arr(maxLen\
    \ + 10).toLong\n        val maxSum12 = arr(k).toLong + arr(maxLen + 11).toLong\n\
    \        val maxSum13 = arr(k).toLong + arr(maxLen + 12).toLong\n        val maxSum14\
    \ = arr(k).toLong + arr(maxLen + 13).toLong\n        val maxSum15 = arr(k).toLong\
    \ + arr(maxLen + 14).toLong\n        val maxSum16 = arr(k).toLong + arr(maxLen\
    \ + 15).toLong\n        val maxSum17 = arr(k).toLong + arr(maxLen + 16).toLong\n\
    \        val maxSum18 = arr(k).toLong + arr(maxLen + 17).toLong\n        val maxSum19\
    \ = arr(k).toLong + arr(maxLen + 18).toLong\n        val maxSum20 = arr(k).toLong\
    \ + arr(maxLen + 19).toLong\n        val maxSum21 = arr(k).toLong + arr(maxLen\
    \ + 20).toLong\n        val maxSum22 = arr(k).toLong + arr(maxLen + 21).toLong\n\
    \        val maxSum23 = arr(k).toLong + arr(maxLen + 22).toLong\n        val maxSum24\
    \ = arr(k).toLong + arr(maxLen + 23).toLong\n        val maxSum25 = arr(k).toLong\
    \ + arr(maxLen + 24).toLong\n        val maxSum26 = ", "        val m = arr.size\n\
    \        val n = k\n        val result = new mutable.HashMap[Long, Long]()\n \
    \       val max = new mutable.HashMap[Long, Long]()\n        val min = new mutable.HashMap[Long,\
    \ Long]()\n        val max2 = new mutable.HashMap[Long, Long]()\n        val min2\
    \ = new mutable.HashMap[Long, Long]()\n        val max3 = new mutable.HashMap[Long,\
    \ Long]()\n        val min3 = new mutable.HashMap[Long, Long]()\n        val max4\
    \ = new mutable.HashMap[Long, Long]()\n        val min4 = new mutable.HashMap[Long,\
    \ Long]()\n        val max5 = new mutable.HashMap[Long, Long]()\n        val min5\
    \ = new mutable.HashMap[Long, Long]()\n        val max6 = new mutable.HashMap[Long,\
    \ Long]()\n        val min6 = new mutable.HashMap[Long, Long]()\n        val max7\
    \ = new mutable.HashMap[Long, Long]()\n        val min7 = new mutable.HashMap[Long,\
    \ Long]()\n        val max8 = new mutable.HashMap[Long, Long]()\n        val min8\
    \ = new mutable.HashMap[Long, Long]()\n        val max9 = new mutable.HashMap[Long,\
    \ Long]()\n        val min9 = new mutable.HashMap[Long, Long]()\n        val max10\
    \ = new mutable.HashMap[Long, Long]()\n        val min10 = new mutable.HashMap[Long,\
    \ Long]()\n        val max11 = new mutable.HashMap[Long, Long]()\n        val\
    \ min11 = new mutable.HashMap[Long, Long]()\n        val max12 = new mutable.HashMap[Long,\
    \ Long]()\n        val min12 = new mutable.HashMap[Long, Long]()\n        val\
    \ max13 = new mutable.HashMap[Long, Long]()\n        val min13 = new mutable.HashMap[Long,\
    \ Long]()\n        val max14 = new mutable.HashMap[Long, Long]()\n        val\
    \ min14 = new mutable.HashMap[Long, Long]()\n        val max15 = new mutable.HashMap[Long,\
    \ Long]()\n        val min15 = new mutable.HashMap[Long, Long]()\n        val\
    \ max16 = new mutable.HashMap[Long, Long]()\n        val min16 = new mutable.HashMap[Long,\
    \ Long]()\n        val max17 = new mutable.HashMap[", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val sum = 0\n        val twoDigits = arr.take(k).map(_.toString.length).max\n\
    \        val twoDigitsSum = arr.take(twoDigits).map(_.toString).sum\n        val\
    \ twoDigitsSum2 = arr.take(twoDigits + 1).map(_.toString).sum\n        val twoDigitsSum3\
    \ = arr.take(twoDigits + 2).map(_.toString).sum\n        val twoDigitsSum4 = arr.take(twoDigits\
    \ + 3).map(_.toString).sum\n        val twoDigitsSum5 = arr.take(twoDigits + 4).map(_.toString).sum\n\
    \        val twoDigitsSum6 = arr.take(twoDigits + 5).map(_.toString).sum\n   \
    \     val twoDigitsSum7 = arr.take(twoDigits + 6).map(_.toString).sum\n      \
    \  val twoDigitsSum8 = arr.take(twoDigits + 7).map(_.toString).sum\n        val\
    \ twoDigitsSum9 = arr.take(twoDigits + 8).map(_.toString).sum\n        val twoDigitsSum10\
    \ = arr.take(twoDigits + 9).map(_.toString).sum\n        val twoDigitsSum11 =\
    \ arr.take(twoDigits + 10).map(_.toString).sum\n        val twoDigitsSum12 = arr.take(twoDigits\
    \ + 11).map(_.toString).sum\n        val twoDigitsSum13 = arr.take(twoDigits +\
    \ 12).map(_.toString).sum\n        val twoDigitsSum14 = arr.take(twoDigits + 13).map(_.toString).sum\n\
    \        val twoDigitsSum15 = arr.take(twoDigits + 14).map(_.toString).sum\n \
    \       val twoDigitsSum16 = arr.take(twoDigits + 15).map(_.toString).sum\n  \
    \      val twoDigitsSum17 = arr.take(twoDigits + 16).map(_.toString).sum\n   \
    \     val twoDigitsSum18 = arr.take(twoDigits + 17).map(_.toString).sum\n    \
    \    val twoDigitsSum19 = arr.take(twoDigits + 18).map(_.toString).sum\n     \
    \   val twoDigitsSum20 = arr.take(twoDigits + 19).map(_.toString).sum\n      \
    \  val twoDigitsSum21 = arr.take(twoDigits + 20).map(_.toString).sum\n       \
    \ val twoDigitsSum22 = arr.take(two", "        val arr = arr.toList\n        val\
    \ len = arr.size\n        val maxLen = arr.take(k).size\n        val maxLen2 =\
    \ maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen /\
    \ 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n    \
    \    val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9\
    \ = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen\
    \ / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n\
    \        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n    \
    \    val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val\
    \ maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20\
    \ = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen\
    \ / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n\
    \        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n    \
    \    val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val\
    \ maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31\
    \ = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen\
    \ / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n\
    \        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n    \
    \    val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val\
    \ maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42\
    \ = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen\
    \ / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n\
    \        val maxLen", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val maxLen = len - k\n        val maxSum = arr.take(k).foldLeft(0l) {\
    \ (sum, elem) => sum + elem }\n        val maxSum2 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum3 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum4 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum5 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum6 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum7 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum8 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum9 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum10 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum11 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum12 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum13 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum14 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum15 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum16 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum17 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum18 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        ", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        while (i < arr.length) {\n  \
    \          if (sum + arr(i) < 10) {\n                sum += arr(i)\n         \
    \       i += 1\n            } else {\n                result.add(sum)\n      \
    \          sum = 0\n                i += 1\n            }\n        }\n       \
    \ result.add(sum)\n        result.take(k).sum", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxLen = len - k\n        val maxLen2\
    \ = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen\
    \ / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n  \
    \      val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val\
    \ maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11\
    \ = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen\
    \ / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n\
    \        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n    \
    \    val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val\
    \ maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22\
    \ = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen\
    \ / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n\
    \        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n    \
    \    val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val\
    \ maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33\
    \ = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen\
    \ / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n\
    \        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n    \
    \    val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val\
    \ maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44\
    \ = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen\
    \ / 46\n        val maxLen47 = max", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        while (i < k) {\n           \
    \ sum += arr(i)\n            i += 1\n        }\n        while (i < arr.length)\
    \ {\n            sum += arr(i)\n            i += 1\n        }\n        result\
    \ += sum\n        result.sum", "        val arr = arr.toList\n        val len\
    \ = arr.length\n        val maxTwoDigit = arr.take(k).maxBy(_.toString.length)\n\
    \        val maxTwoDigitIndex = arr.indexOf(maxTwoDigit)\n        val maxTwoDigitSum\
    \ = maxTwoDigitIndex + k\n        val maxTwoDigitSumIndex = arr.indexOf(maxTwoDigitSum)\n\
    \        val maxTwoDigitSumSum = maxTwoDigitSumIndex + k\n        val maxTwoDigitSumSumIndex\
    \ = arr.indexOf(maxTwoDigitSumSum)\n        val maxTwoDigitSumSumSum = maxTwoDigitSumSumIndex\
    \ + k\n        val maxTwoDigitSumSumSumIndex = arr.indexOf(maxTwoDigitSumSumSum)\n\
    \        val maxTwoDigitSumSumSumSum = maxTwoDigitSumSumSumIndex + k\n       \
    \ val maxTwoDigitSumSumSumSumIndex = arr.indexOf(maxTwoDigitSumSumSumSum)\n  \
    \      val maxTwoDigitSumSumSumSumSum = maxTwoDigitSumSumSumSumIndex + k\n   \
    \     val maxTwoDigitSumSumSumSumSumIndex = arr.indexOf(maxTwoDigitSumSumSumSumSum)\n\
    \        val maxTwoDigitSumSumSumSumSumSum = maxTwoDigitSumSumSumSumSumIndex +\
    \ k\n        val maxTwoDigitSumSumSumSumSumSumIndex = arr.indexOf(maxTwoDigitSumSumSumSumSumSumSum)\n\
    \        val maxTwoDigitSumSumSumSumSumSumSum = maxTwoDigitSumSumSumSumSumSumIndex\
    \ + k\n        val maxTwoDigitSumSumSumSumSumSumSum = maxTwoDigitSumSumSumSumSumSumSumIndex\
    \ + k\n        val maxTwoDigitSumSumSumSumSumSumSumSum = maxTwoDigitSumSumSumSumSumSumSumSumIndex\
    \ + k\n        val maxTwoDigitSumSumSumSumSumSumSumSumSum = maxTwoDigitSumSumSumSumSumSumSumSumSumIndex\
    \ + k\n        val maxTwoDigitSumSumSumSumSumSumSumSumSumSum = maxTwoDigitSumSumSumSumSumSumSumSumSumSumIndex\
    \ + k\n        val maxTwoDigitSumSumSumSumSumSumSumSumSumSum = maxTwoDigitSumSumSumSumSumSumSumSumSumSumIndex\
    \ + k\n        val maxTwoDigitSumSumSumSumSumSumSumSumSumSumSum = maxTwoDigitSumSumSumSumSumSumSumSumSumSumIndex\
    \ + k\n        val maxTwoDigitSumSumSumSumSumSumSumSumSumSumSum = maxTwoDigitSum",
  "        val result = new mutable.ListBuffer[Long]()\n        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxLen = len - k\n        val maxLen2\
    \ = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen\
    \ / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n  \
    \      val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val\
    \ maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11\
    \ = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen\
    \ / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n\
    \        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n    \
    \    val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val\
    \ maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22\
    \ = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen\
    \ / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n\
    \        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n    \
    \    val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val\
    \ maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33\
    \ = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen\
    \ / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n\
    \        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n    \
    \    val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val\
    \ maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44\
    \ = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen4", " \
    \       val arr = arr.toList\n        val len = arr.size\n        val maxLen =\
    \ len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n\
    \        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val\
    \ maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8\
    \ = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen\
    \ / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n\
    \        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n    \
    \    val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val\
    \ maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19\
    \ = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen\
    \ / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n\
    \        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n    \
    \    val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val\
    \ maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30\
    \ = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen\
    \ / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n\
    \        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n    \
    \    val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val\
    \ maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41\
    \ = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen\
    \ / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n\
    \        val maxLen46 = maxLen / 46\n        val maxLen47 = max", "        val\
    \ arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n\
    \        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val\
    \ maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6\
    \ = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen\
    \ / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n\
    \        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n    \
    \    val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val\
    \ maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17\
    \ = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen\
    \ / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n\
    \        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n    \
    \    val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val\
    \ maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28\
    \ = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen\
    \ / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n\
    \        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n    \
    \    val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val\
    \ maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39\
    \ = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen\
    \ / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n\
    \        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n    \
    \    val maxLen46 = maxLen / 46\n        val maxLen47 = max", "        val arr\
    \ = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n \
    \       val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val\
    \ maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6\
    \ = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen\
    \ / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n\
    \        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n    \
    \    val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val\
    \ maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17\
    \ = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen\
    \ / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n\
    \        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n    \
    \    val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val\
    \ maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28\
    \ = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen\
    \ / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n\
    \        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n    \
    \    val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val\
    \ maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39\
    \ = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen\
    \ / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n\
    \        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n    \
    \    val maxLen46 = maxLen / 46\n        val maxLen47 = max", "        val arr\
    \ = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n \
    \       val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val\
    \ maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6\
    \ = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen\
    \ / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n\
    \        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n    \
    \    val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val\
    \ maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17\
    \ = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen\
    \ / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n\
    \        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n    \
    \    val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val\
    \ maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28\
    \ = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen\
    \ / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n\
    \        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n    \
    \    val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val\
    \ maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39\
    \ = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen\
    \ / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n\
    \        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n    \
    \    val maxLen46 = maxLen / 46\n        val maxLen47 = max", "        val arr\
    \ = arr.toList\n        val len = arr.size\n        val max = (len - k).toInt\n\
    \        val sum = 0\n        for(i <- 0 until max){\n            val curr = arr(i).toInt\n\
    \            val next = (i + 1)%len\n            val nextCurr = arr(next).toInt\n\
    \            val nextNext = (next + 1)%len\n            val sum = sum + curr +\
    \ nextCurr + nextNext\n        }\n        sum", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val len = arr.length\n        val maxTwoDigit = arr.take(k).max\n   \
    \     val maxTwoDigitIndex = arr.lastIndexWhere(x => x > maxTwoDigit)\n      \
    \  val maxTwoDigitIndexInRange = maxTwoDigitIndex - k\n        val maxTwoDigitIndexInRangeInRange\
    \ = maxTwoDigitIndexInRange / 2\n        val maxTwoDigitIndexInRangeInRangeInRange\
    \ = maxTwoDigitIndexInRangeInRange / 2\n        val maxTwoDigitIndexInRangeInRangeInRange\
    \ = maxTwoDigitIndexInRangeInRange / 2\n        val maxTwoDigitIndexInRangeInRangeInRange\
    \ = maxTwoDigitIndexInRangeInRange / 2\n        val maxTwoDigitIndexInRangeInRangeInRange\
    \ = maxTwoDigitIndexInRangeInRange / 2\n        val maxTwoDigitIndexInRangeInRangeInRange\
    \ = maxTwoDigitIndexInRangeInRange / 2\n        val maxTwoDigitIndexInRangeInRangeInRange\
    \ = maxTwoDigitIndexInRangeInRange / 2\n        val maxTwoDigitIndexInRangeInRangeInRange\
    \ = maxTwoDigitIndexInRangeInRange / 2\n        val maxTwoDigitIndexInRangeInRangeInRange\
    \ = maxTwoDigitIndexInRangeInRange / 2\n        val maxTwoDigitIndexInRangeInRangeInRange\
    \ = maxTwoDigitIndexInRangeInRange / 2\n        val maxTwoDigitIndexInRangeInRangeInRange\
    \ = maxTwoDigitIndexInRangeInRange / 2\n        val maxTwoDigitIndexInRangeInRangeInRange\
    \ = maxTwoDigitIndexInRangeInRange / 2\n        val maxTwoDigitIndexInRangeInRangeInRange\
    \ = maxTwoDigitIndexInRangeInRange / 2\n        val maxTwoDigitIndexInRangeInRangeInRange\
    \ = maxTwoDigitIndexInRangeInRange / 2\n        val maxTwoDigitIndexInRangeInRangeInRange\
    \ = maxTwoDigitIndexInRangeInRange / 2\n        val maxTwoDigitIndexInRangeInRangeInRange\
    \ = maxTwoDigitIndexInRangeInRange / 2\n        val maxTwoDigitIndexInRangeInRangeInRange\
    \ = maxTwoDigitIndexInRangeInRange / 2\n        val maxTwoDigitIndexInRangeInRangeInRange\
    \ = maxTwoDigitIndexInRangeInRange / 2\n        val maxTwoDigitIndexInRangeInRangeInRange\
    \ = maxTwoDigitIndexInRange", "        val arr = arr.toList\n        val len =\
    \ arr.size\n        val maxLen = len - k\n        val maxSum = arr.take(maxLen).sum\n\
    \        val minSum = arr.drop(maxLen).sum\n        val sum = maxSum + minSum\n\
    \        return sum", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val maxLen = len - k\n        val maxDigit = arr.take(maxLen).map(_.toString.length).max\n\
    \        val maxDigits = arr.take(maxLen).map(_.toString).map(_.length).max\n\
    \        val maxDigitSum = arr.take(maxLen).map(_.toString).map(_.sum).max\n \
    \       val maxDigitSums = arr.take(maxLen).map(_.toString).map(_.sum).map(_.length).max\n\
    \        val maxDigitSumsOfDigits = arr.take(maxLen).map(_.toString).map(_.sum).map(_.map(_.length).max).max\n\
    \        val maxDigitSumsOfDigitsOfDigits = arr.take(maxLen).map(_.toString).map(_.sum).map(_.map(_.map(_.length).max)).max\n\
    \        val maxDigitSumsOfDigitsOfDigitsOfDigits = arr.take(maxLen).map(_.toString).map(_.sum).map(_.map(_.map(_.map(_.length).max)).max).max\n\
    \        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigits = arr.take(maxLen).map(_.toString).map(_.sum).map(_.map(_.map(_.map(_.map(_.length).max)).max)).max).max\n\
    \        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = arr.take(maxLen).map(_.toString).map(_.sum).map(_.map(_.map(_.map(_.map(_.map(_.length).max)).max)).max).max).max\n\
    \        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = arr.take(maxLen).map(_.toString).map(_.sum).map(_.map(_.map(_.map(_.map(_.map(_.map(_.length).max)).max)).max)).max).max).max\n\
    \        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits\
    \ = arr.take(maxLen).map(_.toString).map(_.sum).map(_.map(_.map(_.map(_.map(_.map(_.map(_.map(_.length).max)).max)).max)).max).max).max).max\n\
    \        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits\
    \ = arr.take(maxLen).map(", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val maxLen = arr.take(k).map(_.toString.length).max\n        val maxLen2\
    \ = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen\
    \ / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n  \
    \      val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val\
    \ maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11\
    \ = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen\
    \ / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n\
    \        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n    \
    \    val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val\
    \ maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22\
    \ = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen\
    \ / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n\
    \        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n    \
    \    val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val\
    \ maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33\
    \ = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen\
    \ / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n\
    \        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n    \
    \    val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val\
    \ maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44\
    \ = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen\
    \ / ", "        val result = new mutable.HashMap[Long, Long]()\n        val arr\
    \ = arr.toList\n        val len = arr.length\n        val maxNum = arr.take(k).max\n\
    \        val maxNumLen = maxNum.length\n        val maxNumNum = maxNum.toLong\n\
    \        val maxNumNumLen = maxNumNum.length\n        var i = 0\n        while\
    \ (i < len) {\n            val curNum = arr(i)\n            val curNumLen = curNum.length\n\
    \            val curNumNum = curNum.toLong\n            val curNumNumLen = curNumNum.length\n\
    \            if (curNumLen <= maxNumLen && curNumNum <= maxNumNum) {\n       \
    \         val key = curNumNum\n                val value = curNum\n          \
    \      if (result.contains(key)) {\n                    result(key) += value\n\
    \                } else {\n                    result.put(key, value)\n      \
    \          }\n            }\n            i += 1\n        }\n        val res =\
    \ result.toList.maxBy(_._1)._2\n        res", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxLen = arr.take(k).map(_.toString.length).max\n\
    \        val result = arr.take(k).foldLeft(0l) { (sum, el) => sum + el.toString.substring(0,maxLen)\
    \ }\n        result", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val maxLen = arr.take(k).length\n        val sum = 0\n        for(i <-\
    \ 0 until k) {\n            val cur = arr.take(i).sum\n            val curLen\
    \ = cur.length\n            val curMaxLen = cur.take(maxLen).length\n        \
    \    val curSum = cur.sum\n            val curSumLen = curSum.length\n       \
    \     val curMaxSum = cur.take(maxLen).sum\n            val curMaxSumLen = curMaxSum.length\n\
    \            val curSumLenDiff = curSumLen - curMaxSumLen\n            val curMaxSumLenDiff\
    \ = curMaxSumLen - curSumLen\n            val curSumDiff = curSum - curMaxSum\n\
    \            val curMaxSumDiff = curMaxSum - curSum\n            val curMaxSumDiffDiff\
    \ = curMaxSumDiff - curSumDiff\n            val curMaxSumDiffDiffDiff = curMaxSumDiffDiff\
    \ - curMaxSumDiff\n            val curMaxSumDiffDiffDiff = curMaxSumDiffDiff -\
    \ curMaxSumDiff\n            val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n\
    \            val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n \
    \           val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n  \
    \          val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n   \
    \         val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n    \
    \        val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n     \
    \       val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n      \
    \      val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n       \
    \     val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n        \
    \    val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n         \
    \   val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n          \
    \  val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n           \
    \ val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n            val\
    \ curMaxSum", "        val arr = arr.toList\n        val len = arr.length\n  \
    \      val max = (len - k).toInt\n        val sum = 0\n        for(i <- 0 until\
    \ max){\n            val cur = arr(i).toInt\n            val next = arr(i+k).toInt\n\
    \            sum += cur + next\n        }\n        sum", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val max = (len / 2).toInt\n        val\
    \ sum = 0\n        val arr = arr.drop(max).take(max).toList\n        arr.foreach(x\
    \ => sum += x)\n        sum", "        val arr = arr.toList\n        val len =\
    \ arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n\
    \        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val\
    \ maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7\
    \ = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen\
    \ / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n\
    \        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n    \
    \    val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val\
    \ maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18\
    \ = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen\
    \ / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n\
    \        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n    \
    \    val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val\
    \ maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29\
    \ = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen\
    \ / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n\
    \        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n    \
    \    val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val\
    \ maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40\
    \ = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen\
    \ / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n\
    \        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n    \
    \    val maxLen47 = max", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val res = arr.take(k).foldLeft(0l) { (sum, el) => sum + el % 10 }\n \
    \       val sum = (arr.take(k).sum % 10).toLong\n        res + sum", "       \
    \ val result = new mutable.ListBuffer[Long]()\n        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxLen = len - k\n        val maxLen2\
    \ = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen\
    \ / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n  \
    \      val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val\
    \ maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11\
    \ = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen\
    \ / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n\
    \        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n    \
    \    val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val\
    \ maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22\
    \ = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen\
    \ / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n\
    \        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n    \
    \    val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val\
    \ maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33\
    \ = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen\
    \ / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n\
    \        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n    \
    \    val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val\
    \ maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44\
    \ = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen4", " \
    \       val arr = arr.toList\n        val len = arr.size\n        val maxTwoDigits\
    \ = arr.take(k).map(_.toString.length).max\n        val result = arr.take(k).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val twoDigits = arr.take(k).map(_.toString.substring(0,maxTwoDigits)).sum\n\
    \        result + twoDigits", "        val m = arr.size\n        val n = k\n \
    \       val result = new mutable.ListBuffer[Long]()\n        val max = (m / n).toInt\n\
    \        val min = (m / max).toInt\n        val max2 = max / 2\n        val min2\
    \ = min / 2\n        val max3 = max2 / 3\n        val min3 = min2 / 3\n      \
    \  val max4 = max3 / 4\n        val min4 = min3 / 4\n        val max5 = max4 /\
    \ 5\n        val min5 = min4 / 5\n        val max6 = max5 / 6\n        val min6\
    \ = min5 / 6\n        val max7 = max6 / 7\n        val min7 = min6 / 7\n     \
    \   val max8 = max7 / 8\n        val min8 = min7 / 8\n        val max9 = max8\
    \ / 9\n        val min9 = min8 / 9\n        val max10 = max9 / 10\n        val\
    \ min10 = min9 / 10\n        val max11 = max10 / 11\n        val min11 = min10\
    \ / 11\n        val max12 = max11 / 12\n        val min12 = min11 / 12\n     \
    \   val max13 = max12 / 13\n        val min13 = min12 / 13\n        val max14\
    \ = max13 / 14\n        val min14 = min13 / 14\n        val max15 = max14 / 15\n\
    \        val min15 = min14 / 15\n        val max16 = max15 / 16\n        val min16\
    \ = min15 / 16\n        val max17 = max16 / 17\n        val min17 = min16 / 17\n\
    \        val max18 = max17 / 18\n        val min18 = min17 / 18\n        val max19\
    \ = max18 / 19\n        val min19 = min18 / 19\n        val max20 = max19 / 20\n\
    \        val min20 = min19 / 20\n        val max21 = max20 / 21\n        val min21\
    \ = min20 / 21\n        val max22 = max21 / 22\n        val min22 = min21 / 22\n\
    \        val max23 = max22 / 23\n        val min23 = min22 / 23\n        val max24\
    \ = max23 / 24\n        val min24 = min23 / 24\n        val max25 = max24 / 25\n\
    \        val min25 = min24 / 25\n        val max26 = max25 / 26\n        val min26",
  "        val arr = arr.toList\n        val len = arr.length\n        val max = (len\
    \ / 2).toInt\n        val sum = 0\n        val maxSum = 0\n        val maxSumIndex\
    \ = 0\n        val maxSumDigit = 0\n        val maxSumDigitIndex = 0\n       \
    \ val maxSumDigit2 = 0\n        val maxSumDigit2Index = 0\n        val maxSumDigit3\
    \ = 0\n        val maxSumDigit3Index = 0\n        val maxSumDigit4 = 0\n     \
    \   val maxSumDigit4Index = 0\n        val maxSumDigit5 = 0\n        val maxSumDigit5Index\
    \ = 0\n        val maxSumDigit6 = 0\n        val maxSumDigit6Index = 0\n     \
    \   val maxSumDigit7 = 0\n        val maxSumDigit7Index = 0\n        val maxSumDigit8\
    \ = 0\n        val maxSumDigit8Index = 0\n        val maxSumDigit9 = 0\n     \
    \   val maxSumDigit9Index = 0\n        val maxSumDigit10 = 0\n        val maxSumDigit10Index\
    \ = 0\n        val maxSumDigit11 = 0\n        val maxSumDigit11Index = 0\n   \
    \     val maxSumDigit12 = 0\n        val maxSumDigit12Index = 0\n        val maxSumDigit13\
    \ = 0\n        val maxSumDigit13Index = 0\n        val maxSumDigit14 = 0\n   \
    \     val maxSumDigit14Index = 0\n        val maxSumDigit15 = 0\n        val maxSumDigit15Index\
    \ = 0\n        val maxSumDigit16 = 0\n        val maxSumDigit16Index = 0\n   \
    \     val maxSumDigit17 = 0\n        val maxSumDigit17Index = 0\n        val maxSumDigit18\
    \ = 0\n        val maxSumDigit18Index = 0\n        val maxSumDigit19 = 0\n   \
    \     val maxSumDigit19Index = 0\n        val maxSumDigit20 = 0\n        val maxSumDigit20Index\
    \ = 0\n        val maxSumDigit21 = 0\n        val maxSumDigit21Index = 0\n   \
    \     val maxSumDigit22 = 0\n        val maxSumDigit22Index = 0\n        val maxSumDigit23\
    \ = 0\n        val maxSumDigit23Index = 0\n        val maxSumDigit24 = 0\n   \
    \     val maxSumDigit24Index = 0\n        val maxSumDigit25 = 0\n        val maxSumDigit25Index\
    \ = 0\n        val maxSumDigit26 = 0\n        val maxSumDigit26Index = 0\n   \
    \     val maxSumDigit27 = 0\n        val maxSumDigit27Index = 0\n        val maxSumDigit28\
    \ = 0\n        val maxSumDigit28", "        val arr = arr.toList\n        val\
    \ len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen\
    \ / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n  \
    \      val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val\
    \ maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9\
    \ = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen\
    \ / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n\
    \        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n    \
    \    val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val\
    \ maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20\
    \ = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen\
    \ / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n\
    \        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n    \
    \    val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val\
    \ maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31\
    \ = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen\
    \ / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n\
    \        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n    \
    \    val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val\
    \ maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42\
    \ = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen\
    \ / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n\
    \        val maxLen47 = max", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val arr = arr.toList\n        val len = arr.length\n        val k = k.toInt\n\
    \        val max = (len / 2).toInt\n        val min = (len - k).toInt\n      \
    \  for(i <- 0 until max) {\n            val tempSum = arr(i).toLong + arr(i +\
    \ k).toLong\n            val tempSum2 = arr(i + k).toLong + arr(i + k + min).toLong\n\
    \            val tempSum3 = arr(i + k + min).toLong + arr(i + k + min + k).toLong\n\
    \            val tempSum4 = arr(i + k + min + k).toLong + arr(i + k + min + k\
    \ + min).toLong\n            val tempSum5 = arr(i + k + min + k + min).toLong\
    \ + arr(i + k + min + k + min + k).toLong\n            val tempSum6 = arr(i +\
    \ k + min + k + min + k).toLong + arr(i + k + min + k + min + k + min).toLong\n\
    \            val tempSum7 = arr(i + k + min + k + min + k + min).toLong + arr(i\
    \ + k + min + k + min + k + min + k).toLong\n            val tempSum8 = arr(i\
    \ + k + min + k + min + k + min + k).toLong + arr(i + k + min + k + min + k +\
    \ min + k + min).toLong\n            val tempSum9 = arr(i + k + min + k + min\
    \ + k + min + k + min).toLong + arr(i + k + min + k + min + k + min + k + min\
    \ + k).toLong\n            val tempSum10 = arr(i + k + min + k + min + k + min\
    \ + k + min + k).toLong + arr(i + k + min + k + min + k + min + k + min + k +\
    \ min).toLong\n            val tempSum11 = arr(i + k + min + k + min + k + min\
    \ + k + min + k + min + k).toLong + arr(i + k + min + k + min + k + min + k +\
    \ min + k + min + k + min).toLong\n            val tempSum12 = arr(i + k + min\
    \ + k + min + k + min + k + min + k + min + k + min + k).toLong + arr(i + k",
  "        val arr = arr.toList\n        val len = arr.length\n        val maxLen\
    \ = len - k\n        val maxDigit = arr.take(maxLen).map(_.toString.length).max\n\
    \        val maxSum = arr.take(maxLen).map(_.toString).map(_.toLong).sum\n   \
    \     val maxSumDigit = maxSum.toString.length\n        val maxSumDigit2 = maxSum.toString.length\
    \ * 2\n        val maxSumDigit3 = maxSum.toString.length * 3\n        val maxSumDigit4\
    \ = maxSum.toString.length * 4\n        val maxSumDigit5 = maxSum.toString.length\
    \ * 5\n        val maxSumDigit6 = maxSum.toString.length * 6\n        val maxSumDigit7\
    \ = maxSum.toString.length * 7\n        val maxSumDigit8 = maxSum.toString.length\
    \ * 8\n        val maxSumDigit9 = maxSum.toString.length * 9\n        val maxSumDigit10\
    \ = maxSum.toString.length * 10\n        val maxSumDigit11 = maxSum.toString.length\
    \ * 11\n        val maxSumDigit12 = maxSum.toString.length * 12\n        val maxSumDigit13\
    \ = maxSum.toString.length * 13\n        val maxSumDigit14 = maxSum.toString.length\
    \ * 14\n        val maxSumDigit15 = maxSum.toString.length * 15\n        val maxSumDigit16\
    \ = maxSum.toString.length * 16\n        val maxSumDigit17 = maxSum.toString.length\
    \ * 17\n        val maxSumDigit18 = maxSum.toString.length * 18\n        val maxSumDigit19\
    \ = maxSum.toString.length * 19\n        val maxSumDigit20 = maxSum.toString.length\
    \ * 20\n        val maxSumDigit21 = maxSum.toString.length * 21\n        val maxSumDigit22\
    \ = maxSum.toString.length * 22\n        val maxSumDigit23 = maxSum.toString.length\
    \ * 23\n        val maxSumDigit24 = maxSum.toString.length * 24\n        val maxSumDigit25\
    \ = maxSum.toString.length * 25\n        val maxSumDigit26 = maxSum.toString.length\
    \ * 26\n        val maxSumDigit27 = maxSum.toString.length * 27\n        val maxSumDigit28\
    \ = maxSum.toString.length * 28\n        val maxSumDigit29 = maxSum.toString.length\
    \ * 29\n        val maxSumDigit30 = maxSum.toString.length * 30\n        val maxSumDigit31\
    \ = maxSum.toString.length * 31\n", "        val arr = arr.toList\n        val\
    \ len = arr.length\n        val max = (len / 2).toInt\n        val max2 = max\
    \ / 2\n        val sum = 0\n        val sum2 = sum + arr(max2)\n        val sum3\
    \ = sum2 + arr(max2 + 1)\n        val sum4 = sum3 + arr(max2 + 2)\n        val\
    \ sum5 = sum4 + arr(max2 + 3)\n        val sum6 = sum5 + arr(max2 + 4)\n     \
    \   val sum7 = sum6 + arr(max2 + 5)\n        val sum8 = sum7 + arr(max2 + 6)\n\
    \        val sum9 = sum8 + arr(max2 + 7)\n        val sum10 = sum9 + arr(max2\
    \ + 8)\n        val sum11 = sum10 + arr(max2 + 9)\n        val sum12 = sum11 +\
    \ arr(max2 + 10)\n        val sum13 = sum12 + arr(max2 + 11)\n        val sum14\
    \ = sum13 + arr(max2 + 12)\n        val sum15 = sum14 + arr(max2 + 13)\n     \
    \   val sum16 = sum15 + arr(max2 + 14)\n        val sum17 = sum16 + arr(max2 +\
    \ 15)\n        val sum18 = sum17 + arr(max2 + 16)\n        val sum19 = sum18 +\
    \ arr(max2 + 17)\n        val sum20 = sum19 + arr(max2 + 18)\n        val sum21\
    \ = sum20 + arr(max2 + 19)\n        val sum22 = sum21 + arr(max2 + 20)\n     \
    \   val sum23 = sum22 + arr(max2 + 21)\n        val sum24 = sum23 + arr(max2 +\
    \ 22)\n        sum24", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val max = (len / 2).toInt\n        val sum = 0\n        val arr = arr.take(max)\n\
    \        val arr2 = arr.drop(max)\n        val arr3 = arr2.take(max)\n       \
    \ val arr4 = arr2.drop(max)\n        val arr5 = arr3.take(max)\n        val arr6\
    \ = arr3.drop(max)\n        val arr7 = arr4.take(max)\n        val arr8 = arr4.drop(max)\n\
    \        val arr9 = arr5.take(max)\n        val arr10 = arr5.drop(max)\n     \
    \   val arr11 = arr6.take(max)\n        val arr12 = arr6.drop(max)\n        val\
    \ arr13 = arr7.take(max)\n        val arr14 = arr7.drop(max)\n        val arr15\
    \ = arr8.take(max)\n        val arr16 = arr8.drop(max)\n        val arr17 = arr9.take(max)\n\
    \        val arr18 = arr9.drop(max)\n        val arr19 = arr10.take(max)\n   \
    \     val arr20 = arr10.drop(max)\n        val arr21 = arr11.take(max)\n     \
    \   val arr22 = arr11.drop(max)\n        val arr23 = arr12.take(max)\n       \
    \ val arr24 = arr12.drop(max)\n        val arr25 = arr13.take(max)\n        val\
    \ arr26 = arr13.drop(max)\n        val arr27 = arr14.take(max)\n        val arr28\
    \ = arr14.drop(max)\n        val arr29 = arr15.take(max)\n        val arr30 =\
    \ arr15.drop(max)\n        val arr31 = arr16.take(max)\n        val arr32 = arr16.drop(max)\n\
    \        val arr33 = arr17.take(max)\n        val arr34 = arr17.drop(max)\n  \
    \      val arr35 = arr18.take(max)\n        val arr36 = arr18.drop(max)\n    \
    \    val arr37 = arr19.take(max)\n        val arr38 = arr19.drop(max)\n      \
    \  val arr39 = arr20.take(max)\n        val arr40 = arr20.drop(max)\n        val\
    \ arr41 = arr21.take(max)\n        val arr42 = arr21.drop(max)\n        val arr43\
    \ = arr22.take(max)\n        val arr44 = arr22.drop(max)\n        val arr45 =\
    \ arr23.take(max)\n        val arr4", "        val arr = arr.toList\n        val\
    \ len = arr.length\n        val maxLen = len - k\n        val maxDigit = arr(maxLen)\n\
    \        val sum = 0\n        for(i <- 0 until k){\n            val curDigit =\
    \ arr(i)\n            val nextDigit = arr(i+1)\n            val sum = sum + curDigit\
    \ + nextDigit - maxDigit\n        }\n        sum", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val maxLen = len - k\n        val maxLen2\
    \ = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen\
    \ / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n  \
    \      val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val\
    \ maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11\
    \ = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen\
    \ / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n\
    \        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n    \
    \    val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val\
    \ maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22\
    \ = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen\
    \ / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n\
    \        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n    \
    \    val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val\
    \ maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33\
    \ = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen\
    \ / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n\
    \        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n    \
    \    val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val\
    \ maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44\
    \ = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen\
    \ / 46\n        val maxLen47 = max", "        val arr = arr.toList\n        val\
    \ len = arr.length\n        val max = (len - k).toInt\n        val sum = 0\n \
    \       for(i <- 0 until max){\n            val curr = arr(i).toInt\n        \
    \    val next = (i + 1)%len\n            val nextCurr = arr(next).toInt\n    \
    \        val nextNext = (next + 1)%len\n            val sum = sum + curr + nextCurr\
    \ - nextNext\n        }\n        sum", "        val arr = arr.toList\n       \
    \ val len = arr.size\n        val sum = 0\n        val maxSum = 0\n        val\
    \ maxSumIndex = 0\n        val maxSumDigit = 0\n        val maxSumDigitIndex =\
    \ 0\n        val maxSumDigit2 = 0\n        val maxSumDigit2Index = 0\n       \
    \ val maxSumDigit3 = 0\n        val maxSumDigit3Index = 0\n        val maxSumDigit4\
    \ = 0\n        val maxSumDigit4Index = 0\n        val maxSumDigit5 = 0\n     \
    \   val maxSumDigit5Index = 0\n        val maxSumDigit6 = 0\n        val maxSumDigit6Index\
    \ = 0\n        val maxSumDigit7 = 0\n        val maxSumDigit7Index = 0\n     \
    \   val maxSumDigit8 = 0\n        val maxSumDigit8Index = 0\n        val maxSumDigit9\
    \ = 0\n        val maxSumDigit9Index = 0\n        val maxSumDigit10 = 0\n    \
    \    val maxSumDigit10Index = 0\n        val maxSumDigit11 = 0\n        val maxSumDigit11Index\
    \ = 0\n        val maxSumDigit12 = 0\n        val maxSumDigit12Index = 0\n   \
    \     val maxSumDigit13 = 0\n        val maxSumDigit13Index = 0\n        val maxSumDigit14\
    \ = 0\n        val maxSumDigit14Index = 0\n        val maxSumDigit15 = 0\n   \
    \     val maxSumDigit15Index = 0\n        val maxSumDigit16 = 0\n        val maxSumDigit16Index\
    \ = 0\n        val maxSumDigit17 = 0\n        val maxSumDigit17Index = 0\n   \
    \     val maxSumDigit18 = 0\n        val maxSumDigit18Index = 0\n        val maxSumDigit19\
    \ = 0\n        val maxSumDigit19Index = 0\n        val maxSumDigit20 = 0\n   \
    \     val maxSumDigit20Index = 0\n        val maxSumDigit21 = 0\n        val maxSumDigit21Index\
    \ = 0\n        val maxSumDigit22 = 0\n        val maxSumDigit22Index = 0\n   \
    \     val maxSumDigit23 = 0\n        val maxSumDigit23Index = 0\n        val maxSumDigit24\
    \ = 0\n        val maxSumDigit24Index = 0\n        val maxSumDigit25 = 0\n   \
    \     val maxSumDigit25Index = 0\n        val maxSumDigit26 = 0\n        val maxSumDigit26Index\
    \ = 0\n        val maxSumDigit27 = 0\n        val maxSumDigit27Index = 0\n   \
    \     val maxSumDigit28 = 0\n        val maxSumDigit28Index = 0\n        val maxSumDigit29\
    \ = 0", "        val result = new mutable.ListBuffer[Long]()\n        var sum\
    \ = 0\n        var i = 0\n        while (i < arr.length) {\n            if (sum\
    \ + arr(i) <= k) {\n                sum += arr(i)\n                i += 1\n  \
    \          } else {\n                sum += arr(i) - k\n                result.add(sum)\n\
    \                sum = 0\n                i += 1\n            }\n        }\n \
    \       if (sum > k) {\n            result.add(sum)\n        }\n        result.sum",
  "        val arr = arr.toList\n        val len = arr.size\n        val maxDigit\
    \ = arr.take(k).map(_.toString.length).max\n        val maxDigit2 = arr.take(k).map(_.toString.length).max\n\
    \        val maxDigit3 = arr.take(k).map(_.toString.length).max\n        val maxDigit4\
    \ = arr.take(k).map(_.toString.length).max\n        val maxDigit5 = arr.take(k).map(_.toString.length).max\n\
    \        val maxDigit6 = arr.take(k).map(_.toString.length).max\n        val maxDigit7\
    \ = arr.take(k).map(_.toString.length).max\n        val maxDigit8 = arr.take(k).map(_.toString.length).max\n\
    \        val maxDigit9 = arr.take(k).map(_.toString.length).max\n        val maxDigit10\
    \ = arr.take(k).map(_.toString.length).max\n        val maxDigit11 = arr.take(k).map(_.toString.length).max\n\
    \        val maxDigit12 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxDigit13 = arr.take(k).map(_.toString.length).max\n        val maxDigit14\
    \ = arr.take(k).map(_.toString.length).max\n        val maxDigit15 = arr.take(k).map(_.toString.length).max\n\
    \        val maxDigit16 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxDigit17 = arr.take(k).map(_.toString.length).max\n        val maxDigit18\
    \ = arr.take(k).map(_.toString.length).max\n        val maxDigit19 = arr.take(k).map(_.toString.length).max\n\
    \        val maxDigit20 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxDigit21 = arr.take(k).map(_.toString.length).max\n        val maxDigit22\
    \ = arr.take(k).map(_.toString.length).max\n        val maxDigit23 = arr.take(k).map(_.toString.length).max\n\
    \        val maxDigit24 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxDigit25 = arr.take(k).map(_.toString.length).max\n        val maxDigit26\
    \ = arr.take(k).map(_.toString.length).max\n        val maxDigit27 = arr.take(k).map(_.toString.length).max\n\
    \        val maxDigit28 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxDigit29 = arr.", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val maxLen = len - k\n        val maxDigits = maxLen / 2\n        val\
    \ maxSum = arr.take(maxDigits).sum\n        val maxSum2 = maxSum * maxSum\n  \
    \      val maxSum3 = maxSum2 * maxSum\n        val maxSum4 = maxSum3 * maxSum\n\
    \        val maxSum5 = maxSum4 * maxSum\n        val maxSum6 = maxSum5 * maxSum\n\
    \        val maxSum7 = maxSum6 * maxSum\n        val maxSum8 = maxSum7 * maxSum\n\
    \        val maxSum9 = maxSum8 * maxSum\n        val maxSum10 = maxSum9 * maxSum\n\
    \        val maxSum11 = maxSum10 * maxSum\n        val maxSum12 = maxSum11 * maxSum\n\
    \        val maxSum13 = maxSum12 * maxSum\n        val maxSum14 = maxSum13 * maxSum\n\
    \        val maxSum15 = maxSum14 * maxSum\n        val maxSum16 = maxSum15 * maxSum\n\
    \        val maxSum17 = maxSum16 * maxSum\n        val maxSum18 = maxSum17 * maxSum\n\
    \        val maxSum19 = maxSum18 * maxSum\n        val maxSum20 = maxSum19 * maxSum\n\
    \        val maxSum21 = maxSum20 * maxSum\n        val maxSum22 = maxSum21 * maxSum\n\
    \        val maxSum23 = maxSum22 * maxSum\n        val maxSum24 = maxSum23 * maxSum\n\
    \        val maxSum25 = maxSum24 * maxSum\n        val maxSum26 = maxSum25 * maxSum\n\
    \        val maxSum27 = maxSum26 * maxSum\n        val maxSum28 = maxSum27 * maxSum\n\
    \        val maxSum29 = maxSum28 * maxSum\n        val maxSum30 = maxSum29 * maxSum\n\
    \        val maxSum31 = maxSum30 * maxSum\n        val maxSum32 = maxSum31 * maxSum\n\
    \        val maxSum33 = maxSum32 * maxSum\n        val maxSum34 = maxSum33 * maxSum\n\
    \        val maxSum35 = maxSum34 * maxSum\n        val maxSum36 = maxSum35 * maxSum\n\
    \        val maxSum37 = maxSum36 * maxSum\n        val maxSum38 = maxSum37 * maxSum\n\
    \        val maxSum39", "        val result = new mutable.HashMap[Long, Long]()\n\
    \        for (i <- 0 until arr.size) {\n            val value = arr(i)\n     \
    \       if (result.contains(value)) {\n                result.put(key, result(value)\
    \ + value)\n            } else {\n                result.put(value, value)\n \
    \           }\n        }\n        val maxValue = result.values.max\n        val\
    \ maxKeys = result.keySet\n        val maxKeysCount = maxKeys.size\n        val\
    \ maxKeysSum = maxKeys.sum\n        val maxKeysSumDigit = maxKeysSum / 10\n  \
    \      val maxKeysSumRemainder = maxKeysSum - maxKeysSumDigit * 10\n        val\
    \ maxKeysSumRemainderDigit = maxKeysSumRemainder / 10\n        val maxKeysSumRemainderRemainder\
    \ = maxKeysSumRemainder % 10\n        val maxKeysSumRemainderRemainderDigit =\
    \ maxKeysSumRemainderRemainder / 10\n        val maxKeysSumRemainderRemainderRemainder\
    \ = maxKeysSumRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder / 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        ", "        val arr =\
    \ arr.toList\n        val len = arr.length\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        while (i < len) {\n         \
    \   val curr = arr(i)\n            if (i % 2 == 0) {\n                sum += curr\n\
    \            }\n            i += 1\n        }\n        val maxSum = sum / 2\n\
    \        var j = 0\n        while (j < k) {\n            val curr = arr(j)\n \
    \           if (curr > maxSum) {\n                result += curr\n           \
    \ }\n            j += 1\n        }\n        val sum = result.toList\n        sum.sum",
  "        val result = new mutable.ListBuffer[Long]()\n        val len = arr.size\n\
    \        val maxDigit = arr.take(k).max\n        val maxDigitCount = arr.count(_\
    \ == maxDigit)\n        val maxDigitCount = maxDigitCount.toLong\n        val\
    \ maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.",
  "        val arr = arr.toList\n        val len = arr.length\n        val maxTwoDigits\
    \ = arr.take(k).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).sum\n\
    \        val maxTwoDigitsSum2 = arr.take(k).map(_.toString.toLong).sum\n     \
    \   val maxTwoDigitsSum3 = arr.take(k).map(_.toString.toLong).sum\n        val\
    \ maxTwoDigitsSum4 = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum5\
    \ = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum6 = arr.take(k).map(_.toString.toLong).sum\n\
    \        val maxTwoDigitsSum7 = arr.take(k).map(_.toString.toLong).sum\n     \
    \   val maxTwoDigitsSum8 = arr.take(k).map(_.toString.toLong).sum\n        val\
    \ maxTwoDigitsSum9 = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum10\
    \ = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum11 = arr.take(k).map(_.toString.toLong).sum\n\
    \        val maxTwoDigitsSum12 = arr.take(k).map(_.toString.toLong).sum\n    \
    \    val maxTwoDigitsSum13 = arr.take(k).map(_.toString.toLong).sum\n        val\
    \ maxTwoDigitsSum14 = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum15\
    \ = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum16 = arr.take(k).map(_.toString.toLong).sum\n\
    \        val maxTwoDigitsSum17 = arr.take(k).map(_.toString.toLong).sum\n    \
    \    val maxTwoDigitsSum18 = arr.take(k).map(_.toString.toLong).sum\n        val\
    \ maxTwoDigitsSum19 = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum20\
    \ = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum21 = arr.take(k).map(_.toString.toLong).sum\n\
    \        val maxTwoDigitsSum22 = arr.take(k).map(_.toString.toLong).sum\n    \
    \    val maxTwoDigitsSum23 = arr.take(k", "        val arr = arr.toList\n    \
    \    val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n      \
    \  var i = 0\n        while (i < k) {\n            sum += arr(i)\n           \
    \ i += 1\n        }\n        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n\
    \        val maxTwoDigitsSum = sum % 10\n        val maxTwoDigitsSumDigit = sum\
    \ / 10\n        val maxTwoDigitsSumDigits = maxTwoDigitsSumDigit % 10\n      \
    \  val maxTwoDigitsSumDigitsDigit = maxTwoDigitsSumDigit / 10\n        val maxTwoDigitsSumDigitsDigits\
    \ = maxTwoDigitsSumDigitsDigit % 10\n        val maxTwoDigitsSumDigitsDigitsDigit\
    \ = maxTwoDigitsSumDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigitDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigitDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigitDigitDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigitsDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigitDigitDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigitsDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigitDigitDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigitsDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigitDigitDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigitsDigitsDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigitDigitDigitDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigitsDigitsDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigitDigitDigitDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigitsDigitsDigitsDigit / 10", "        val arr\
    \ = arr.toList\n        val len = arr.size\n        val sum = 0\n        val maxSum\
    \ = arr.take(k).reduceLeft(_ + _)\n        val maxSum2 = arr.take(k).reduceLeft(_\
    \ + _)\n        val maxSum3 = arr.take(k).reduceLeft(_ + _)\n        val maxSum4\
    \ = arr.take(k).reduceLeft(_ + _)\n        val maxSum5 = arr.take(k).reduceLeft(_\
    \ + _)\n        val maxSum6 = arr.take(k).reduceLeft(_ + _)\n        val maxSum7\
    \ = arr.take(k).reduceLeft(_ + _)\n        val maxSum8 = arr.take(k).reduceLeft(_\
    \ + _)\n        val maxSum9 = arr.take(k).reduceLeft(_ + _)\n        val maxSum10\
    \ = arr.take(k).reduceLeft(_ + _)\n        val maxSum11 = arr.take(k).reduceLeft(_\
    \ + _)\n        val maxSum12 = arr.take(k).reduceLeft(_ + _)\n        val maxSum13\
    \ = arr.take(k).reduceLeft(_ + _)\n        val maxSum14 = arr.take(k).reduceLeft(_\
    \ + _)\n        val maxSum15 = arr.take(k).reduceLeft(_ + _)\n        val maxSum16\
    \ = arr.take(k).reduceLeft(_ + _)\n        val maxSum17 = arr.take(k).reduceLeft(_\
    \ + _)\n        val maxSum18 = arr.take(k).reduceLeft(_ + _)\n        val maxSum19\
    \ = arr.take(k).reduceLeft(_ + _)\n        val maxSum20 = arr.take(k).reduceLeft(_\
    \ + _)\n        val maxSum21 = arr.take(k).reduceLeft(_ + _)\n        val maxSum22\
    \ = arr.take(k).reduceLeft(_ + _)\n        val maxSum23 = arr.take(k).reduceLeft(_\
    \ + _)\n        val maxSum24 = arr.take(k).reduceLeft(_ + _)\n        val maxSum25\
    \ = arr.take(k).reduceLeft(_ + _)\n        val maxSum26 = arr.take(k).reduceLeft(_\
    \ + _)\n        val maxSum27 = arr.take(k).reduceLe", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = (len / 2).toInt\n        val max2 = max / 2\n        val max3\
    \ = max / 3\n        val max4 = max / 4\n        val max5 = max / 5\n        val\
    \ max6 = max / 6\n        val max7 = max / 7\n        val max8 = max / 8\n   \
    \     val max9 = max / 9\n        val max10 = max / 10\n        val max11 = max\
    \ / 11\n        val max12 = max / 12\n        val max13 = max / 13\n        val\
    \ max14 = max / 14\n        val max15 = max / 15\n        val max16 = max / 16\n\
    \        val max17 = max / 17\n        val max18 = max / 18\n        val max19\
    \ = max / 19\n        val max20 = max / 20\n        val max21 = max / 21\n   \
    \     val max22 = max / 22\n        val max23 = max / 23\n        val max24 =\
    \ max / 24\n        val max25 = max / 25\n        val max26 = max / 26\n     \
    \   val max27 = max / 27\n        val max28 = max / 28\n        val max29 = max\
    \ / 29\n        val max30 = max / 30\n        val max31 = max / 31\n        val\
    \ max32 = max / 32\n        val max33 = max / 33\n        val max34 = max / 34\n\
    \        val max35 = max / 35\n        val max36 = max / 36\n        val max37\
    \ = max / 37\n        val max38 = max / 38\n        val max39 = max / 39\n   \
    \     val max40 = max / 40\n        val max41 = max / 41\n        val max42 =\
    \ max / 42\n        val max43 = max / 43\n        val max44 = max / 44\n     \
    \   val max45 = max / 45\n        val max46 = max / 46\n        val max47 = max\
    \ / 47\n        val max48 = max / 48\n        val max49 = max / 49\n        val\
    \ max50 = max / 50\n        val max51 = max / 51\n        val max52 = max / 52\n\
    \        val max53 = max / 53\n        val max54 = max / 54\n        val max55\
    \ = max / 55\n        ", "        var sum = 0\n        var count = 0\n       \
    \ for(i <- 0 until arr.length) {\n            sum += arr(i)\n            count\
    \ += 1\n            if(count > k) {\n                break\n            }\n  \
    \      }\n        return sum", "        val arr = arr.toList\n        val len\
    \ = arr.length\n        val maxLen = len - k\n        val maxDigit = arr(maxLen)\n\
    \        val maxDigits = arr.take(maxLen)\n        val maxDigitSum = maxDigits.sum\n\
    \        val maxDigitSums = maxDigits.tail.sum\n        val maxDigitSumsOfMaxDigits\
    \ = maxDigitSums.tail.tail.sum\n        val maxDigitSumsOfMaxDigitSums = maxDigitSumsOfMaxDigits\
    \ + maxDigitSumsOfMaxDigits\n        val maxDigitSumsOfMaxDigitSumsOfMaxDigits\
    \ = maxDigitSumsOfMaxDigitSums.tail.tail.tail.sum\n        val maxDigitSumsOfMaxDigitSumsOfMaxDigitSums\
    \ = maxDigitSumsOfMaxDigitSumsOfMaxDigits + maxDigitSumsOfMaxDigitSumsOfMaxDigits\n\
    \        val maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits = maxDigitSumsOfMaxDigitSumsOfMaxDigitSums.tail.tail.tail.tail.sum\n\
    \        val maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSums = maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\
    \ + maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\n        val maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\
    \ = maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits + maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\n\
    \        val maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\
    \ = maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\
    \ + maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\n\
    \        val maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\
    \ = maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOf", "        val arr\
    \ = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n \
    \       val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val\
    \ maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6\
    \ = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen\
    \ / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n\
    \        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n    \
    \    val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val\
    \ maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17\
    \ = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen\
    \ / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n\
    \        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n    \
    \    val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val\
    \ maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28\
    \ = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen\
    \ / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n\
    \        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n    \
    \    val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val\
    \ maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39\
    \ = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen\
    \ / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n\
    \        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n    \
    \    val maxLen46 = maxLen / 46\n        val maxLen47 = max", "        var sum\
    \ = 0\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n\
    \            i += 1\n        }\n        sum", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxLength = arr.take(k).length\n        val maxLength2 = maxLength\
    \ * maxLength\n        for(i <- 0 until arr.size) {\n            val curr = arr(i)\n\
    \            if(curr % maxLength == 0 && curr % maxLength2 != 0) {\n         \
    \       result += curr\n            }\n        }\n        result.sum", "     \
    \   val result = new mutable.ListBuffer[Long]()\n        val arr = arr.toList\n\
    \        val len = arr.length\n        val k = k.toInt\n        val maxLen = len\
    \ - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n  \
    \      val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val\
    \ maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8\
    \ = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen\
    \ / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n\
    \        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n    \
    \    val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val\
    \ maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19\
    \ = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen\
    \ / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n\
    \        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n    \
    \    val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val\
    \ maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30\
    \ = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen\
    \ / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n\
    \        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n    \
    \    val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val\
    \ maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41\
    \ = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen\
    \ / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / ",
  "        val arr = arr.toList\n        val len = arr.length\n        val maxLen\
    \ = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen /\
    \ 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n    \
    \    val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8\
    \ = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen\
    \ / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n\
    \        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n    \
    \    val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val\
    \ maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19\
    \ = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen\
    \ / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n\
    \        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n    \
    \    val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val\
    \ maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30\
    \ = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen\
    \ / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n\
    \        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n    \
    \    val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val\
    \ maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41\
    \ = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen\
    \ / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n\
    \        val maxLen46 = maxLen / 46\n        val maxLen47 = max", "        val\
    \ arr = arr.toList\n        val len = arr.length\n        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n\
    \        val maxTwoDigitsSum = arr.take(k).map(_.toString).sum\n        val maxTwoDigitsSum2\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitsSum3 = arr.take(k).map(_.toString).sum\n\
    \        val maxTwoDigitsSum4 = arr.take(k).map(_.toString.length).sum\n     \
    \   val maxTwoDigitsSum5 = arr.take(k).map(_.toString).sum\n        val maxTwoDigitsSum6\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitsSum7 = arr.take(k).map(_.toString).sum\n\
    \        val maxTwoDigitsSum8 = arr.take(k).map(_.toString.length).sum\n     \
    \   val maxTwoDigitsSum9 = arr.take(k).map(_.toString).sum\n        val maxTwoDigitsSum10\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitsSum11 = arr.take(k).map(_.toString).sum\n\
    \        val maxTwoDigitsSum12 = arr.take(k).map(_.toString.length).sum\n    \
    \    val maxTwoDigitsSum13 = arr.take(k).map(_.toString).sum\n        val maxTwoDigitsSum14\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitsSum15 = arr.take(k).map(_.toString).sum\n\
    \        val maxTwoDigitsSum16 = arr.take(k).map(_.toString.length).sum\n    \
    \    val maxTwoDigitsSum17 = arr.take(k).map(_.toString).sum\n        val maxTwoDigitsSum18\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitsSum19 = arr.take(k).map(_.toString).sum\n\
    \        val maxTwoDigitsSum20 = arr.take(k).map(_.toString.length).sum\n    \
    \    val maxTwoDigitsSum21 = arr.take(k).map(_.toString).sum\n        val maxTwoDigitsSum22\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitsSum23 = arr.take(k).map(_.toString).sum\n\
    \        val maxTwoDigitsSum24 = arr.take(k).map(_.toString.length).sum\n    \
    \    val maxTwoDigitsSum25 = arr.take(k).", "        val arr = arr.toList\n  \
    \      val len = arr.length\n        val max = (len / 2).toInt\n        val sum\
    \ = 0\n        val maxSum = 0\n        val maxSumIndex = 0\n        val maxSumDigit\
    \ = 0\n        val maxSumDigitIndex = 0\n        val maxSumDigitDigit = 0\n  \
    \      val maxSumDigitDigitIndex = 0\n        val maxSumDigitDigitDigit = 0\n\
    \        val maxSumDigitDigitDigitIndex = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxLen\
    \ = len - k\n        val maxDigit = arr.max\n        val maxDigitIndex = arr.indexWhere(_\
    \ == maxDigit)\n        val maxDigitIndex2 = maxDigitIndex + 1\n        val maxDigitIndex3\
    \ = maxDigitIndex + 2\n        val maxDigitIndex4 = maxDigitIndex + 3\n      \
    \  val maxDigitIndex5 = maxDigitIndex + 4\n        val maxDigitIndex6 = maxDigitIndex\
    \ + 5\n        val maxDigitIndex7 = maxDigitIndex + 6\n        val maxDigitIndex8\
    \ = maxDigitIndex + 7\n        val maxDigitIndex9 = maxDigitIndex + 8\n      \
    \  val maxDigitIndex10 = maxDigitIndex + 9\n        val maxDigitIndex11 = maxDigitIndex\
    \ + 10\n        val maxDigitIndex12 = maxDigitIndex + 11\n        val maxDigitIndex13\
    \ = maxDigitIndex + 12\n        val maxDigitIndex14 = maxDigitIndex + 13\n   \
    \     val maxDigitIndex15 = maxDigitIndex + 14\n        val maxDigitIndex16 =\
    \ maxDigitIndex + 15\n        val maxDigitIndex17 = maxDigitIndex + 16\n     \
    \   val maxDigitIndex18 = maxDigitIndex + 17\n        val maxDigitIndex19 = maxDigitIndex\
    \ + 18\n        val maxDigitIndex20 = maxDigitIndex + 19\n        val maxDigitIndex21\
    \ = maxDigitIndex + 20\n        val maxDigitIndex22 = maxDigitIndex + 21\n   \
    \     val maxDigitIndex23 = maxDigitIndex + 22\n        val maxDigitIndex24 =\
    \ maxDigitIndex + 23\n        val maxDigitIndex25 = maxDigitIndex + 24\n     \
    \   val maxDigitIndex26 = maxDigitIndex + 25\n        val maxDigitIndex27 = maxDigitIndex\
    \ + 26\n        val maxDigitIndex28 = maxDigitIndex + 27\n        val maxDigitIndex29\
    \ = maxDigitIndex + 28\n        val maxDigitIndex30 = maxDigitIndex + 29\n   \
    \     val maxDigitIndex31 = maxDigitIndex + 30\n        val maxDigitIndex32 =\
    \ maxDigitIndex + 31\n        val maxDigitIndex33 = maxDigitIndex + 32\n     \
    \   val maxDigitIndex34 = maxDigitIndex + 33\n        val maxDigitIndex35 = maxDigitIndex\
    \ + 34\n        val maxDigitIndex36 = maxDigitIndex + 35\n        val maxDigitIndex37\
    \ = maxDigitIndex + 36\n        val maxDigitIndex38 = ", "        val arr = arr.toList\n\
    \        val len = arr.size\n        val max = (len / 2).toInt\n        val sum\
    \ = 0\n        val maxSum = 0\n        val maxSumIndex = 0\n        for(i <- 0\
    \ until max){\n            val cur = arr(i)\n            val curSum = cur.toString.toInt\n\
    \            if(curSum > maxSum){\n                maxSum = curSum\n         \
    \       maxSumIndex = i\n            }\n        }\n        val maxSum = arr(maxSumIndex).toString.toInt\n\
    \        val maxSumIndex = maxSumIndex.toString.toInt\n        for(i <- 0 until\
    \ k){\n            val cur = arr(i)\n            val curSum = cur.toString.toInt\n\
    \            if(curSum > maxSum){\n                sum += cur\n            }\n\
    \        }\n        sum", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val result = new mutable.HashMap[Long, Long]()\n        val maxTwoDigits\
    \ = arr.take(k).map(_.toString.length).max\n        val maxTwoDigitsLength = maxTwoDigits.toString.length\n\
    \        for(i <- 0 until len) {\n            val cur = arr(i)\n            val\
    \ curStr = cur.toString\n            val curLen = curStr.length\n            val\
    \ curTwoDigits = curStr.take(maxTwoDigitsLength)\n            val curTwoDigitsLength\
    \ = curTwoDigits.length\n            val curTwoDigitsSum = curTwoDigits.sum\n\
    \            val curTwoDigitsSumStr = curTwoDigitsSum.toString\n            val\
    \ curTwoDigitsSumLen = curTwoDigitsSumStr.length\n            val curTwoDigitsSumSum\
    \ = curTwoDigitsSumStr.sum\n            val curTwoDigitsSumSumStr = curTwoDigitsSumSum.toString\n\
    \            val curTwoDigitsSumSumLen = curTwoDigitsSumSumStr.length\n      \
    \      val curTwoDigitsSumSumSum = curTwoDigitsSumSumStr.sum\n            val\
    \ curTwoDigitsSumSumSumStr = curTwoDigitsSumSumSum.toString\n            val curTwoDigitsSumSumSumLen\
    \ = curTwoDigitsSumSumSumStr.length\n            val curTwoDigitsSumSumSumSum\
    \ = curTwoDigitsSumSumSumStr.sum\n            val curTwoDigitsSumSumSumSumStr\
    \ = curTwoDigitsSumSumSumSum.toString\n            val curTwoDigitsSumSumSumSumLen\
    \ = curTwoDigitsSumSumSumSumStr.length\n            val curTwoDigitsSumSumSumSumSum\
    \ = curTwoDigitsSumSumSumSumStr.sum\n            val curTwoDigitsSumSumSumSumSumStr\
    \ = curTwoDigitsSumSumSumSumSumStr.toString\n            val curTwoDigitsSumSumSumSumSumLen\
    \ = curTwoDigitsSumSumSumSumSumStr.length\n            val curTwoDigitsSumSumSumSumSumSum\
    \ = curTwoDigitsSumSumSumSumSumStr.sum\n            val curTwoDigitsSumSumSumSumSumSumStr\
    \ = curTwoDigitsSumSumSumSumSumSumStr.toString\n            val curTwoDigitsSumSumSumSumSumLen\
    \ = curTwoDigitsSumSumSumSumSumSumStr.length\n            val curTwoDigitsSumSumSumSumSumSumSum",
  "        val arr = arr.toList\n        val len = arr.length\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n\
    \        val maxTwoDigitsIndex = arr.take(k).map(_.toString.length).indexOfMax\n\
    \        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toLong).sum\n\
    \        val maxTwoDigitsSumIndex = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex2 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex3 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex4 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex5 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex6 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex7 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex8 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex9 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex10 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex11 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex12 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex13 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex14 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex15 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex16 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex17 = arr.take(k).map(_.toString).map(_.toLong",
  "        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n\
    \        val max = (len / 2).toInt\n        val max2 = max / 2\n        val max3\
    \ = max / 3\n        val max4 = max / 4\n        val max5 = max / 5\n        val\
    \ max6 = max / 6\n        val max7 = max / 7\n        val max8 = max / 8\n   \
    \     val max9 = max / 9\n        val max10 = max / 10\n        val max11 = max\
    \ / 11\n        val max12 = max / 12\n        val max13 = max / 13\n        val\
    \ max14 = max / 14\n        val max15 = max / 15\n        val max16 = max / 16\n\
    \        val max17 = max / 17\n        val max18 = max / 18\n        val max19\
    \ = max / 19\n        val max20 = max / 20\n        val max21 = max / 21\n   \
    \     val max22 = max / 22\n        val max23 = max / 23\n        val max24 =\
    \ max / 24\n        val max25 = max / 25\n        val max26 = max / 26\n     \
    \   val max27 = max / 27\n        val max28 = max / 28\n        val max29 = max\
    \ / 29\n        val max30 = max / 30\n        val max31 = max / 31\n        val\
    \ max32 = max / 32\n        val max33 = max / 33\n        val max34 = max / 34\n\
    \        val max35 = max / 35\n        val max36 = max / 36\n        val max37\
    \ = max / 37\n        val max38 = max / 38\n        val max39 = max / 39\n   \
    \     val max40 = max / 40\n        val max41 = max / 41\n        val max42 =\
    \ max / 42\n        val max43 = max / 43\n        val max44 = max / 44\n     \
    \   val max45 = max / 45\n        val max46 = max / 46\n        val max47 = max\
    \ / 47\n        val max48 = max / 48\n        val max49 = max / 49\n        val\
    \ max50 = max / 50\n        val max51 = max / 51\n        val max52 = max / 52\n\
    \        val max53 = max / 53\n        val max54 = max / 54\n        val max55\
    \ = max / 55\n        val max56 = max / 56", "        val arr = arr.toList\n \
    \       val len = arr.size\n        val max = (len / 2).toInt\n        val sum\
    \ = 0\n        val sum2 = sum\n        for (i <- 0 until max) {\n            val\
    \ curr = arr(i)\n            val next = (i + 1) % len\n            val next2 =\
    \ arr(next)\n            if (curr % 10 == next2 % 10) {\n                sum +=\
    \ curr\n                sum2 += next2\n            }\n        }\n        sum +\
    \ sum2", "        val m = arr.size\n        val n = k\n        val max = (m /\
    \ n).toInt\n        val sum = 0\n        var i = 0\n        while (i < max) {\n\
    \            val curr = arr(i)\n            val next = arr(i + 1)\n          \
    \  val diff = next - curr\n            if (diff > 9) {\n                sum +=\
    \ curr\n                i += 2\n            } else {\n                sum += curr\n\
    \                i += 1\n            }\n        }\n        sum", "        val\
    \ arr = arr.toList\n        val len = arr.length\n        val max = (len / 2).toInt\n\
    \        val sum = 0\n        var i = 0\n        while (i < max) {\n         \
    \   sum += arr(i)\n            i += 1\n        }\n        val sum2 = sum * sum\n\
    \        val sum3 = sum2 * sum\n        val sum4 = sum3 * sum\n        val sum5\
    \ = sum4 * sum\n        val sum6 = sum5 * sum\n        val sum7 = sum6 * sum\n\
    \        val sum8 = sum7 * sum\n        val sum9 = sum8 * sum\n        val sum10\
    \ = sum9 * sum\n        val sum11 = sum10 * sum\n        val sum12 = sum11 * sum\n\
    \        val sum13 = sum12 * sum\n        val sum14 = sum13 * sum\n        val\
    \ sum15 = sum14 * sum\n        val sum16 = sum15 * sum\n        val sum17 = sum16\
    \ * sum\n        val sum18 = sum17 * sum\n        val sum19 = sum18 * sum\n  \
    \      val sum20 = sum19 * sum\n        val sum21 = sum20 * sum\n        val sum22\
    \ = sum21 * sum\n        val sum23 = sum22 * sum\n        val sum24 = sum23 *\
    \ sum\n        sum24", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val arr = arr.toList\n        var sum = 0\n        var i = 0\n      \
    \  while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n\
    \        val max = (sum / 10).toInt\n        var j = 0\n        while (j < arr.length)\
    \ {\n            if (arr(j) < max) {\n                result += (arr(j) * 10 +\
    \ arr(j + 1))\n                j += 2\n            } else {\n                result\
    \ += arr(j)\n                j += 1\n            }\n        }\n        result.toList.reduce(_\
    \ + _)", "        val arr = arr.toList\n        val len = arr.length\n       \
    \ val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var\
    \ i = 0\n        while (i < len) {\n            val curr = arr(i)\n          \
    \  if (curr < 10) {\n                sum += curr\n                i += 1\n   \
    \         } else if (curr < 100) {\n                sum += curr / 10\n       \
    \         i += 1\n            } else {\n                sum += curr / 100\n  \
    \              i += 1\n            }\n            if (sum > k) {\n           \
    \     sum -= arr(i)\n                i += 1\n            } else {\n          \
    \      result += arr(i)\n                i += 1\n            }\n        }\n  \
    \      sum", "        val arr = arr.toList\n        val len = arr.size\n     \
    \   val sum = 0\n        val maxSum = arr.take(k).reduceLeft(_ + _)\n        val\
    \ maxSum2 = maxSum * maxSum\n        val maxSum3 = maxSum2 * maxSum\n        val\
    \ maxSum4 = maxSum3 * maxSum\n        val maxSum5 = maxSum4 * maxSum\n       \
    \ val maxSum6 = maxSum5 * maxSum\n        val maxSum7 = maxSum6 * maxSum\n   \
    \     val maxSum8 = maxSum7 * maxSum\n        val maxSum9 = maxSum8 * maxSum\n\
    \        val maxSum10 = maxSum9 * maxSum\n        val maxSum11 = maxSum10 * maxSum\n\
    \        val maxSum12 = maxSum11 * maxSum\n        val maxSum13 = maxSum12 * maxSum\n\
    \        val maxSum14 = maxSum13 * maxSum\n        val maxSum15 = maxSum14 * maxSum\n\
    \        val maxSum16 = maxSum15 * maxSum\n        val maxSum17 = maxSum16 * maxSum\n\
    \        val maxSum18 = maxSum17 * maxSum\n        val maxSum19 = maxSum18 * maxSum\n\
    \        val maxSum20 = maxSum19 * maxSum\n        val maxSum21 = maxSum20 * maxSum\n\
    \        val maxSum22 = maxSum21 * maxSum\n        val maxSum23 = maxSum22 * maxSum\n\
    \        val maxSum24 = maxSum23 * maxSum\n        val maxSum25 = maxSum24 * maxSum\n\
    \        val maxSum26 = maxSum25 * maxSum\n        val maxSum27 = maxSum26 * maxSum\n\
    \        val maxSum28 = maxSum27 * maxSum\n        val maxSum29 = maxSum28 * maxSum\n\
    \        val maxSum30 = maxSum29 * maxSum\n        val maxSum31 = maxSum30 * maxSum\n\
    \        val maxSum32 = maxSum31 * maxSum\n        val maxSum33 = maxSum32 * maxSum\n\
    \        val maxSum34 = maxSum33 * maxSum\n        val maxSum35 = maxSum34 * maxSum\n\
    \        val maxSum36 = maxSum35 * maxSum\n        val maxSum37 = maxSum36 * maxSum\n\
    \        val maxSum38 = maxSum37 * maxSum\n        val maxSum39 = maxSum38 * maxSum\n",
  "        val arr = arr.toList\n        val len = arr.length\n        val maxTwoDigits\
    \ = arr.take(k).map(_.toString.length).max\n        val sum = 0\n        for (i\
    \ <- 0 until len) {\n            if (arr(i).toString.length < maxTwoDigits) {\n\
    \                sum += arr(i)\n            }\n        }\n        sum", "    \
    \    val arr = arr.toList\n        val len = arr.size\n        val maxTwoDigits\
    \ = arr.take(k).map(_.toString.length).max\n        val sum = 0\n        for (i\
    \ <- 0 until len) {\n            val digits = arr(i).toString.length\n       \
    \     val twoDigits = digits - maxTwoDigits\n            val sum = sum + arr(i).asInstanceOf[Long]\
    \ * twoDigits\n        }\n        sum", "        val arr = arr.toList\n      \
    \  val len = arr.length\n        val maxLen = arr.take(k).map(_.toString.length).max\n\
    \        val sum = 0\n        for (i <- 0 until k) {\n            val start =\
    \ arr.take(i).map(_.toString).map(_.toLong).sum\n            val end = arr.take(i\
    \ + 1).map(_.toString).map(_.toLong).sum\n            sum += (end - start) / maxLen\n\
    \        }\n        sum", "        val arr = arr.toList\n        val len = arr.size\n\
    \        val max = (len / 2).toInt\n        val sum = 0\n        val maxSum =\
    \ 0\n        val maxSumIndex = 0\n        for(i <- 0 until max) {\n          \
    \  val curSum = arr(i) + arr(i + 1)\n            if(curSum > maxSum) {\n     \
    \           maxSum = curSum\n                maxSumIndex = i\n            }\n\
    \        }\n        val maxSumInList = arr(maxSumIndex)\n        for(i <- 0 until\
    \ k) {\n            val curSum = arr(i) + arr(i + 1)\n            if(curSum >\
    \ maxSumInList) {\n                maxSumInList = curSum\n            }\n    \
    \    }\n        return maxSumInList", "        val arr = arr.toList\n        val\
    \ len = arr.length\n        val maxLen = len - k\n        val maxSum = arr.take(k).sum\n\
    \        val maxSum2 = arr.take(maxLen).sum\n        val maxSum3 = arr.take(maxLen\
    \ - 1).sum\n        val maxSum4 = arr.take(maxLen - 2).sum\n        val maxSum5\
    \ = arr.take(maxLen - 3).sum\n        val maxSum6 = arr.take(maxLen - 4).sum\n\
    \        val maxSum7 = arr.take(maxLen - 5).sum\n        val maxSum8 = arr.take(maxLen\
    \ - 6).sum\n        val maxSum9 = arr.take(maxLen - 7).sum\n        val maxSum10\
    \ = arr.take(maxLen - 8).sum\n        val maxSum11 = arr.take(maxLen - 9).sum\n\
    \        val maxSum12 = arr.take(maxLen - 10).sum\n        val maxSum13 = arr.take(maxLen\
    \ - 11).sum\n        val maxSum14 = arr.take(maxLen - 12).sum\n        val maxSum15\
    \ = arr.take(maxLen - 13).sum\n        val maxSum16 = arr.take(maxLen - 14).sum\n\
    \        val maxSum17 = arr.take(maxLen - 15).sum\n        val maxSum18 = arr.take(maxLen\
    \ - 16).sum\n        val maxSum19 = arr.take(maxLen - 17).sum\n        val maxSum20\
    \ = arr.take(maxLen - 18).sum\n        val maxSum21 = arr.take(maxLen - 19).sum\n\
    \        val maxSum22 = arr.take(maxLen - 20).sum\n        val maxSum23 = arr.take(maxLen\
    \ - 21).sum\n        val maxSum24 = arr.take(maxLen - 22).sum\n        val maxSum25\
    \ = arr.take(maxLen - 23).sum\n        val maxSum26 = arr.take(maxLen - 24).sum\n\
    \        val maxSum27 = arr.take(maxLen - 25).sum\n        val maxSum28 = arr.take(maxLen\
    \ - 26).sum\n        val maxSum29 = arr.take(maxLen - 27).sum\n        val maxSum30\
    \ = arr.take(maxLen - 28).sum\n        val maxSum31 = arr.take(maxLen - 29).sum\n\
    \        val maxSum32 = arr.take(maxLen - 30).sum\n"]
stop_tokens:
- "\n    }\n"
