language: scala
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        val oddDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => {\n            val digit = x%10\n\
    \            if (digit==0) {\n                evenDigit.add(x)\n            }\
    \ else {\n                oddDigit.add(x)\n            }\n        })\n       \
    \ evenDigit.foreach(x => result.add(x))\n        oddDigit.foreach(x => result.add(x))\n\
    \        result.sort\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5y8fj2or.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5y8fj2or.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5y8fj2or.scala:15:27 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddDigit\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x.toString.toInt%2 == 0) result += x)\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8dmuekhx.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.foreach { x => \n            if (result.contains(x))\
    \ \n                result.filter(_ != x).foreach(x => result.remove(x))\n   \
    \         else \n                result += x\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfw9l_uk7.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x.toString.toInt%2\
    \ == 0)\n        evenDigits.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6hy75qsr.scala:17)\n\tat Problem.main(tmp6hy75qsr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793037
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_mvwi1ar.scala:18)\n\tat Problem.main(tmp_mvwi1ar.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach { x =>\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                result += x\n            }\n     \
    \   }\n        result.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8ikqhor.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpscy5hvj3.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach(x\
    \ => result += x)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwswhdh3k.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => { \n            val digit = x.toString.toInt\n       \
    \     if (digit % 2 == 0) result.+=(x) \n        })\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmp3zbgxe.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.LinkedList[Long]()\n\
    \        val evenDigits = new mutable.HashSet[Long]()\n        val oddDigits =\
    \ new mutable.HashSet[Long]()\n        x.foreach(x => {\n            if (x % 2\
    \ == 0) {\n                evenDigits.add(x)\n            } else {\n         \
    \       oddDigits.add(x)\n            }\n        })\n        oddDigits.foreach(x\
    \ => {\n            if (result.contains(x)) {\n                result.add(x)\n\
    \            } else {\n                result.addAll(evenDigits.filter(_ != x))\n\
    \            }\n        })\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2k1ghyi1.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2k1ghyi1.scala:14:29\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigits\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp2k1ghyi1.scala:15:28 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddDigits\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitCount = evenDigits.size\n        evenDigits.foreach(x\
    \ => result.add(x))\n        val oddDigitCount = digits.length - evenDigitCount\n\
    \        for(i <- 0 until oddDigitCount) {\n            val x = digits(i)\n  \
    \          val y = digits(i + 1)\n            if(x % 2 == 0 && y % 2 == 0) {\n\
    \                result.add(x + y)\n            }\n        }\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8e5u23e.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result.add(x))\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmyl5ac2n.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if (digit % 2 == 0) {\n                result.add(x(i))\n       \
    \     }\n        }\n        result.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_2686gey.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach { x => \n            if (result.contains(x)) \n     \
    \           result.filter(_ != x).foreach(x => result.remove(x))\n           \
    \ else \n                result += x\n        }\n        oddDigits.foreach { x\
    \ => \n            if (result.contains(x)) \n                result.filter(_ !=\
    \ x).foreach(x => result.remove(x))\n            else \n                result\
    \ += x\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpanrfl9ey.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach(x => result.add(x))\n        oddDigits.foreach(x => result.add(x))\n\
    \        result.sort\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppvbnmml0.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                result += x\n            }\n     \
    \   })\n        result.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy1qhq5ha.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x.toString.toInt%2\
    \ == 0)\n        val evenDigitsList = evenDigits.toList\n        evenDigitsList.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv8q_nljz.scala:18)\n\tat Problem.main(tmpv8q_nljz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793037
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x.toString.toLong\
    \ % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n     \
    \   evenDigitsSorted.filter(x => x.toString.toLong % 2 == 0).distinct\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyhgnb6ko.scala:18)\n\tat Problem.main(tmpyhgnb6ko.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val xs = x.toSet\n        val xs2 = xs.filter(_ % 2 == 0)\n        xs2.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp119apnie.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(_ % 2 == 0)\n\
    \        val evenDigitList = evenDigits.toList\n        val evenDigitListSorted\
    \ = evenDigitList.sortWith(_ < _)\n        val evenDigitListSortedSet = evenDigitListSorted.toSet\n\
    \        val evenDigitListSortedSetIterator = evenDigitListSortedSet.iterator\n\
    \        val evenDigitListSortedSetIteratorNext = evenDigitListSortedSetIterator.next\n\
    \        val evenDigitListSortedSetIteratorNextNext = evenDigitListSortedSetIteratorNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNext = evenDigitListSortedSetIteratorNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNext = evenDigitListSortedSetIteratorNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNextNext = evenDigitListSortedSetIteratorNextNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNextNextNext = evenDigitListSortedSetIteratorNextNextNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNextNextNext = evenDigitListSortedSetIteratorNextNextNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNextNextNextNext = evenDigitListSortedSetIteratorNextNextNextNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNext =\
    \ evenDigitListSortedSetIteratorNextNextNextNextNextNextNext.next\n        val\
    \ evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNext = evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNext\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdh3vf78h.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdh3vf78h.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenDigitListSortedSetIteratorNextNextNextNextNextNext\e[0m = evenDigitListSortedSetIteratorNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenDigitListSortedSetIteratorNextNextNextNextNextNext is\
    \ already defined as \e[33mvalue\e[0m \e[35mevenDigitListSortedSetIteratorNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdh3vf78h.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mevenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mevenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdh3vf78h.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mevenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x.toString.toInt%2 == 0) result += x)\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnin6s3zf.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => { \n            val digit = x.toString.toInt\n       \
    \     if (digit % 2 == 0) result.+=(x) \n        })\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmp3zbgxe.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x.toString.toInt%2\
    \ == 0)\n        val evenDigitList = evenDigits.toList\n        evenDigitList.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf27htlv9.scala:18)\n\tat Problem.main(tmpf27htlv9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793037
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x.toString.toLong\
    \ % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n     \
    \   evenDigitsSorted.filter(x => x.toString.toLong % 2 == 0).distinct\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyhgnb6ko.scala:18)\n\tat Problem.main(tmpyhgnb6ko.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                result += x\n            }\n     \
    \   })\n        result.sort\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_mt2o1i6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        for(i <- 0 until\
    \ x.size) {\n            val digit = x(i).toInt\n            if(digit % 2 == 0)\
    \ {\n                evenDigit.add(digit)\n            }\n        }\n        for(i\
    \ <- 0 until x.size) {\n            val digit = x(i).toInt\n            if(evenDigit.contains(digit))\
    \ {\n                result.add(x(i))\n            }\n        }\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpplo9nird.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpplo9nird.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach\
    \ { x => \n            if (result.contains(x)) \n                result.filter(_\
    \ != x).foreach(x => result.remove(x))\n            else\n                result\
    \ += x\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv_17ctb2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach { x =>\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ }\n        }\n        evenDigit.foreach { x =>\n            if (result.contains(x))\
    \ {\n                result.add(x)\n            } else {\n                result.add(x)\n\
    \            }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyamdfxlh.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyamdfxlh.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result.add(x))\n        result -- new\
    \ mutable.HashSet[Long]()\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe0co6qf7.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach { x => result += x }\n        oddDigits.foreach { x =>\
    \ result += x }\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ai_eyyy.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach(x => result.add(x))\n        oddDigits.foreach(x => result.add(x))\n\
    \        result.sort\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppvbnmml0.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val xs = x.toSet\n        val result =\
    \ new mutable.ListBuffer[Long]()\n        for (i <- 0 until xs.size) {\n     \
    \       val xx = xs(i)\n            if (xx % 2 == 0) {\n                result.add(xx)\n\
    \            }\n        }\n        result.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps6zbofcb.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps6zbofcb.scala:17:19\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m\
    \ (xx % \e[31m2\e[0m == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of Boolean, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following\
    \ import might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.foreach { x => \n            if (result.contains(x))\
    \ \n                result.add(x)\n            else\n                result +=\
    \ x\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt39y4pd1.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.filter(_ % 2 == 0).distinct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps3zbj915.scala:16:44\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evenDigitsSorted.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).distinct\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793039
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x.toString.toLong\
    \ % 2 == 0)\n        val evenDigitList = evenDigits.toList\n        val oddDigits\
    \ = x.filter(x => x.toString.toLong % 2 != 0)\n        val oddDigitList = oddDigits.toList\n\
    \        val result = evenDigitList.filterNot(oddDigitList.contains)\n       \
    \ evenDigitList.sortWith(_ < _)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4asjm8mo.scala:22)\n\tat Problem.main(tmp4asjm8mo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.filter(x\
    \ => x.toString.length == 1)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpst3rwe6_.scala:18)\n\tat Problem.main(tmpst3rwe6_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            result.add(x)\n      \
    \  })\n        result.sort\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxgtbghj1.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxgtbghj1.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) result += x\n        })\n        result.sort\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8xp0cgrl.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            if (x(i) % 2 == 0) {\n     \
    \           result.add(x(i))\n            }\n        }\n        result.sortWith((x,\
    \ y) => x < y)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqhagr662.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x.toString.toInt%2 == 0) result += x)\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnin6s3zf.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(_ % 2 == 0)\n\
    \        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.filter(_\
    \ % 2 == 0).distinct\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ona6vuo.scala:18)\n\tat Problem.main(tmp7ona6vuo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val xs = x.toSet\n        val xs2 = xs.filter(_ % 2 == 0)\n        xs2.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp119apnie.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        val oddDigit\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n            if (x\
    \ % 2 == 0) {\n                evenDigit += x\n            } else {\n        \
    \        oddDigit += x\n            }\n        })\n        evenDigit.foreach(x\
    \ => result += x)\n        oddDigit.foreach(x => result += x)\n        result.sortWith((x,\
    \ y) => x.compare(y) == 0)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_yt9ebh7.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_yt9ebh7.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_yt9ebh7.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddDigit\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.foreach { x => \n            if (result.contains(x))\
    \ {\n                result.clear()\n            } else {\n                result\
    \ += x\n            }\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr7f4g9ga.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793039
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val evenDigitsList = evenDigits.toList\n        val oddDigitsList\
    \ = x.filter(x => x % 2 != 0).toList\n        evenDigitsList.filterNot(oddDigitsList.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm_myz7lu.scala:19)\n\tat Problem.main(tmpm_myz7lu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.LinkedList[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ }\n        })\n        evenDigit.foreach(x => result.append(x))\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps_3fm5h8.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps_3fm5h8.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach(x\
    \ => result += x)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwswhdh3k.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => { \n            if (x.toString.length == 0) result.add(x)\n\
    \            else if (x.toString.length == 1) result.add(x)\n            else\
    \ {\n                val digit = x.toString.charAt(x.toString.length-1)\n    \
    \            if (digit.toString.toLong % 2 == 0) result.add(x)\n            }\n\
    \        })\n        result.sortWith((x, y) => x.toString.compareTo(y.toString)\
    \ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8bofphze.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(_ % 2 == 0)\n\
    \        val evenDigitList = evenDigits.toList\n        val evenDigitSet = evenDigitList.distinct\n\
    \        val evenDigitSetList = evenDigitSet.toList\n        evenDigitSetList.filterNot(evenDigitSetList.contains(_))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9bkm70ej.scala:20)\n\tat Problem.main(tmp9bkm70ej.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793041
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(_ % 2 == 0)\n\
    \        val evenDigitList = evenDigits.toList\n        evenDigitList.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwtvsgzrd.scala:18)\n\tat Problem.main(tmpwtvsgzrd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.HashSet[Long]()\n\
    \        val xs = x.toList\n        xs.foreach(x => if (x % 2 == 0) result.add(x))\n\
    \        xs.filter(x => !result.contains(x)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_tn6pvjk.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if (digit % 2 == 0) {\n                result.add(x(i))\n       \
    \     }\n        }\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphfbccy4.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result.add(x))\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmyl5ac2n.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.filter(x\
    \ => x % 2 == 0).distinct\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp04u1it96.scala:18)\n\tat Problem.main(tmp04u1it96.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        val oddDigit\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x % 2 == 0) evenDigit\
    \ += x)\n        x.foreach(x => if (x % 2 != 0) oddDigit += x)\n        evenDigit.foreach(x\
    \ => if (x % 2 == 0) result += x)\n        oddDigit.foreach(x => if (x % 2 !=\
    \ 0) result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpds497aot.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpds497aot.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpds497aot.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddDigit\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x.toString.forall(x\
    \ => x % 2 == 0))\n        val evenDigitsList = evenDigits.toList\n        val\
    \ evenDigitsSorted = evenDigitsList.sortBy(x => x)\n        val evenDigitsSortedList\
    \ = evenDigitsSorted.toList\n        val evenDigitsSortedListWithoutEvenDigit\
    \ = evenDigitsSortedList.filter(x => !evenDigitsSortedList.contains(x))\n    \
    \    evenDigitsSortedListWithoutEvenDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0x21luip.scala:21)\n\tat Problem.main(tmp0x21luip.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793042
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x.toString.toInt%2\
    \ == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.filter(x\
    \ => x.toString.toInt != 0)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpghodin1_.scala:18)\n\tat Problem.main(tmpghodin1_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793042
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x.toString.toInt%2\
    \ == 0)\n        val evenDigitList = evenDigits.toList\n        evenDigitList.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf27htlv9.scala:18)\n\tat Problem.main(tmpf27htlv9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793037
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.filter(x\
    \ => x % 2 == 0).distinct\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp04u1it96.scala:18)\n\tat Problem.main(tmp04u1it96.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result.add(x))\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmyl5ac2n.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result.add(x(i))\n        \
    \    }\n        }\n        result.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmuktg__a.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val str = x.toString\n            val digits\
    \ = str.map(_.toInt)\n            val evenDigits = digits.filter(x => x % 2 ==\
    \ 0)\n            if (evenDigits.isEmpty) {\n                result += x\n   \
    \         }\n        })\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptn4by_jm.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach\
    \ { x => \n            if (result.contains(x)) \n                result.filter(_\
    \ != x).foreach { y => result.remove(y) }\n            else \n               \
    \ result += x\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmc412z2c.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.LinkedList[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        val oddDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => {\n            val digit = x.toString.toInt\n\
    \            if (digit % 2 == 0) {\n                evenDigit.add(digit)\n   \
    \         } else {\n                oddDigit.add(digit)\n            }\n     \
    \   })\n        evenDigit.foreach(x => result.add(x))\n        oddDigit.foreach(x\
    \ => result.add(x))\n        result.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ugf1u2r.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ugf1u2r.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9ugf1u2r.scala:15:27 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddDigit\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result.add(x))\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmyl5ac2n.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result.add(x(i))\n        \
    \    }\n        }\n        result.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmuktg__a.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                result.add(x)\n            }\n   \
    \     })\n        result.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqgdc5qbm.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        val oddDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => {\n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            } else {\n             \
    \   oddDigit.add(x)\n            }\n        })\n        evenDigit.foreach(x =>\
    \ result.add(x))\n        oddDigit.foreach(x => result.add(x))\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqc0yko9i.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqc0yko9i.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpqc0yko9i.scala:15:27 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddDigit\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result += digit\n         \
    \   }\n        }\n        result.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphnbay0gt.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => { \n            if (x.toString.toInt%2 == 0) result.add(x)\n\
    \        })\n        result.sortWith((x, y) => x.toString.toInt - y.toString.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq0c8uzo2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x.toString.toInt%2 == 0) result += x)\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnin6s3zf.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.toList.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpamhpkno9.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        evenDigits.toList.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m    \
    \    Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result.add(x))\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgp_hdru4.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => { \n            if (x.toString.toInt%2 == 0) result.add(x)\n\
    \        })\n        result.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppbkcc595.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793042
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.filter(x\
    \ => x % 2 == 0).distinct\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp04u1it96.scala:18)\n\tat Problem.main(tmp04u1it96.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793041
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x.toString.toInt%2\
    \ == 0)\n        val oddDigits = x.filter(x => x.toString.toInt%2 != 0)\n    \
    \    val evenDigitsSorted = evenDigits.sortBy(x => x.toString.toInt)\n       \
    \ val oddDigitsSorted = oddDigits.sortBy(x => x.toString.toInt)\n        evenDigitsSorted.filter(x\
    \ => oddDigitsSorted.contains(x)).distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvr8__x4l.scala:20)\n\tat Problem.main(tmpvr8__x4l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val evenDigitsList = evenDigits.toList\n        val evenDigitsSet\
    \ = evenDigitsList.distinct\n        val evenDigitsSetList = evenDigitsSet.toList\n\
    \        evenDigitsSetList.filter(x => x.toString.length == 1).sort\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe9moxnqh.scala:17:62 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        evenDigitsSetList.filter(\e[36mx\e[0m => x.toString.length\
    \ == \e[31m1\e[0m).sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sort is not a member of List[Long] - did you mean List[Long].sortBy?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy8z6ihkv.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evenDigitsSorted.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e\
    [1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0).sort\n        val oddDigits = x.filter(x => x % 2 != 0).sort\n        evenDigits.diff(oddDigits)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwvuo7q2u.scala:13:51 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenDigits\e[0m = x.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sort\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ sort is not a member of List[Long] - did you mean List[Long].sortBy?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpwvuo7q2u.scala:14:50 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36moddDigits\e[0m = x.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m != \e[31m0\e[0m).sort\n\e[31m\e[31m   |\e[0m  \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ sort is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitCount = evenDigits.size\n        evenDigits.foreach\
    \ { x =>\n            val digit = x.toString.toInt\n            if (digit % 2\
    \ == 0) {\n                result.add(x)\n            }\n        }\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpig_52q30.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.HashSet[Long]()\n\
    \        val xs = x.toList\n        xs.foreach(x => if (x % 2 == 0) result.add(x))\n\
    \        xs.filter(x => !result.contains(x)).sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8e6yqjx9.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8e6yqjx9.scala:16:44\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        xs.filter(\e[36mx\e\
    [0m => !result.contains(x)).sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sort is not a member of List[Long] - did you mean List[Long].sortBy?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result.add(x))\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdl8g5rph.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0).toList\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n     \
    \   evenDigitsSorted.filter(x => x.toString.length == 1).map(x => x.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph8vly3e1.scala:18)\n\tat Problem.main(tmph8vly3e1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach\
    \ { x => \n            if (result.contains(x)) \n                result.filter(_\
    \ != x).foreach(x => result.remove(x))\n            else \n                result\
    \ += x\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0bvqxvmf.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        val oddDigit\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x % 2 == 0) evenDigit\
    \ += x)\n        x.foreach(x => if (x % 2 != 0) oddDigit += x)\n        oddDigit.foreach(x\
    \ => if (x % 2 == 0) evenDigit += x)\n        evenDigit.foreach(x => if (x % 2\
    \ != 0) oddDigit += x)\n        oddDigit.foreach(x => if (x % 2 == 0) evenDigit\
    \ += x)\n        evenDigit.foreach(x => if (x % 2 != 0) oddDigit += x)\n     \
    \   oddDigit.foreach(x => if (x % 2 == 0) evenDigit += x)\n        evenDigit.foreach(x\
    \ => if (x % 2 != 0) oddDigit += x)\n        oddDigit.foreach(x => if (x % 2 ==\
    \ 0) evenDigit += x)\n        evenDigit.foreach(x => if (x % 2 != 0) oddDigit\
    \ += x)\n        oddDigit.foreach(x => if (x % 2 == 0) evenDigit += x)\n     \
    \   evenDigit.foreach(x => if (x % 2 != 0) oddDigit += x)\n        oddDigit.foreach(x\
    \ => if (x % 2 == 0) evenDigit += x)\n        evenDigit.foreach(x => if (x % 2\
    \ != 0) oddDigit += x)\n        oddDigit.foreach(x => if (x % 2 == 0) evenDigit\
    \ += x)\n        evenDigit.foreach(x => if (x % 2 != 0) oddDigit += x)\n     \
    \   oddDigit.foreach(x => if (x % 2 == 0) evenDigit += x)\n        evenDigit.foreach(x\
    \ => if (x % 2 != 0) oddDigit += x)\n        oddDigit.foreach(x => if (x % 2 ==\
    \ 0) evenDigit += x)\n        evenDigit.foreach(x => if (x % 2 != 0) oddDigit\
    \ += x)\n        oddDigit.foreach(x => if (x % 2 == 0) evenDigit += x)\n     \
    \   evenDigit.foreach(x => if (x % 2 != 0) oddDigit += x)\n        oddDigit.foreach(x\
    \ => if (x % 2 == 0) evenDigit += x)\n        evenDigit.foreach(x => if (x % 2\
    \ != 0) oddDigit += x)\n        oddDigit.foreach(x \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptjn4vgod.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptjn4vgod.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptjn4vgod.scala:14:28 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mevenDigit\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptjn4vgod.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddDigit\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsList\
    \ = evenDigits.toList\n        evenDigitsList.foreach(x => x match {\n       \
    \     case x if x % 2 == 0 => result.add(x)\n            case _ => \n        })\n\
    \        result.sort\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpym9o38fi.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp43bma_h0.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val xs = x.toSet\n        val result =\
    \ new mutable.LinkedList[Long]()\n        for(i <- xs.iterator) {\n          \
    \  val digit = i.toString.toInt\n            if(!xs.contains(digit)) {\n     \
    \           result.add(i)\n            }\n        }\n        result.sortWith((x,\
    \ y) => x.toString.toInt < y.toString.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqb_e5yu4.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitList = evenDigits.toList\n        evenDigitList.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjz8ppzx_.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach { x => result.add(x) }\n        oddDigits.foreach { x\
    \ => result.add(x) }\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp19p7yo71.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val evenDigitsList = evenDigits.toList\n        val evenDigitsSet\
    \ = evenDigitsList.distinct\n        val evenDigitsSetList = evenDigitsSet.toList\n\
    \        evenDigitsSetList.filter(x => x.toString.length == 1).sort\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe9moxnqh.scala:17:62 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        evenDigitsSetList.filter(\e[36mx\e[0m => x.toString.length\
    \ == \e[31m1\e[0m).sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sort is not a member of List[Long] - did you mean List[Long].sortBy?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(_ % 2 == 0).sortBy(_\
    \ % 10)\n        val oddDigits = x.filter(_ % 2 != 0).sortBy(_ % 10)\n       \
    \ evenDigits.union(oddDigits)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpelzs87pb.scala:18)\n\tat Problem.main(tmpelzs87pb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result.add(x) else ())\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps03stfsf.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            if (x.toString.toLong % 2 == 0) {\n   \
    \             result.add(x)\n            }\n        })\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2yosrozk.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793044
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.distinct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcm29lsol.scala:18)\n\tat Problem.main(tmpcm29lsol.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        val notEvenDigits\
    \ = digits.filter(x => !evenDigitsSet.contains(x))\n        notEvenDigits.foreach(x\
    \ => result.add(x))\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp20k8d6gv.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793044
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val oddDigits = x.filter(x => x % 2 != 0)\n        val result =\
    \ evenDigits.union(oddDigits)\n        val sortedResult = result.sortBy(x => x)\n\
    \        sortedResult\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwtr0i_kf.scala:20)\n\tat Problem.main(tmpwtr0i_kf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\
    \ if (x % 2 == 0) evenDigit.add(x); else result.add(x) })\n        evenDigit.foreach(x\
    \ => { if (result.contains(x)) result.remove(x) })\n        result.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyxecbd46.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyxecbd46.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy8z6ihkv.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evenDigitsSorted.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e\
    [1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigits = new mutable.HashSet[Long]()\n        for(i <- 0 until\
    \ x.size) {\n            val digit = x(i).toInt\n            if(digit % 2 == 0)\
    \ {\n                evenDigits.add(digit)\n            }\n        }\n       \
    \ for(i <- 0 until x.size) {\n            val digit = x(i).toInt\n           \
    \ if(evenDigits.contains(digit)) {\n                result.add(x(i))\n       \
    \     }\n        }\n        result.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0vfof9cz.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0vfof9cz.scala:14:29\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigits\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        val oddDigit\
    \ = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size) {\n     \
    \       val digit = x(i)\n            if(digit % 2 == 0) {\n                evenDigit\
    \ += digit\n            } else {\n                oddDigit += digit\n        \
    \    }\n        }\n        evenDigit.foreach(x => result += x)\n        oddDigit.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpthmgkt0l.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpthmgkt0l.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpthmgkt0l.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddDigit\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.toList ++ oddDigits.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmxhxgesp.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evenDigits.toList ++\
    \ oddDigits.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        val oddDigit\
    \ = new mutable.ListBuffer[Long]()\n        for (i <- x) {\n            if (i\
    \ % 2 == 0) {\n                evenDigit += i\n            } else {\n        \
    \        oddDigit += i\n            }\n        }\n        evenDigit.foreach(i\
    \ => result += i)\n        oddDigit.foreach(i => result -= i)\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4hkzvu0v.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4hkzvu0v.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4hkzvu0v.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddDigit\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach(x => result += x)\n        oddDigits.foreach(x => result\
    \ += x)\n        result.sort\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf5r3f741.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.LinkedList[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                evenDigit.add(digit)\n            }\n        })\n        evenDigit.foreach(x\
    \ => {\n            if (result.contains(x)) {\n                return\n      \
    \      }\n            result.add(x)\n        })\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3c7vw05h.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3c7vw05h.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x.toString.forall(_.isDigit)) result += x)\n     \
    \   result.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqedrxfe7.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result += x)\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptqzp9xqx.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793045
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0).sorted\n        val oddDigits = x.filter(x => x % 2 != 0).sorted\n      \
    \  evenDigits ++ oddDigits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpekq68lew.scala:18)\n\tat Problem.main(tmpekq68lew.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result.add(x(i))\n        \
    \    }\n        }\n        result.sortWith((x, y) => x.toString.toInt < y.toString.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6x9sl3bs.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.LinkedList[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitList = evenDigits.toList\n        evenDigitList.foreach(x\
    \ => result.add(x))\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpym3i4y8z.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793045
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val oddDigits = x.filter(x => x % 2 != 0)\n        val result =\
    \ evenDigits.union(oddDigits)\n        result.sortWith(_ < _)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfdp8vu91.scala:19)\n\tat Problem.main(tmpfdp8vu91.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        val notEvenDigits\
    \ = digits.filter(x => !evenDigitsSet.contains(x))\n        result.+=(notEvenDigits.toList)\n\
    \        result.sortWith(_ < _)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjlp21qrl.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result.add(x))\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmyl5ac2n.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitCount = evenDigits.size\n        val oddDigitCount\
    \ = digits.size - evenDigitCount\n        val evenDigits = evenDigits.toList\n\
    \        val oddDigits = digits.filter(x => x % 2 != 0)\n        val oddDigitCount\
    \ = oddDigits.size\n        val evenDigitCount = evenDigits.size\n        val\
    \ oddDigits = oddDigits.toList\n        val evenDigits = evenDigits.toList\n \
    \       val oddDigitCount = oddDigits.size\n        val evenDigitCount = evenDigits.size\n\
    \        val oddDigits = oddDigits.toList\n        val evenDigits = evenDigits.toList\n\
    \        val oddDigitCount = oddDigits.size\n        val evenDigitCount = evenDigits.size\n\
    \        val oddDigits = oddDigits.toList\n        val evenDigits = evenDigits.toList\n\
    \        val oddDigitCount = oddDigits.size\n        val evenDigitCount = evenDigits.size\n\
    \        val oddDigits = oddDigits.toList\n        val evenDigits = evenDigits.toList\n\
    \        val oddDigitCount = oddDigits.size\n        val evenDigitCount = evenDigits.size\n\
    \        val oddDigits = oddDigits.toList\n        val evenDigits = evenDigits.toList\n\
    \        val oddDigitCount = oddDigits.size\n        val evenDigitCount = evenDigits.size\n\
    \        val oddDigits = oddDigits.toList\n        val evenDigits = evenDigits.toList\n\
    \        val oddDigitCount = oddDigits.size\n        val evenDigitCount = evenDigits.size\n\
    \        val oddDigits = oddDigits.toList\n        val evenDigits = evenDigits.toList\n\
    \        val oddDigitCount = oddDigits.size\n        val evenDigitCount = evenDigits.size\n\
    \        val oddDigits = oddDigits.toList\n        val evenDigits = evenDigits.toList\n\
    \        val oddDigitCount = oddDigits.size\n        val evenDigitCount = evenDigits.size\n\
    \        val oddDigits = oddDigits.toList\n        val evenDigits = evenDigits.toList\n\
    \        val oddDigitCount = oddDigits.size\n        val evenDigitCount = evenDigits.size\n\
    \        val oddDigits = oddDigits.toList\n        val evenDigits = evenDigits.toList\n\
    \        val oddDigitCount = oddDigits.size\n        val evenDigitCount = evenDigits.size\n\
    \        val oddDigits = oddDigits.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjfd3tab6.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjfd3tab6.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mevenDigits\e[0m = evenDigits.toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35mevenDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjfd3tab6.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36moddDigitCount\e[0m = oddDigits.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddDigitCount is already defined as \e[33mvalue\e[0m \e[35moddDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjfd3tab6.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mevenDigitCount\e[0m = evenDigits.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevenDigitCount is already defined as \e[33mvalue\e[0m \e[35mevenDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjfd3tab6.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36moddDigits\e[0m = oddDigits.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0moddDigits is already defined as \e[33mvalue\e[0m \e[35moddDigits\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjfd3tab6.scala:23:12 ------------------------"
  stdout: ''
  timestamp: 1659793046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) result += x\n        })\n        result.sort\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8xp0cgrl.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793038
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0).sorted\n        val oddDigits = x.filter(x => x % 2 != 0).sorted\n      \
    \  evenDigits.diff(oddDigits)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpig3jd1vl.scala:18)\n\tat Problem.main(tmpig3jd1vl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793047
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x.toString.toInt%2\
    \ == 0)\n        evenDigits.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6hy75qsr.scala:17)\n\tat Problem.main(tmp6hy75qsr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.HashSet[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        val oddDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => {\n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            } else {\n             \
    \   oddDigit.add(x)\n            }\n        })\n        val evenList = evenDigit.toList\n\
    \        val oddList = oddDigit.toList\n        evenList.foreach(x => result.add(x))\n\
    \        oddList.foreach(x => result.add(x))\n        result.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy3m3jnw8.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy3m3jnw8.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpy3m3jnw8.scala:15:27 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddDigit\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793046
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x.toString.toInt%2\
    \ == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.filter(x\
    \ => x.toString.toInt != 0)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpghodin1_.scala:18)\n\tat Problem.main(tmpghodin1_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpscy5hvj3.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x.toString.toInt%2\
    \ == 0).sort\n        val notEvenDigits = x.filter(x => x.toString.toInt%2 !=\
    \ 0).sort\n        evenDigits.diff(notEvenDigits)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsbd727r0.scala:13:64 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenDigits\e[0m = x.filter(\e\
    [36mx\e[0m => x.toString.toInt%\e[31m2\e[0m == \e[31m0\e[0m).sort\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sort is not a member of List[Long] - did you mean List[Long].sortBy?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsbd727r0.scala:14:67 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnotEvenDigits\e[0m = x.filter(\e\
    [36mx\e[0m => x.toString.toInt%\e[31m2\e[0m != \e[31m0\e[0m).sort\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sort is not a member of List[Long], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import collection.convert.ImplicitConversions.seq AsJavaList\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\e[31m\
    \   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659793047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                result.add(x)\n            }\n   \
    \     })\n        result.sortWith((x, y) => x.toString.toInt - y.toString.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcyq_4dhk.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => { \n            val digit = x.toString.toInt\n       \
    \     if (digit % 2 == 0) {\n                result.add(x)\n            }\n  \
    \      })\n        result.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5v__mudv.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach(x => result.add(x))\n        oddDigits.foreach(x => result.add(x))\n\
    \        result.sort\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppvbnmml0.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        val oddDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => { \n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            } else {\n             \
    \   oddDigit.add(x)\n            }\n        })\n        oddDigit.foreach(x =>\
    \ { \n            if (result.contains(x)) {\n                return\n        \
    \    }\n            result.add(x)\n        })\n        evenDigit.foreach(x =>\
    \ { \n            if (result.contains(x)) {\n                return\n        \
    \    }\n            result.add(x)\n        })\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi6zohmhp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi6zohmhp.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpi6zohmhp.scala:15:27 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddDigit\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793046
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(_ % 2 == 0).sortBy(_\
    \ % 10)\n        val oddDigits = x.filter(_ % 2 != 0).sortBy(_ % 10)\n       \
    \ evenDigits.union(oddDigits)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpelzs87pb.scala:18)\n\tat Problem.main(tmpelzs87pb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result.add(x(i))\n        \
    \    }\n        }\n        result.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmuktg__a.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.LinkedList[Long]()\n\
    \        x.foreach(x => \n            val digit = x%10\n            if (digit==0)\
    \ result.add(x)\n        )\n        result.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0094nl27.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        val oddDigit\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n            val\
    \ digit = x.toString.toInt\n            if (digit % 2 == 0) {\n              \
    \  evenDigit += digit\n            } else {\n                oddDigit += digit\n\
    \            }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                result.delete(x)\n            } else {\n                result\
    \ += x\n            }\n        })\n        oddDigit.foreach(x => {\n         \
    \   if (result.contains(x)) {\n                result.delete(x)\n            }\
    \ else {\n                result += x\n            }\n        })\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvizsux5o.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvizsux5o.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpvizsux5o.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddDigit\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach(x\
    \ => result += x)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwswhdh3k.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                result += x\n            }\n     \
    \   })\n        result.sort\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_mt2o1i6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                result += x\n            }\n     \
    \   })\n        result.sort\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_mt2o1i6.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val evenDigitsList = evenDigits.toList\n        evenDigitsList.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudkicsln.scala:18)\n\tat Problem.main(tmpudkicsln.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach\
    \ { x => result += x }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyb02a9pe.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.LinkedList[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                evenDigit.add(digit)\n            }\n        })\n        evenDigit.foreach(x\
    \ => {\n            val digit = x.toString.toInt\n            if (result.contains(digit))\
    \ {\n                result.add(digit)\n            } else {\n               \
    \ result.add(digit)\n            }\n        })\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptljjbt7j.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptljjbt7j.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        val notEvenDigits\
    \ = digits.filter(x => !evenDigitsSet.contains(x))\n        notEvenDigits.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbcmg3n_9.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x.toString.toInt%2 == 0) result += x)\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8dmuekhx.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x.toString.toInt%2 == 0) result += x)\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8dmuekhx.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        for(i <- 0 until\
    \ x.size) {\n            val digit = x(i).toInt\n            if(digit % 2 == 0)\
    \ {\n                evenDigit.add(digit)\n            }\n        }\n        for(i\
    \ <- 0 until x.size) {\n            val digit = x(i).toInt\n            if(evenDigit.contains(digit))\
    \ {\n                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgb2ks23s.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgb2ks23s.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.LinkedList[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        for(i <- 0 until\
    \ x.size) {\n            val digit = x(i).toInt\n            if(digit.toString.length\
    \ == 1) {\n                if(evenDigit.contains(digit)) {\n                 \
    \   result.add(x(i))\n                }\n            } else {\n              \
    \  evenDigit.add(digit)\n            }\n        }\n        result.sortWith((x,\
    \ y) => x.toString.compareTo(y.toString) < 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp29ysuvql.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp29ysuvql.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach(x\
    \ => result += x)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwswhdh3k.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val xs = x.toSet\n        val xs2 = xs.filter(_ % 2 == 0)\n        xs2.foreach(x\
    \ => result += x)\n        result.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi0fa9cw2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach\
    \ { x => \n            if (result.contains(x)) {\n                result.delete(x)\n\
    \            } else {\n                result.add(x)\n            }\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpse509dip.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793048
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x.toString.toInt%2\
    \ == 0)\n        val evenDigitList = evenDigits.toList\n        evenDigitList.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf27htlv9.scala:18)\n\tat Problem.main(tmpf27htlv9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val evenDigitsList = evenDigits.toList\n        val evenDigitsSet\
    \ = evenDigitsList.distinct\n        val evenDigitsSetList = evenDigitsSet.toList\n\
    \        val evenDigitsSetListSorted = evenDigitsSetList.toList.sort\n       \
    \ evenDigitsSetListSorted.filter(x => x.toString.length == 1).distinct\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8hx71kd6.scala:17:63 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mevenDigitsSetListSorted\e\
    [0m = evenDigitsSetList.toList.sort\n\e[31m\e[31m   |\e[0m                   \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sort\
    \ is not a member of List[Long] - did you mean List[Long].sortBy?\n1 error found\n"
  stdout: ''
  timestamp: 1659793048
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val oddDigits = x.filter(x => x % 2 != 0)\n        val result =\
    \ oddDigits.filter(x => evenDigits.contains(x)).sortBy(x => x)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4k948wc_.scala:19)\n\tat Problem.main(tmp4k948wc_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            result += x\n        })\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdda_ttdt.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdda_ttdt.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.sortWith((x,\
    \ y) => x < y)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptx21jwfo.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if (digit % 2 == 0) {\n                result.add(x(i))\n       \
    \     }\n        }\n        result.sortWith((x, y) => x.toString.toInt - y.toString.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfpr21yva.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793048
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.distinct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcm29lsol.scala:18)\n\tat Problem.main(tmpcm29lsol.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => \n            if (x.toString.length == 0) result.add(x)\n\
    \            else {\n                val digit = x.toString.charAt(0)\n      \
    \          if (digit.toString.length == 0) result.add(x)\n                else\
    \ {\n                    if (digit.toString.toLong % 2 == 0) result.add(x)\n \
    \               }\n            }\n        )\n        result.sort\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnm06p4qe.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val xs = x.toSet\n        val xs2 = xs.filter(_ % 2 == 0)\n        xs2.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp119apnie.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x.toString.toInt%2\
    \ == 0)\n        val oddDigits = x.filter(x => x.toString.toInt%2 != 0)\n    \
    \    evenDigits.union(oddDigits).sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3_es0j25.scala:15:36 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        evenDigits.union(oddDigits).sort\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ sort is not a member of List[Long] - did you mean List[Long].sortBy?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793049
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(_ % 2 == 0).sortBy(_\
    \ % 10)\n        val oddDigits = x.filter(_ % 2 != 0).sortBy(_ % 10)\n       \
    \ val result = evenDigits.filterNot(oddDigits.contains)\n        result.sortBy(_\
    \ % 10)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprtshsmf8.scala:19)\n\tat Problem.main(tmprtshsmf8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.foreach { x => \n            if (result.contains(x))\
    \ \n                result.add(x)\n            else\n                result.add(x)\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp54o9tcj3.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigits = new mutable.HashSet[Long]()\n        x.foreach(x =>\
    \ {\n            if (x % 2 == 0) {\n                evenDigits.add(x)\n      \
    \      }\n        })\n        evenDigits.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            else {\n             \
    \   result += x\n            }\n        })\n        result.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp151dt6cc.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp151dt6cc.scala:14:29\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigits\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        val notEvenDigits\
    \ = digits.filter(x => !evenDigitsSet.contains(x))\n        notEvenDigits.foreach(x\
    \ => result.add(x))\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp20k8d6gv.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        val oddDigit\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n            if (x\
    \ % 2 == 0) {\n                evenDigit += x\n            } else {\n        \
    \        oddDigit += x\n            }\n        })\n        evenDigit.foreach(x\
    \ => {\n            if (result.contains(x)) {\n                result.delete(x)\n\
    \            } else {\n                result += x\n            }\n        })\n\
    \        oddDigit.foreach(x => {\n            if (result.contains(x)) {\n    \
    \            result.delete(x)\n            } else {\n                result +=\
    \ x\n            }\n        })\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6cjkuzqd.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6cjkuzqd.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6cjkuzqd.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddDigit\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp43bma_h0.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.LinkedList[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            result.add(x)\n      \
    \  })\n        result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2tp02kfw.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2tp02kfw.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            result += x\n        })\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdda_ttdt.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdda_ttdt.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsList\
    \ = evenDigits.toList\n        evenDigitsList.sortWith(_ < _)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpczs3g4gm.scala:16:31\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evenDigitsList.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m       \
    \ Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x.toString.toInt%2 == 0) result += x)\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnin6s3zf.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach(x\
    \ => result += x)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwswhdh3k.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        val evenSortedDigits = evenDigits.sortBy(x\
    \ => x)\n        val oddSortedDigits = oddDigits.sortBy(x => x)\n        evenSortedDigits.toList\
    \ ++ oddSortedDigits.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppzv0fa8d.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        evenSortedDigits.toList\
    \ ++ oddSortedDigits.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x.toString.forall(_.isDigit)\
    \ && x.toString.forall(_.isDigit).forall(_.toString.forall(_.isDigit)))\n    \
    \    val evenDigitList = evenDigits.toList\n        evenDigitList.sortBy(x =>\
    \ x.toString.forall(_.isDigit))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoy3sfkub.scala:13:100 -----------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenDigits\e[0m = x.filter(\e\
    [36mx\e[0m => x.toString.forall(_.isDigit) && x.toString.forall(_.isDigit).forall(_.toString.forall(_.isDigit)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                             value forall is not a member of Boolean\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => { \n            val str = x.toString\n            val\
    \ digits = str.dropWhile(_ < '0').dropWhile(_ > '9').toList\n            val evenDigit\
    \ = digits.filter(x => x % 2 == 0).length\n            if (evenDigit == 0) result\
    \ += x\n        })\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp40d3pqxk.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach { x =>\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ }\n        }\n        evenDigit.foreach { x =>\n            if (result.contains(x))\
    \ {\n                result.add(x)\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz5vj4k63.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz5vj4k63.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793050
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x.toString.toInt%2\
    \ == 0)\n        val evenDigitsList = evenDigits.toList\n        val evenDigitsSorted\
    \ = evenDigitsList.sortWith(_ < _)\n        evenDigitsSorted.filter(x => x.toString.toInt\
    \ != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw8ctfpgd.scala:19)\n\tat Problem.main(tmpw8ctfpgd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach\
    \ { x => result += x }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyb02a9pe.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result.add(x))\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdl8g5rph.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result.add(x))\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmyl5ac2n.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            if (x(i) % 2 == 0) {\n     \
    \           result.add(x(i))\n            }\n        }\n        result.sortWith((x,\
    \ y) => x.compare(y) == 0)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf2edtfp2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x.toString.toInt%2 == 0) result += x)\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnin6s3zf.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result.add(x))\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdl8g5rph.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\
    \ \n            if (x % 2 == 0) evenDigit.add(x)\n        })\n        evenDigit.foreach(x\
    \ => { \n            if (result.contains(x)) \n                result.add(x)\n\
    \        })\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2v81kae9.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2v81kae9.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            else {\n             \
    \   result += x\n            }\n        })\n        result.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppkslfopc.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppkslfopc.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        val notEvenDigits\
    \ = digits.filter(x => !evenDigitsSet.contains(x))\n        result.+=(notEvenDigits.toList)\n\
    \        result.sortWith(_ < _)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjlp21qrl.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.LinkedList[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach(x\
    \ => result.add(x))\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3lydj6rw.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp43bma_h0.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val xs = x.toSet\n        val ys = xs.filter(_\
    \ % 2 == 0)\n        val zs = xs.filter(_ % 2 == 1)\n        val zsSet = zs.toSet\n\
    \        val yzs = ys.filter(_ % 2 == 1)\n        val yzsSet = yzs.toSet\n   \
    \     val zsys = zs.filter(_ % 2 == 0)\n        val zsysSet = zsys.toSet\n   \
    \     val yzsys = yzs.filter(_ % 2 == 0)\n        val yzsysSet = yzsys.toSet\n\
    \        val yzsysys = yzsys.filter(_ % 2 == 1)\n        val yzsysysSet = yzsysys.toSet\n\
    \        val yzsysysys = yzsysys.filter(_ % 2 == 1)\n        val yzsysysys = yzsysys.filter(_\
    \ % 2 == 1)\n        val yzsysysysys = yzsysys.filter(_ % 2 == 1)\n        val\
    \ yzsysysysys = yzsysys.filter(_ % 2 == 1)\n        val yzsysysysys = yzsysys.filter(_\
    \ % 2 == 1)\n        val yzsysysysysys = yzsysys.filter(_ % 2 == 1)\n        val\
    \ yzsysysysysys = yzsysys.filter(_ % 2 == 1)\n        val yzsysysysysysys = yzsysys.filter(_\
    \ % 2 == 1)\n        val yzsysysysysysysys = yzsysys.filter(_ % 2 == 1)\n    \
    \    val yzsysysysysysysys = yzsysys.filter(_ % 2 == 1)\n        val yzsysysysysysysysys\
    \ = yzsysys.filter(_ % 2 == 1)\n        val yzsysysysysysysysys = yzsysys.filter(_\
    \ % 2 == 1)\n        val yzsysysysysysysysysys = yzsysys.filter(_ % 2 == 1)\n\
    \        val yzsysysysysysysysysysys = yzsysys.filter(_ % 2 == 1)\n        val\
    \ yzsysysysysysysysysysysysys = yzsysys.filter(_ % 2 == 1)\n        val yzsysysysysysysysysysysysysys\
    \ = yzsysys.filter(_ % 2 == 1)\n        val yzsysysysysysysysy\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkhv745v8.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkhv745v8.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36myzsysysys\e[0m = yzsysys.filter(_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0myzsysysys is already defined as \e[33mvalue\e[0m \e[35myzsysysys\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkhv745v8.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36myzsysysysys\e[0m = yzsysys.filter(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0myzsysysysys is already defined as \e[33mvalue\e[0m \e[35myzsysysysys\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkhv745v8.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36myzsysysysys\e[0m = yzsysys.filter(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0myzsysysysys is already defined as \e[33mvalue\e[0m \e[35myzsysysysys\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkhv745v8.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36myzsysysysysys\e[0m = yzsysys.filter(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0myzsysysysysys is already defined as \e[33mvalue\e[0m \e[35myzsysysysysys\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be"
  stdout: ''
  timestamp: 1659793051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            if (x.toString.length == 1) {\n       \
    \         result.add(x)\n            } else {\n                val digit = x.toString.charAt(0)\n\
    \                if (result.contains(digit)) {\n                    result.clear()\n\
    \                } else {\n                    result.add(x)\n               \
    \ }\n            }\n        })\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaxqcn530.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result.add(x))\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmyl5ac2n.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result.add(x(i))\n        \
    \    }\n        }\n        result.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmuktg__a.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach { x =>\n            if (x % 2 == 0) {\n                result.add(x)\n\
    \            }\n        }\n        result.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg1jbprsw.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793050
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.filter(x => x.toString.toInt%2\
    \ == 0)\n        val evenDigitList = evenDigits.toList\n        evenDigitList.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf27htlv9.scala:18)\n\tat Problem.main(tmpf27htlv9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach(x => result.add(x))\n        oddDigits.foreach(x => result.add(x))\n\
    \        result.sort\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppvbnmml0.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp43bma_h0.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        val notEvenDigits\
    \ = digits.filter(x => !evenDigitsSet.contains(x))\n        notEvenDigits.foreach(x\
    \ => result += x)\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbcmg3n_9.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.toList.sortBy(x\
    \ => x).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp1jibuhv.scala:15:41\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        evenDigits.toList.sortBy(\e\
    [36mx\e[0m => x).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach { x => result.add(x) }\n        oddDigits.foreach { x\
    \ => result.add(x) }\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp19p7yo71.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x.toString.toInt%2 == 0) result += x)\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnin6s3zf.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach\
    \ { x => \n            if (result.contains(x)) \n                result.filter(_\
    \ != x).foreach(x => result.remove(x))\n            else\n                result\
    \ += x\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv_17ctb2.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        for(i <- 0 until\
    \ x.size) {\n            val digit = x(i)\n            if(digit.toString.length\
    \ == 1) {\n                evenDigit.add(digit)\n            }\n        }\n  \
    \      for(i <- 0 until x.size) {\n            val digit = x(i)\n            if(evenDigit.contains(digit))\
    \ {\n                result.add(digit)\n            }\n        }\n        result.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm0y21ets.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm0y21ets.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result.add(x(i))\n        \
    \    }\n        }\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgr3vv193.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                result.add(x)\n            }\n   \
    \     })\n        result.sortWith((x, y) => x.toString.toInt - y.toString.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcyq_4dhk.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x.toString.length == 0) result.add(x) else result.addAll(x.toString.filter(x\
    \ => x.toString.forall(_.isDigit))))\n        result.sort\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpph4_wd8t.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        val notEvenDigits\
    \ = digits.filter(x => !evenDigitsSet.contains(x))\n        notEvenDigits.foreach(x\
    \ => result += x)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2a8cu6qt.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        val oddDigit\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n            val\
    \ digit = x.toString.toInt\n            if (digit % 2 == 0) {\n              \
    \  evenDigit += digit\n            } else {\n                oddDigit += digit\n\
    \            }\n        })\n        evenDigit.foreach(x => {\n            if (!result.contains(x))\
    \ {\n                result += x\n            }\n        })\n        oddDigit.foreach(x\
    \ => {\n            if (!result.contains(x)) {\n                result += x\n\
    \            }\n        })\n        result.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp0kl_c5e.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp0kl_c5e.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenDigit\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp0kl_c5e.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddDigit\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if (digit % 2 == 0) {\n                result.add(x(i))\n       \
    \     }\n        }\n        result.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphfbccy4.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793040
