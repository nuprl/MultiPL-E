name: HumanEval_48_is_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Checks if given string is a palindrome\n    // >>> isPalindrome((\"\"))\n\
  \    // (true)\n    // >>> isPalindrome((\"aba\"))\n    // (true)\n    // >>> isPalindrome((\"\
  aaaaa\"))\n    // (true)\n    // >>> isPalindrome((\"zbcd\"))\n    // (false)\n\
  \    def isPalindrome(text : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\"\
  )) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
  aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
  xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"\
  xywzx\")) == (false));\n    }\n\n}\n"
completions: ["        val reversed = new StringBuilder(text).reverse.toString\n \
    \       text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse)\n\
    \        val reversedString = reversed.toString\n        text == reversedString",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse)\n\
    \        return text == reversed.toString", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        var i = 0\n        var j = text.length -\
    \ 1\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j))\
    \ {\n                return false\n            }\n            i += 1\n       \
    \     j -= 1\n        }\n        return true", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = text.tail.reverse\n      \
    \  val reversedString = reversed.mkString\n        if (text == reversedString)\
    \ true\n        else false", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = text.tail.reverse\n      \
    \  val isPalindrome = text == reversed\n        return isPalindrome", "      \
    \  val reversed = new StringBuilder(text).reverse.toString()\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        var i = 0\n        var j = text.length -\
    \ 1\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j))\
    \ {\n                return false\n            }\n            i += 1\n       \
    \     j -= 1\n        }\n        return true", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = text.tail.reverse\n      \
    \  val reversedString = reversed.mkString\n        text == reversedString", " \
    \       val reversed = new StringBuilder(text).reverse.toString\n        text\
    \ == reversed", "        val reversed = text.tail.reverse\n        val reversedString\
    \ = reversed.mkString\n        text.head == reversedString", "        val reversed\
    \ = new StringBuilder(text).reverse.toString\n        text == reversed", "   \
    \     val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = text.tails.reverse\n     \
    \   val isPalindrome = text == reversed\n        return isPalindrome", "     \
    \   val reversed = new StringBuilder(text).reverse.toString\n        text == reversed",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        var i = 0\n        var j = text.length - 1\n        while\
    \ (i < j) {\n            if (text.charAt(i) != text.charAt(j)) {\n           \
    \     return false\n            }\n            i += 1\n            j -= 1\n  \
    \      }\n        return true", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse)\n\
    \        return text == reversed.toString", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse)\n\
    \        return text == reversed.toString", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        var reversed = new StringBuilder(text).reverse.toString()\n\
    \        return text == reversed", "        val reversed = new StringBuilder(text.reverse)\n\
    \        return text == reversed.toString", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse)\n\
    \        return text.equals(reversed.toString)", "        val chars = text.map(_.toChar)\n\
    \        val reversed = chars.reverse\n        chars.forall(x => x == reversed(x))",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        var reversed = new StringBuilder\n        var index = 0\n\
    \        while (index < text.length / 2) {\n            reversed.append(text.charAt(index))\n\
    \            reversed.append(text.charAt(text.length - 1 - index))\n         \
    \   index += 1\n        }\n        return reversed.toString() == text", "    \
    \    val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = text.tail.reverse\n      \
    \  val firstHalf = text.take(text.length / 2)\n        val secondHalf = text.drop(text.length\
    \ / 2)\n        firstHalf == secondHalf", "        val reversed = new StringBuilder(text.reverse)\n\
    \        return text == reversed.toString", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val chars = text.map(_.toInt).toList\n  \
    \      val reversed = chars.reverse\n        chars.forall(x => x == reversed(x))",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse)\n\
    \        return text.equals(reversed.toString)", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        var reversed = \"\"\n        var i = 0\n\
    \        var j = 0\n        while(i < text.length && j < text.length) {\n    \
    \        if(text.charAt(i) == text.charAt(j)) {\n                reversed = reversed.concat(text.charAt(i))\n\
    \                i += 1\n                j += 1\n            } else if(text.charAt(i)\
    \ != text.charAt(j)) {\n                return false\n            }\n        }\n\
    \        if(i < text.length && j < text.length) {\n            return false\n\
    \        }\n        return true", "        val reversed = new StringBuilder(text.reverse)\n\
    \        reversed.equals(text)", "        var reversed = new StringBuilder()\n\
    \        var i = 0\n        var j = 0\n        while (i < text.length && j < text.length)\
    \ {\n            reversed.append(text.charAt(j))\n            j++\n        }\n\
    \        while (i < text.length) {\n            reversed.append(text.charAt(i))\n\
    \            i += 1\n        }\n        return reversed.toString() == text", " \
    \       val reversed = new StringBuilder(text.reverse)\n        return text ==\
    \ reversed", "        var reversedText = text.reverse\n        var isPalindrome\
    \ = true\n        for(i <- 0 until text.length){\n            if(text.charAt(i)\
    \ != reversedText.charAt(i)){\n                isPalindrome = false\n        \
    \        break\n            }\n        }\n        return isPalindrome", "    \
    \    val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        var reversed = \"\"\n        var i = 0\n\
    \        var j = 0\n        while(i < text.length && j < text.length) {\n    \
    \        reversed = reversed + text.charAt(i)\n            i = i + 1\n       \
    \     j = j + 1\n        }\n        if(text == reversed) {\n            return\
    \ true\n        }\n        return false", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        var i = 0\n        var j = text.length -\
    \ 1\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j))\
    \ {\n                return false\n            }\n            i += 1\n       \
    \     j -= 1\n        }\n        return true", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        var reversed = \"\"\n        var i = 0\n\
    \        while (i < text.length / 2) {\n            reversed = reversed + text.charAt(i)\n\
    \            i += 1\n        }\n        if (text == reversed) {\n            return\
    \ true\n        }\n        return false", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val charArray = text.toCharArray\n      \
    \  val reversedArray = charArray.reverse\n        val isPalindrome = charArray.zip(charArray).forall\
    \ { case (first, second) => first == second }\n        return isPalindrome", " \
    \       val reversed = new StringBuilder(text).reverse.toString\n        text\
    \ == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        var reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = text.tail.reverse\n      \
    \  val isPalindrome = text == reversed\n        return isPalindrome", "      \
    \  val reversed = new StringBuilder(text).reverse.toString\n        text == reversed",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text.reverse)\n       \
    \ return text == reversed.toString", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        var reversed = \"\"\n        var index =\
    \ 0\n        for(i <- 0 until text.length){\n            reversed = reversed +\
    \ text.charAt(i)\n        }\n        if(text == reversed){\n            return\
    \ true\n        }\n        return false", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        var reversed = \"\"\n        var i = 0\n\
    \        var j = 0\n        while (i < text.length && j < text.length) {\n   \
    \         if (text.charAt(i) != text.charAt(j)) {\n                reversed =\
    \ \"\"\n                return false\n            }\n            reversed = reversed\
    \ + text.charAt(j)\n            i = i + 1\n            j = j + 1\n        }\n\
    \        if (i == text.length && j == text.length) {\n            return true\n\
    \        }\n        return false", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        var i = 0\n        var j = text.length -\
    \ 1\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j))\
    \ {\n                return false\n            }\n            i += 1\n       \
    \     j -= 1\n        }\n        return true", "        val reversed = text.tail.reverse\n\
    \        val firstChar = text.head\n        val lastChar = text.last\n       \
    \ val isPalindrome = firstChar == lastChar && reversed == text\n        return\
    \ isPalindrome", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse).reverse.toString\n\
    \        text == reversed", "        var reversed = new StringBuilder\n      \
    \  var i = 0\n        var j = 0\n        while (i < text.length && j < text.length)\
    \ {\n            if (text.charAt(i) != text.charAt(j)) {\n                reversed.append(text.charAt(i))\n\
    \                reversed.append(text.charAt(j))\n                i += 1\n   \
    \             j += 1\n            } else {\n                i += 1\n         \
    \       j += 1\n            }\n        }\n        if (i == text.length && j ==\
    \ text.length) {\n            return true\n        }\n        return false", " \
    \       val charArray = text.toCharArray\n        val reversed = new Array[Char](charArray.length)\n\
    \        var i = 0\n        var j = 0\n        while (i < charArray.length &&\
    \ j < charArray.length) {\n            reversed(j) = charArray(i)\n          \
    \  i += 1\n            j += 1\n        }\n        charArray == reversed", "  \
    \      val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        var reversed = \"\"\n        var i = 0\n        var j =\
    \ 0\n        while(i < text.length && j < text.length) {\n            if(text.charAt(i)\
    \ == text.charAt(j)) {\n                reversed = reversed + text.charAt(i)\n\
    \                i += 1\n                j += 1\n            } else {\n      \
    \          reversed = reversed + text.charAt(i)\n                i += 1\n    \
    \        }\n        }\n        if(reversed == text) {\n            return true\n\
    \        } else {\n            return false\n        }", "        var reversed\
    \ = new StringBuilder(text).reverse.toString\n        return text == reversed",
  "        val reversed = new StringBuilder(text.reverse)\n        val reversedText\
    \ = reversed.toString\n        return text == reversedText", "        val reversed\
    \ = new StringBuilder(text).reverse.toString\n        text == reversed"]
stop_tokens:
- "\n    }\n"
