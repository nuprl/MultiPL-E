language: scala
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(word => prime(word.length))\n        val result = primes.filter(prime\
    \ => words.count(_ == prime) == 1)\n        result.mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1vhw_po1.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mword\e[0m => prime(word.length))\n\e[31m\e[31m   |\e[0m                  \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \           Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp1vhw_po1.scala:20:58\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e[36mword\e[0m => prime(word.length))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).distinct\n \
    \       val result = primes.foldLeft(\"\")( (acc, prime) => acc + (prime + \"\
    \ \"))\n        primes.foldLeft(\"\")( (acc, prime) => acc + (prime + \" \"))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppc1ydzm8.scala:25)\n\tat Problem.main(tmppc1ydzm8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val length = word.length\n            if(length == 1) {\n         \
    \       result.add(word)\n            } else {\n                val prime = scala.math.BigInt(length).isPrime\n\
    \                if(prime) {\n                    result.add(word)\n         \
    \       }\n            }\n        }\n        result.mkString(\" \")\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk60r987d.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk60r987d.scala:26:54\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e\
    [0m \e[36mprime\e[0m = scala.math.BigInt(length).isPrime\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            value isPrime is not a member of BigInt\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val length = word.length\n            if(length == 1) {\n         \
    \       result += \"1\"\n            } else if(length == 2 && word.charAt(0) ==\
    \ word.charAt(1)) {\n                result += \"2\"\n            } else if(length\
    \ == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ {\n                result += \"3\"\n            } else if(length == 4 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5))\
    \ {\n                result += \"4\"\n            } else if(length == 5 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7)) {\n                result += \"5\"\n  \
    \          } else if(length == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) {\n                result += \"6\"\n  \
    \          } else if(length == 7 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11)) {\n\
    \                result += \"7\"\n            } else if(length == 8 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13)) {\n              \
    \  result += \"8\"\n            } else if(length == 9 && word.charAt(0) == word.charAt(1)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10) ==\
    \ word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(14) ==\
    \ word.charAt(15)) {\n                result += \"9\"\n            } else if(length\
    \ == 10 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14) == word.charAt(15) && word.charAt(16) ==\
    \ word.charAt(17)) {\n                result += \"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps2lp9w1m.scala:42:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m                result += \"\n\e[31m\e[31m   |\e[0m \
    \                         ^\e[0m\n\e[31m   |\e[0m                          unclosed\
    \ string literal\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps2lp9w1m.scala:55:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m55 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmps2lp9w1m.scala:20:25 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- Warning: /tmp/tmps2lp9w1m.scala:44:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m44 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659793946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase).toList\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).distinct\n \
    \       val result = primes.map(x => words.filter(_.length == x).mkString(\" \"\
    )).mkString(\" \")\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5dub1ps2.scala:25)\n\tat Problem.main(tmp5dub1ps2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (length == 2 || length ==\
    \ 3 || length == 5 || length == 7 || length == 11) {\n                result.add(word)\n\
    \            }\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9655n5kj.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ resultSet = mutable.Set[String]()\n        for(word <- words) {\n          \
    \  val len = word.length\n            val isPrime = len == 2 || len == 3 || len\
    \ == 5 || len == 7 || len == 11 || len == 13\n            if(isPrime) {\n    \
    \            resultSet += word\n            }\n        }\n        resultSet.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp79732d5m.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresultSet\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val length = word.length\n            if(length == 2 || length == 3\
    \ || length == 5 || length == 7 || length == 11) {\n                result.add(word)\n\
    \            }\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_p2pfhho.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val length = word.length\n            val isPrime = length == 2 ||\
    \ length == 3 || length == 5 || length == 7 || length == 11 || length == 13\n\
    \            if(isPrime) {\n                result += word\n            }\n  \
    \      }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2pdfjkic.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (isPrime(length)) {\n   \
    \             result += (word)\n            }\n        }\n        result mkString\
    \ \" \"\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoavb1th0.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoavb1th0.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(length)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length).filter(_.isPrime)\n        val result\
    \ = primes.map(word => words.filter(_.toUpperCase.contains(word)).mkString(\"\
    \ \"))\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps_0qnnld.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).filter(_.isPrime)\n        val result\
    \ = primes.foldLeft(\"\")( (acc, prime) => acc + prime + \" \" + word )\n    \
    \    result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmsti2qf0.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpmsti2qf0.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmsti2qf0.scala:21:78\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = primes.foldLeft(\e[31m\"\"\e[0m)( (\e[36macc\e[0m, \e[36mprime\e\
    [0m) => acc + prime + \e[31m\" \"\e[0m + word )\n\e[31m\e[31m   |\e[0m       \
    \                                                                       ^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         Not\
    \ found: word\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            val primes = primes(length)\n\
    \            for (prime <- primes) {\n                if (length == prime) {\n\
    \                    result += (word + \" \")\n                }\n           \
    \ }\n        }\n        result.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmwmou41.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").toList\n \
    \       val primes = words.map(x => prime(x))\n        val result = primes.filter(x\
    \ => words.count(y => prime(y) == x) == 1).mkString(\" \")\n        primes.toList.sortWith(_\
    \ < _).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4hx_8vz.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4hx_8vz.scala:21:57\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = primes.filter(\e[36mx\e[0m => words.count(\e[36my\e[0m => prime(y)\
    \ == x) == \e[31m1\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                                                      ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                        Not found: prime\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq4hx_8vz.scala:22:33\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        primes.toList.sortWith(_\
    \ < _).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \          ^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of Nothing, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\e[31m\
    \   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\e[31m\
    \   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import math.BigDecimal.RoundingMode.ValueOrdering.mkOrderingOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 != 0).mkString(\" \")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5b_uguoj.scala:25)\n\tat Problem.main(tmp5b_uguoj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).map(x => x).distinct\n\
    \        val result = primes.foldLeft(\"\")( (acc, prime) => acc + \" \" + words.filter(x\
    \ => x.length == prime).mkString(\" \"))\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0fcxw93w.scala:25)\n\tat Problem.main(tmp0fcxw93w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).map(x => x *\
    \ x).filter(x => x != 1)\n        val result = primes.map(x => words.filter(y\
    \ => y.length == x).mkString(\" \"))\n        result.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzz9lt4fg.scala:25)\n\tat Problem.main(tmpzz9lt4fg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(_.length).filter(x => x % 2 != 0).distinct\n        val result\
    \ = primes.foldLeft(\"\")( (acc, prime) => acc + prime + \" \" + words.filter(_.length\
    \ == prime).mkString(\" \"))\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgkcdir50.scala:25)\n\tat Problem.main(tmpgkcdir50.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (length == 1) {\n       \
    \         result += \"1\"\n            } else {\n                val primes =\
    \ primeFactors(length)\n                for (prime <- primes) {\n            \
    \        if (length == prime) {\n                        result += word\n    \
    \                    break\n                    }\n                }\n       \
    \     }\n        }\n        return result.toString()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmn510d2j.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmn510d2j.scala:26:29\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e\
    [0m \e[36mprimes\e[0m = primeFactors(length)\n\e[31m\e[31m   |\e[0m          \
    \                   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \      Not found: primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 == 0).mkString(\" \")\n        words.filter(x => x % 2 == 0).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyuufp_fq.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(\e[36mx\e[0m => x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").toList\n \
    \       val primes = words.map(x => x.length)\n        val primesSet = primes.toSet\n\
    \        val result = new mutable.ListBuffer[String]()\n        for (prime <-\
    \ primes) {\n            val primeSet = primes.filter(x => x % prime == 0)\n \
    \           val primeSetSet = primeSet.map(x => x.toSet)\n            val primeSetSetSet\
    \ = primeSetSet.toSet\n            val primeSetSetSetSet = primeSetSetSet.toSet\n\
    \            if (primeSetSetSetSet == primeSetSet) {\n                primeSetSetSet.foreach(x\
    \ => result += x)\n            }\n        }\n        primes.foreach(x => result\
    \ += x)\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm_r5jcwj.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm_r5jcwj.scala:25:50\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprimeSetSet\e[0m = primeSet.map(\e[36mx\e[0m => x.toSet)\n\e[31m\e[31m\
    \   |\e[0m                                                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m              value toSet is not a member of Int - did you mean x.toInt?\n\
    \e[31m\e[31m-- Error: /tmp/tmpm_r5jcwj.scala:28:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mif\e[0m (primeSetSetSetSet == primeSetSet)\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mValues of types Set[Nothing] and List[Nothing] cannot be compared\
    \ with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val length = word.length\n            val primes = primeFactors(length)\n\
    \            for(prime <- primes) {\n                if(length == prime) {\n \
    \                   result += (word + \" \")\n                }\n            }\n\
    \        }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphu9de5og.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphu9de5og.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprimes\e[0m = primeFactors(length)\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (length == 1) result.add(word)\n\
    \            else if (length == 2 && word.head == word.last) result.add(word)\n\
    \            else if (length == 2 && word.head != word.last) result.add(word)\n\
    \            else if (length == 3 && word.head == word.last && word.head != word.last)\
    \ result.add(word)\n            else if (length == 3 && word.head != word.last\
    \ && word.head != word.last) result.add(word)\n            else result.add(word)\n\
    \        }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw81pcn2q.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).toSet\n        val result = primes.filter(x\
    \ => x % 2 != 0).mkString(\" \")\n        result + words.filter(x => x % 2 ==\
    \ 0).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1sf4gbh5.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp1sf4gbh5.scala:22:37 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        result + words.filter(\e[36mx\e[0m => x % \e\
    [31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of String, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659793957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(_.length).filter(x => x % 2 == 0).distinct\n        val result\
    \ = primes.foldLeft(\"\")( (acc, prime) => acc + \" \" + words.filter(x => x.length\
    \ == prime).mkString(\" \"))\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6wyc1lyd.scala:25)\n\tat Problem.main(tmp6wyc1lyd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793959
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase).toList\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).distinct\n \
    \       val result = primes.map(x => words.filter(_.length == x).mkString(\" \"\
    )).mkString(\" \")\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5dub1ps2.scala:25)\n\tat Problem.main(tmp5dub1ps2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 == 0).mkString(\" \")\n        val newWords = words.filter(x => x %\
    \ 2 == 0).mkString(\" \")\n        val newWordsLength = newWords.length\n    \
    \    val newWordsOrder = newWords.toSeq.sortBy(_.length)\n        val newWordsOrderLength\
    \ = newWordsOrder.length\n        val newWordsOrderLength = newWordsOrderLength.toString.toInt\n\
    \        val newWordsOrderLength = newWordsOrderLength.toString\n        val newWordsOrderLength\
    \ = newWordsOrderLength.toInt\n        val newWordsOrderLength = newWordsOrderLength.toString\n\
    \        val newWordsOrderLength = newWordsOrderLength.toInt\n        val newWordsOrderLength\
    \ = newWordsOrderLength.toString\n        val newWordsOrderLength = newWordsOrderLength.toInt\n\
    \        val newWordsOrderLength = newWordsOrderLength.toString\n        val newWordsOrderLength\
    \ = newWordsOrderLength.toInt\n        val newWordsOrderLength = newWordsOrderLength.toString\n\
    \        val newWordsOrderLength = newWordsOrderLength.toInt\n        val newWordsOrderLength\
    \ = newWordsOrderLength.toString\n        val newWordsOrderLength = newWordsOrderLength.toInt\n\
    \        val newWordsOrderLength = newWordsOrderLength.toString\n        val newWordsOrderLength\
    \ = newWordsOrderLength.toInt\n        val newWordsOrderLength = newWordsOrderLength.toString\n\
    \        val newWordsOrderLength = newWordsOrderLength.toInt\n        val newWordsOrderLength\
    \ = newWordsOrderLength.toString\n        val newWordsOrderLength = newWordsOrderLength.toInt\n\
    \        val newWordsOrderLength = newWordsOrderLength.toString\n        val newWordsOrderLength\
    \ = newWordsOrderLength.toInt\n        val newWordsOrderLength = newWordsOrderLength.toString\n\
    \        val newWordsOrderLength = newWordsOrderLength.toInt\n        val newWordsOrderLength\
    \ = newWordsOrderLength.toString\n        val newWordsOrderLength = newWordsOrderLength.toInt\n\
    \        val newWordsOrderLength = newWordsOrderLength.toString\n        val newWordsOrderLength\
    \ = newWordsOrderLength.toInt\n        val newWordsOrderLength = newWordsOrderLength.toString\n\
    \        val newWordsOrderLength = newWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpki58o048.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnewWordsOrderLength\e[0m\
    \ = newWordsOrderLength.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewWordsOrderLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewWordsOrderLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpki58o048.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnewWordsOrderLength\e[0m\
    \ = newWordsOrderLength.toString\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewWordsOrderLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewWordsOrderLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpki58o048.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnewWordsOrderLength\e[0m\
    \ = newWordsOrderLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewWordsOrderLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewWordsOrderLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpki58o048.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnewWordsOrderLength\e[0m\
    \ = newWordsOrderLength.toString\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewWordsOrderLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewWordsOrderLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpki58o048.scala:30:12"
  stdout: ''
  timestamp: 1659793959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (length == 1) {\n       \
    \         result.add(word)\n            } else {\n                val prime =\
    \ length\n                val primes = primes.filter(p => p > length)\n      \
    \          val primesSet = primes.toSet\n                val primesSetIterator\
    \ = primesSet.iterator\n                while (primesSetIterator.hasNext) {\n\
    \                    val prime = primesSetIterator.next\n                    val\
    \ primeFactors = primes.filter(p => p > prime)\n                    val primeFactorsSet\
    \ = primeFactors.toSet\n                    val primeFactorsSetIterator = primeFactorsSet.iterator\n\
    \                    while (primeFactorsSetIterator.hasNext) {\n             \
    \           val primeFactor = primeFactorsSetIterator.next\n                 \
    \       if (prime * primeFactor == length) {\n                            result.add(word)\n\
    \                            break\n                        }\n              \
    \      }\n                }\n            }\n        }\n        result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn9uc20a5.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn9uc20a5.scala:39:28\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m                        \
    \    break\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: break\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ newWords = mutable.ListBuffer[String]()\n        for (word <- words) {\n   \
    \         val length = word.length\n            if (length == 2 || length == 3\
    \ || length == 5 || length == 7 || length == 11) {\n                newWords +=\
    \ word\n            }\n        }\n        newWords.toList.toString()\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbcokdhz8.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewWords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").toList\n \
    \       val primes = words.map(x => x.length)\n        val primesSet = primes.toSet\n\
    \        val result = words.filter(x => primesSet.contains(x.length))\n      \
    \  result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpff5lrn33.scala:26)\n\tat Problem.main(tmpff5lrn33.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val len = word.length\n            if (len == 1) result.add(word)\n\
    \            else if (len == 2 || len == 3) {\n                val isPrime = true\n\
    \                for (i <- 2 to Math.sqrt(len)) {\n                    if (len\
    \ % i == 0) {\n                        isPrime = false\n                     \
    \   break\n                    }\n                }\n                if (isPrime)\
    \ result.add(word)\n            }\n        }\n        result.toList().mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq59pmswz.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq59pmswz.scala:26:40\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mfor\e[0m\
    \ (i <- \e[31m2\e[0m to Math.sqrt(len)) {\n\e[31m\e[31m   |\e[0m             \
    \                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         Found:    Double\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpq59pmswz.scala:28:32\
    \ -----------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                   \
    \     isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        Reassignment to\
    \ val isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq59pmswz.scala:29:24\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                        break\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 != 0).mkString(\" \")\n        val sortedWords = words.sortWith(_ <\
    \ _)\n        val sortedResult = result.split(\" \")\n        sortedWords.zip(sortedResult).map(x\
    \ => x._1 + \" \" + x._2).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuy3fidfb.scala:27)\n\tat Problem.main(tmpuy3fidfb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 == 0).mkString(\" \")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcs_5nuio.scala:25)\n\tat Problem.main(tmpcs_5nuio.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(x => x.length)\n        val result = primes.filter(_ % 2\
    \ == 0).mkString(\" \")\n        words.filter(x => x.length == result.length).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpumkj4te3.scala:25)\n\tat Problem.main(tmpumkj4te3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase).toList\n\
    \        val primes = words.map(_.length).filter(x => x > 1).distinct\n      \
    \  val result = new mutable.ListBuffer[String]()\n        primes.foreach { prime\
    \ =>\n            val primeWords = words.filter(word => word.length == prime)\n\
    \            primeWords.foreach { word =>\n                result.add(word)\n\
    \            }\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdlkiyv6x.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(_\
    \ % 2 == 0).mkString(\" \")\n        val sortedWords = words.sortWith(_ < _)\n\
    \        val sortedResult = sortedWords.filter(_ % 2 == 0).mkString(\" \")\n \
    \       sortedResult\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr51jo7n4.scala:23:48 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msortedResult\e[0m = sortedWords.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                              ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659793960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 == 0).mkString(\" \")\n        val result2 = words.filter(x => x %\
    \ 2 == 0).mkString(\" \")\n        result == result2 ? result : \"\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp61f1ofrv.scala:22:42 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult2\e[0m = words.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                        ^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue % is not a member of String, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp61f1ofrv.scala:23:26\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        result == result2\
    \ ? result : \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value ? is not a member of String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (length == 2 || length ==\
    \ 3 || length == 5 || length == 7 || length == 11) {\n                result.add(word)\n\
    \            }\n        }\n        result.toString()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjx0j06c1.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (length == 2 || length ==\
    \ 3 || length == 5 || length == 7 || length == 11) {\n                result.add(word)\n\
    \            }\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9655n5kj.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(x => prime(x))\n        val result = primes.filter(x => words.count(y\
    \ => prime(y) == x) == 1)\n        val sortedResult = result.sortWith((x,y) =>\
    \ x.compare(y))\n        sortedResult.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmwaw9n00.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpmwaw9n00.scala:20:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \   No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m            \
    \                              where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659793960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(x => math.gcd(x, 2)).toSet\n        val result\
    \ = primes.map(x => words.filter(y => math.gcd(y, x) == x))\n        val result\
    \ = result.flatten.toList\n        result.sortWith(_ < _)\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo4jcilor.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.flatten.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpo4jcilor.scala:19:49 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e[31m\" \"\e[0m).filter(_.isLetter).toList\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo4jcilor.scala:20:41\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = words.map(\e[36mx\e[0m => math.gcd(x, \e[31m2\e[0m)).toSet\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value gcd is not a member of math\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo4jcilor.scala:21:60 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = primes.map(\e\
    [36mx\e[0m => words.filter(\e[36my\e[0m => math.gcd(y, x) == x))\n\e[31m\e[31m\
    \   |\e[0m                                                       ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                       value gcd is not a member\
    \ of math\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo4jcilor.scala:23:15\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        result.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     value sortWith is not a member of Set[List[String]]\n5 errors found\n"
  stdout: ''
  timestamp: 1659793961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(x => prime(x))\n        val result = primes.filter(x\
    \ => words.count(y => x == y) == x).mkString(\" \")\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1xvc3koe.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1xvc3koe.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmp1xvc3koe.scala:21:65\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = primes.filter(\e[36mx\e[0m => words.count(\e[36my\e[0m => x\
    \ == y) == x).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous\
    \ overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35m==\e[0m in\
    \ \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\
    \e[31m   |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m\
    \   |\e[0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e\
    [0m (x: Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0m (x$0:\
    \ Any): Boolean\n\e[31m   |\e[0mall match arguments ((x : Nothing))\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659793960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).distinct\n \
    \       val result = primes.foldLeft(\"\")( (acc, prime) => acc + prime + \" \"\
    \ + words.filter(x => x.length == prime).mkString(\" \"))\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp14_04591.scala:25)\n\tat Problem.main(tmp14_04591.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(word => prime(word.length))\n        val result = primes.filter(prime\
    \ => words.count(word => prime(word.length) == word.length) == 1).mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptvy9it7r.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mword\e[0m => prime(word.length))\n\e[31m\e[31m   |\e[0m                  \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \           Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmptvy9it7r.scala:20:58\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e[36mword\e[0m => prime(word.length))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659793961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        val primes = mutable.ListBuffer[Int]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val isPrime = true\n            for(i <- 2 to length) {\n               \
    \ if(length % i == 0) {\n                    isPrime = false\n               \
    \     break\n                }\n            }\n            if(isPrime) {\n   \
    \             primes += length\n                result += word\n            }\n\
    \        }\n        primes.toList.sortWith(_ < _)\n        val sortedWords = result.toList\n\
    \        sortedWords.sortWith(_ < _)\n        sortedWords.mkString(\" \")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyich758r.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyich758r.scala:21:21\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpyich758r.scala:27:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                   \
    \ isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val isPrime\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyich758r.scala:28:20 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val length = word.length\n            val prime = length.toInt\n  \
    \          val isPrime = true\n            for(i <- 2 to length.toInt) {\n   \
    \             if(length.toInt % i == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if(isPrime)\
    \ {\n                result += word\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbqprfzlu.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpbqprfzlu.scala:27:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                   \
    \ isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val isPrime\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbqprfzlu.scala:28:20 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        val primes = mutable.ListBuffer[Int]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (primes.contains(length)) {\n                result.add(word)\n     \
    \       } else {\n                primes += length\n            }\n        }\n\
    \        result.toString()\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx43t7oj9.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx43t7oj9.scala:21:21\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase).toSet\n\
    \        val primes = words.toSeq.distinct.map(_.length).toSeq\n        val result\
    \ = primes.foldLeft(\"\") { (result, prime) =>\n            val primes = words.filter(_.length\
    \ == prime).toSet\n            val newWords = primes.foldLeft(\"\") { (result,\
    \ word) =>\n                if (result.length == 0) result else result + \" \"\
    \ + word\n            }\n            result + \" \" + newWords\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7zj9s722.scala:31)\n\tat Problem.main(tmp7zj9s722.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length).filter(_.isPrime)\n        val result\
    \ = primes.map(_.toString).mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwygynrv_.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659793965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(_\
    \ % 2 == 0).mkString(\" \")\n        words.filter(_ % 2 == 0).mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzjvfhnjm.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue % is not a member of String, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659793966
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        val primes = mutable.ListBuffer[Int]()\n\
    \        val primesSet = mutable.Set[Int]()\n        for(word <- words) {\n  \
    \          val length = word.length\n            val isPrime = true\n        \
    \    for(i <- 2 to length) {\n                if(length % i == 0) {\n        \
    \            isPrime = false\n                    break\n                }\n \
    \           }\n            if(isPrime) {\n                primes += length\n \
    \               primesSet += length\n            }\n        }\n        primes.foreach(p\
    \ => primesSet += p)\n        primesSet.foreach(p => primes += p)\n        primes.foreach(p\
    \ => result += (primesSet - primes).filter(_ % p).mkString(\" \")))\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpljpvpkzn.scala:39:87 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        primes.foreach(\e[36mp\e[0m => result += (primesSet\
    \ - primes).filter(_ % p).mkString(\e[31m\" \"\e[0m)))\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \           ^\e[0m\n\e[31m   |\e[0m                                          \
    \   '}' expected, but ')' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpljpvpkzn.scala:52:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m52 |\e[0m}\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0meof expected, but '}' found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpljpvpkzn.scala:20:25 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpljpvpkzn.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpljpvpkzn.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpljpvpkzn.scala:28:28 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    isPrime = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Reassignment to val isPrime\n\e[31m   |\e[0m\n\e[3"
  stdout: ''
  timestamp: 1659793965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).toSet\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (prime <- primes) {\n            val primeString = new StringBuilder()\n\
    \            for (word <- words) {\n                if (primeString.length + word.length\
    \ == prime) {\n                    primeString += word\n                }\n  \
    \          }\n            if (primeString.nonEmpty) {\n                result\
    \ += primeString.toString()\n            }\n        }\n        result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgqdx3lz1.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgqdx3lz1.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgqdx3lz1.scala:26:35\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                    primeString\
    \ += word\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (word : String)\n\e\
    [31m   |\e[0m                                   Required: Char\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659793968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").toList\n \
    \       val primes = words.map(x => x.length)\n        val result = primes.filter(x\
    \ => x % 2 == 0).mkString(\" \")\n        words.filter(x => x % 2 == 0).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptca4v4xk.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(\e[36mx\e[0m => x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659793968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            val prime = length.toInt\n \
    \           val isPrime = true\n            val isPrime2 = true\n            val\
    \ isPrime3 = true\n            val isPrime4 = true\n            val isPrime5 =\
    \ true\n            val isPrime6 = true\n            val isPrime7 = true\n   \
    \         val isPrime8 = true\n            val isPrime9 = true\n            val\
    \ isPrime10 = true\n            val isPrime11 = true\n            val isPrime12\
    \ = true\n            val isPrime13 = true\n            val isPrime14 = true\n\
    \            val isPrime15 = true\n            val isPrime16 = true\n        \
    \    val isPrime17 = true\n            val isPrime18 = true\n            val isPrime19\
    \ = true\n            val isPrime20 = true\n            val isPrime21 = true\n\
    \            val isPrime22 = true\n            val isPrime23 = true\n        \
    \    val isPrime24 = true\n            val isPrime25 = true\n            val isPrime26\
    \ = true\n            val isPrime27 = true\n            val isPrime28 = true\n\
    \            val isPrime29 = true\n            val isPrime30 = true\n        \
    \    val isPrime31 = true\n            val isPrime32 = true\n            val isPrime33\
    \ = true\n            val isPrime34 = true\n            val isPrime35 = true\n\
    \            val isPrime36 = true\n            val isPrime37 = true\n        \
    \    val isPrime38 = true\n            val isPrime39 = true\n            val isPrime40\
    \ = true\n            val isPrime41 = true\n            val isPrime42 = true\n\
    \            val isPrime43 = true\n            val isPrime44 = true\n        \
    \    val isPrime45 = true\n            val isPrime46 = true\n            val isPrime47\
    \ = true\n            val isPrime48 = true\n            val isPrime49 = true\n\
    \            val isPrime50 = true\n            val isPrime51 = true\n        \
    \    val isPrime52 = true\n            val isPrime53 = true\n            val isPrime54\
    \ = true\n            val isPrime55 = true\n            val isPrime56 = true\n\
    \            val isPrime57 = true\n            val isPrime58 = true\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp94sbxe54.scala:95:0 ----------------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp94sbxe54.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp94sbxe54.scala:94:1 ---------------------\e[0m\e[0m\n\e[31m94\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp94sbxe54.scala:84:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m84 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659793969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val length = word.length\n            val primes = primeFactors(length)\n\
    \            for(prime <- primes) {\n                if(length == prime) {\n \
    \                   result += (word + \" \")\n                }\n            }\n\
    \        }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphu9de5og.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphu9de5og.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprimes\e[0m = primeFactors(length)\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(x => x.length)\n        val result = new mutable.ListBuffer[String]()\n\
    \        primes.foreach(x => if (x % 2 == 0) result.add(x) else result.add(x/2))\n\
    \        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq_b1uk36.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).toSet\n        val result = new StringBuilder\n\
    \        primes.foreach { prime =>\n            val primes = words.filter(_.length\
    \ == prime)\n            primes.foreach { word =>\n                result.append(word)\n\
    \            }\n        }\n        result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf7okrezd.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659793970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (length == 1) {\n       \
    \         result.add(word)\n            } else {\n                val primes =\
    \ primes(length)\n                for (prime <- primes) {\n                  \
    \  if (prime * prime > length) {\n                        break\n            \
    \        }\n                    if (prime * prime == length) {\n             \
    \           result.add(word)\n                        break\n                \
    \    }\n                }\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo7ozvdk0.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase).toList\n\
    \        val primes = words.map(_.length).filter(x => x > 1).distinct\n      \
    \  val result = primes.map(x => words.filter(y => y.length == x).mkString(\" \"\
    )).mkString(\" \")\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ckgx0jr.scala:25)\n\tat Problem.main(tmp1ckgx0jr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase).toList\n\
    \        val primes = words.map(_.length).filter(x => x > 1).distinct\n      \
    \  val result = primes.map(x => words.filter(y => y.length == x).mkString(\" \"\
    )).mkString(\" \")\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ckgx0jr.scala:25)\n\tat Problem.main(tmp1ckgx0jr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(_.length).filter(x => x % 2 != 0).distinct\n        val result\
    \ = primes.foldLeft(\"\")( (acc, prime) => acc + words(prime) + \" \")\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu4m46oxw.scala:25)\n\tat Problem.main(tmpu4m46oxw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 == 0).mkString(\" \")\n        val result2 = words.filter(x => x %\
    \ 2 == 0).mkString(\" \")\n        val result3 = words.filter(x => x % 2 == 1).mkString(\"\
    \ \")\n        result + result2 + result3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy7j0dx3x.scala:22:42 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult2\e[0m = words.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                        ^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue % is not a member of String, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy7j0dx3x.scala:23:42\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mresult3\e[0m = words.filter(\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e\
    [0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659793971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (length == 1) {\n       \
    \         result.add(word)\n            } else {\n                val primes =\
    \ primes(length)\n                for (prime <- primes) {\n                  \
    \  if (prime * prime > length) {\n                        break\n            \
    \        }\n                    if (length == prime) {\n                     \
    \   result.add(word)\n                        break\n                    }\n \
    \               }\n            }\n        }\n        result.mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5fo6ansz.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(_.length).filter(x => x % 2 != 0).distinct\n        val result\
    \ = primes.foldLeft(\"\")( (acc, prime) => acc + \" \" + prime)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6kow3s8.scala:25)\n\tat Problem.main(tmpp6kow3s8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        val primes = mutable.Set[Int]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val prime = length.toInt\n            primes += prime\n            if(primes.contains(prime))\
    \ {\n                result += word\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvp4k74ku.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvp4k74ku.scala:21:21\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(x => prime(x))\n        val result = primes.filter(x\
    \ => words.count(y => x == y) == x).mkString(\" \")\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1xvc3koe.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1xvc3koe.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmp1xvc3koe.scala:21:65\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = primes.filter(\e[36mx\e[0m => words.count(\e[36my\e[0m => x\
    \ == y) == x).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous\
    \ overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35m==\e[0m in\
    \ \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\
    \e[31m   |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m\
    \   |\e[0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e\
    [0m (x: Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0m (x$0:\
    \ Any): Boolean\n\e[31m   |\e[0mall match arguments ((x : Nothing))\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659793960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 == 0).mkString(\" \")\n        result + words.filter(x => x % 2 ==\
    \ 0).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplwqfxy59.scala:22:37 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        result + words.filter(\e[36mx\e[0m => x % \e\
    [31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of String, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ newWords = mutable.ListBuffer[String]()\n        for(word <- words) {\n    \
    \        val len = word.length\n            val prime = len.filter(_ % 2 == 0).length\n\
    \            if(prime == 1) {\n                newWords += word\n            }\n\
    \        }\n        newWords.toList().mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj0iut6cx.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewWords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpj0iut6cx.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mprime\e[0m = len.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value filter\
    \ is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659793970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).distinct\n \
    \       val result = primes.foldLeft(\"\")( (acc, prime) => acc + (prime + \"\
    \ \"))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplccdbzhh.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659793971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 == 0).mkString(\" \")\n        result + words.filter(x => x % 2 ==\
    \ 0).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplwqfxy59.scala:22:37 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        result + words.filter(\e[36mx\e[0m => x % \e\
    [31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of String, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).toSet\n        val result = new mutable.ListBuffer[String]()\n\
    \        primes.foreach { prime =>\n            val primes = words.filter(_.length\
    \ == prime).toList\n            primes.foreach { word =>\n                result.add(word)\n\
    \            }\n        }\n        result.toList.reverse.mkString(\" \")\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp31sxw2xp.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp31sxw2xp.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 == 0).mkString(\" \")\n        val sortedWords = words.sortWith(_ <\
    \ _)\n        val sortedResult = result.sortWith(_ < _)\n        sortedWords.zip(sortedResult).map(x\
    \ => x._1 + \" \" + x._2).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq9vyd8rh.scala:27)\n\tat Problem.main(tmpq9vyd8rh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val len = word.length\n            val prime = len.filter(_ % 2 ==\
    \ 0).length\n            if(prime == 1) {\n                result += word\n  \
    \          }\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj9ezf0d1.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj9ezf0d1.scala:23:28\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprime\e[0m = len.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                value filter is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(_\
    \ > 1).mkString(\" \")\n        words.filter(_ > 1).mkString(\" \")\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplpb3no2j.scala:22:25\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        words.filter(_ > \e[31m1\e\
    [0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \  ^\e[0m\n\e[31m   |\e[0m                         Found:    (\e[31m1\e[0m : Int)\n\
    \e[31m   |\e[0m                         Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(x => prime(x))\n        val result = primes.filter(x => words.count(y\
    \ => prime(y) == x) == 1).mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpybl6hmqw.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpybl6hmqw.scala:20:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \   No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m            \
    \                              where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659793975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ resultSet = mutable.Set[Int]()\n        for(word <- words) {\n            val\
    \ length = word.length\n            val isPrime = length == 2 || length == 3 ||\
    \ length == 5 || length == 7 || length == 11 || length == 13\n            if(isPrime)\
    \ {\n                resultSet += length\n            }\n        }\n        val\
    \ sortedResultSet = resultSet.sorted\n        val result = sortedResultSet.mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqs1yq7dp.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresultSet\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val length = word.length\n            val prime = length.toInt\n  \
    \          val isPrime = true\n            for(i <- 2 to length) {\n         \
    \       if(length%i == 0) {\n                    isPrime = false\n           \
    \         break\n                }\n            }\n            if(isPrime) {\n\
    \                result += word\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9lk4fmkw.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp9lk4fmkw.scala:27:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                   \
    \ isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val isPrime\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9lk4fmkw.scala:28:20 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).filter(_.isPrime).toList\n        val\
    \ result = primes.map(_.toString).mkString(\" \")\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpizg0mirh.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpizg0mirh.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime).toList\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659793977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(_.length).filter(_.isPrime)\n        val result = primes.map(word\
    \ => words.filter(w => w.length == word.length).mkString(\" \")).mkString(\" \"\
    )\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfkrhdtbe.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfkrhdtbe.scala:21:75\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = primes.map(\e[36mword\e[0m => words.filter(\e[36mw\e[0m => w.length\
    \ == word.length).mkString(\e[31m\" \"\e[0m)).mkString(\e[31m\" \"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                     value\
    \ length is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659793978
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").toList\n \
    \       val primes = words.map(_.length).toSet\n        val result = new StringBuilder\n\
    \        val primesSet = primes.toSeq\n        primesSet.foreach(p => {\n    \
    \        val primesSet = words.filter(_.length == p).toSet\n            primesSet.foreach(word\
    \ => result.append(word))\n        })\n        result.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcagm5l_p.scala:30)\n\tat Problem.main(tmpcagm5l_p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val length = word.length\n            val primes = primeFactors(length)\n\
    \            for(prime <- primes) {\n                if(length == prime) {\n \
    \                   result += word\n                }\n            }\n       \
    \ }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6zd80i0a.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6zd80i0a.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprimes\e[0m = primeFactors(length)\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase).toList\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).map(x => x).distinct\n\
    \        val result = primes.map(x => words.filter(y => y.length == x).mkString(\"\
    \ \")).mkString(\" \")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo45vdz1b.scala:25)\n\tat Problem.main(tmpo45vdz1b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase).toList\n\
    \        val primes = words.map(_.length)\n        val result = new mutable.ListBuffer[String]()\n\
    \        primes.foreach(p => {\n            val primeFactors = primes.filter(_\
    \ % p != 0)\n            primeFactors.foreach(f => {\n                val newWords\
    \ = words.filter(_ % f == 0)\n                result += newWords.mkString(\" \"\
    )\n            })\n        })\n        result.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmqpgq0kz.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmqpgq0kz.scala:25:46\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e\
    [0m \e[36mnewWords\e[0m = words.filter(_ % f == \e[31m0\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                                            ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659793980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(x => x.length)\n        val primesSet = primes.toSet\n  \
    \      val result = new mutable.ListBuffer[String]()\n        for(i <- 0 until\
    \ words.length){\n            val word = words(i)\n            if(primesSet.contains(word.length)){\n\
    \                result += (word)\n            }\n        }\n        result mkString\
    \ \" \"\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkepxm1xi.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(x => prime(x))\n        val result = primes.filter(x => words.count(y\
    \ => prime(y) == x) == 1).mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpybl6hmqw.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpybl6hmqw.scala:20:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \   No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m            \
    \                              where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659793975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(x => x.length)\n        val primesSet = primes.toSet\n  \
    \      val result = new mutable.ListBuffer[String]()\n        for(i <- primes.indices)\
    \ {\n            val prime = primes(i)\n            val primeSet = primes.filter(_\
    \ != prime)\n            val primeSetSize = primeSet.size\n            val primeSetIterator\
    \ = primeSet.iterator\n            while(primeSetIterator.hasNext) {\n       \
    \         val primeSetElement = primeSetIterator.next\n                val primeSetElementSize\
    \ = primeSetElement.length\n                val primeSetElementIterator = primeSetElement.iterator\n\
    \                while(primeSetElementIterator.hasNext) {\n                  \
    \  val primeSetElementElement = primeSetElementIterator.next\n               \
    \     val primeSetElementElementSize = primeSetElementElement.length\n       \
    \             val primeSetElementElementIterator = primeSetElementElement.iterator\n\
    \                    while(primeSetElementElementIterator.hasNext) {\n       \
    \                 val primeSetElementElementElement = primeSetElementElementIterator.next\n\
    \                        val primeSetElementElementElementSize = primeSetElementElementElement.length\n\
    \                        val primeSetElementElementElementIterator = primeSetElementElementElement.iterator\n\
    \                        while(primeSetElementElementElementIterator.hasNext)\
    \ {\n                            val primeSetElementElementElementElement = primeSetElementElementElementIterator.next\n\
    \                            val primeSetElementElementElementElementSize = primeSetElementElementElementElement.length\n\
    \                            val primeSetElementElementElementElementIterator\
    \ = primeSetElementElementElementElement.iterator\n                          \
    \  while(primeSetElementElementElementElementIterator.hasNext) {\n           \
    \                     val primeSetElementElementElementElementElement = primeSetElementElementElementElementIterator.next\n\
    \                                val primeSetElementElementElementElementElementSize\
    \ = primeSetElementElementElementElementElement.length\n                     \
    \           val primeSetElementElementElementElementElementIterator = primeSetElementElementElementElement.iterator\n\
    \                                while(primeSetElementElementElementElementIterator.hasNext)\
    \ {\n                                    val primeSetElementElementElementElementElementElement\
    \ = primeSetElementElementElementElementElementIterator.next\n               \
    \                     val primeSetElementElementElementElementElementElementSize\
    \ = primeSetElementElementElementElementElementElement.length\n              \
    \                      val primeSetElementElementElementElementElementElementIterator\
    \ = primeSetElementElementElementElementElement.iterator\n                   \
    \                 while(primeSetElementElementElementElementElementIterator.hasNext)\
    \ {\n                                        val primeSetElementElementElementElementElementElementElement\
    \ = primeSetElementElementElementElementElementIterator.next\n               \
    \                         val primeSetElementElementElementElementElementElementSize\
    \ = prime\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5hjgy3iq.scala:67:0 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5hjgy3iq.scala:22:25\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp5hjgy3iq.scala:30:58 ------------------------\e[0m\e[0m\n\e[31m30 |\e\
    [0m                \e[33mval\e[0m \e[36mprimeSetElementSize\e[0m = primeSetElement.length\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value length is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5hjgy3iq.scala:31:62\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                \e[33mval\e\
    [0m \e[36mprimeSetElementIterator\e[0m = primeSetElement.iterator\n\e[31m\e[31m\
    \   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value iterator is not a\
    \ member of Int\n\e[33m\e[33m-- Warning: /tmp/tmp5hjgy3iq.scala:56:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m56 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659793982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).distinct\n \
    \       val result = primes.map(x => words.filter(y => y.length == x).mkString(\"\
    \ \")).mkString(\" \")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvzn0kio7.scala:25)\n\tat Problem.main(tmpvzn0kio7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (length == 1) {\n       \
    \         result.add(word)\n            } else {\n                val primes =\
    \ primeFactors(length)\n                for (prime <- primes) {\n            \
    \        if (length == prime) {\n                        result.add(word)\n  \
    \                      break\n                    }\n                }\n     \
    \       }\n        }\n        result.toList().mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr4fnmvfe.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr4fnmvfe.scala:26:29\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e\
    [0m \e[36mprimes\e[0m = primeFactors(length)\n\e[31m\e[31m   |\e[0m          \
    \                   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \      Not found: primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 == 0).mkString(\" \")\n        words.filter(x => x % 2 == 0).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyuufp_fq.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(\e[36mx\e[0m => x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(x => math.gcd(x, 2)).toSet\n        val result\
    \ = primes.map(x => words.filter(y => math.gcd(x, y) == x)).flatten.toList\n \
    \       result.sortWith(_.length < _.length)\n        result.mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp23ug25st.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp23ug25st.scala:20:41 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => math.gcd(x, \e[31m2\e[0m)).toSet\n\e[31m\e[31m   |\e[0m        \
    \                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                  value gcd is not a member of math\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp23ug25st.scala:21:60 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = primes.map(\e[36mx\e\
    [0m => words.filter(\e[36my\e[0m => math.gcd(x, y) == x)).flatten.toList\n\e[31m\e\
    [31m   |\e[0m                                                       ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       value gcd is not a\
    \ member of math\n3 errors found\n"
  stdout: ''
  timestamp: 1659793983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(x => x.length)\n        val primesSet = primes.toSet\n  \
    \      val result = new mutable.ListBuffer[String]()\n        for (prime <- primes)\
    \ {\n            val primeSet = primes.filter(x => x % prime == 0)\n         \
    \   val primeSetSet = primeSet.toSet\n            if (primeSetSet.size == primes.size)\
    \ {\n                for (word <- words) {\n                    if (primeSetSet.contains(word.length))\
    \ {\n                        result += (word + \" \")\n                    }\n\
    \                }\n            }\n        }\n        result.toString()\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkgtrp9y7.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(x => x.length)\n        val primesSet = primes.toSet\n  \
    \      val result = new mutable.ListBuffer[String]()\n        for(i <- primes.indices)\
    \ {\n            val prime = primes(i)\n            val primeSet = primes.filter(_\
    \ != prime)\n            val primeSetSize = primeSet.size\n            if(primeSetSize\
    \ == 1) {\n                result ++= primeSet.toList\n            }\n       \
    \     else if(primeSetSize > 1) {\n                val primeSetIterator = primeSet.iterator\n\
    \                val primeSetIteratorNext = primeSetIterator.next\n          \
    \      val primeSetIteratorNextNext = primeSetIteratorNext.next\n            \
    \    val primeSetIteratorNextNextNext = primeSetIteratorNextNext.next\n      \
    \          val primeSetIteratorNextNextNextNext = primeSetIteratorNextNextNext.next\n\
    \                val primeSetIteratorNextNextNextNextNext = primeSetIteratorNextNextNextNext.next\n\
    \                val primeSetIteratorNextNextNextNextNextNext = primeSetIteratorNextNextNextNextNext.next\n\
    \                val primeSetIteratorNextNextNextNextNextNext = primeSetIteratorNextNextNextNextNext.next\n\
    \                val primeSetIteratorNextNextNextNextNextNextNext = primeSetIteratorNextNextNextNextNextNext.next\n\
    \                val primeSetIteratorNextNextNextNextNextNextNextNext = primeSetIteratorNextNextNextNextNextNextNext.next\n\
    \                val primeSetIteratorNextNextNextNextNextNextNextNextNext = primeSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \                val primeSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = primeSetIteratorNextNextNextNextNextNextNextNextNext.next\n              \
    \  val primeSetIteratorNextNextNextNextNextNextNextNextNextNextNext = primeSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \                val primeSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = primeSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n      \
    \          val primeSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primeSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n  \
    \              val primeSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = primeSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \                val primeSetIteratorNextNextNextNextNextNextNextNext\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9itc7frf.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9itc7frf.scala:60:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m60 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp9itc7frf.scala:22:25 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp9itc7frf.scala:33:68 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                \e[33mval\e[0m \e[36mprimeSetIteratorNextNext\e\
    [0m = primeSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                       \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                  value next is not a member of Int\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9itc7frf.scala:46:87 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m                \e[33mval\e[0m \e[36mprimeSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = primeSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: primeSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp9itc7frf.scala:49:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m49 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Lin"
  stdout: ''
  timestamp: 1659793984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(_.length).filter(x => x % 2 == 0).distinct\n        val result\
    \ = new mutable.ListBuffer[String]()\n        primes.foreach(x => result.addAll(words.filter(_.length\
    \ == x)))\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqglmiudy.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val length = word.length\n            val prime = scala.math.remainder(length,\
    \ 2)\n            if(prime == 0) {\n                result += (word + \" \")\n\
    \            }\n        }\n        result.toString()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb0bmrbzf.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb0bmrbzf.scala:23:35\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprime\e[0m = scala.math.remainder(length, \e[31m2\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       value remainder is not a member of math\n2 errors found\n"
  stdout: ''
  timestamp: 1659793983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        val primes = mutable.ListBuffer[Int]()\n\
    \        val primesSet = mutable.Set[Int]()\n        val primesSet2 = mutable.Set[Int]()\n\
    \        val primesSet3 = mutable.Set[Int]()\n        val primesSet4 = mutable.Set[Int]()\n\
    \        val primesSet5 = mutable.Set[Int]()\n        val primesSet6 = mutable.Set[Int]()\n\
    \        val primesSet7 = mutable.Set[Int]()\n        val primesSet8 = mutable.Set[Int]()\n\
    \        val primesSet9 = mutable.Set[Int]()\n        val primesSet10 = mutable.Set[Int]()\n\
    \        val primesSet11 = mutable.Set[Int]()\n        val primesSet12 = mutable.Set[Int]()\n\
    \        val primesSet13 = mutable.Set[Int]()\n        val primesSet14 = mutable.Set[Int]()\n\
    \        val primesSet15 = mutable.Set[Int]()\n        val primesSet16 = mutable.Set[Int]()\n\
    \        val primesSet17 = mutable.Set[Int]()\n        val primesSet18 = mutable.Set[Int]()\n\
    \        val primesSet19 = mutable.Set[Int]()\n        val primesSet20 = mutable.Set[Int]()\n\
    \        val primesSet21 = mutable.Set[Int]()\n        val primesSet22 = mutable.Set[Int]()\n\
    \        val primesSet23 = mutable.Set[Int]()\n        val primesSet24 = mutable.Set[Int]()\n\
    \        val primesSet25 = mutable.Set[Int]()\n        val primesSet26 = mutable.Set[Int]()\n\
    \        val primesSet27 = mutable.Set[Int]()\n        val primesSet28 = mutable.Set[Int]()\n\
    \        val primesSet29 = mutable.Set[Int]()\n        val primesSet30 = mutable.Set[Int]()\n\
    \        val primesSet31 = mutable.Set[Int]()\n        val primesSet32 = mutable.Set[Int]()\n\
    \        val primesSet33 = mutable.Set[Int\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpusqvj9yx.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpusqvj9yx.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpusqvj9yx.scala:21:21 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpusqvj9yx.scala:22:24 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpusqvj9yx.scala:23:25 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpusqvj9yx.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m"
  stdout: ''
  timestamp: 1659793983
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(_\
    \ % 2 == 0).mkString(\" \")\n        words.filter(_.length == result.length).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_hmvt22q.scala:25)\n\tat Problem.main(tmp_hmvt22q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793985
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val primesSet = primes.toSet\n\
    \        val result = new mutable.ListBuffer[String]()\n        for(prime <- primesSet)\
    \ {\n            val primesSet = primes.filter(x => x % prime == 0)\n        \
    \    val primesSetSize = primesSet.size\n            val primesSetIterator = primesSet.iterator\n\
    \            while(primesSetIterator.hasNext) {\n                val primesSetElement\
    \ = primesSetIterator.next\n                if(primesSetElement == prime) {\n\
    \                    val newWord = words.filter(x => x % primesSetElement == 0).mkString(\"\
    \ \")\n                    result += newWord\n                }\n            }\n\
    \        }\n        val resultString = result.toList.toString\n        resultString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9e7vh67j.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9e7vh67j.scala:30:54\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                    \e[33mval\e\
    [0m \e[36mnewWord\e[0m = words.filter(\e[36mx\e[0m => x % primesSetElement ==\
    \ \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                                        ^^^\e[0m\n\e[31m   |\e[0mvalue % is not\
    \ a member of String, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659793985
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).map(x => x +\
    \ 1)\n        val result = primes.filter(x => words.count(_ == x) == primes.length).mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9jfh2yws.scala:21:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = primes.filter(\e\
    [36mx\e[0m => words.count(_ == x) == primes.length).mkString(\e[31m\" \"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types String and Int cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659793984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 == 0).mkString(\" \")\n        words.filter(x => x % 2 == 0).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyuufp_fq.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(\e[36mx\e[0m => x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        val primes = mutable.Set[Int]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val prime = length.toInt\n            if(primes.contains(prime)) {\n    \
    \            result.add(word)\n            } else {\n                primes +=\
    \ prime\n            }\n        }\n        result.mkString(\" \")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm24gtjli.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm24gtjli.scala:21:21\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).distinct\n \
    \       val result = primes.foldLeft(\"\")(_ + _)\n        primes.map(x => result\
    \ + x + \" \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfk42lrg.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxfk42lrg.scala:22:18 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        primes.map(\e[36mx\e[0m => result + x + \e[31m\"\
    \ \"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").toList\n \
    \       val primes = words.map(_.length).filter(x => x % 2 == 0).distinct\n  \
    \      val result = primes.map(x => words.filter(_.length == x).mkString(\" \"\
    )).mkString(\" \")\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplv1o9v_k.scala:25)\n\tat Problem.main(tmplv1o9v_k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length).filter(x => x > 1).distinct\n      \
    \  val result = primes.foldLeft(\"\") { (res, prime) =>\n            val primeString\
    \ = primes.find(x => x == prime).map(x => words(x)).mkString(\" \")\n        \
    \    res + primeString\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 4\n\tat Problem$.$anonfun$6(tmpu5_4q2vq.scala:22)\n\tat Problem$.$anonfun$adapted$1(tmpu5_4q2vq.scala:22)\n\
    \tat scala.Option.map(Option.scala:242)\n\tat Problem$.$anonfun$4(tmpu5_4q2vq.scala:22)\n\
    \tat Problem$.$anonfun$adapted$2(tmpu5_4q2vq.scala:23)\n\tat scala.collection.ArrayOps$.foldLeft$extension(ArrayOps.scala:779)\n\
    \tat Problem$.wordsInSentence(tmpu5_4q2vq.scala:23)\n\tat Problem$.main(tmpu5_4q2vq.scala:28)\n\
    \tat Problem.main(tmpu5_4q2vq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).toList\n   \
    \     val result = primes.foldLeft(\"\")( (acc, prime) => acc + \" \" + prime)\n\
    \        val words = result.split(\" \").map(_.toUpperCase)\n        val result\
    \ = words.foldLeft(\"\")( (acc, word) => acc + \" \" + word)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp88t_yyug.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = result.split(\e\
    [31m\" \"\e[0m).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwords is already defined as \e[33mvalue\e[0m \e[35mwords\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp88t_yyug.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = words.foldLeft(\e[31m\"\
    \"\e[0m)( (\e[36macc\e[0m, \e[36mword\e[0m) => acc + \e[31m\" \"\e[0m + word)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659793984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(_.length).filter(x => x % 2 == 0).map(x => x * x).filter(x\
    \ => x % 2 == 0).map(x => x / 2)\n        val result = primes.filter(x => words.count(y\
    \ => y.length == x) == primes.length).map(x => words.filter(y => y.length == x).mkString(\"\
    \ \")).mkString(\" \")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpksa6hrax.scala:25)\n\tat Problem.main(tmpksa6hrax.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).filter(x => x % 2 != 0).distinct\n \
    \       val result = primes.map(x => words.filter(_.length == x).mkString(\" \"\
    )).mkString(\" \")\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpscnxdaia.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659793988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length).filter(_.isPrime)\n        val result\
    \ = primes.map(_.toString).mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwygynrv_.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659793965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(x => prime(x))\n        val result = primes.filter(x\
    \ => words.count(y => y == x) == 1).mkString(\" \")\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzkwj4ard.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzkwj4ard.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(x => x.length)\n        val result = primes.filter(x => x\
    \ % 2 == 0).mkString(\" \")\n        val result2 = words.filter(x => x % 2 ==\
    \ 0).mkString(\" \")\n        result + result2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwcefux12.scala:22:42 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult2\e[0m = words.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                        ^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue % is not a member of String, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659793991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val length = word.length\n            val prime = length.toInt\n  \
    \          val isPrime = true\n            for(i <- 2 to length.toInt) {\n   \
    \             if(length.toInt % i == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if(isPrime)\
    \ {\n                result += word\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbqprfzlu.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpbqprfzlu.scala:27:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                   \
    \ isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val isPrime\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbqprfzlu.scala:28:20 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (length == 2 || length ==\
    \ 3 || length == 5 || length == 7) {\n                result.add(word)\n     \
    \       }\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsgim0oms.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            val primes = primeFactors(length)\n\
    \            for (prime <- primes) {\n                if (length == prime) {\n\
    \                    result.add(word)\n                }\n            }\n    \
    \    }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl76jp3wc.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl76jp3wc.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprimes\e[0m = primeFactors(length)\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (length == 1) result.add(\"\
    1\")\n            else if (length == 2 && word.startsWith(\"a\")) result.add(\"\
    2\")\n            else if (length == 2 && word.startsWith(\"b\")) result.add(\"\
    3\")\n            else if (length == 2 && word.startsWith(\"c\")) result.add(\"\
    4\")\n            else if (length == 2 && word.startsWith(\"d\")) result.add(\"\
    5\")\n            else if (length == 2 && word.startsWith(\"e\")) result.add(\"\
    6\")\n            else if (length == 2 && word.startsWith(\"f\")) result.add(\"\
    7\")\n            else if (length == 2 && word.startsWith(\"g\")) result.add(\"\
    8\")\n            else if (length == 2 && word.startsWith(\"h\")) result.add(\"\
    9\")\n            else if (length == 2 && word.startsWith(\"i\")) result.add(\"\
    10\")\n            else if (length == 2 && word.startsWith(\"j\")) result.add(\"\
    11\")\n            else if (length == 2 && word.startsWith(\"k\")) result.add(\"\
    12\")\n            else if (length == 2 && word.startsWith(\"l\")) result.add(\"\
    13\")\n            else if (length == 2 && word.startsWith(\"m\")) result.add(\"\
    14\")\n            else if (length == 2 && word.startsWith(\"n\")) result.add(\"\
    15\")\n            else if (length == 2 && word.startsWith(\"o\")) result.add(\"\
    16\")\n            else if (length == 2 && word.startsWith(\"p\")) result.add(\"\
    17\")\n            else if (length == 2 && word.startsWith(\"q\")) result.add(\"\
    18\")\n            else if (length == 2 && word.startsWith(\"r\")) result.add(\"\
    19\")\n            else if (length == 2 && word.startsWith(\"s\")) result.add(\"\
    20\")\n            else if (length == 2 && word.startsWith(\"t\")) result.add(\"\
    21\")\n            else if (length == 2 && word.startsWith(\"u\")) result.add(\"\
    22\")\n            else if (length == 2 && word.startsWith(\"v\")) result.add(\"\
    23\")\n            else if (length == 2 && word.startsWith(\"w\")) result.add(\"\
    24\")\n            else if (length == 2 && word.startsWith(\"x\")) result.add(\"\
    25\")\n            else if (length == 2 && word.startsWith(\"y\")) result.add(\"\
    26\")\n            else if (length == 2 && word.startsWith(\"z\")) result.add(\"\
    27\")\n            else if (length == 3 && word.startsWith(\"aa\")) result.add\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6pm41_dq.scala:63:0 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6pm41_dq.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6pm41_dq.scala:62:1 ---------------------\e[0m\e[0m\n\e[31m62\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp6pm41_dq.scala:52:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m52 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659793991
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(_.length).filter(x => x % 2 == 0).toList\n        val result\
    \ = primes.foldLeft(\"\")( (acc, prime) => acc + \" \" + prime)\n        result\
    \ + \" \"\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3oun2r21.scala:25)\n\tat Problem.main(tmp3oun2r21.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        val primes = mutable.Set[Int]()\n\
    \        val primesSet = mutable.Set[Int]()\n        val primesSet2 = mutable.Set[Int]()\n\
    \        val primesSet3 = mutable.Set[Int]()\n        val primesSet4 = mutable.Set[Int]()\n\
    \        val primesSet5 = mutable.Set[Int]()\n        val primesSet6 = mutable.Set[Int]()\n\
    \        val primesSet7 = mutable.Set[Int]()\n        val primesSet8 = mutable.Set[Int]()\n\
    \        val primesSet9 = mutable.Set[Int]()\n        val primesSet10 = mutable.Set[Int]()\n\
    \        val primesSet11 = mutable.Set[Int]()\n        val primesSet12 = mutable.Set[Int]()\n\
    \        val primesSet13 = mutable.Set[Int]()\n        val primesSet14 = mutable.Set[Int]()\n\
    \        val primesSet15 = mutable.Set[Int]()\n        val primesSet16 = mutable.Set[Int]()\n\
    \        val primesSet17 = mutable.Set[Int]()\n        val primesSet18 = mutable.Set[Int]()\n\
    \        val primesSet19 = mutable.Set[Int]()\n        val primesSet20 = mutable.Set[Int]()\n\
    \        val primesSet21 = mutable.Set[Int]()\n        val primesSet22 = mutable.Set[Int]()\n\
    \        val primesSet23 = mutable.Set[Int]()\n        val primesSet24 = mutable.Set[Int]()\n\
    \        val primesSet25 = mutable.Set[Int]()\n        val primesSet26 = mutable.Set[Int]()\n\
    \        val primesSet27 = mutable.Set[Int]()\n        val primesSet28 = mutable.Set[Int]()\n\
    \        val primesSet29 = mutable.Set[Int]()\n        val primesSet30 = mutable.Set[Int]()\n\
    \        val primesSet31 = mutable.Set[Int]()\n        val primesSet32 = mutable.Set[Int]()\n\
    \        val primesSet33 = mutable.Set[Int]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprirp77fo.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprirp77fo.scala:21:21\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprirp77fo.scala:22:24\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprirp77fo.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprirp77fo.scala:24:25\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprirp77fo.scala:25:25\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e"
  stdout: ''
  timestamp: 1659793992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 == 0).mkString(\" \")\n        result + words.filter(x => x % 2 ==\
    \ 0).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplwqfxy59.scala:22:37 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        result + words.filter(\e[36mx\e[0m => x % \e\
    [31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of String, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(_\
    \ % 2 == 0).mkString(\" \")\n        words.filter(_.length == result).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp47ra51h4.scala:22:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(_.length == result).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659793993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase).toList\n\
    \        val primes = words.map(_.length).filter(x => x > 1).distinct\n      \
    \  val result = primes.map(x => words.filter(_.length == x).mkString(\" \")).mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiqt8geq2.scala:25)\n\tat Problem.main(tmpiqt8geq2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(_\
    \ % 2 == 0).map(_ / 2).mkString(\" \")\n        words.filter(_ % 2 == 0).map(_\
    \ / 2).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp94fgb687.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).map(_\
    \ / \e[31m2\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \           ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe\
    \ following import might make progress towards fixing the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m\
    \   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp94fgb687.scala:22:39\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        words.filter(_ %\
    \ \e[31m2\e[0m == \e[31m0\e[0m).map(_ / \e[31m2\e[0m).mkString(\e[31m\" \"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                     ^^^\e[0m\n\e[31m   |\e\
    [0mvalue / is not a member of String, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp94fgb687.scala:22:43 -----------------------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        words.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).map(_\
    \ / \e[31m2\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                      No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m                                          where:    B is a type variable\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659793995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = new mutable.ListBuffer[String]()\n\
    \        primes.foreach { prime =>\n            val primeFactors = primes.filter(_\
    \ % prime == 0)\n            if (primeFactors.isEmpty) result.add(\"empty\")\n\
    \            else {\n                val primeFactorsString = primeFactors.mkString(\"\
    \ \")\n                result.add(primeFactorsString)\n            }\n       \
    \ }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwl9xtugy.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        words.foreach(word => {\n\
    \            val length = word.length\n            val isPrime = length == 2 ||\
    \ length == 3 || length == 5 || length == 7 || length == 11 || length == 13\n\
    \            if (isPrime) {\n                result += word\n            }\n \
    \       })\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdybqwa2o.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        val primes = mutable.ListBuffer[Int]()\n\
    \        val primeFactors = mutable.ListBuffer[Int]()\n        val primeFactorsCount\
    \ = mutable.ListBuffer[Int]()\n        val primeFactorsCount2 = mutable.ListBuffer[Int]()\n\
    \        val primeFactorsCount3 = mutable.ListBuffer[Int]()\n        val primeFactorsCount4\
    \ = mutable.ListBuffer[Int]()\n        val primeFactorsCount5 = mutable.ListBuffer[Int]()\n\
    \        val primeFactorsCount6 = mutable.ListBuffer[Int]()\n        val primeFactorsCount7\
    \ = mutable.ListBuffer[Int]()\n        val primeFactorsCount8 = mutable.ListBuffer[Int]()\n\
    \        val primeFactorsCount9 = mutable.ListBuffer[Int]()\n        val primeFactorsCount10\
    \ = mutable.ListBuffer[Int]()\n        val primeFactorsCount11 = mutable.ListBuffer[Int]()\n\
    \        val primeFactorsCount12 = mutable.ListBuffer[Int]()\n        val primeFactorsCount13\
    \ = mutable.ListBuffer[Int]()\n        val primeFactorsCount14 = mutable.ListBuffer[Int]()\n\
    \        val primeFactorsCount15 = mutable.ListBuffer[Int]()\n        val primeFactorsCount16\
    \ = mutable.ListBuffer[Int]()\n        val primeFactorsCount17 = mutable.ListBuffer[Int]()\n\
    \        val primeFactorsCount18 = mutable.ListBuffer[Int]()\n        val primeFactorsCount19\
    \ = mutable.ListBuffer[Int]()\n        val primeFactorsCount20 = mutable.ListBuffer[Int]()\n\
    \        val primeFactorsCount21 = mutable.ListBuffer[Int]()\n        val primeFactorsCount22\
    \ = mutable.ListBuffer[Int]()\n        val primeFactorsCount23 = mutable.ListBuffer[Int]()\n\
    \        val primeFactorsCount24 = mutable.ListBuffer[Int]()\n        val primeFactorsCount25\
    \ = mutable.ListBuffer[Int]()\n        val primeFactorsCount26 = mutable.ListBuffer[Int]()\n\
    \        val primeFactorsCount27 = mutable.ListBuffer[Int]()\n        val primeFactorsCount28\
    \ = mutable.ListBuffer[Int]()\n        val prime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0tpt3_h6.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0tpt3_h6.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0tpt3_h6.scala:21:21 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0tpt3_h6.scala:22:27 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp0tpt3_h6.scala:23:32 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorsCount\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0tpt3_h6.scala:24:33\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactorsCount2\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659793995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).filter(x => x % 2 != 0).distinct\n \
    \       val result = primes.foldLeft(\"\")( (acc, prime) => acc + prime + \" \"\
    \ + words.filter(_.length == prime).mkString(\" \"))\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptw0bypj3.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659793994
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 == 0).mkString(\" \")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcs_5nuio.scala:25)\n\tat Problem.main(tmpcs_5nuio.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).distinct\n \
    \       val result = primes.map(x => words.filter(_.length == x).mkString(\" \"\
    )).mkString(\" \")\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplgxgbanb.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659793994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(x => prime(x))\n        val result = primes.filter(x => words.count(y\
    \ => y == x) == 1).mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps10hvweo.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmps10hvweo.scala:20:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \   No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m            \
    \                              where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659793995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(word => prime(word.length))\n        val result = primes.filter(prime\
    \ => words.count(word => prime(word.length) == word.length) == 1)\n        val\
    \ sortedResult = result.sortWith(_.compareTo(_) < 0)\n        sortedResult.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplw89ooms.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mword\e[0m => prime(word.length))\n\e[31m\e[31m   |\e[0m                  \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \           Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmplw89ooms.scala:20:58\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e[36mword\e[0m => prime(word.length))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659793995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(x => prime(x))\n        val result = primes.filter(x => words.count(y\
    \ => prime(y) == x) == 1).mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpybl6hmqw.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpybl6hmqw.scala:20:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \   No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m            \
    \                              where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659793975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (length == 1) result.add(word)\n\
    \            else if (length == 2 && word.head == word.last) result.add(word)\n\
    \            else if (length == 3 && word.head == word.last && word.head == word.last)\
    \ result.add(word)\n            else if (length == 4 && word.head == word.last\
    \ && word.head == word.last && word.head == word.last) result.add(word)\n    \
    \        else if (length == 5 && word.head == word.last && word.head == word.last\
    \ && word.head == word.last && word.head == word.last) result.add(word)\n    \
    \        else if (length == 6 && word.head == word.last && word.head == word.last\
    \ && word.head == word.last && word.head == word.last && word.head == word.last)\
    \ result.add(word)\n            else if (length == 7 && word.head == word.last\
    \ && word.head == word.last && word.head == word.last && word.head == word.last\
    \ && word.head == word.last && word.head == word.last) result.add(word)\n    \
    \        else if (length == 8 && word.head == word.last && word.head == word.last\
    \ && word.head == word.last && word.head == word.last && word.head == word.last\
    \ && word.head == word.last && word.head == word.last) result.add(word)\n    \
    \        else if (length == 9 && word.head == word.last && word.head == word.last\
    \ && word.head == word.last && word.head == word.last && word.head == word.last\
    \ && word.head == word.last && word.head == word.last && word.head == word.last)\
    \ result.add(word)\n            else if (length == 10 && word.head == word.last\
    \ && word.head == word.last && word.head == word.last && word.head == word.last\
    \ && word.head == word.last && word.head == word.last && word.head == word.last\
    \ && word.head == word.last && word.head == word.last) result.add(word)\n    \
    \        else if (length == 11 && word.head == word.last && word.head == word.last\
    \ && word.head == word.last && word.head == word.last && word.head == word.last\
    \ && word.head == word.last && word.head == word.last && word.head == word.last\
    \ && word.head == word.last && word.head == word.last) result.add(word)\n    \
    \        else if (length == 12 && word.head == word.last && word.head == word.last\
    \ && word.head == word.last && word.head == word.last && word.head == word.last\
    \ && word.head == word.last && word.head == word.last && word.head == word.last\
    \ && \n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxl4jk_yj.scala:34:244 --------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (length ==\
    \ \e[31m12\e[0m && word.head == word.last && word.head == word.last && word.head\
    \ == word.last && word.head == word.last && word.head == word.last && word.head\
    \ == word.last && word.head == word.last && word.head == word.last && \n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \                                                                            \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \              expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpxl4jk_yj.scala:47:0 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxl4jk_yj.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxl4jk_yj.scala:46:1 ---------------------\e[0m\e[0m\n\e[31m46\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpxl4jk_yj.scala:36:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m36 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1659793997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val length = word.length\n            val prime = length.toInt\n  \
    \          val primes = primes.filter(p => p > length)\n            val primesSet\
    \ = primes.toSet\n            if(primesSet.contains(length)) {\n             \
    \   result.add(word)\n            }\n        }\n        result.mkString(\" \"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdfjz3ge.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793994
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase).toList\n\
    \        val primes = words.map(_.length).filter(x => x > 1).distinct\n      \
    \  val result = primes.foldLeft(\"\") { (result, prime) =>\n            val newWords\
    \ = words.filter(word => word.length == prime)\n            val newResult = result\
    \ + newWords.mkString(\" \")\n            newResult\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpydq5l_bh.scala:29)\n\tat Problem.main(tmpydq5l_bh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (length == 1) {\n       \
    \         result.add(word)\n            } else {\n                val primes =\
    \ primeFactors(length)\n                for (prime <- primes) {\n            \
    \        if (prime * prime > length) {\n                        break\n      \
    \              }\n                    val isPrime = true\n                   \
    \ for (i <- 0 until prime) {\n                        if (length % prime != 0)\
    \ {\n                            isPrime = false\n                           \
    \ break\n                        }\n                    }\n                  \
    \  if (isPrime) {\n                        result.add(word)\n                \
    \        break\n                    }\n                }\n            }\n    \
    \    }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsl0hp68v.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsl0hp68v.scala:26:29\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e\
    [0m \e[36mprimes\e[0m = primeFactors(length)\n\e[31m\e[31m   |\e[0m          \
    \                   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \      Not found: primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793997
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(_.length).filter(x => x % 2 == 0).distinct\n        val result\
    \ = primes.map(x => words.filter(_.length == x).mkString(\" \")).mkString(\" \"\
    )\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp51w3hnnf.scala:25)\n\tat Problem.main(tmp51w3hnnf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(x => prime(x))\n        val result = primes.filter(x => words.count(y\
    \ => y == x) == 1).mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps10hvweo.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmps10hvweo.scala:20:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \   No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m            \
    \                              where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659793995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 == 0).mkString(\" \")\n        words.filter(x => x % 2 == 0).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyuufp_fq.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(\e[36mx\e[0m => x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(x => x.length)\n        val primesSet = primes.toSet\n  \
    \      val result = new StringBuilder\n        for(i <- 0 until words.length){\n\
    \            if(primesSet.contains(words.length - i)){\n                result.append(words(i))\n\
    \            }\n        }\n        return result.toString()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvqg_ej84.scala:31)\n\tat Problem.main(tmpvqg_ej84.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).distinct\n \
    \       val result = primes.map(x => words.filter(y => y.length == x).mkString(\"\
    \ \")).mkString(\" \")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplmetikls.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659793999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").toList\n \
    \       val result = new mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            val length = word.length\n            if (isPrime(length)) {\n\
    \                result += (word + \" \")\n            }\n        }\n        result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnh8y4n6j.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnh8y4n6j.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(length)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).map(x => x)\n\
    \        val result = primes.filter(x => words.count(y => y == x) == primes.length).mkString(\"\
    \ \")\n        result + words.filter(x => words.count(y => y == x) == primes.length).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpf6uvescj.scala:21:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = primes.filter(\e\
    [36mx\e[0m => words.count(\e[36my\e[0m => y == x) == primes.length).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types String\
    \ and Int cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659794001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(_\
    \ % 2 != 0).mkString(\" \")\n        words.filter(_.length == result).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpeahxv9n8.scala:22:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(_.length == result).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659794002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(_.length).filter(x => x % 2 == 0).distinct\n        val result\
    \ = primes.foldLeft(\"\")( (acc, prime) => acc + \" \" + prime)\n        val words\
    \ = result.split(\" \")\n        val sortedWords = words.sortWith((a, b) => a.compareTo(b)\
    \ < 0)\n        sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnsc8h4po.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = result.split(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwords is already defined as \e[33mvalue\e[0m \e[35mwords\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659794000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = new mutable.ListBuffer[String]()\n\
    \        val primesSet = primes.toSet\n        for (prime <- primes) {\n     \
    \       val primesSet = primes.toSet\n            val primesSetIterator = primesSet.iterator\n\
    \            while (primesSetIterator.hasNext) {\n                val prime =\
    \ primesSetIterator.next\n                if (prime > words.length) break\n  \
    \              val primesSetIterator = primesSet.iterator\n                while\
    \ (primesSetIterator.hasNext) {\n                    val prime = primesSetIterator.next\n\
    \                    if (prime > words.length) break\n                    if (prime\
    \ == words.length) result.add(words(prime))\n                }\n            }\n\
    \        }\n        result.toList.reverse.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ovo4xsj.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ovo4xsj.scala:28:42\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                \e[33mif\e\
    [0m (prime > words.length) break\n\e[31m\e[31m   |\e[0m                      \
    \                    ^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \             Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp5ovo4xsj.scala:32:46 ------------------------\e[0m\e[0m\n\e[31m32 |\e\
    [0m                    \e[33mif\e[0m (prime > words.length) break\n\e[31m\e[31m\
    \   |\e[0m                                              ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                              Not found: break\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val length = word.length\n            val primes = primes(length)\n\
    \            for(prime <- primes) {\n                if(length == prime) {\n \
    \                   result += word\n                }\n            }\n       \
    \ }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph34t3hrj.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(_.length).filter(_.isPrime)\n        val result = primes.mkString(\"\
    \ \")\n        primes.foreach(p => result += \"\\n\" + p)\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjl6p4lhi.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjl6p4lhi.scala:22:35\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        primes.foreach(\e\
    [36mp\e[0m => result += \e[31m\"\\n\"\e[0m + p)\n\e[31m\e[31m   |\e[0m       \
    \                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of String - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659794004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).filter(_.isPrime).toList\n        val\
    \ result = primes.foldLeft(\"\")((acc, prime) => acc + \" \" + words.filter(_.length\
    \ == prime).mkString(\" \"))\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4h0p3d13.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp4h0p3d13.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime).toList\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659794004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 != 0).mkString(\" \")\n        result + words.filter(x => x % 2 ==\
    \ 0).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprumtlgiw.scala:22:37 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        result + words.filter(\e[36mx\e[0m => x % \e\
    [31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of String, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659794006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val length = word.length\n            val prime = length.toInt\n  \
    \          val isPrime = true\n            for(i <- 0 until prime) {\n       \
    \         if(length%i == 0) {\n                    isPrime = false\n         \
    \           break\n                }\n            }\n            if(isPrime) {\n\
    \                result += word\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf0y17zjw.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpf0y17zjw.scala:27:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                   \
    \ isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val isPrime\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf0y17zjw.scala:28:20 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).filter(_.isPrime)\n        val result\
    \ = primes.map(_.toString).mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwso5dhc0.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpwso5dhc0.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659794006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val length = word.length\n            val primes = primeFactors(length)\n\
    \            for(prime <- primes) {\n                if(length == prime) {\n \
    \                   result += (word + \" \")\n                }\n            }\n\
    \        }\n        return result.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1khh1csr.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1khh1csr.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprimes\e[0m = primeFactors(length)\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").toList\n \
    \       val primes = words.map(_.length).toSet\n        val result = new mutable.ListBuffer[String]()\n\
    \        val primesSet = primes.toSet\n        for (word <- words) {\n       \
    \     val prime = primes.find(_ == word.length)\n            if (prime == None)\
    \ result.add(word)\n            else {\n                val primes = primes.filter(_\
    \ != word.length)\n                val newWord = word.substring(0,prime)\n   \
    \             val newWords = word.substring(prime).split(\" \").toList\n     \
    \           val newPrimes = newWords.map(_.length).toSet\n                val\
    \ newResult = new mutable.ListBuffer[String]()\n                val newPrimesSet\
    \ = newPrimes.toSet\n                for (newWord <- newWords) {\n           \
    \         val newPrime = newPrimes.find(_ == newWord.length)\n               \
    \     if (newPrime == None) newResult.add(newWord)\n                    else {\n\
    \                        val newPrimes = newPrimes.filter(_ != newWord.length)\n\
    \                        val newNewWord = newWord.substring(0,newPrime)\n    \
    \                    val newNewWords = newWord.substring(newPrime).split(\" \"\
    ).toList\n                        val newNewPrimes = newNewWords.map(_.length).toSet\n\
    \                        val newNewResult = new mutable.ListBuffer[String]()\n\
    \                        val newNewPrimesSet = newNewPrimes.toSet\n          \
    \              for (newNewWord <- newNewWords) {\n                           \
    \ val newNewPrime = newNewPrimes.find(_ == newNewWord.length)\n              \
    \              if (newNewPrime == None) newNewResult.add(newNewWord)\n       \
    \                     else {\n                                val newNewPrimes\
    \ = newNewPrimes.filter(_ != newNewWord.length)\n                            \
    \    val newNewNewWord = newNewWord.substring(0,newNewPrime)\n               \
    \                 val newNewNewWords = newNewWord.substring(newNewPrime).split(\"\
    \ \").toList\n                                val newNewNewPrimes = newNewNewWords.map(_.length).toSet\n\
    \                                val newNewNewResult = new mutable.ListBuffer[String]()\n\
    \                                val newNewNewPrimesSet = newNewNewPrimes.toSet\n\
    \                                for (newNewNewWord <- newNewNewWords) {\n   \
    \                                 val newNewNewPrime = newNewNewPrimes.find(_\
    \ == newNewNewWord.length)\n                                    if (newNewNewPrime\
    \ == None) newNewNewResult.add(new\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfit_irrs.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpfit_irrs.scala:68:0 ----------------------------\e[0m\e[0m\n\e[31m68\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfit_irrs.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfit_irrs.scala:28:47\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m                \e[33mval\e[0m\
    \ \e[36mnewWord\e[0m = word.substring(\e[31m0\e[0m,prime)\n\e[31m\e[31m   |\e\
    [0m                                               ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                         Found:    (prime : Option[Int])\n\e\
    [31m   |\e[0m                                         Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfit_irrs.scala:29:46 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                \e[33mval\e[0m \e[36mnewWords\e[0m =\
    \ word.substring(prime).split(\e[31m\" \"\e[0m).toList\n\e[31m\e[31m   |\e[0m\
    \                                              ^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                      Found:    (prime : Option[Int])\n\e[31m\
    \   |\e[0m                                         Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfit_irrs.scala:31:36 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                \e[33mval\e[0m \e[36mnewResult\e[0m =\
    \ \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659794008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ newWords = words.map(word => word.length)\n        val primes = newWords.filter(x\
    \ => x % 2 == 0)\n        val sortedWords = primes.sorted\n        val newSentence\
    \ = sortedWords.mkString(\" \")\n        newSentence\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfbrkawgu.scala:27)\n\tat Problem.main(tmpfbrkawgu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(_\
    \ % 2 == 0).mkString(\" \")\n        val result2 = words.filter(_ % 2 == 0).mkString(\"\
    \ \")\n        result == result2 ? result : \"\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7xw584u5.scala:22:37 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult2\e[0m = words.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                   ^^^\e[0m\n\e[31m   |\e[0mvalue % is not\
    \ a member of String, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7xw584u5.scala:23:26\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        result == result2\
    \ ? result : \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value ? is not a member of String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).filter(x => x > 1 && x % 2 != 0).distinct\n\
    \        val result = primes.foldLeft(\"\")( (acc, prime) => acc + prime + \"\
    \ \" + words.filter(_.length == prime).mkString(\" \"))\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqs_z5f2l.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ newWords = mutable.ListBuffer[String]()\n        for(word <- words) {\n    \
    \        val newWord = word.length\n            for(i <- 1 to newWord) {\n   \
    \             if(newWord % i == 0) {\n                    newWords += word\n \
    \                   break\n                }\n            }\n        }\n     \
    \   newWords.toList.reverse.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl77rcgpc.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewWords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl77rcgpc.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter)\n\
    \        val primes = words.map(x => prime(x))\n        val result = primes.filter(x\
    \ => words.count(y => x == y) == 1).mkString(\" \")\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoawjbtj7.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter)\n\e[31m\e[31m   |\e[0m                    \
    \                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \               value isLetter is not a member of String\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpoawjbtj7.scala:20:36 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e[36mx\e\
    [0m => prime(x))\n\e[31m\e[31m   |\e[0m                                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: prime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpoawjbtj7.scala:20:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x))\n\e[31m\e[31m   |\e[0m                               \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \   No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m            \
    \                              where:    B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659794009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (length == 1) result.add(word)\n\
    \            else if (length == 2 && isPrime(length)) {\n                result.add(word)\n\
    \            }\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2k6z1x1z.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2k6z1x1z.scala:24:36\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (length == \e[31m2\e[0m && isPrime(length)) {\n\e[31m\e[31m\
    \   |\e[0m                                    ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").toList\n \
    \       val primes = words.map(x => x.length)\n        val result = primes.filter(x\
    \ => x % 2 == 0).mkString(\" \")\n        words.filter(x => x % 2 == 0).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptca4v4xk.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(\e[36mx\e[0m => x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659793968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val len = word.length\n            if (len == 1) result.add(word)\n\
    \            else if (len == 2 && word.contains(\"a\")) result.add(word)\n   \
    \         else if (len == 2 && word.contains(\"e\")) result.add(word)\n      \
    \      else if (len == 2 && word.contains(\"i\")) result.add(word)\n         \
    \   else if (len == 2 && word.contains(\"o\")) result.add(word)\n            else\
    \ if (len == 2 && word.contains(\"u\")) result.add(word)\n            else if\
    \ (len == 3 && word.contains(\"a\")) result.add(word)\n            else if (len\
    \ == 3 && word.contains(\"e\")) result.add(word)\n            else if (len ==\
    \ 3 && word.contains(\"i\")) result.add(word)\n            else if (len == 3 &&\
    \ word.contains(\"o\")) result.add(word)\n            else if (len == 3 && word.contains(\"\
    u\")) result.add(word)\n            else if (len == 4 && word.contains(\"a\"))\
    \ result.add(word)\n            else if (len == 4 && word.contains(\"e\")) result.add(word)\n\
    \            else if (len == 4 && word.contains(\"i\")) result.add(word)\n   \
    \         else if (len == 4 && word.contains(\"o\")) result.add(word)\n      \
    \      else if (len == 4 && word.contains(\"u\")) result.add(word)\n         \
    \   else if (len == 5 && word.contains(\"a\")) result.add(word)\n            else\
    \ if (len == 5 && word.contains(\"e\")) result.add(word)\n            else if\
    \ (len == 5 && word.contains(\"i\")) result.add(word)\n            else if (len\
    \ == 5 && word.contains(\"o\")) result.add(word)\n            else if (len ==\
    \ 5 && word.contains(\"u\")) result.add(word)\n            else if (len == 6 &&\
    \ word.contains(\"a\")) result.add(word)\n            else if (len == 6 && word.contains(\"\
    e\")) result.add(word)\n            else if (len == 6 && word.contains(\"i\"))\
    \ result.add(word)\n            else if (len == 6 && word.contains(\"o\")) result.add(word)\n\
    \            else if (len == 6 && word.contains(\"u\")) result.add(word)\n   \
    \         else if (len == 7 && word.contains(\"a\")) result.add(word)\n      \
    \      else if (len == 7 && word.contains(\"e\")) result.add(word)\n         \
    \   else if (len == 7 && word.contains(\"i\")) result.add(word)\n            else\
    \ if (len == 7 && word.contains(\"o\")) result.add(word)\n            else if\
    \ (len == 7 && word.contains(\"u\")) result.add(word)\n            else if (len\
    \ == 8 && word.contains(\"a\")) result.add(word)\n            else if (len ==\
    \ 8 && word.contains(\"e\")) result.add(word)\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7oz15x3d.scala:69:0 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7oz15x3d.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp7oz15x3d.scala:68:1 ---------------------\e[0m\e[0m\n\e[31m68\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp7oz15x3d.scala:58:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m58 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659794010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val len = word.length\n            if(len == 1) result += \"1\"\n \
    \           else if(len == 2) result += \"2\"\n            else if(len == 3) result\
    \ += \"3\"\n            else if(len == 4) result += \"4\"\n            else if(len\
    \ == 5) result += \"5\"\n            else if(len == 6) result += \"6\"\n     \
    \       else if(len == 7) result += \"7\"\n            else if(len == 8) result\
    \ += \"8\"\n            else if(len == 9) result += \"9\"\n            else if(len\
    \ == 10) result += \"10\"\n            else if(len == 11) result += \"11\"\n \
    \           else if(len == 12) result += \"12\"\n            else if(len == 13)\
    \ result += \"13\"\n            else if(len == 14) result += \"14\"\n        \
    \    else if(len == 15) result += \"15\"\n            else if(len == 16) result\
    \ += \"16\"\n            else if(len == 17) result += \"17\"\n            else\
    \ if(len == 18) result += \"18\"\n            else if(len == 19) result += \"\
    19\"\n            else if(len == 20) result += \"20\"\n            else if(len\
    \ == 21) result += \"21\"\n            else if(len == 22) result += \"22\"\n \
    \           else if(len == 23) result += \"23\"\n            else if(len == 24)\
    \ result += \"24\"\n            else if(len == 25) result += \"25\"\n        \
    \    else if(len == 26) result += \"26\"\n            else if(len == 27) result\
    \ += \"27\"\n            else if(len == 28) result += \"28\"\n            else\
    \ if(len == 29) result += \"29\"\n            else if(len == 30) result += \"\
    30\"\n            else if(len == 31) result += \"31\"\n            else if(len\
    \ == 32) result += \"32\"\n            else if(len == 33) result += \"33\"\n \
    \           else if(len == 34) result += \"34\"\n            else if(len == 35)\
    \ result += \"35\"\n            else if(len == 36) result += \"36\"\n        \
    \    else if(len == 37) result += \"37\"\n            else if(len == 38) result\
    \ += \"38\"\n            else if(len == 39) result += \"39\"\n            else\
    \ if(len == 40) result += \"40\"\n            else if(len == 41) result += \"\
    41\"\n            else if(len == 42) result += \"42\"\n            else if(len\
    \ == 43) result += \"43\"\n            else if(len == 44) result += \"44\"\n \
    \           else if(len == 45) result += \"45\"\n            else if(len == 46)\
    \ result += \"46\"\n            \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8ckzty1m.scala:82:0 ----------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ckzty1m.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8ckzty1m.scala:81:1 ---------------------\e[0m\e[0m\n\e[31m81\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp8ckzty1m.scala:71:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m71 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659794011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(_\
    \ > 1).mkString(\" \")\n        result + words.filter(_.length == 1).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdq337uhv.scala:25)\n\tat Problem.main(tmpdq337uhv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 == 0).mkString(\" \")\n        result + words.filter(x => x % 2 ==\
    \ 0).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplwqfxy59.scala:22:37 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        result + words.filter(\e[36mx\e[0m => x % \e\
    [31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of String, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ resultSet = mutable.Set[String]()\n        for(word <- words) {\n          \
    \  val length = word.length\n            if(length == 1) {\n                resultSet\
    \ += word\n            } else {\n                val primes = primeFactors(length)\n\
    \                for(prime <- primes) {\n                    if(length == prime)\
    \ {\n                        resultSet += word\n                        break\n\
    \                    }\n                }\n            }\n        }\n        resultSet.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo0pnzrbx.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresultSet\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpo0pnzrbx.scala:26:29 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e[0m \e[36mprimes\e[0m = primeFactors(length)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                             Not found: primeFactors\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (isPrime(length)) {\n   \
    \             result += (word)\n            }\n        }\n        return result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3olc75pk.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3olc75pk.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(length)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val primesSet = primes.toSet\n\
    \        val result = words.filter(word => primesSet.contains(word.length))\n\
    \        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6byt48do.scala:26)\n\tat Problem.main(tmp6byt48do.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (length == 1) {\n       \
    \         result.add(word)\n            } else {\n                val primes =\
    \ primes(length)\n                for (prime <- primes) {\n                  \
    \  if (length == prime) {\n                        result.add(word)\n        \
    \                break\n                    }\n                }\n           \
    \ }\n        }\n        result.toList().mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcucf86y2.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ newWords = mutable.ListBuffer[String]()\n        for(word <- words) {\n    \
    \        val length = word.length\n            val isPrime = length == 2 || length\
    \ == 3 || length == 5 || length == 7 || length == 11\n            if(isPrime)\
    \ {\n                newWords += word\n            }\n        }\n        newWords.toList.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2nxk3zs9.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewWords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val length = word.length\n            val prime = length.toInt\n  \
    \          val isPrime = true\n            for(i <- 2 to length.toInt) {\n   \
    \             if(length.toInt % i == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if(isPrime)\
    \ {\n                result += word\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbqprfzlu.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpbqprfzlu.scala:27:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                   \
    \ isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val isPrime\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbqprfzlu.scala:28:20 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793959
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length).filter(x => x > 1).distinct\n      \
    \  val result = primes.foldLeft(\"\") { (result, prime) => prime + result }\n\
    \        primes.foldLeft(\"\") { (result, prime) => prime + result }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg3yhimd7.scala:25)\n\tat Problem.main(tmpg3yhimd7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 != 0).mkString(\" \")\n        words\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpchyv5ntj.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        words\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (words : Array[String])\n\
    \e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        val primes = scala.collection.mutable.ListBuffer[Int]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     val isPrime = scala.util.Try(math.ceil(length.toDouble)).toOption.exists(_\
    \ == length)\n            if (isPrime) {\n                primes += length\n \
    \           }\n        }\n        primes.foreach { prime =>\n            val primeWords\
    \ = words.filter(word => word.length == prime)\n            result.addAll(primeWords)\n\
    \        }\n        result.toList.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ezv4noh.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).filter(_.isPrime).toList\n        val\
    \ result = primes.map(word => words.filter(_.length == word.length).mkString(\"\
    \ \")).mkString(\" \")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz_88tgka.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpz_88tgka.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime).toList\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz_88tgka.scala:21:70\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = primes.map(\e[36mword\e[0m => words.filter(_.length == word.length).mkString(\e\
    [31m\" \"\e[0m)).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \                                                      ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                     value length is not a member of\
    \ Int\n3 errors found\n"
  stdout: ''
  timestamp: 1659794015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 == 0).mkString(\" \")\n        words.filter(x => x % 2 == 0).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyuufp_fq.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.filter(\e[36mx\e[0m => x % \e[31m2\e[0m\
    \ == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        val primes = mutable.ListBuffer[Int]()\n\
    \        val primesSet = mutable.Set[Int]()\n        val primesSet2 = mutable.Set[Int]()\n\
    \        val primesSet3 = mutable.Set[Int]()\n        val primesSet4 = mutable.Set[Int]()\n\
    \        val primesSet5 = mutable.Set[Int]()\n        val primesSet6 = mutable.Set[Int]()\n\
    \        val primesSet7 = mutable.Set[Int]()\n        val primesSet8 = mutable.Set[Int]()\n\
    \        val primesSet9 = mutable.Set[Int]()\n        val primesSet10 = mutable.Set[Int]()\n\
    \        val primesSet11 = mutable.Set[Int]()\n        val primesSet12 = mutable.Set[Int]()\n\
    \        val primesSet13 = mutable.Set[Int]()\n        val primesSet14 = mutable.Set[Int]()\n\
    \        val primesSet15 = mutable.Set[Int]()\n        val primesSet16 = mutable.Set[Int]()\n\
    \        val primesSet17 = mutable.Set[Int]()\n        val primesSet18 = mutable.Set[Int]()\n\
    \        val primesSet19 = mutable.Set[Int]()\n        val primesSet20 = mutable.Set[Int]()\n\
    \        val primesSet21 = mutable.Set[Int]()\n        val primesSet22 = mutable.Set[Int]()\n\
    \        val primesSet23 = mutable.Set[Int]()\n        val primesSet24 = mutable.Set[Int]()\n\
    \        val primesSet25 = mutable.Set[Int]()\n        val primesSet26 = mutable.Set[Int]()\n\
    \        val primesSet27 = mutable.Set[Int]()\n        val primesSet28 = mutable.Set[Int]()\n\
    \        val primesSet29 = mutable.Set[Int]()\n        val primesSet30 = mutable.Set[Int]()\n\
    \        val primesSet31 = mutable.Set[Int]()\n        val primesSet32 = mutable.Set[Int]()\n\
    \        val primesSet33 = mutable.Set[Int\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpusqvj9yx.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpusqvj9yx.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpusqvj9yx.scala:21:21 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpusqvj9yx.scala:22:24 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpusqvj9yx.scala:23:25 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpusqvj9yx.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m"
  stdout: ''
  timestamp: 1659793983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(_\
    \ % 2 == 0).mkString(\" \")\n        val sortedWords = words.sortWith((a, b) =>\
    \ a.length <= b.length)\n        val sortedResult = sortedWords.filter(_ % 2 ==\
    \ 0).mkString(\" \")\n        sortedResult\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi1cda1zt.scala:23:48 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msortedResult\e[0m = sortedWords.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                              ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659794017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length).filter(_.isPrime)\n        val result\
    \ = primes.map(_.toString).mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwygynrv_.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659793965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(_\
    \ % 2 == 0).mkString(\" \")\n        val sortedWords = words.sortWith(_ < _)\n\
    \        val sortedResult = sortedWords.filter(_ % 2 == 0).mkString(\" \")\n \
    \       sortedResult\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr51jo7n4.scala:23:48 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msortedResult\e[0m = sortedWords.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                              ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659793960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.map(_.length).filter(_.isPrime)\n        val result = primes.map(_.toString).mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpncqgicrz.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659794016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).filter(x => x > 1).distinct\n      \
    \  val result = primes.foldLeft(\"\")( (acc, prime) => acc + prime + \" \" + words.filter(_.length\
    \ == prime).mkString(\" \"))\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpctjgpntl.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val primesSet = primes.toSet\n\
    \        val result = new mutable.ListBuffer[String]()\n        for(i <- 0 until\
    \ primes.length){\n            val prime = primes(i)\n            for(j <- 0 until\
    \ words.length){\n                if(primesSet(j) == prime){\n               \
    \     result += words(j)\n                }\n            }\n        }\n      \
    \  result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_h79tnnz.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp_h79tnnz.scala:26:19\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \         \e[33mif\e[0m(primesSet(j) == prime){\n\e[31m\e[31m   |\e[0m       \
    \            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Boolean and Int cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659794017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            val prime = length.toInt\n \
    \           if (prime % 2 == 0) {\n                result.add(word)\n        \
    \    }\n        }\n        return result.toList().mkString(\" \")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7re6slnf.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794014
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).distinct\n \
    \       val result = primes.foldLeft(\"\")( (acc, prime) => acc + words(prime)\
    \ + \" \" + prime)\n        result.substring(0, result.length - 1)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 4\n\tat Problem$.$anonfun$4(tmp6z3sfdym.scala:21)\n\tat Problem$.$anonfun$adapted$1(tmp6z3sfdym.scala:21)\n\
    \tat scala.collection.ArrayOps$.foldLeft$extension(ArrayOps.scala:779)\n\tat Problem$.wordsInSentence(tmp6z3sfdym.scala:21)\n\
    \tat Problem$.main(tmp6z3sfdym.scala:25)\n\tat Problem.main(tmp6z3sfdym.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (length == 1) {\n       \
    \         result += \"1\"\n            } else if (length == 2 && word.startsWith(\"\
    a\") && word.endsWith(\"a\")) {\n                result += \"2\"\n           \
    \ } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"e\")) {\n\
    \                result += \"3\"\n            } else if (length == 2 && word.startsWith(\"\
    e\") && word.endsWith(\"e\")) {\n                result += \"4\"\n           \
    \ } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"i\")) {\n\
    \                result += \"5\"\n            } else if (length == 3 && word.startsWith(\"\
    i\") && word.endsWith(\"i\")) {\n                result += \"6\"\n           \
    \ } else if (length == 3 && word.startsWith(\"e\") && word.endsWith(\"o\")) {\n\
    \                result += \"7\"\n            } else if (length == 3 && word.startsWith(\"\
    o\") && word.endsWith(\"o\")) {\n                result += \"8\"\n           \
    \ } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"u\")) {\n\
    \                result += \"9\"\n            } else if (length == 3 && word.startsWith(\"\
    u\") && word.endsWith(\"u\")) {\n                result += \"10\"\n          \
    \  } else if (length == 3 && word.startsWith(\"e\") && word.endsWith(\"i\")) {\n\
    \                result += \"11\"\n            } else if (length == 3 && word.startsWith(\"\
    i\") && word.endsWith(\"i\")) {\n                result += \"12\"\n          \
    \  } else if (length == 3 && word.startsWith(\"o\") && word.endsWith(\"o\")) {\n\
    \                result += \"13\"\n            } else if (length == 3 && word.startsWith(\"\
    u\") && word.endsWith(\"u\")) {\n                result += \"14\"\n          \
    \  } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"e\")) {\n\
    \                result += \"15\"\n            } else if (length == 3 && word.startsWith(\"\
    e\") && word.endsWith(\"e\")) {\n                result += \"16\"\n          \
    \  } else if (length == 3 && word.startsWith(\"i\") && word.endsWith(\"i\")) {\n\
    \                result += \"17\"\n            } else if (length == 3 && word.startsWith(\"\
    o\") && word.endsWith(\"o\")) {\n                result += \"18\"\n          \
    \  } else if (length == 3 && word.startsWith(\"u\") && word.endsWith(\"u\")) {\n\
    \                result += \"19\"\n            } else if (length == 3 && word.startsWith(\"\
    a\") && word.endsWith(\"i\")) {\n                result += \"20\"\n          \
    \  } else if (length == 3 && word.startsWith(\"i\") && word.endsWith(\"i\")) {\n\
    \                \n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_k49ux7k.scala:77:0 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_k49ux7k.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_k49ux7k.scala:21:8 ---------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mfor\e[0m (word <- words) {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required:\
    \ String\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mlength\e[0m = word.length\n\
    \e[31m23 |\e[0m            \e[33mif\e[0m (length == \e[31m1\e[0m) {\n\e[31m24\
    \ |\e[0m                result += \e[31m\"1\"\e[0m\n\e[31m25 |\e[0m          \
    \  } \e[33melse\e[0m \e[33mif\e[0m (length == \e[31m2\e[0m && word.startsWith(\e\
    [31m\"a\"\e[0m) && word.endsWith(\e[31m\"a\"\e[0m)) {\n\e[31m26 |\e[0m       \
    \         result += \e[31m\"2\"\e[0m\n\e[31m27 |\e[0m            } \e[33melse\e\
    [0m \e[33mif\e[0m (length == \e[31m2\e[0m && word.startsWith(\e[31m\"a\"\e[0m)\
    \ && word.endsWith(\e[31m\"e\"\e[0m)) {\n\e[31m28 |\e[0m                result\
    \ += \e[31m\"3\"\e[0m\n\e[31m29 |\e[0m            } \e[33melse\e[0m \e[33mif\e\
    [0m (length == \e[31m2\e[0m && word.startsWith(\e[31m\"e\"\e[0m) && word.endsWith(\e\
    [31m\"e\"\e[0m)) {\n\e[31m30 |\e[0m                result += \e[31m\"4\"\e[0m\n\
    \e[31m31 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (length == \e[31m3\e\
    [0m && word.startsWith(\e[31m\"a\"\e[0m) && word.endsWith(\e[31m\"i\"\e[0m)) {\n\
    \e[31m32 |\e[0m                result += \e[31m\"5\"\e[0m\n\e[31m33 |\e[0m   \
    \         } \e[33melse\e[0m \e[33mif\e[0m (length == \e[31m3\e[0m && word.startsWith(\e\
    [31m\"i\"\e[0m) && word.endsWith(\e[31m\"i\"\e[0m)) {\n\e[31m34 |\e[0m       \
    \         result += \e[31m\"6\"\e[0m\n\e[31m35 |\e[0m            } \e[33melse\e\
    [0m \e[33mif\e[0m (lengt"
  stdout: ''
  timestamp: 1659794018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase).toList\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).map(x => x +\
    \ 1)\n        val result = primes.filter(x => words.count(_ == x) == primes.count(_\
    \ == x)).mkString(\" \")\n        result + words.filter(x => words.count(_ ==\
    \ x) == primes.count(_ == x)).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpe1hpuu5t.scala:21:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = primes.filter(\e\
    [36mx\e[0m => words.count(_ == x) == primes.count(_ == x)).mkString(\e[31m\" \"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                                                \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types String and Int cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpe1hpuu5t.scala:22:71\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ result + words.filter(\e[36mx\e[0m => words.count(_ == x) == primes.count(_\
    \ == x)).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \                                                    ^^^^^^\e[0m\n\e[31m   |\e\
    [0m         Values of types Int and String cannot be compared with == or !=\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter)\n\
    \        val primes = words.map(_.length).filter(_.isPrime)\n        val result\
    \ = primes.map(_.toString).mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphro5i7p4.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter)\n\e[31m\e[31m   |\e[0m                    \
    \                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \               value isLetter is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmphro5i7p4.scala:20:50 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659794018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        words.foreach(word => {\n\
    \            val length = word.length\n            val prime = length.toInt\n\
    \            val isPrime = true\n            for(i <- 2 to length.toInt) {\n \
    \               if(length.toInt % i == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if(isPrime)\
    \ {\n                result += (word)\n            }\n        })\n        result\
    \ mkString \" \"\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf5eazafq.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpf5eazafq.scala:27:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                   \
    \ isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val isPrime\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf5eazafq.scala:28:20 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = new mutable.ListBuffer[String]()\n\
    \        primes.foreach { prime =>\n            val primes = words.filter(_.length\
    \ == prime)\n            primes.foreach { word =>\n                result.add(word)\n\
    \            }\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw8e6z6ji.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val length = word.length\n            val isPrime = length == 2 ||\
    \ length == 3 || length == 5 || length == 7 || length == 11\n            if(isPrime)\
    \ {\n                result += (word)\n            }\n        }\n        result\
    \ mkString \" \"\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwwtmqzm5.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for(word <- words) {\n  \
    \          val len = word.length\n            val prime = len.filter(_ % 2 ==\
    \ 0).length\n            if(prime == 0) {\n                result.add(word)\n\
    \            }\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdb87zt1g.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdb87zt1g.scala:23:28\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprime\e[0m = len.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                value filter is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659794019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).filter(_.isPrime)\n        val result\
    \ = primes.map(_.toString).mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwso5dhc0.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpwso5dhc0.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659794006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase).toList\n\
    \        val primes = words.map(_.length).filter(x => x > 1 && x % 2 != 0).distinct\n\
    \        val result = primes.map(x => words.filter(_.length == x).mkString(\"\
    \ \")).mkString(\" \")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0enm_y2b.scala:25)\n\tat Problem.main(tmp0enm_y2b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).map(x => x *\
    \ x)\n        val result = primes.filter(x => words.count(_ == x) == primes.length).map(x\
    \ => words.find(_ == x).mkString(\" \")).mkString(\" \")\n        result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpn_hx0pxl.scala:21:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = primes.filter(\e\
    [36mx\e[0m => words.count(_ == x) == primes.length).map(\e[36mx\e[0m => words.find(_\
    \ == x).mkString(\e[31m\" \"\e[0m)).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                                                    ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m         Values of types String and Int cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpn_hx0pxl.scala:21:98 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = primes.filter(\e\
    [36mx\e[0m => words.count(_ == x) == primes.length).map(\e[36mx\e[0m => words.find(_\
    \ == x).mkString(\e[31m\" \"\e[0m)).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                              ^^^^^^\e[0m\n\e[31m   |\e[0m         Values of\
    \ types String and Int cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659794020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        words.foreach(word => {\n\
    \            val len = word.length\n            val isPrime = len == 2 || len\
    \ == 3 || len == 5 || len == 7 || len == 11 || len == 13\n            if(isPrime)\
    \ {\n                result.add(word)\n            }\n        })\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3j8ayzg4.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(_\
    \ > 1).mkString(\" \")\n        result + words.filter(_ == result).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo62yjtyj.scala:25)\n\tat Problem.main(tmpo62yjtyj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).toList\n   \
    \     val result = primes.foldLeft(\"\")( (acc, prime) => acc + words.filter(_.length\
    \ == prime).mkString(\" \"))\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbrly495t.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659794020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").toList\n \
    \       val primes = words.map(x => prime(x)).toList\n        val result = primes.filter(x\
    \ => words.count(y => x == y) == 1).mkString(\" \")\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphpezaa8h.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mx\e[0m => prime(x)).toList\n\e[31m\e[31m   |\e[0m                        \
    \            ^^^^^\e[0m\n\e[31m   |\e[0m                                    Not\
    \ found: prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val len = word.length\n            if (len == 1) result.add(word)\n\
    \            else {\n                val primes = primeFactors(len)\n        \
    \        for (prime <- primes) {\n                    if (len % prime == 0) result.add(word)\n\
    \                }\n            }\n        }\n        result.mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7t_t3163.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7t_t3163.scala:25:29\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e\
    [0m \e[36mprimes\e[0m = primeFactors(len)\n\e[31m\e[31m   |\e[0m             \
    \                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \   Not found: primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase).toList\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).toList\n   \
    \     val result = primes.map(x => words.filter(_.length == x).mkString(\" \"\
    )).mkString(\" \")\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt9hn3fv7.scala:25)\n\tat Problem.main(tmpt9hn3fv7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toUpperCase).toList\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(x\
    \ => x % 2 == 0).mkString(\" \")\n        result + words.filter(x => x % 2 ==\
    \ 0).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkap543p3.scala:22:37 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        result + words.filter(\e[36mx\e[0m => x % \e\
    [31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of String, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659794021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (length == 1) {\n       \
    \         result.add(word)\n            } else {\n                val primes =\
    \ primes(length)\n                for (prime <- primes) {\n                  \
    \  if (prime * prime > length) {\n                        break\n            \
    \        }\n                    if (prime * prime == length) {\n             \
    \           result.add(word)\n                        break\n                \
    \    }\n                }\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo7ozvdk0.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).filter(_.isPrime)\n        val result\
    \ = primes.map(word => words.find(_.length == word.length).map(_ + \" \"))\n \
    \       val result = result.flatten.toList\n        result.sortBy(_.length).reverse.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiokhv6fa.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.flatten.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpiokhv6fa.scala:19:49 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e[31m\" \"\e[0m).filter(_.isLetter).toList\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiokhv6fa.scala:20:50\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = words.map(_.length).filter(_.isPrime)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                    value isPrime is not a member of Int\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpiokhv6fa.scala:21:68 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = primes.map(\e\
    [36mword\e[0m => words.find(_.length == word.length).map(_ + \e[31m\" \"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ value length is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpiokhv6fa.scala:23:24 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        result.sortBy(_.length).reverse.mkString(\e[31m\" \"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \          value length is not a member of Option[String]\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpiokhv6fa.scala:23:31 -----------------------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        result.sortBy(_.length).reverse.mkString(\e"
  stdout: ''
  timestamp: 1659794021
