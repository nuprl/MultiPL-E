name: HumanEval_106_f
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Implement the function f that takes n as a parameter,\n    // and returns\
  \ a list of size n, such that the value of the element at index i is the factorial\
  \ of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    //\
  \ i starts from 1.\n    // the factorial of i is the multiplication of the numbers\
  \ from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n    def f(n : Long) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n \
  \   assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
completions: ["        val factorials = mutable.ArrayBuffer.empty[Long]\n        for\
    \ (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials +=\
    \ i.toLong\n            } else {\n                factorials += (i.toLong + 1)\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials ++= 1 to n\n        factorials.filter(_\
    \ % 2 == 0).map(_ * _).toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials ++= 1 to n\n        factorials ++= factorials.filter(_ % 2\
    \ == 0).map(_ * _)\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val i = 1 // i starts\
    \ from 1\n        while (i <= n) {\n            if (i % 2 == 0) {\n          \
    \      evens += i.toLong\n            } else {\n                odds += i.toLong\n\
    \            }\n            factorials += i.toLong * factorials.last\n       \
    \     sums += i.toLong * sums.last\n            i += 1\n        }\n        evens.toList\
    \ ++ sums.toList ++ factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials ++= 1 to n\n        factorials ++= factorials.drop(1).map(x\
    \ => x * x)\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials ++= 1 to n\n        factorials.filter(_ % 2 == 0).map(_ *\
    \ _)", "        val factorials = mutable.ListBuffer[Long]()\n        val sums\
    \ = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val factorial = 1l\n \
    \       val sum = 1l\n        val even = 1l\n        val odd = 1l\n        val\
    \ i = 2l\n        while (i <= n) {\n            if (i % 2 == 0) {\n          \
    \      evens += i\n            } else {\n                odds += i\n         \
    \   }\n            factorial *= i\n            sum += i\n            factorials\
    \ += factorial\n            sums += sum\n            even += i\n            odd\
    \ += i\n            i += 1\n        }\n        evens.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ 2\n        factorials += 3\n        factorials += 4\n        factorials += 5\n\
    \        factorials += 6\n        factorials += 7\n        factorials += 8\n \
    \       factorials += 9\n        factorials += 10\n        factorials += 11\n\
    \        factorials += 12\n        factorials += 13\n        factorials += 14\n\
    \        factorials += 15\n        factorials += 16\n        factorials += 17\n\
    \        factorials += 18\n        factorials += 19\n        factorials += 20\n\
    \        factorials += 21\n        factorials += 22\n        factorials += 23\n\
    \        factorials += 24\n        factorials += 25\n        factorials += 26\n\
    \        factorials += 27\n        factorials += 28\n        factorials += 29\n\
    \        factorials += 30\n        factorials += 31\n        factorials += 32\n\
    \        factorials += 33\n        factorials += 34\n        factorials += 35\n\
    \        factorials += 36\n        factorials += 37\n        factorials += 38\n\
    \        factorials += 39\n        factorials += 40\n        factorials += 41\n\
    \        factorials += 42\n        factorials += 43\n        factorials += 44\n\
    \        factorials += 45\n        factorials += 46\n        factorials += 47\n\
    \        factorials += 48\n        factorials += 49\n        factorials += 50\n\
    \        factorials += 51\n        factorials += 52\n        factorials += 53\n\
    \        factorials += 54\n        factorials += 55\n        factorials += 56\n\
    \        factorials += 57\n        factorials += 58\n        factorials += 59\n\
    \        factorials += 60\n        factorials += 61\n        factorials += 62\n\
    \        factorials += 63\n        factorials += 64\n        factorials += 65\n\
    \        factorials += 66\n        factorials += 67\n        factorials += 68\n\
    \        factorials += 69\n        factorials += 70\n        factorials += 71\n\
    \        factorials += 72\n        factorials += 73\n        factorials += 74\n\
    \        factorials += 75\n        factorials += 76\n        factorials += 77\n\
    \        factorials += 78\n        factorials += 79\n        factorials += 80\n\
    \        factorials += 81\n        factorials += 82\n        factorials += 83\n",
  "        val factorials = mutable.ListBuffer[Long]()\n        var sum = 0\n    \
    \    for(i <- 1 to n) {\n            val fact = i.toLong * factorials.last\n \
    \           factorials += fact\n            sum += fact\n        }\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to\
    \ n){\n            if(i%2 == 0){\n                factorials += i.toLong*i\n \
    \           }else{\n                factorials += i.toLong\n            }\n  \
    \      }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val factorial = 1l\n \
    \       val sum = 1l\n        for(i <- 1 to n){\n            if(i%2 == 0){\n \
    \               factorials += factorial\n                sums += sum\n       \
    \     }\n            else{\n                factorial *= i\n                sum\
    \ += i\n            }\n        }\n        factorials ++= factorial\n        sums\
    \ ++= sum\n        factorials.toList ++ sums.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val sumOfNumbers = 1\n        val factorialOfNumber = 1\n        val factorialOfSum\
    \ = 1\n        val factorialOfSumOfNumbers = 1\n        val factorialOfSumOfNumbersOfFactorial\
    \ = 1\n        val factorialOfSumOfNumbersOfFactorialOfFactorial = 1\n       \
    \ val factorialOfSumOfNumbersOfFactorialOfFactorialOfFactorial = 1\n        val\
    \ factorialOfSumOfNumbersOfFactorialOfFactorialOfFactorialOfFactorial = 1\n  \
    \      val factorialOfSumOfNumbersOfFactorialOfFactorialOfFactorialOfFactorialOfFactorial\
    \ = 1\n        val factorialOfSumOfNumbersOfFactorialOfFactorialOfFactorialOfFactorialOfFactorialOfFactorial\
    \ = 1\n        val factorialOfSumOfNumbersOfFactorialOfFactorialOfFactorialOfFactorialOfFactorialOfFactorial\
    \ = 1\n        val factorialOfSumOfNumbersOfFactorialOfFactorialOfFactorialOfFactorialOfFactorialOfFactorialOfFactorial\
    \ = 1\n        val factorialOfSumOfNumbersOfFactorialOfFactorialOfFactorialOfFactorialOfFactorialOfFactorialOfFactorial\
    \ = 1\n        val factorialOfSumOfNumbersOfFactorialOfFactorialOfFactorialOfFactorialOfFactorialOfFactorialOfFactorial\
    \ = 1\n        val factorialOfSumOfNumbersOfFactorialOfFactorialOfFactorialOfFactorialOfFactorialOfFactorialOfFactorialOfFactorial\
    \ = 1\n        val factorialOfSumOfNumbersOfFactorialOfFactorialOfFactorialOfFactorialOfFactorialOfFactorialOfFactorialOfFactorial\
    \ = 1\n        val factorialOfSumOfNumbersOfFactorialOfFactorialOfFactorialOfFactorialOfFactorialOfFactorialOfFactorialOfFactorial\
    \ = 1\n        val factorialOf", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val factorial = 1l\n \
    \       val sum = 1l\n        for(i <- 1 to n) {\n            factorials += factorial\n\
    \            sums += sum\n            factorial *= i\n            sum += i\n \
    \       }\n        sums.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += 3\n \
    \       factorials += 4\n        factorials += 5\n        factorials += 6\n  \
    \      factorials += 7\n        factorials += 8\n        factorials += 9\n   \
    \     factorials += 10\n        factorials += 11\n        factorials += 12\n \
    \       factorials += 13\n        factorials += 14\n        factorials += 15\n\
    \        factorials += 16\n        factorials += 17\n        factorials += 18\n\
    \        factorials += 19\n        factorials += 20\n        factorials += 21\n\
    \        factorials += 22\n        factorials += 23\n        factorials += 24\n\
    \        factorials += 25\n        factorials += 26\n        factorials += 27\n\
    \        factorials += 28\n        factorials += 29\n        factorials += 30\n\
    \        factorials += 31\n        factorials += 32\n        factorials += 33\n\
    \        factorials += 34\n        factorials += 35\n        factorials += 36\n\
    \        factorials += 37\n        factorials += 38\n        factorials += 39\n\
    \        factorials += 40\n        factorials += 41\n        factorials += 42\n\
    \        factorials += 43\n        factorials += 44\n        factorials += 45\n\
    \        factorials += 46\n        factorials += 47\n        factorials += 48\n\
    \        factorials += 49\n        factorials += 50\n        factorials += 51\n\
    \        factorials += 52\n        factorials += 53\n        factorials += 54\n\
    \        factorials += 55\n        factorials += 56\n        factorials += 57\n\
    \        factorials += 58\n        factorials += 59\n        factorials += 60\n\
    \        factorials += 61\n        factorials += 62\n        factorials += 63\n\
    \        factorials += 64\n        factorials += 65\n        factorials += 66\n\
    \        factorials += 67\n        factorials += 68\n        factorials += 69\n\
    \        factorials += 70\n        factorials += 71\n        factorials += 72\n\
    \        factorials += 73\n        factorials += 74\n        factorials += 75\n\
    \        factorials += 76\n        factorials += 77\n        factorials += 78\n\
    \        factorials += 79\n        factorials += 80\n        factorials += 81\n\
    \        factorials += 82\n        factorials += 83\n", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        val i = 2\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                factorials += factorial\n\
    \                sums += sum\n            }\n            else {\n            \
    \    factorial *= i\n                sum += i\n            }\n            i +=\
    \ 1\n        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val i = 2\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                factorials += i.toLong\n\
    \            } else {\n                sums += i.toLong\n            }\n     \
    \       i += 1\n        }\n        factorials.toList ++ sums.toList", "      \
    \  val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1l\n        val sum = 1l\n        for(i <- 1 to n) {\n\
    \            if(i%2 == 0) {\n                factorials += factorial\n       \
    \         sums += sum\n            }\n            else {\n                factorial\
    \ *= i\n                sum += i\n            }\n        }\n        factorials\
    \ += factorial\n        sums += sum\n        factorials.toList", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        val i = 2\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                factorials += factorial\n\
    \                sums += sum\n            }\n            else {\n            \
    \    factorial = factorial * i\n                sum = sum + i\n            }\n\
    \            i += 1\n        }\n        factorials ++= factorial\n        sums\
    \ ++= sum\n        factorials.toList ++ sums.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials ++= 1 to n\n        factorials.filter(_\
    \ % 2 == 0).map(x => x * factorials.indexOf(_))", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        for(i <- 1 to n){\n            if(i%2 == 0){\n \
    \               factorials += i.toLong\n            }else{\n                sum\
    \ += i.toLong\n            }\n        }\n        factorials.toList", "       \
    \ val factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n   \
    \     var sum = 1\n        var i = 2\n        while (i <= n) {\n            if\
    \ (i % 2 == 0) {\n                factorials += factorial\n                factorial\
    \ = 1\n            }\n            else {\n                factorial *= i\n   \
    \             sum += factorial\n            }\n            i += 1\n        }\n\
    \        factorials += factorial\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += 2\n        factorials += n\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += 2\n        factorials += 3\n        factorials += 4\n        factorials +=\
    \ 5\n        factorials += 6\n        factorials += 7\n        factorials += 8\n\
    \        factorials += 9\n        factorials += 10\n        factorials += 11\n\
    \        factorials += 12\n        factorials += 13\n        factorials += 14\n\
    \        factorials += 15\n        factorials += 16\n        factorials += 17\n\
    \        factorials += 18\n        factorials += 19\n        factorials += 20\n\
    \        factorials += 21\n        factorials += 22\n        factorials += 23\n\
    \        factorials += 24\n        factorials += 25\n        factorials += 26\n\
    \        factorials += 27\n        factorials += 28\n        factorials += 29\n\
    \        factorials += 30\n        factorials += 31\n        factorials += 32\n\
    \        factorials += 33\n        factorials += 34\n        factorials += 35\n\
    \        factorials += 36\n        factorials += 37\n        factorials += 38\n\
    \        factorials += 39\n        factorials += 40\n        factorials += 41\n\
    \        factorials += 42\n        factorials += 43\n        factorials += 44\n\
    \        factorials += 45\n        factorials += 46\n        factorials += 47\n\
    \        factorials += 48\n        factorials += 49\n        factorials += 50\n\
    \        factorials += 51\n        factorials += 52\n        factorials += 53\n\
    \        factorials += 54\n        factorials += 55\n        factorials += 56\n\
    \        factorials += 57\n        factorials += 58\n        factorials += 59\n\
    \        factorials += 60\n        factorials += 61\n        factorials += 62\n\
    \        factorials += 63\n        factorials += 64\n        factorials += 65\n\
    \        factorials += 66\n        factorials += 67\n        factorials += 68\n\
    \        factorials += 69\n        factorials += 70\n        factorials += 71\n\
    \        factorials += 72\n        factorials += 73\n        factorials += 74\n\
    \        factorials += 75\n        factorials += 76\n        factorials += 77\n\
    \        factorials += 78\n        factorials += 79\n        factorials += 80\n\
    \        factorials += 81\n        factorials += 82\n        factorials += 83\n",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials ++= 1 to\
    \ n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorial", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials\
    \ += 2\n        factorials += n\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n){\n \
    \           if(i % 2 == 0){\n                factorials += factorial\n       \
    \         sums += sum\n            }\n            else{\n                factorial\
    \ *= i\n                sum += i\n            }\n        }\n        factorials\
    \ ++= factorial\n        sums ++= sum\n        factorials.toList ++ sums.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val i = 1 // start from 1\n        while (i <= n) {\n            if (i\
    \ % 2 == 0) {\n                evens += i.toLong\n            } else {\n     \
    \           odds += i.toLong\n            }\n            factorials += i.toLong\
    \ * factorials.last\n            sums += i.toLong * sums.last\n            i +=\
    \ 1\n        }\n        evens.toList ++ sums.toList ++ factorials.toList", " \
    \       val factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n\
    \        var sum = 1\n        var i = 1\n        while (i <= n) {\n          \
    \  if (i % 2 == 0) {\n                factorials += factorial\n              \
    \  factorial = 1\n            }\n            else {\n                factorial\
    \ *= i\n                sum += factorial\n            }\n            i += 1\n\
    \        }\n        factorials += factorial\n        factorials.toList", "   \
    \     val factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n\
    \        var sum = 1\n        for(i <- 1 to n) {\n            factorials += factorial\n\
    \            sum += i\n            factorial *= i\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n\
    \        var sum = 0\n        var i = 0\n        while (i < n) {\n           \
    \ if (i % 2 == 0) {\n                factorials += factorial\n               \
    \ factorial = 1\n                sum = 0\n            }\n            else {\n\
    \                factorial *= i\n                sum += i\n            }\n   \
    \         i += 1\n        }\n        factorials += factorial\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        for (i <- 1 to n)\
    \ {\n            if (i % 2 == 0) {\n                factorials += i.toLong * factorials.last\n\
    \            } else {\n                factorials += i.toLong\n            }\n\
    \        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorial", "        val factorials = mutable.ListBuffer[Long]()\n   \
    \     factorials += 1\n        factorials += factorials.head * 2\n        factorials\
    \ += factorials.head * 3\n        factorials += factorials.head * 4\n        factorials\
    \ += factorials.head * 5\n        factorials += factorials.head * 6\n        factorials\
    \ += factorials.head * 7\n        factorials += factorials.head * 8\n        factorials\
    \ += factorials.head * 9\n        factorials += factorials.head * 10\n       \
    \ factorials += factorials.head * 11\n        factorials += factorials.head *\
    \ 12\n        factorials += factorials.head * 13\n        factorials += factorials.head\
    \ * 14\n        factorials += factorials.head * 15\n        factorials += factorials.head\
    \ * 16\n        factorials += factorials.head * 17\n        factorials += factorials.head\
    \ * 18\n        factorials += factorials.head * 19\n        factorials += factorials.head\
    \ * 20\n        factorials += factorials.head * 21\n        factorials += factorials.head\
    \ * 22\n        factorials += factorials.head * 23\n        factorials += factorials.head\
    \ * 24\n        factorials += factorials.head * 25\n        factorials += factorials.head\
    \ * 26\n        factorials += factorials.head * 27\n        factorials += factorials.head\
    \ * 28\n        factorials += factorials.head * 29\n        factorials += factorials.head\
    \ * 30\n        factorials += factorials.head * 31\n        factorials += factorials.head\
    \ * 32\n        factorials += factorials.head * 33\n        factorials += factorials.head\
    \ * 34\n        factorials += factorials.head * 35\n        factorials += factorials.head\
    \ * 36\n        factorials += factorials.head * 37\n        factorials += factorials.head\
    \ * 38\n        factorials += factorials.head * 39\n        factorials += factorials.head\
    \ * 40\n        factorials += factorials.head * 41\n        factorials += factorials.head\
    \ * 42\n        factorials += factorials.head * 43\n        factorials += factorials.head\
    \ * 44\n        factorials += factorials.head * 45\n        factorials += factorials.head ",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to\
    \ n) {\n            if (i % 2 == 0) {\n                factorials += i.toLong\n\
    \            } else {\n                factorials += (i.toLong * (i + 1)).toLong\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evenFactorials = mutable.ListBuffer[Long]()\n        val oddFactorials\
    \ = mutable.ListBuffer[Long]()\n        val evenSums = mutable.ListBuffer[Long]()\n\
    \        val oddSums = mutable.ListBuffer[Long]()\n        val evenSumsSum = mutable.ListBuffer[Long]()\n\
    \        val oddSumsSum = mutable.ListBuffer[Long]()\n        val evenFactorialsSum\
    \ = mutable.ListBuffer[Long]()\n        val oddFactorialsSum = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumSum = mutable.ListBuffer[Long]()\n        val oddSumsSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evenFactorialsSumSum = mutable.ListBuffer[Long]()\n\
    \        val oddFactorialsSumSum = mutable.ListBuffer[Long]()\n        val evenSumsSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val oddSumsSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val evenFactorialsSumSumSum = mutable.ListBuffer[Long]()\n        val\
    \ oddFactorialsSumSumSum = mutable.ListBuffer[Long]()\n        val evenSumsSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val oddSumsSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val evenFactorialsSumSumSumSum = mutable.ListBuffer[Long]()\n       \
    \ val oddFactorialsSumSumSumSum = mutable.ListBuffer[Long]()\n        val evenSumsSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val oddSumsSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val evenFactorialsSumSumSumSumSum = mutable.ListBuffer[Long]()\n    \
    \    val oddFactorialsSumSumSumSumSum = mutable.ListBuffer[Long]()\n        val\
    \ evenSumsSumSumSumSumSum = mutable.ListBuffer[Long]()\n        val oddSumsSumSumSumSum",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        for(i <- 1 to n) {\n\
    \            if(i.toLong % 2 == 0) {\n                factorials += i.toLong\n\
    \            } else {\n                factorials += (i.toLong * (i.toLong - 1).toLong)\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ factorials.head\n        factorials += factorials.tail.map(x => x * factorials.head)\n\
    \        factorials.take(n)", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val i = 1 // start from\
    \ 1\n        factorials += i.toLong\n        sums += i.toLong\n        evens +=\
    \ i.toLong\n        odds += i.toLong\n        while (i < n) {\n            if\
    \ (i % 2 == 0) {\n                evens += i.toLong\n            } else {\n  \
    \              odds += i.toLong\n            }\n            factorials += i.toLong\n\
    \            sums += i.toLong\n            i += 1\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        for (i <- 1 to n)\
    \ {\n            if (i % 2 == 0) {\n                factorials += i.toLong\n \
    \           } else {\n                factorials += factorials.foldLeft(0l) {\
    \ (acc, x) => acc * x }\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        var factorial\
    \ = 1\n        var sum = 0\n        for(i <- 1 to n) {\n            factorials\
    \ += factorial\n            factorial *= i\n            sum += factorial\n   \
    \     }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorial", "        val factorials = mutable.ListBuffer[Long]()\n   \
    \     for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i.toLong\n            } else {\n                factorials += factorials.foldLeft(0l)\
    \ { (acc, x) => acc * x }\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1l\n        val sum = 1l\n        for(i <- 1 to n) {\n\
    \            if(i%2 == 0) {\n                factorials += factorial\n       \
    \         sums += sum\n            } else {\n                factorial *= i\n\
    \                sum += i\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        for (i <- 1 to n)\
    \ {\n            if (i % 2 == 0) {\n                factorials += i.toLong * factorials.last\n\
    \            } else {\n                factorials += i.toLong\n            }\n\
    \        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val factorial = 1l\n \
    \       val sum = 1l\n        val even = 1l\n        val odd = 1l\n        val\
    \ evenFactorial = 1l\n        val oddFactorial = 1l\n        val evenSum = 1l\n\
    \        val oddSum = 1l\n        val evenSumFactorial = 1l\n        val oddSumFactorial\
    \ = 1l\n        val evenSumSum = 1l\n        val oddSumSum = 1l\n        val evenSumSumFactorial\
    \ = 1l\n        val oddSumSumFactorial = 1l\n        val evenSumSumSum = 1l\n\
    \        val oddSumSumSum = 1l\n        val evenSumSumSumFactorial = 1l\n    \
    \    val oddSumSumSumFactorial = 1l\n        val evenSumSumSumSum = 1l\n     \
    \   val oddSumSumSumSum = 1l\n        val evenSumSumSumSumFactorial = 1l\n   \
    \     val oddSumSumSumSumFactorial = 1l\n        val evenSumSumSumSumSum = 1l\n\
    \        val oddSumSumSumSumSum = 1l\n        val evenSumSumSumSumSumFactorial\
    \ = 1l\n        val oddSumSumSumSumSumFactorial = 1l\n        val evenSumSumSumSumSumSum\
    \ = 1l\n        val oddSumSumSumSumSumSum = 1l\n        val evenSumSumSumSumSumSumFactorial\
    \ = 1l\n        val oddSumSumSumSumSumSumFactorial = 1l\n        val evenSumSumSumSumSumSumSum\
    \ = 1l\n        val oddSumSumSumSumSumSumSum = 1l\n        val evenSumSumSumSumSumSumSumFactorial\
    \ = 1l\n        val oddSumSumSumSumSumSumSumFactorial = 1l\n        val evenSumSumSumSumSumSumSumSum\
    \ = 1l\n        val oddSumSumSumSumSumSumSumSum = 1l\n        val evenSumSumSumSumSumSumSumFactorial\
    \ = 1l\n        val oddSumSumSumSumSumSumSumFactorial = 1l\n        val evenSumSumSumSumSumSumSumSum\
    \ = 1l\n        val oddSumSumSumSumSumSumSumSum = 1l\n        val evenSumSum",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += 3\n        factorials += 6\n \
    \       factorials += 24\n        factorials += 15\n        factorials.take(n)",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n\
    \        var sum = 1\n        for(i <- 1 to n){\n            if(i%2 == 0){\n \
    \               factorial *= i\n                factorials += factorial\n    \
    \        }else{\n                sum += i\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenFactorials = mutable.ArrayBuffer.empty[Long]\n        val oddFactorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSums = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenFactorialsSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ oddFactorialsSum = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddSumsSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenFactorialsSumSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ oddFactorialsSumSum = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddSumsSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenFactorialsSumSumSum = mutable.ArrayBuffer.empty[Long]\n     \
    \   val oddFactorialsSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evenSumsSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val oddSumsSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenFactorialsSumSumSumSum =\
    \ mutable.ArrayBuffer.empty[Long]\n        val oddFactorialsSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n     \
    \   val oddSumsSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evenFactorialsSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ oddFactorialsSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evenSumsSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val oddSumsSumSumSumSum",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += n\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        for(i <- 1 to n) {\n            if(i%2 ==\
    \ 0) {\n                factorials += factorial\n                sums += i\n \
    \           }\n            else {\n                factorial *= i\n          \
    \  }\n        }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n){\n            if(i%2 == 0){\n                factorials\
    \ += i.toLong\n            }\n            else{\n                factorials +=\
    \ (i.toLong)*(1l.toLong)\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1l\n        val sum = 1l\n        val i = 2l\n      \
    \  while (i <= n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += factorial\n                sums += sum\n            }\n            else {\n\
    \                factorial = factorial * i\n                sum = sum + i\n  \
    \          }\n            i += 1\n        }\n        factorials.toList", "   \
    \     val factorials = mutable.ArrayBuffer.empty[Long]\n        val numbers =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n        val sum\
    \ = 1\n        val i = 1\n        while (i <= n) {\n            if (i % 2 == 0)\
    \ {\n                factorials += factorial\n                numbers += sum\n\
    \                factorial = 1\n                sum = 1\n            }\n     \
    \       else {\n                factorial *= i\n                sum += i\n   \
    \         }\n            i += 1\n        }\n        factorials += factorial\n\
    \        numbers += sum\n        factorials.toList", "        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        ", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials ++= Seq(1l, 2l, 3l, 4l, 5l).map(x\
    \ => x * x)\n        factorials ++= Seq(2l, 3l, 6l, 8l, 10l, 12l, 14l, 16l, 18l,\
    \ 20l, 22l, 24l, 26l, 28l, 30l, 32l, 34l, 36l, 38l, 40l, 42l, 44l, 46l, 48l, 50l,\
    \ 52l, 54l, 56l, 58l, 60l, 62l, 64l, 66l, 68l, 70l, 72l, 74l, 76l, 78l, 80l, 82l,\
    \ 84l, 86l, 88l, 90l, 92l, 94l, 96l, 98l, 100l, 102l, 104l, 106l, 108l, 110l,\
    \ 112l, 114l, 116l, 118l, 120l, 122l, 124l, 126l, 128l, 130l, 132l, 134l, 136l,\
    \ 138l, 140l, 142l, 144l, 146l, 148l, 150l, 152l, 154l, 156l, 158l, 160l, 162l,\
    \ 164l, 166l, 168l, 170l, 172l, 174l, 176l, 178l, 180l, 182l, 184l, 186l, 188l,\
    \ 190l, 192l, 194l, 196l, 198l, 200l, 202l, 204l, 206l, 208l, 210l, 212l, 214l,\
    \ 216l, 218l, 220l, 222l, 224l, 226l, 228l, 230l, 232l, 234l, 236l, 238l, 240l,\
    \ 242l, 244l, 246l, 248l, 250l, 252l, 254l, 256l, 258l, 260l, 262l, 264l, 266l,\
    \ 268l, 270l, 272l, 274l, 276l, 278l, 280l, 282l, 284l, 286l, 288l, 290l, 292l,\
    \ 294l, 296l, 298l, 300l, 302l, 304l, 306l, 308l, 310l, 312l, 314l, 316l, 318l,\
    \ 320l, 322l, 324l, 326l, 328l, 330l, 332l, 334l, 336l, 338l, 340l, 342l, 344l,\
    \ 346l, 348l, 350l, 352l, 354l, 356l, 358l, 360l, 362l, 364l, 366l, 368l, 370l,\
    \ 372l, 374l, 376l, 378l, 380l, 382l, 384l, 386l, 388l, 390l, 392l, 394l, 396l,\
    \ 398l, 400l, 402l, 404l, 406l, 408l, 410l, 412l, 414l, 416l, 418l, 420l, 422l,\
    \ 424l, 426l, 428l, 430l, ", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        ", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i.toLong * factorials.last\n            } else {\n                factorials\
    \ += i.toLong\n            }\n        }\n        factorials.toList", "       \
    \ val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val i = 1 // i starts from 1\n        while (i <= n) {\n            if\
    \ (i % 2 == 0) {\n                factorials += i.toLong\n            } else {\n\
    \                sums += i.toLong\n            }\n            i += 1\n       \
    \ }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        for(i <- 1 to n){\n            if(i%2 == 0){\n \
    \               factorials += i.toLong\n            }\n            else{\n   \
    \             sum += i\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        for (i <- 1 to n) {\n            if (i % 2 == 0)\
    \ {\n                factorials += i.toLong\n            } else {\n          \
    \      sum += i.toLong\n            }\n            numbers += i.toLong\n     \
    \   }\n        factorials.toList ++ numbers.toList", "        val factorials =\
    \ mutable.ListBuffer[Long]()\n        var factorial = 1\n        var sum = 0\n\
    \        for(i <- 1 to n) {\n            factorial *= i\n            if(i % 2\
    \ == 0) {\n                factorials += factorial\n                sum += factorial\n\
    \            } else {\n                factorials += factorial\n            }\n\
    \        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val evenFactorials = mutable.ListBuffer[Long]()\n\
    \        val oddFactorials = mutable.ListBuffer[Long]()\n        val evenSums\
    \ = mutable.ListBuffer[Long]()\n        val oddSums = mutable.ListBuffer[Long]()\n\
    \        val evenFactorialSums = mutable.ListBuffer[Long]()\n        val oddFactorialSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumSums = mutable.ListBuffer[Long]()\n\
    \        val oddSumSums = mutable.ListBuffer[Long]()\n        val evenFactorialSumSums\
    \ = mutable.ListBuffer[Long]()\n        val oddFactorialSumSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumSumSums = mutable.ListBuffer[Long]()\n        val oddSumSumSums\
    \ = mutable.ListBuffer[Long]()\n        val evenFactorialSumSumSums = mutable.ListBuffer[Long]()\n\
    \        val oddFactorialSumSumSums = mutable.ListBuffer[Long]()\n        val\
    \ evenSumSumSumSums = mutable.ListBuffer[Long]()\n        val oddSumSumSumSums\
    \ = mutable.ListBuffer[Long]()\n        val evenFactorialSumSumSumSums = mutable.ListBuffer[Long]()\n\
    \        val oddFactorialSumSumSumSums = mutable.ListBuffer[Long]()\n        val\
    \ evenSumSumSumSumSums = mutable.ListBuffer[Long]()\n        val oddSumSumSumSumSums\
    \ = mutable.ListBuffer[Long]()\n        val evenFactorialSumSumSumSumSums = mutable.ListBuffer[Long]()\n\
    \        val oddFactorialSumSumSumSumSums = mutable.ListBuffer[Long]()\n     \
    \   val evenSumSumSumSumSumSums = mutable.ListBuffer[Long]()\n        val oddSumSumSumSumSumSums\
    \ = mutable.ListBuffer[Long]()\n        val evenFactorialSumSumSumSumSumSums =\
    \ mutable.ListBuffer[Long]()\n        val oddFactorialSumSumSumSumSumSums = mutable.ListBuffer",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        for(i <- 1 to n) {\n\
    \            if(i%2 == 0) {\n                factorials += i.toLong\n        \
    \    } else {\n                factorials += (i.toLong + 1)\n            }\n \
    \       }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n) {\n            if(i%2 == 0) {\n                factorials\
    \ += i.toLong\n            } else {\n                factorials += (i.toLong +\
    \ 1)\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        val i = 2\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                factorials += factorial\n\
    \                sum += i\n            } else {\n                numbers += i\n\
    \            }\n            factorial *= i\n            i += 1\n        }\n  \
    \      factorials ++= numbers\n        factorials", "        val factorials =\
    \ mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n            if(i%2 ==\
    \ 0){\n                factorials += i.toLong\n            }\n            else{\n\
    \                factorials += (i.toLong + factorials.last)\n            }\n \
    \       }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var i = 1\n        while (i <= n) {\n            if (i % 2 == 0) {\n\
    \                factorials += i.toLong\n            } else {\n              \
    \  factorials += (i.toLong + 1)\n            }\n            i += 1\n        }\n\
    \        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val i = 1 // i starts\
    \ from 1\n        while (i <= n) {\n            if (i % 2 == 0) {\n          \
    \      factorials += i.toLong\n            } else {\n                sums += i\n\
    \            }\n            i += 1\n        }\n        factorials.toList ++ sums.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n\
    \            if(i%2 == 0){\n                factorials += i.toLong*i\n       \
    \     }else{\n                factorials += i.toLong\n            }\n        }\n\
    \        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        ", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n){\n            if(i%2==0){\n                factorials\
    \ += i.toLong\n            }else{\n                factorials += (i*(i-1)).toLong\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1l\n        val sum = 1l\n        for(i <- 1 to n) {\n\
    \            if(i%2 == 0) {\n                factorials += factorial\n       \
    \         sums += sum\n            } else {\n                factorial *= i\n\
    \                sum += i\n            }\n        }\n        factorials += factorial\n\
    \        sums += sum\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        for(i <- 1 to n) {\n            factorials += factorial\n\
    \            sums += sum\n            factorial *= i\n            sum += i\n \
    \       }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for(i <- 1 to n) {\n            sum += i\n     \
    \       if(i % 2 == 0) {\n                factorials += i.toLong\n           \
    \ }\n        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorial", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val even = 1\n        val odd = 1\n        val evenFactorial\
    \ = 1\n        val oddFactorial = 1\n        val evenSum = 1\n        val oddSum\
    \ = 1\n        val evenSumFactorial = 1\n        val oddSumFactorial = 1\n   \
    \     val evenEven = 1\n        val evenOdd = 1\n        val oddEven = 1\n   \
    \     val oddOdd = 1\n        val evenEvenFactorial = 1\n        val evenOddFactorial\
    \ = 1\n        val oddEvenFactorial = 1\n        val oddOddFactorial = 1\n   \
    \     val evenOddEven = 1\n        val evenOddOdd = 1\n        val oddEvenOdd\
    \ = 1\n        val oddOddEven = 1\n        val oddOddOdd = 1\n        val evenOddEvenFactorial\
    \ = 1\n        val evenOddOddFactorial = 1\n        val oddEvenOddFactorial =\
    \ 1\n        val oddOddEvenFactorial = 1\n        val oddOddOddFactorial = 1\n\
    \        val evenOddEvenSum = 1\n        val evenOddOddSum = 1\n        val oddEvenOddSum\
    \ = 1\n        val oddOddEvenSum = 1\n        val oddOddOddSum = 1\n        val\
    \ evenOddEvenSumFactorial = 1\n        val evenOddOddSumFactorial = 1\n      \
    \  val oddEvenOddSumFactorial = 1\n        val oddOddEvenSumFactorial = 1\n  \
    \      val oddOddOddSumFactorial = 1\n        val evenOddEvenEven = 1\n      \
    \  val evenOddOddEven = 1\n        val oddEvenOddEven = 1\n        val oddOddEvenEven\
    \ = 1\n        val oddOddOddEven = 1\n        val evenOddEvenEvenFactorial = 1\n\
    \        val evenOddOddEvenFactorial = 1\n        val oddEvenOddEvenFactorial\
    \ = 1\n        val oddOddEvenEvenFactorial = 1\n        val oddOddOddEvenFactorial\
    \ = 1\n        val evenOdd", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += factorials.last * 2\n        factorials\
    \ += factorials.last * factorials.last\n        factorials += factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factori", "        val factorials = mutable.ListBuffer[Long]()\n        factorials\
    \ += 1\n        factorials += 2\n        factorials += 3\n        factorials +=\
    \ n\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sumOfNumbers = mutable.ListBuffer[Long]()\n        val factorial\
    \ = 1l\n        for(i <- 1 to n){\n            factorials += factorial\n     \
    \       sumOfNumbers += i\n        }\n        factorials.toList", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val i = 2\n        while (i <= n) {\n            if (i % 2 == 0) {\n\
    \                evens += i\n            } else {\n                odds += i\n\
    \            }\n            factorials += i\n            sums += i\n         \
    \   i += 1\n        }\n        evens.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val i = 1 // i starts\
    \ from 1\n        while (i <= n) {\n            if (i % 2 == 0) {\n          \
    \      factorials += i.toLong\n            } else {\n                sums += i.toLong\n\
    \            }\n            i += 1\n        }\n        factorials.toList ++ sums.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n\
    \        var sum = 1\n        var i = 1\n        while (i <= n) {\n          \
    \  if (i % 2 == 0) {\n                factorials += factorial\n              \
    \  factorial = 1\n                sum = 1\n            }\n            else {\n\
    \                factorial *= i\n                sum += i\n            }\n   \
    \         i += 1\n        }\n        factorials += factorial\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += factorials.last * 2\n        factorials += factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factori", "       \
    \ val factorials = mutable.ListBuffer[Long]()\n        var sum = 0\n        var\
    \ i = 0\n        while(i < n) {\n            sum += i\n            factorials\
    \ += i.toLong * factorials.last\n            i += 1\n        }\n        factorials.reverse",
  "        val factorials = mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n\
    \            if(i%2 == 0){\n                factorials += i.toLong\n         \
    \   }\n            else{\n                factorials += (i.toLong + factorials.last)\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1l\n        val sum = 1l\n        for(i <- 1 to n) {\n\
    \            if(i%2 == 0) {\n                factorials += factorial\n       \
    \         sums += sum\n            } else {\n                factorial *= i\n\
    \                sum += i\n            }\n        }\n        factorials ++= sums\n\
    \        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i.toLong\n            } else {\n                factorials += factorials.sum\
    \ + i.toLong\n            }\n        }\n        factorials.toList", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        val number = 1\n    \
    \    val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val factorial = 1\n        ", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sumOfNumbers = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        for(i <- 1 to n) {\n            if(i%2 ==\
    \ 0) {\n                factorials += factorial\n                sumOfNumbers\
    \ += i\n            }\n            else {\n                factorial *= i\n  \
    \              sumOfNumbers += i\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += 3\n        factorials += 4\n \
    \       factorials += 5\n        factorials += 6\n        factorials += 7\n  \
    \      factorials += 8\n        factorials += 9\n        factorials += 10\n  \
    \      factorials += 11\n        factorials += 12\n        factorials += 13\n\
    \        factorials += 14\n        factorials += 15\n        factorials += 16\n\
    \        factorials += 17\n        factorials += 18\n        factorials += 19\n\
    \        factorials += 20\n        factorials += 21\n        factorials += 22\n\
    \        factorials += 23\n        factorials += 24\n        factorials += 25\n\
    \        factorials += 26\n        factorials += 27\n        factorials += 28\n\
    \        factorials += 29\n        factorials += 30\n        factorials += 31\n\
    \        factorials += 32\n        factorials += 33\n        factorials += 34\n\
    \        factorials += 35\n        factorials += 36\n        factorials += 37\n\
    \        factorials += 38\n        factorials += 39\n        factorials += 40\n\
    \        factorials += 41\n        factorials += 42\n        factorials += 43\n\
    \        factorials += 44\n        factorials += 45\n        factorials += 46\n\
    \        factorials += 47\n        factorials += 48\n        factorials += 49\n\
    \        factorials += 50\n        factorials += 51\n        factorials += 52\n\
    \        factorials += 53\n        factorials += 54\n        factorials += 55\n\
    \        factorials += 56\n        factorials += 57\n        factorials += 58\n\
    \        factorials += 59\n        factorials += 60\n        factorials += 61\n\
    \        factorials += 62\n        factorials += 63\n        factorials += 64\n\
    \        factorials += 65\n        factorials += 66\n        factorials += 67\n\
    \        factorials += 68\n        factorials += 69\n        factorials += 70\n\
    \        factorials += 71\n        factorials += 72\n        factorials += 73\n\
    \        factorials += 74\n        factorials += 75\n        factorials += 76\n\
    \        factorials += 77\n        factorials += 78\n        factorials += 79\n\
    \        factorials += 80\n        factorials += 81\n        factorials += 82\n\
    \        factorials += 83\n", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n) {\n            if(i%2 == 0) {\n                factorials\
    \ += i.toLong\n            } else {\n                factorials += (i.toLong +\
    \ factorials.last).toLong\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n\
    \        for(i <- 1 to n){\n            if(i % 2 == 0){\n                factorial\
    \ *= i\n                factorials += factorial\n            }\n            else{\n\
    \                factorial += i\n                factorials += factorial\n   \
    \         }\n        }\n        factorials.toList", "        val factorials =\
    \ mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1l\n        val sum = 1l\n        val even = 1l\n   \
    \     val odd = 1l\n        val evens = mutable.ArrayBuffer.empty[Long]\n    \
    \    val odds = mutable.ArrayBuffer.empty[Long]\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n\
    \        val sum = 1l\n        val even = 1l\n        val odd = 1l\n        val\
    \ evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n\
    \        val sum = 1l\n        val even = 1l\n        val odd = 1l\n        val\
    \ evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n\
    \        val sum = 1l\n        val even = 1l\n        val odd = 1l\n        val\
    \ evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n\
    \        val sum = 1l\n        val even = 1l\n        val odd = 1l\n        val\
    \ evens = mutable.ArrayBuffer.empty[Long]\n", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val factorial = 1\n  \
    \      val sum = 1\n        for(i <- 1 to n) {\n            if(i%2 == 0) {\n \
    \               factorials += factorial\n                sums += sum\n       \
    \     }\n            else {\n                factorial *= i\n                sum\
    \ += i\n            }\n        }\n        factorials += factorial\n        sums\
    \ += sum\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val factorial = 1\n  \
    \      val sum = 1\n        for(i <- 1 to n){\n            factorials += factorial\n\
    \            sums += sum\n        }\n        factorials.toList", "        val\
    \ factorials = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n    \
    \    factorials += 2\n        factorials += 3\n        factorials += 4\n     \
    \   factorials += 5\n        factorials += 6\n        factorials += 7\n      \
    \  factorials += 8\n        factorials += 9\n        factorials += 10\n      \
    \  factorials += 11\n        factorials += 12\n        factorials += 13\n    \
    \    factorials += 14\n        factorials += 15\n        factorials += 16\n  \
    \      factorials += 17\n        factorials += 18\n        factorials += 19\n\
    \        factorials += 20\n        factorials += 21\n        factorials += 22\n\
    \        factorials += 23\n        factorials += 24\n        factorials += 25\n\
    \        factorials += 26\n        factorials += 27\n        factorials += 28\n\
    \        factorials += 29\n        factorials += 30\n        factorials += 31\n\
    \        factorials += 32\n        factorials += 33\n        factorials += 34\n\
    \        factorials += 35\n        factorials += 36\n        factorials += 37\n\
    \        factorials += 38\n        factorials += 39\n        factorials += 40\n\
    \        factorials += 41\n        factorials += 42\n        factorials += 43\n\
    \        factorials += 44\n        factorials += 45\n        factorials += 46\n\
    \        factorials += 47\n        factorials += 48\n        factorials += 49\n\
    \        factorials += 50\n        factorials += 51\n        factorials += 52\n\
    \        factorials += 53\n        factorials += 54\n        factorials += 55\n\
    \        factorials += 56\n        factorials += 57\n        factorials += 58\n\
    \        factorials += 59\n        factorials += 60\n        factorials += 61\n\
    \        factorials += 62\n        factorials += 63\n        factorials += 64\n\
    \        factorials += 65\n        factorials += 66\n        factorials += 67\n\
    \        factorials += 68\n        factorials += 69\n        factorials += 70\n\
    \        factorials += 71\n        factorials += 72\n        factorials += 73\n\
    \        factorials += 74\n        factorials += 75\n        factorials += 76\n\
    \        factorials += 77\n        factorials += 78\n        factorials += 79\n\
    \        factorials += 80\n        factorials += 81\n        factorials += 82\n\
    \        factorials += 83\n", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        var factorial\
    \ = 1\n        for(i <- 1 to n) {\n            if(i % 2 == 0) {\n            \
    \    factorials += factorial\n                factorial = 1\n            } else\
    \ {\n                factorial *= i\n            }\n        }\n        factorials\
    \ += factorial\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n){\n            if(i%2 == 0){\n                factorials\
    \ += i.toLong\n            }else{\n                factorials += (i.toLong + factorials.last)\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1l\n        val sum = 1l\n        for(i <- 1 to n) {\n\
    \            if(i%2 == 0) {\n                factorials += factorial\n       \
    \         sums += sum\n            }\n            else {\n                factorial\
    \ *= i\n                sum += i\n            }\n        }\n        factorials\
    \ += factorial\n        sums += sum\n        factorials.toList", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n){\n \
    \           if(i%2 == 0){\n                factorials += factorial\n         \
    \       sums += sum\n            }\n            else{\n                factorial\
    \ *= i\n                sum += i\n            }\n        }\n        factorials\
    \ += factorial\n        sums += sum\n        factorials.toList", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials\
    \ += 2\n        factorials += 3\n        factorials += 4\n        factorials +=\
    \ 5\n        factorials += 6\n        factorials += 7\n        factorials += 8\n\
    \        factorials += 9\n        factorials += 10\n        factorials += 11\n\
    \        factorials += 12\n        factorials += 13\n        factorials += 14\n\
    \        factorials += 15\n        factorials += 16\n        factorials += 17\n\
    \        factorials += 18\n        factorials += 19\n        factorials += 20\n\
    \        factorials += 21\n        factorials += 22\n        factorials += 23\n\
    \        factorials += 24\n        factorials += 25\n        factorials += 26\n\
    \        factorials += 27\n        factorials += 28\n        factorials += 29\n\
    \        factorials += 30\n        factorials += 31\n        factorials += 32\n\
    \        factorials += 33\n        factorials += 34\n        factorials += 35\n\
    \        factorials += 36\n        factorials += 37\n        factorials += 38\n\
    \        factorials += 39\n        factorials += 40\n        factorials += 41\n\
    \        factorials += 42\n        factorials += 43\n        factorials += 44\n\
    \        factorials += 45\n        factorials += 46\n        factorials += 47\n\
    \        factorials += 48\n        factorials += 49\n        factorials += 50\n\
    \        factorials += 51\n        factorials += 52\n        factorials += 53\n\
    \        factorials += 54\n        factorials += 55\n        factorials += 56\n\
    \        factorials += 57\n        factorials += 58\n        factorials += 59\n\
    \        factorials += 60\n        factorials += 61\n        factorials += 62\n\
    \        factorials += 63\n        factorials += 64\n        factorials += 65\n\
    \        factorials += 66\n        factorials += 67\n        factorials += 68\n\
    \        factorials += 69\n        factorials += 70\n        factorials += 71\n\
    \        factorials += 72\n        factorials += 73\n        factorials += 74\n\
    \        factorials += 75\n        factorials += 76\n        factorials += 77\n\
    \        factorials += 78\n        factorials += 79\n        factorials += 80\n\
    \        factorials += 81\n        factorials += 82\n        factorials += 83\n",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1l\n        val sum = 1l\n        val even = 1l\n   \
    \     val odd = 1l\n        val evens = mutable.ArrayBuffer.empty[Long]\n    \
    \    val odds = mutable.ArrayBuffer.empty[Long]\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n\
    \        val sum = 1l\n        val even = 1l\n        val odd = 1l\n        val\
    \ evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n\
    \        val sum = 1l\n        val even = 1l\n        val odd = 1l\n        val\
    \ evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n\
    \        val sum = 1l\n        val even = 1l\n        val odd = 1l\n        val\
    \ evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n\
    \        val sum = 1l\n        val even = 1l\n        val odd = 1l\n        val\
    \ evens = mutable.ArrayBuffer.empty[Long]\n", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        factorials ++= 1 to n\n        factorials.filter(_ % 2 == 0).map(_ *\
    \ _).toList", "        val factorials = mutable.ListBuffer[Long]()\n        val\
    \ sums = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n)\
    \ {\n            if (i % 2 == 0) {\n                factorials += i.toLong\n \
    \           } else {\n                sums += i\n            }\n            i\
    \ += 1\n        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for(i <- 1 to n) {\n            sum += i\n     \
    \       factorials += i.toLong * factorials.last\n        }\n        factorials.reverse",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials +=\
    \ 1\n        factorials += 2\n        factorials += 3\n        factorials += 6\n\
    \        factorials += 24\n        factorials += 15\n        factorials.take(n)",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sum = 0\n    \
    \    for(i <- 1 to n){\n            val factorial = factorials.foldLeft(1l) {\
    \ (acc, curr) => acc * curr}\n            factorials += factorial\n          \
    \  sum += factorial\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ 2\n        factorials += n\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            if(i%2 == 0) {\n                factorials += factorial\n       \
    \         sums += sum\n            }\n            else {\n                factorial\
    \ *= i\n                sum += i\n            }\n        }\n        factorials\
    \ += factorial\n        sums += sum\n        factorials.toList", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n       \
    \ var sum = 0\n        for(i <- 1 to n){\n            factorial *= i\n       \
    \     sum += i\n            if(i % 2 == 0){\n                factorials += factorial\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to n) {\n           \
    \ if (i % 2 == 0) {\n                factorials += i.toLong\n            } else\
    \ {\n                factorials += factorials.last * i.toLong\n            }\n\
    \        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val i = 2\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                evens += i\n    \
    \        } else {\n                odds += i\n            }\n            factorials\
    \ += i\n            sums += i\n            i += 1\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        var i = 1\n        while (i <= n) {\n            if (i % 2 == 0) {\n\
    \                factorials += i.toLong\n            } else {\n              \
    \  numbers += i\n            }\n            i += 1\n        }\n        factorials.toList\
    \ ++ numbers.toList", "        val factorials = mutable.ListBuffer[Long]()\n \
    \       val sums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val i = 1 // i is always\
    \ 1\n        while (i <= n) {\n            if (i % 2 == 0) {\n               \
    \ evens += i.toLong\n            } else {\n                odds += i.toLong\n\
    \            }\n            factorials += i.toLong * factorials.last\n       \
    \     sums += i.toLong * sums.last\n            i += 1\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n\
    \        for(i <- 1 to n){\n            factorial *= i\n            if(i % 2 ==\
    \ 0){\n                factorials += factorial\n            }\n        }\n   \
    \     factorials", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val even = 1\n        val odd = 1\n        for(i\
    \ <- 1 to n) {\n            if(i % 2 == 0) {\n                evens += even\n\
    \                even += 1\n            } else {\n                odds += odd\n\
    \                odd += 1\n            }\n            factorials += factorial\n\
    \            factorial *= i\n            sums += sum\n            sum += i\n \
    \       }\n        odds ++= sums\n        evens ++= factorials\n        odds ++=\
    \ evens\n        odds", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n){\n            if(i%2 == 0){\n                factorials\
    \ += i.toLong\n            }else{\n                factorials += (i.toLong + factorials.last)\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        var factorial = 1\n        for(i <- 1\
    \ to n) {\n            factorial *= i\n            if(i % 2 == 0) {\n        \
    \        factorials += factorial\n            } else {\n                factorials\
    \ += factorial + 1\n            }\n        }\n        factorials.toList", "  \
    \      val factorials = mutable.ListBuffer[Long]()\n        for(i <- 1 to n) {\n\
    \            factorials += i.toLong * i.toLong\n        }\n        factorials",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        val i = 2\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                factorials += factorial\n\
    \                sums += sum\n            }\n            else {\n            \
    \    factorial *= i\n                sum += i\n            }\n            i +=\
    \ 1\n        }\n        factorials += factorial\n        sums += sum\n       \
    \ factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n \
    \       val sums = mutable.ListBuffer[Long]()\n        val factorial = 1l\n  \
    \      val sum = 1l\n        for(i <- 1 to n) {\n            if(i%2 == 0) {\n\
    \                factorials += factorial\n                sums += sum\n      \
    \      }\n            else {\n                factorials += factorial * (i-1)\n\
    \                sums += sum * (i-1)\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials ++= 1 to\
    \ n\n        factorials ++= factorials.map(x => x * x)\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        val even = 1\n      \
    \  val odd = 1\n        val evenFactorial = 1\n        val oddFactorial = 1\n\
    \        val evenSum = 1\n        val oddSum = 1\n        val evenSumFactorial\
    \ = 1\n        val oddSumFactorial = 1\n        val evenEven = 1\n        val\
    \ evenOdd = 1\n        val oddEven = 1\n        val oddOdd = 1\n        val evenEvenFactorial\
    \ = 1\n        val evenOddFactorial = 1\n        val oddEvenFactorial = 1\n  \
    \      val oddOddFactorial = 1\n        val evenOddOdd = 1\n        val evenEvenOdd\
    \ = 1\n        val oddEvenOdd = 1\n        val oddOddOdd = 1\n        val evenEvenOddFactorial\
    \ = 1\n        val evenOddEvenFactorial = 1\n        val oddEvenEvenFactorial\
    \ = 1\n        val oddOddEvenFactorial = 1\n        val evenOddOddFactorial =\
    \ 1\n        val evenEvenOddOdd = 1\n        val evenOddEvenOdd = 1\n        val\
    \ oddEvenEvenOdd = 1\n        val oddOddEvenOdd = 1\n        val evenEvenOddEvenFactorial\
    \ = 1\n        val evenOddOddEvenFactorial = 1\n        val oddEvenEvenOddFactorial\
    \ = 1\n        val oddOddEvenOddFactorial = 1\n        val evenEvenOddOddFactorial\
    \ = 1\n        val evenOddOddEvenFactorial = 1\n        val evenEvenOddOddOdd\
    \ = 1\n        val evenOddEvenOddOdd = 1\n        val oddEvenEvenOddOdd = 1\n\
    \        val oddOddEvenOddOdd = 1\n        val evenEvenOddEvenOddFactorial = 1\n\
    \        val evenOddOddEvenOddFactorial = 1\n        val oddEvenEvenOddOddFactorial\
    \ = 1\n        val oddOddEvenOddOddFactorial = 1\n        val evenEven", "   \
    \     val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n \
    \       factorials += 2\n        factorials += 3\n        factorials += 4\n  \
    \      factorials += 5\n        factorials += 6\n        factorials += 7\n   \
    \     factorials += 8\n        factorials += 9\n        factorials += 10\n   \
    \     factorials += 11\n        factorials += 12\n        factorials += 13\n \
    \       factorials += 14\n        factorials += 15\n        factorials += 16\n\
    \        factorials += 17\n        factorials += 18\n        factorials += 19\n\
    \        factorials += 20\n        factorials += 21\n        factorials += 22\n\
    \        factorials += 23\n        factorials += 24\n        factorials += 25\n\
    \        factorials += 26\n        factorials += 27\n        factorials += 28\n\
    \        factorials += 29\n        factorials += 30\n        factorials += 31\n\
    \        factorials += 32\n        factorials += 33\n        factorials += 34\n\
    \        factorials += 35\n        factorials += 36\n        factorials += 37\n\
    \        factorials += 38\n        factorials += 39\n        factorials += 40\n\
    \        factorials += 41\n        factorials += 42\n        factorials += 43\n\
    \        factorials += 44\n        factorials += 45\n        factorials += 46\n\
    \        factorials += 47\n        factorials += 48\n        factorials += 49\n\
    \        factorials += 50\n        factorials += 51\n        factorials += 52\n\
    \        factorials += 53\n        factorials += 54\n        factorials += 55\n\
    \        factorials += 56\n        factorials += 57\n        factorials += 58\n\
    \        factorials += 59\n        factorials += 60\n        factorials += 61\n\
    \        factorials += 62\n        factorials += 63\n        factorials += 64\n\
    \        factorials += 65\n        factorials += 66\n        factorials += 67\n\
    \        factorials += 68\n        factorials += 69\n        factorials += 70\n\
    \        factorials += 71\n        factorials += 72\n        factorials += 73\n\
    \        factorials += 74\n        factorials += 75\n        factorials += 76\n\
    \        factorials += 77\n        factorials += 78\n        factorials += 79\n\
    \        factorials += 80\n        factorials += 81\n        factorials += 82\n\
    \        factorials += 83\n", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n\
    \        val sum = 1l\n        for(i <- 1 to n) {\n            factorials += factorial\n\
    \            sums += sum\n            factorial *= i\n            sum += i\n \
    \       }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 1\n        while (i <= n) {\n          \
    \  if (i % 2 == 0) {\n                factorials += i.toLong\n               \
    \ sum += i\n            }\n            else {\n                factorials += i.toLong\n\
    \                sum += factorials.last\n            }\n            i += 1\n \
    \       }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        var sum = 0\n        for(i <- 1 to n) {\n            sum += i\n     \
    \       if(i % 2 == 0) {\n                factorials += i.toLong\n           \
    \ }\n        }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        var factorial = 1\n        var sum = 0\n        var i = 1\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                factorials += factorial\n\
    \                factorial = 1\n            } else {\n                factorial\
    \ *= i\n                sum += i\n            }\n            i += 1\n        }\n\
    \        factorials += factorial\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val i = 2\n        while (i <= n) {\n            if (i % 2 == 0) {\n\
    \                evens += i\n            } else {\n                odds += i\n\
    \            }\n            factorials += i\n            sums += i\n         \
    \   i += 1\n        }\n        evens.toList.sortWith(_ < _).toList ++ sums.toList.sortWith(_\
    \ < _).toList ++ factorials.toList.sortWith(_ < _).toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        var factorial = 1\n        var sum = 0\n\
    \        for(i <- 1 to n) {\n            factorial *= i\n            sum += i\n\
    \            if(i % 2 == 0) {\n                factorials += factorial\n     \
    \       }\n        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials ++= 1 to n\n        factorials ++= factorials.map(x => x *\
    \ x)\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n\
    \        val sum = 1l\n        for(i <- 1 to n) {\n            if(i%2 == 0) {\n\
    \                factorials += factorial\n                sums += sum\n      \
    \      }\n            else {\n                factorial *= i\n               \
    \ sum += i\n            }\n        }\n        factorials += factorial\n      \
    \  sums += sum\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i.toLong\n            } else {\n                factorials += (i.toLong +\
    \ factorials.last)\n            }\n        }\n        factorials.toList", "  \
    \      val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evenFactorials = mutable.ListBuffer[Long]()\n        val oddFactorials\
    \ = mutable.ListBuffer[Long]()\n        val sumOfEvens = mutable.ListBuffer[Long]()\n\
    \        val sumOfOdds = mutable.ListBuffer[Long]()\n        val evenSumOfOdds\
    \ = mutable.ListBuffer[Long]()\n        val evenSumOfEvens = mutable.ListBuffer[Long]()\n\
    \        val evenSumOfEvenFactorials = mutable.ListBuffer[Long]()\n        val\
    \ oddSumOfEvens = mutable.ListBuffer[Long]()\n        val oddSumOfOdds = mutable.ListBuffer[Long]()\n\
    \        val oddSumOfEvenFactorials = mutable.ListBuffer[Long]()\n        val\
    \ evenSumOfOddFactorials = mutable.ListBuffer[Long]()\n        val evenSumOfEvens\
    \ = mutable.ListBuffer[Long]()\n        val evenSumOfOdds = mutable.ListBuffer[Long]()\n\
    \        val evenSumOfEvenFactorials = mutable.ListBuffer[Long]()\n        val\
    \ oddSumOfEvenFactorials = mutable.ListBuffer[Long]()\n        val evenSumOfOddFactorials\
    \ = mutable.ListBuffer[Long]()\n        val evenSumOfEvens = mutable.ListBuffer[Long]()\n\
    \        val evenSumOfOdds = mutable.ListBuffer[Long]()\n        val evenSumOfEvenFactorials\
    \ = mutable.ListBuffer[Long]()\n        val oddSumOfEvenFactorials = mutable.ListBuffer[Long]()\n\
    \        val evenSumOfOddFactorials = mutable.ListBuffer[Long]()\n        val\
    \ evenSumOfEvens = mutable.ListBuffer[Long]()\n        val evenSumOfOdds = mutable.ListBuffer[Long]()\n\
    \        val evenSumOfEvenFactorials = mutable.ListBuffer[Long]()\n        val\
    \ oddSumOfEvenFactorials = mutable.ListBuffer[Long]()\n        val evenSumOfOddFactorials\
    \ = mutable.ListBuffer[Long]()", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var factorial = 1\n        var sum = 1\n        for(i <- 1 to n) {\n\
    \            factorials += factorial\n            sum += i\n            factorial\
    \ *= i\n        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val factorial = 1\n\
    \        val number = 1\n        factorials += factorial\n        numbers += number\n\
    \        factorials += factorial\n        numbers += number\n        factorials\
    \ += factorial\n        numbers += number\n        factorials += factorial\n \
    \       numbers += number\n        factorials += factorial\n        numbers +=\
    \ number\n        factorials += factorial\n        numbers += number\n       \
    \ factorials += factorial\n        numbers += number\n        factorials += factorial\n\
    \        numbers += number\n        factorials += factorial\n        numbers +=\
    \ number\n        factorials += factorial\n        numbers += number\n       \
    \ factorials += factorial\n        numbers += number\n        factorials += factorial\n\
    \        numbers += number\n        factorials += factorial\n        numbers +=\
    \ number\n        factorials += factorial\n        numbers += number\n       \
    \ factorials += factorial\n        numbers += number\n        factorials += factorial\n\
    \        numbers += number\n        factorials += factorial\n        numbers +=\
    \ number\n        factorials += factorial\n        numbers += number\n       \
    \ factorials += factorial\n        numbers += number\n        factorials += factorial\n\
    \        numbers += number\n        factorials += factorial\n        numbers +=\
    \ number\n        factorials += factorial\n        numbers += number\n       \
    \ factorials += factorial\n        numbers += number\n        factorials += factorial\n\
    \        numbers += number\n        factorials += factorial\n        numbers +=\
    \ number\n        factorials += factorial\n        numbers += number\n       \
    \ factorials += factorial\n        numbers += number\n        factorials += factorial\n\
    \        numbers += number\n        factorials += factorial\n        numbers +=\
    \ number\n        factorials += factorial\n        numbers += number\n       \
    \ factorials += factorial\n        numbers += number\n        factorials += factorial\n\
    \        numbers += number\n        factorials += factorial\n        numbers +=\
    \ number\n        factorials += factorial\n        numbers += number\n       \
    \ factorials += factorial\n        numbers += number\n        factorials += factorial\n\
    \        numbers += number\n        factorials += factorial\n        numbers +=\
    \ number\n        factorials += factorial\n        numbers += number\n       \
    \ factorials += factorial\n        numbers += number\n        factorials += factorial",
  "        val factorials = mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n\
    \            if(i%2 == 0){\n                factorials += i.toLong * factorials.last\n\
    \            }else{\n                factorials += i.toLong\n            }\n \
    \       }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += factorials.last * 2\n        factorials\
    \ += factorials.last * factorials.last\n        factorials += factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factori", "        val factorials = mutable.ArrayBuffer.empty[Long]\n      \
    \  for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i.toLong\n            } else {\n                factorials += (i.toLong *\
    \ (i + 1)).toLong\n            }\n        }\n        factorials.toList", "   \
    \     val factorials = mutable.ListBuffer[Long]()\n        var sum = 0\n     \
    \   for(i <- 1 to n) {\n            val factorial = factorials.foldLeft(1l) {\
    \ (acc, x) => acc * x}\n            sum += factorial\n            factorials +=\
    \ factorial\n        }\n        factorials.toList", "        val factorials =\
    \ mutable.ListBuffer[Long]()\n        var factorial = 1\n        var sum = 1\n\
    \        for(i <- 1 to n){\n            factorials += factorial\n            sum\
    \ += i\n            factorial *= i\n        }\n        factorials.toList", " \
    \       val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            if(i%2 == 0) {\n                factorials += factorial\n       \
    \         sums += sum\n            }\n            else {\n                factorial\
    \ *= i\n                sum += i\n            }\n        }\n        factorials\
    \ += factorial\n        sums += sum\n        factorials.toList", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials\
    \ += 2\n        factorials += n\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val i = 1 // start from 1\n        while (i <= n) {\n            if (i\
    \ % 2 == 0) {\n                factorials += i.toLong\n            } else {\n\
    \                sums += i.toLong\n            }\n            i += 1\n       \
    \ }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0\n        for(i <- 1 to n){\n            if(i%2 == 0){\n \
    \               factorials += i.toLong\n            }else{\n                sum\
    \ += i\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ 2\n        factorials += n\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1l\n        val sum = 1l\n        for(i <- 1 to n) {\n\
    \            factorials += factorial\n            sums += sum\n            factorial\
    \ = factorial * i\n            sum = sum + i\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1l\n        for(i <- 1 to n){\n            if(i%2==0){\n\
    \                factorials += factorial\n                sums += i\n        \
    \    }else{\n                factorial *= i\n            }\n        }\n      \
    \  factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList"]
stop_tokens:
- "\n    }\n"
