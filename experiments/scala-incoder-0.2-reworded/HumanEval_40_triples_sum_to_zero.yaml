name: HumanEval_40_triples_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // triples_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ true if there are three distinct elements in the list that\n    // sum to zero,\
  \ and false otherwise.\n    // >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
  \ 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (true)\n    // >>> triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong)))\n    // (true)\n   \
  \ // >>> triplesSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def triplesSumToZero(l\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
  \ -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
  \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
completions: ["        val set = mutable.HashSet[Long]()\n        l.foreach(x => set\
    \ += x)\n        set.size == 3 && set.size == l.length", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3", "        val set =\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x.toLong) }\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size\
    \ == l.length", "        val set = mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (set.contains(x)) {\n                return false\n \
    \           }\n            set += x\n        }\n        true", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n \
    \       set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ false else set.add(x))\n        set.size == 3", "        val l1 = l.toSet\n\
    \        val l2 = l1.toSet\n        l2.size == 3 && l1.size == 3 && l2.subsetOf(l1)",
  "        val set = l.toSet\n        val triples = l.zip(l.tail).filter(_._2 > 0).filter(_._2\
    \ > 0)\n        triples.forall(t => set.contains(t._1 + t._2))", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val map = mutable.HashMap[Long, Int]()\n        l.foreach\
    \ { x => map.put(x, map.getOrElse(x, 0) + 1) }\n        map.size == 3", "    \
    \    val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set += x)\n        set.size == 3 && set.size == l.length", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) false\
    \ else set.add(x))\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x.toLong) }\n        set.size == 3", "        val l1 = l.toSet\n\
    \        val l2 = l1.toSet\n        l1.size == 3 && l2.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) false else set.add(x))\n        set.size\
    \ == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach(x => set\
    \ += x)\n        set.size == 3 && set.size == l.length", "        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = l.toSet\n        val triples = l.zip(l.tail).filter(_._2\
    \ > 0).map(_._1).distinct\n        triples.size == 3 && triples.forall(set.contains)",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    l.foreach { x => set.add(x.toLong) }\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set2.add(x) else set.add(x))\n  \
    \      l.foreach(x => if (set2.contains(x)) set3.add(x) else set2.add(x))\n  \
    \      set3.size == 3", "        val set = new mutable.HashSet[Long]()\n     \
    \   l.foreach { x => set.add(x.toLong) }\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ false else set.add(x))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3", "     \
    \   val set = new mutable.HashSet[Long]()\n        val sum = 0\n        for (i\
    \ <- l) {\n            sum += i\n            if (set.contains(sum)) {\n      \
    \          return false\n            }\n            set += i\n        }\n    \
    \    true", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = mutable.Set[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) false else set.add(x))\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach { x\
    \ => set.add(x.toLong) }\n        set.size == 3 && set.size == l.length", "  \
    \      val set = mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x.toLong) }\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ false else set.add(x))\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x.toLong) }\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n\
    \        set.size == 3 && set.size == l.length", "        val set = mutable.Set[Long]()\n\
    \        l.foreach { x => set += x }\n        set.size == 3 && set.size == l.length",
  "        val sums = l.map(x => x.toLong).distinct.toList\n        sums.size == 3\
    \ && sums.forall(x => l.count(y => y == x) == 0)", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size\
    \ == l.length", "        val set = mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x.toLong) }\n        set.size == 3 && set.forall(x => x == 0)",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ false else set.add(x))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = l.toSet\n        val triples = l.zip(l.tail).filter(_._2\
    \ != 0).toList\n        triples.forall(t => set.contains(t._1 + t._2))", "   \
    \     val set = l.toSet\n        val triples = l.zip(l.tail).filter(_._2 > 0).filter(_._2\
    \ > _._1)\n        triples.forall(t => set.contains(t._1 + t._2))", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) false else set.add(x))\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x =>\
    \ set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "      \
    \  val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ false else set.add(x))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) false else set.add(x))\n        set.size\
    \ == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach(x => set\
    \ += x)\n        set.size == 3 && set.size == l.length", "        val set = mutable.Set[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n    \
    \    l.foreach(x => if (set.contains(x)) false else set.add(x))\n        set.size\
    \ == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach { x =>\
    \ set.add(x.toLong) }\n        set.size == 3 && set.size == l.length", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (set.contains(x)) {\n                return false\n \
    \           }\n            else {\n                set += x\n            }\n \
    \       }\n        true", "        val set = new mutable.HashSet[Long]()\n   \
    \     l.foreach { x => set.add(x.toLong) }\n        set.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3 && set.forall(x => x == 0)", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (set.contains(x)) {\n                return false\n \
    \           }\n            set += x\n        }\n        true", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size\
    \ == l.length", "        val set = l.toSet\n        val list = l.toList\n    \
    \    val list = l.toSeq\n        val list = l.toBuffer\n        val list = l.toList\n\
    \        val list = l.toSeq\n        val list = l.toBuffer\n        val list =\
    \ l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n      \
    \  val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        val list = l.toList\n        val list = l.toSeq\n        val list = l.toBuffer\n\
    \        ", "        val nums = l.toSet\n        val zeros = nums.filter(_ ==\
    \ 0)\n        val threes = nums.filter(_ == 3)\n        val threesSum = threes.sum\n\
    \        val zeroSum = zeros.sum\n        threesSum == zeroSum", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ false else set.add(x))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) false else set.add(x))\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x =>\
    \ set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "      \
    \  val set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3 && set.size == l.length", "        val sums = l.map(x\
    \ => x.toLong).groupBy(x => x).mapValues(_.size)\n        sums.forall(x => x ==\
    \ 0)", "        val map = mutable.HashMap[Long, Long]()\n        l.foreach(x =>\
    \ map.put(x, map.getOrElse(x, 0l) + x))\n        map.size == 3 && map.forall(x\
    \ => x == 0)", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n    \
    \    l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        val set3 = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.add(x))\
    \ set2.add(x) else set3.add(x))\n        set2.size == 3 && set3.size == 3", " \
    \       val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val zeros = l.filter(_\
    \ == 0)\n        val threes = l.filter(_ == 3)\n        val threesSumToZero =\
    \ threes.sum == zeros.length\n        val threesSumToZero2 = threes.sum == threes.filter(_\
    \ > 0).length\n        val threesSumToZero3 = threes.sum == threes.filter(_ >\
    \ 1).length\n        val threesSumToZero4 = threes.sum == threes.filter(_ > 2).length\n\
    \        val threesSumToZero5 = threes.sum == threes.filter(_ > 3).length\n  \
    \      val threesSumToZero6 = threes.sum == threes.filter(_ > 4).length\n    \
    \    val threesSumToZero7 = threes.sum == threes.filter(_ > 5).length\n      \
    \  val threesSumToZero8 = threes.sum == threes.filter(_ > 6).length\n        val\
    \ threesSumToZero9 = threes.sum == threes.filter(_ > 7).length\n        val threesSumToZero10\
    \ = threes.sum == threes.filter(_ > 8).length\n        val threesSumToZero11 =\
    \ threes.sum == threes.filter(_ > 9).length\n        val threesSumToZero12 = threes.sum\
    \ == threes.filter(_ > 10).length\n        val threesSumToZero13 = threes.sum\
    \ == threes.filter(_ > 11).length\n        val threesSumToZero14 = threes.sum\
    \ == threes.filter(_ > 12).length\n        val threesSumToZero15 = threes.sum\
    \ == threes.filter(_ > 13).length\n        val threesSumToZero16 = threes.sum\
    \ == threes.filter(_ > 14).length\n        val threesSumToZero17 = threes.sum\
    \ == threes.filter(_ > 15).length\n        val threesSumToZero18 = threes.sum\
    \ == threes.filter(_ > 16).length\n        val threesSumToZero19 = threes.sum\
    \ == threes.filter(_ > 17).length\n        val threesSumToZero20 = threes.sum\
    \ == threes.filter(_ > 18).length\n        val threesSumToZero21 = threes.sum\
    \ == threes.filter(_ > 19).length\n        val threesSumToZero22 = threes.sum\
    \ == threes.filter(_ > 20).length\n        val threesSumToZero23 = threes.sum\
    \ == threes.filter(_ > 21).length\n        val threesSumToZero24", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n  \
    \      set.size == 3 && set.contains(0)", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = l.toSet\n        set.size == 3 && set.forall(x\
    \ => x == 0)", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val map = mutable.HashMap[Long, Long]()\n        l.foreach { x =>\n    \
    \        val key = x + x\n            if (map.contains(key)) {\n             \
    \   map.update(key, map.get(key) + 1)\n            } else {\n                map.update(key,\
    \ 1L)\n            }\n        }\n        map.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) false else set.add(x))\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x =>\
    \ set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "      \
    \  val set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0l)\
    \ }\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n    \
    \    l.foreach { x => set += x }\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) false else set.add(x))\n        set.size\
    \ == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach { x =>\
    \ set.add(x.toLong) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size\
    \ == l.length", "        val set = mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set += x)\n        set.size == 3 && set.size == l.length", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        val triples = l.filter(_ % 3 == 0)\n        triples.foreach(x => set.add(x\
    \ + 0))\n        set.size == 3", "        val set = l.toSet\n        val triplesToZero\
    \ = l.filter(_ % 3 == 0)\n        triplesToZero.size == 3 && triplesToZero.forall(set.contains)",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = l.toSet\n\
    \        val triples = l.filter(_ % 3 == 0)\n        val triples_sum = triples.sum\n\
    \        val triples_sum_to_zero = triples.forall(x => set.contains(x) && set.contains(triples.filter(_\
    \ == x).last))\n        triples_sum_to_zero", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size\
    \ == l.length", "        val map = mutable.HashMap[Long, Long]()\n        l.foreach(x\
    \ => map.put(x, map.getOrElse(x, 0l) + x))\n        map.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong) }\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    val triples = l.filter(_ % 3 == 0)\n        triples.foreach(x => set += x)\n\
    \        set.size == 3", "        val set = mutable.Set[Long]()\n        l.foreach(x\
    \ => set += x)\n        set.size == 3 && set.size == l.length", "        val set\
    \ = mutable.HashSet[Long]()\n        l.foreach { x =>\n            if (set.contains(x))\
    \ {\n                return false\n            } else {\n                set +=\
    \ x\n            }\n        }\n        true", "        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.add(x)) set2.add(x) else set3.add(x))\n      \
    \  set2.size == 3 && set3.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val sums = l.foldLeft(Map[Long,\
    \ Long]()){\n            case (acc, x) => acc + (x -> (acc.getOrElse(x, 0) + 1))\n\
    \        }\n        sums.size == 3 && sums.forall(x => x == 0)", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach { x =>\n            if\
    \ (set.contains(x)) {\n                return false\n            }\n         \
    \   set += x\n        }\n        true", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3", "        val set =\
    \ mutable.Set[Long]()\n        val triples = l.filter(_ % 3 == 0)\n        triples.foreach(x\
    \ => set += x)\n        set.size == 3", "        val set = l.toSet\n        set.size\
    \ == 3 && set.forall(x => x == 0)", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) false else set.add(x))\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x =>\
    \ set.add(x.toLong))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        val set2\
    \ = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.add(x)) set2.add(x)\
    \ else set.delete(x))\n        set.size == 3 && set2.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val map = mutable.HashMap[Long,\
    \ Int]()\n        l.foreach(x => map.put(x, map.getOrElse(x, 0) + 1l))\n     \
    \   map.size < 3", "        val nums = l.toSet\n        val zeros = nums.filter(_\
    \ == 0)\n        val threes = nums.filter(_ == 3)\n        val threesSumToZero\
    \ = threes.forall(x => x == 0)\n        val zerosSumToZero = zeros.forall(x =>\
    \ x == 0)\n        threesSumToZero && zerosSumToZero", "        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong) }\n    \
    \    set.size == 3 && set.size == l.length", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n    \
    \    l.foreach(x => if (set.contains(x)) false else set.add(x))\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x =>\
    \ set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "      \
    \  val set = new mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n \
    \       set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            }\n            else {\n                set += x\n\
    \            }\n        }\n        true", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = new mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val map = mutable.HashMap[Long, Long]()\n        l.foreach(x\
    \ => map.put(x, map.getOrElse(x, 0L) + x))\n        map.size == 3 && map.forall(x\
    \ => x == 0)", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = l.toSet\n        val triples = l.zip(l.tail).filter(_._2 != 0).map(x\
    \ => x._1 + x._2)\n        triples.toSet.size == 3 && triples.toSet.size == set.size",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ false else set.add(x))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ false else set.add(x))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x.toLong) }\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size\
    \ == l.length", "        val set = mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set += x)\n        set.size == 3 && set.size == l.length", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n \
    \       set.size == 3 && set.size == l.length", "        val map = mutable.HashMap[Long,\
    \ Int]()\n        l.foreach { x =>\n            val count = map.getOrElse(x, 0)\n\
    \            map += x -> count + 1\n        }\n        map.size == 3", "     \
    \   val map = mutable.HashMap[Long, Long]()\n        l.foreach(x => map.put(x,\
    \ map.getOrElse(x, 0L) + x))\n        map.size == 3 && map.values.toList.distinct.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x =>\
    \ set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "      \
    \  val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3 && set.size == l.length", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = l.toSet\n        val triples = l.zip(l.tail).filter(_._2 > 0).filter(_._2\
    \ > 0).filter(_._2 > 0)\n        triples.forall(x => set.contains(x._1 + x._2\
    \ + x._2))", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val zeros = l.filter(_ == 0)\n        val triples  = l.filter(_ != 0)\n\
    \        triples\n            .groupBy(_ % triplesSumToZero(triples))\n      \
    \      .forall { case (k, v) => v == triplesSumToZero(k) }", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach { x\
    \ => set.add(x.toLong) }\n        set.size == 3 && set.size == l.length", "  \
    \      val set = mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n \
    \       set.size == 3 && set.size == l.length", "        val set = l.toSet\n \
    \       val triples = l.zip(l.tail).filter(_._2 > 0).map(_._1)\n        triples.forall(set.contains)\
    \ && triples.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size ==\
    \ l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (set.contains(x)) false else set.add(x))\n        set.size == 3", "  \
    \      val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size ==\
    \ l.length", "        val set = mutable.HashSet[Long]()\n        l.foreach(x =>\
    \ set += x)\n        set.size == 3 && set.size == l.length", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong) }\n\
    \        set.size == 3 && set.size == l.length", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            } else {\n                set += x\n            }\n\
    \        }\n        return true", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length"]
stop_tokens:
- "\n    }\n"
